
stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009358  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08009468  08009468  00019468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae4  08009ae4  000203a4  2**0
                  CONTENTS
  4 .ARM          00000000  08009ae4  08009ae4  000203a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ae4  08009ae4  000203a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ae4  08009ae4  00019ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  08009aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001670  200003a4  08009e90  000203a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a14  08009e90  00021a14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223ff  00000000  00000000  000203cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d96  00000000  00000000  000427cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000153a1  00000000  00000000  00048562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  0005d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021d8  00000000  00000000  0005ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001efc3  00000000  00000000  00060f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029716  00000000  00000000  0007ff33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000952ac  00000000  00000000  000a9649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e8f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f98  00000000  00000000  0013e948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003a4 	.word	0x200003a4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009450 	.word	0x08009450

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003a8 	.word	0x200003a8
 800014c:	08009450 	.word	0x08009450

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__gesf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpsf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__lesf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpsf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b56:	d011      	beq.n	8000b7c <__cmpsf2+0x40>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5e:	bf18      	it	ne
 8000b60:	ea90 0f01 	teqne	r0, r1
 8000b64:	bf58      	it	pl
 8000b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b6a:	bf88      	it	hi
 8000b6c:	17c8      	asrhi	r0, r1, #31
 8000b6e:	bf38      	it	cc
 8000b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b74:	bf18      	it	ne
 8000b76:	f040 0001 	orrne.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	d102      	bne.n	8000b88 <__cmpsf2+0x4c>
 8000b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b86:	d105      	bne.n	8000b94 <__cmpsf2+0x58>
 8000b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b8c:	d1e4      	bne.n	8000b58 <__cmpsf2+0x1c>
 8000b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b92:	d0e1      	beq.n	8000b58 <__cmpsf2+0x1c>
 8000b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_cfrcmple>:
 8000b9c:	4684      	mov	ip, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4661      	mov	r1, ip
 8000ba2:	e7ff      	b.n	8000ba4 <__aeabi_cfcmpeq>

08000ba4 <__aeabi_cfcmpeq>:
 8000ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba6:	f7ff ffc9 	bl	8000b3c <__cmpsf2>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	bf48      	it	mi
 8000bae:	f110 0f00 	cmnmi.w	r0, #0
 8000bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb4 <__aeabi_fcmpeq>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff fff4 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2001      	moveq	r0, #1
 8000bc0:	2000      	movne	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_fcmplt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffea 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_fcmple>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffe0 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000be4:	bf94      	ite	ls
 8000be6:	2001      	movls	r0, #1
 8000be8:	2000      	movhi	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fcmpge>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffd2 	bl	8000b9c <__aeabi_cfrcmple>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmpgt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffc8 	bl	8000b9c <__aeabi_cfrcmple>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmpun>:
 8000c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	d102      	bne.n	8000c2c <__aeabi_fcmpun+0x14>
 8000c26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c2a:	d108      	bne.n	8000c3e <__aeabi_fcmpun+0x26>
 8000c2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c30:	d102      	bne.n	8000c38 <__aeabi_fcmpun+0x20>
 8000c32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c36:	d102      	bne.n	8000c3e <__aeabi_fcmpun+0x26>
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0001 	mov.w	r0, #1
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_d2lz>:
 8000c44:	b538      	push	{r3, r4, r5, lr}
 8000c46:	4605      	mov	r5, r0
 8000c48:	460c      	mov	r4, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4628      	mov	r0, r5
 8000c50:	4621      	mov	r1, r4
 8000c52:	f7ff febd 	bl	80009d0 <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x20>
 8000c58:	4628      	mov	r0, r5
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4628      	mov	r0, r5
 8000c66:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <__aeabi_d2ulz+0x34>)
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fc33 	bl	80004ec <__aeabi_dmul>
 8000c86:	f7ff fee1 	bl	8000a4c <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fbb4 	bl	80003f8 <__aeabi_ui2d>
 8000c90:	2200      	movs	r2, #0
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c94:	f7ff fc2a 	bl	80004ec <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fa6c 	bl	800017c <__aeabi_dsub>
 8000ca4:	f7ff fed2 	bl	8000a4c <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <apInit>:

#include "ap.h"


void apInit(void)
{
 8000cb4:	b508      	push	{r3, lr}
//  uartOpen(_DEF_UART1, 57600); // USB_CDC
  uartOpen(_DEF_UART2, 57600);  // UART
 8000cb6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f001 f89c 	bl	8001df8 <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 8000cc0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 faab 	bl	8001220 <cliOpen>
//  cliOpenLog(_DEF_UART2, 57600);


  //  spiBegin(_DEF_SPI1);
  spiBegin(_DEF_SPI2);
}
 8000cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  spiBegin(_DEF_SPI2);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 bfc2 	b.w	8001c58 <spiBegin>
 8000cd4:	0000      	movs	r0, r0
	...

08000cd8 <apMain>:



void apMain(void)
{
 8000cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    {
      if (millis()-pre_time >=500)
        {
          pre_time=millis();
          //setVoltageDAC_Polling(voltage);   //setVoltageDAC_DMA(voltage);
          voltage+=0.2;
 8000cdc:	a712      	add	r7, pc, #72	; (adr r7, 8000d28 <apMain+0x50>)
 8000cde:	e9d7 6700 	ldrd	r6, r7, [r7]
  pre_time=millis();
 8000ce2:	f000 f827 	bl	8000d34 <millis>
  float voltage=0;
 8000ce6:	2500      	movs	r5, #0
  pre_time=millis();
 8000ce8:	4604      	mov	r4, r0
          if (voltage > 4)
 8000cea:	f04f 4881 	mov.w	r8, #1082130432	; 0x40800000
            {
              voltage= 0;
 8000cee:	46a9      	mov	r9, r5
      if (millis()-pre_time >=500)
 8000cf0:	f000 f820 	bl	8000d34 <millis>
 8000cf4:	1b00      	subs	r0, r0, r4
 8000cf6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cfa:	d311      	bcc.n	8000d20 <apMain+0x48>
          pre_time=millis();
 8000cfc:	f000 f81a 	bl	8000d34 <millis>
 8000d00:	4604      	mov	r4, r0
          voltage+=0.2;
 8000d02:	4628      	mov	r0, r5
 8000d04:	f7ff fb9a 	bl	800043c <__aeabi_f2d>
 8000d08:	4632      	mov	r2, r6
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	f7ff fa38 	bl	8000180 <__adddf3>
 8000d10:	f7ff febc 	bl	8000a8c <__aeabi_d2f>
          if (voltage > 4)
 8000d14:	4641      	mov	r1, r8
          voltage+=0.2;
 8000d16:	4605      	mov	r5, r0
          if (voltage > 4)
 8000d18:	f7ff ff74 	bl	8000c04 <__aeabi_fcmpgt>
 8000d1c:	b100      	cbz	r0, 8000d20 <apMain+0x48>
              voltage= 0;
 8000d1e:	464d      	mov	r5, r9
            }
        }

      cliMain();
 8000d20:	f000 fb94 	bl	800144c <cliMain>
      if (millis()-pre_time >=500)
 8000d24:	e7e4      	b.n	8000cf0 <apMain+0x18>
 8000d26:	bf00      	nop
 8000d28:	9999999a 	.word	0x9999999a
 8000d2c:	3fc99999 	.word	0x3fc99999

08000d30 <delay>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
  HAL_Delay(ms);
 8000d30:	f001 ba12 	b.w	8002158 <HAL_Delay>

08000d34 <millis>:



uint32_t millis(void)
{
 return HAL_GetTick();
 8000d34:	f001 ba0a 	b.w	800214c <HAL_GetTick>

08000d38 <__io_putchar>:
}

int __io_putchar(int ch)
{
 8000d38:	b507      	push	{r0, r1, r2, lr}
  //USB로 printf 캐릭터 전송
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000d3a:	2201      	movs	r2, #1
{
 8000d3c:	9001      	str	r0, [sp, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000d3e:	a901      	add	r1, sp, #4
 8000d40:	2000      	movs	r0, #0
 8000d42:	f001 f8e1 	bl	8001f08 <uartWrite>
  return 1;
}
 8000d46:	2001      	movs	r0, #1
 8000d48:	b003      	add	sp, #12
 8000d4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000d50 <tim1Init>:


/* TIM1 init function */
void tim1Init(void)
{
 8000d50:	b510      	push	{r4, lr}
 8000d52:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d54:	2210      	movs	r2, #16
 8000d56:	2100      	movs	r1, #0
 8000d58:	a802      	add	r0, sp, #8
 8000d5a:	f005 fa19 	bl	8006190 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72-1;
 8000d5e:	2247      	movs	r2, #71	; 0x47
  htim1.Instance = TIM1;
 8000d60:	4c14      	ldr	r4, [pc, #80]	; (8000db4 <tim1Init+0x64>)
  htim1.Init.Prescaler = 72-1;
 8000d62:	4915      	ldr	r1, [pc, #84]	; (8000db8 <tim1Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 72-1;
 8000d66:	e9c4 1200 	strd	r1, r2, [r4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 8000d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d6e:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	e9c4 2303 	strd	r2, r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d78:	e9c4 3305 	strd	r3, r3, [r4, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d7e:	f003 f803 	bl	8003d88 <HAL_TIM_Base_Init>
 8000d82:	b108      	cbz	r0, 8000d88 <tim1Init+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <tim1Init+0x36>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d90:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d92:	f003 f82f 	bl	8003df4 <HAL_TIM_ConfigClockSource>
 8000d96:	b108      	cbz	r0, 8000d9c <tim1Init+0x4c>
 8000d98:	b672      	cpsid	i
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <tim1Init+0x4a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	e9cd 0000 	strd	r0, r0, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da0:	4669      	mov	r1, sp
 8000da2:	4620      	mov	r0, r4
 8000da4:	f003 f8c2 	bl	8003f2c <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	b108      	cbz	r0, 8000dae <tim1Init+0x5e>
 8000daa:	b672      	cpsid	i
  while (1)
 8000dac:	e7fe      	b.n	8000dac <tim1Init+0x5c>
}
 8000dae:	b006      	add	sp, #24
 8000db0:	bd10      	pop	{r4, pc}
 8000db2:	bf00      	nop
 8000db4:	200003c0 	.word	0x200003c0
 8000db8:	40012c00 	.word	0x40012c00

08000dbc <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 8000dbc:	6802      	ldr	r2, [r0, #0]
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_TIM_Base_MspInit+0x24>)
{
 8000dc0:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d10a      	bne.n	8000ddc <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000dca:	699a      	ldr	r2, [r3, #24]
 8000dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dd0:	619a      	str	r2, [r3, #24]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	9b01      	ldr	r3, [sp, #4]
}
 8000ddc:	b002      	add	sp, #8
 8000dde:	4770      	bx	lr
 8000de0:	40012c00 	.word	0x40012c00

08000de4 <SystemClock_Config>:
{
 8000de4:	b510      	push	{r4, lr}
 8000de6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de8:	2214      	movs	r2, #20
 8000dea:	2100      	movs	r1, #0
 8000dec:	a80c      	add	r0, sp, #48	; 0x30
 8000dee:	f005 f9cf 	bl	8006190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df2:	2214      	movs	r2, #20
 8000df4:	2100      	movs	r1, #0
 8000df6:	eb0d 0002 	add.w	r0, sp, r2
 8000dfa:	f005 f9c9 	bl	8006190 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dfe:	2210      	movs	r2, #16
 8000e00:	2100      	movs	r1, #0
 8000e02:	a801      	add	r0, sp, #4
 8000e04:	f005 f9c4 	bl	8006190 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0e:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e10:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e12:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e16:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e20:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e24:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f002 fba7 	bl	8003578 <HAL_RCC_OscConfig>
 8000e2a:	b108      	cbz	r0, 8000e30 <SystemClock_Config+0x4c>
 8000e2c:	b672      	cpsid	i
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e40:	4621      	mov	r1, r4
 8000e42:	a805      	add	r0, sp, #20
 8000e44:	f002 fd5a 	bl	80038fc <HAL_RCC_ClockConfig>
 8000e48:	b108      	cbz	r0, 8000e4e <SystemClock_Config+0x6a>
 8000e4a:	b672      	cpsid	i
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e4e:	2211      	movs	r2, #17
 8000e50:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e54:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e56:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e58:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5c:	f002 fe0a 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	b108      	cbz	r0, 8000e66 <SystemClock_Config+0x82>
 8000e62:	b672      	cpsid	i
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <SystemClock_Config+0x80>
}
 8000e66:	b014      	add	sp, #80	; 0x50
 8000e68:	bd10      	pop	{r4, pc}
	...

08000e6c <bspInit>:
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	b086      	sub	sp, #24
  HAL_Init();
 8000e70:	f001 f94e 	bl	8002110 <HAL_Init>
  SystemClock_Config();
 8000e74:	f7ff ffb6 	bl	8000de4 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <bspInit+0x5c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e7a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	f042 0220 	orr.w	r2, r2, #32
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	4c10      	ldr	r4, [pc, #64]	; (8000ecc <bspInit+0x60>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	f002 0220 	and.w	r2, r2, #32
 8000e90:	9200      	str	r2, [sp, #0]
 8000e92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	f042 0204 	orr.w	r2, r2, #4
 8000e9c:	619a      	str	r2, [r3, #24]
 8000e9e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000eaa:	2311      	movs	r3, #17
 8000eac:	e9cd 5302 	strd	r5, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f001 fb71 	bl	800259c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eba:	4632      	mov	r2, r6
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f001 fcba 	bl	8002838 <HAL_GPIO_WritePin>
}
 8000ec4:	b006      	add	sp, #24
 8000ec6:	bd70      	pop	{r4, r5, r6, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <Error_Handler>:
 8000ed0:	b672      	cpsid	i
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <Error_Handler+0x2>

08000ed4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_MspInit+0x3c>)
{
 8000ed6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	f002 0201 	and.w	r2, r2, #1
 8000ee6:	9200      	str	r2, [sp, #0]
 8000ee8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	69da      	ldr	r2, [r3, #28]
 8000eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ef0:	61da      	str	r2, [r3, #28]
 8000ef2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000efe:	6853      	ldr	r3, [r2, #4]
 8000f00:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	b002      	add	sp, #8
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000

08000f18 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler>

08000f1a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler>

08000f1c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler>

08000f1e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler>

08000f20 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler>

08000f22 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f001 b904 	b.w	8002134 <HAL_IncTick>

08000f2c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f2c:	4801      	ldr	r0, [pc, #4]	; (8000f34 <DMA1_Channel3_IRQHandler+0x8>)
 8000f2e:	f001 baa1 	b.w	8002474 <HAL_DMA_IRQHandler>
 8000f32:	bf00      	nop
 8000f34:	200007b0 	.word	0x200007b0

08000f38 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f38:	4801      	ldr	r0, [pc, #4]	; (8000f40 <DMA1_Channel5_IRQHandler+0x8>)
 8000f3a:	f001 ba9b 	b.w	8002474 <HAL_DMA_IRQHandler>
 8000f3e:	bf00      	nop
 8000f40:	2000086c 	.word	0x2000086c

08000f44 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f44:	4801      	ldr	r0, [pc, #4]	; (8000f4c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000f46:	f001 bd2b 	b.w	80029a0 <HAL_PCD_IRQHandler>
 8000f4a:	bf00      	nop
 8000f4c:	200014f4 	.word	0x200014f4

08000f50 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f50:	4801      	ldr	r0, [pc, #4]	; (8000f58 <SPI1_IRQHandler+0x8>)
 8000f52:	f002 be63 	b.w	8003c1c <HAL_SPI_IRQHandler>
 8000f56:	bf00      	nop
 8000f58:	200007f4 	.word	0x200007f4

08000f5c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f5c:	4801      	ldr	r0, [pc, #4]	; (8000f64 <USART1_IRQHandler+0x8>)
 8000f5e:	f003 ba2f 	b.w	80043c0 <HAL_UART_IRQHandler>
 8000f62:	bf00      	nop
 8000f64:	200008b0 	.word	0x200008b0

08000f68 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000f68:	2001      	movs	r0, #1
 8000f6a:	4770      	bx	lr

08000f6c <_kill>:

int _kill(int pid, int sig)
{
 8000f6c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f6e:	f005 f8cb 	bl	8006108 <__errno>
 8000f72:	2316      	movs	r3, #22
 8000f74:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	bd08      	pop	{r3, pc}

08000f7c <_exit>:

void _exit (int status)
{
 8000f7c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f7e:	f005 f8c3 	bl	8006108 <__errno>
 8000f82:	2316      	movs	r3, #22
 8000f84:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000f86:	e7fe      	b.n	8000f86 <_exit+0xa>

08000f88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	460d      	mov	r5, r1
 8000f8c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	460e      	mov	r6, r1
 8000f90:	1b73      	subs	r3, r6, r5
 8000f92:	429c      	cmp	r4, r3
 8000f94:	dc01      	bgt.n	8000f9a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000f96:	4620      	mov	r0, r4
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000f9a:	f3af 8000 	nop.w
 8000f9e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	e7f5      	b.n	8000f90 <_read+0x8>

08000fa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	460d      	mov	r5, r1
 8000fa8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	460e      	mov	r6, r1
 8000fac:	1b73      	subs	r3, r6, r5
 8000fae:	429c      	cmp	r4, r3
 8000fb0:	dc01      	bgt.n	8000fb6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000fb6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000fba:	f7ff febd 	bl	8000d38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	e7f5      	b.n	8000fac <_write+0x8>

08000fc0 <_close>:

int _close(int file)
{
	return -1;
}
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	4770      	bx	lr

08000fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000fca:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000fcc:	604b      	str	r3, [r1, #4]
}
 8000fce:	4770      	bx	lr

08000fd0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	4770      	bx	lr

08000fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	4770      	bx	lr

08000fd8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <_sbrk+0x30>)
{
 8000fda:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000fdc:	6811      	ldr	r1, [r2, #0]
{
 8000fde:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000fe0:	b909      	cbnz	r1, 8000fe6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000fe2:	490a      	ldr	r1, [pc, #40]	; (800100c <_sbrk+0x34>)
 8000fe4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	6810      	ldr	r0, [r2, #0]
 8000fe8:	4909      	ldr	r1, [pc, #36]	; (8001010 <_sbrk+0x38>)
 8000fea:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <_sbrk+0x3c>)
 8000fec:	4403      	add	r3, r0
 8000fee:	1b09      	subs	r1, r1, r4
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d906      	bls.n	8001002 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000ff4:	f005 f888 	bl	8006108 <__errno>
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001000:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001002:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001004:	e7fc      	b.n	8001000 <_sbrk+0x28>
 8001006:	bf00      	nop
 8001008:	20000408 	.word	0x20000408
 800100c:	20001a18 	.word	0x20001a18
 8001010:	20005000 	.word	0x20005000
 8001014:	00000400 	.word	0x00000400

08001018 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8001018:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <SystemInit+0xc>)
 800101e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800104e:	f7ff ffe3 	bl	8001018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f005 f85f 	bl	8006114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001056:	f005 f84d 	bl	80060f4 <main>
  bx lr
 800105a:	4770      	bx	lr
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8001064:	08009aec 	.word	0x08009aec
  ldr r2, =_sbss
 8001068:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 800106c:	20001a14 	.word	0x20001a14

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>

08001072 <qbufferCreate>:


  bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
  {
    bool ret= true;
    p_node->head=0;
 8001072:	2300      	movs	r3, #0
    p_node->tail=0;
    p_node->len=length;
    p_node->p_buf=p_buf;
 8001074:	e9c0 2102 	strd	r2, r1, [r0, #8]
    p_node->tail=0;
 8001078:	e9c0 3300 	strd	r3, r3, [r0]
    return ret;
  }
 800107c:	2001      	movs	r0, #1
 800107e:	4770      	bx	lr

08001080 <qbufferRead>:
    return ret;
  }


  bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
  {
 8001080:	b530      	push	{r4, r5, lr}
 8001082:	440a      	add	r2, r1
    bool ret= true;

    for (int i=0; i<length ; i++)
 8001084:	4291      	cmp	r1, r2
 8001086:	d101      	bne.n	800108c <qbufferRead+0xc>
    bool ret= true;
 8001088:	2001      	movs	r0, #1
            ret=false;
            break;
          }
      }
    return ret;
  }
 800108a:	bd30      	pop	{r4, r5, pc}
        if (p_node->p_buf != NULL)
 800108c:	68c3      	ldr	r3, [r0, #12]
 800108e:	b113      	cbz	r3, 8001096 <qbufferRead+0x16>
            p_data[i]=p_node->p_buf[p_node->tail];
 8001090:	6844      	ldr	r4, [r0, #4]
 8001092:	5d1b      	ldrb	r3, [r3, r4]
 8001094:	700b      	strb	r3, [r1, #0]
        if (p_node->tail != p_node->head)
 8001096:	6843      	ldr	r3, [r0, #4]
 8001098:	6804      	ldr	r4, [r0, #0]
 800109a:	3101      	adds	r1, #1
 800109c:	42a3      	cmp	r3, r4
 800109e:	d007      	beq.n	80010b0 <qbufferRead+0x30>
            p_node->tail = (p_node->tail+1) % p_node->len;
 80010a0:	6884      	ldr	r4, [r0, #8]
 80010a2:	3301      	adds	r3, #1
 80010a4:	fbb3 f5f4 	udiv	r5, r3, r4
 80010a8:	fb04 3315 	mls	r3, r4, r5, r3
 80010ac:	6043      	str	r3, [r0, #4]
    for (int i=0; i<length ; i++)
 80010ae:	e7e9      	b.n	8001084 <qbufferRead+0x4>
            ret=false;
 80010b0:	2000      	movs	r0, #0
 80010b2:	e7ea      	b.n	800108a <qbufferRead+0xa>

080010b4 <qbufferAvailable>:


  uint32_t qbufferAvailable(qbuffer_t *p_node)
  {
    uint32_t ret;
    ret= (p_node->head - p_node->tail) % p_node->len;
 80010b4:	e9d0 3200 	ldrd	r3, r2, [r0]
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	6882      	ldr	r2, [r0, #8]
 80010bc:	fbb3 f0f2 	udiv	r0, r3, r2
    return ret;
  }
 80010c0:	fb02 3010 	mls	r0, r2, r0, r3
 80010c4:	4770      	bx	lr

080010c6 <cliToUpper>:

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
}

void cliToUpper(char *str)
{
 80010c6:	b510      	push	{r4, lr}
 80010c8:	1e42      	subs	r2, r0, #1
 80010ca:	f100 010f 	add.w	r1, r0, #15
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
  {
    str_ch = str[i];
 80010ce:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 80010d2:	b153      	cbz	r3, 80010ea <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80010d4:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 80010d8:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 80010da:	bf9c      	itt	ls
 80010dc:	3b20      	subls	r3, #32
 80010de:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80010e0:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 80010e2:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80010e4:	d1f3      	bne.n	80010ce <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73c3      	strb	r3, [r0, #15]
  }
}
 80010ea:	bd10      	pop	{r4, pc}

080010ec <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <cliArgsGetStr+0x18>)
 80010ee:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 80010f2:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 80010f4:	bf86      	itte	hi
 80010f6:	f8d3 3390 	ldrhi.w	r3, [r3, #912]	; 0x390
 80010fa:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 80010fe:	2000      	movls	r0, #0

  return ret;
}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000040c 	.word	0x2000040c

08001108 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001108:	b508      	push	{r3, lr}
 800110a:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <cliArgsIsStr+0x28>)
{
 800110e:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 8001110:	f8b2 138c 	ldrh.w	r1, [r2, #908]	; 0x38c
 8001114:	4299      	cmp	r1, r3
 8001116:	d909      	bls.n	800112c <cliArgsIsStr+0x24>
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001118:	f8d2 2390 	ldr.w	r2, [r2, #912]	; 0x390
 800111c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001120:	f7ff f816 	bl	8000150 <strcmp>
 8001124:	fab0 f080 	clz	r0, r0
 8001128:	0940      	lsrs	r0, r0, #5
  {
    ret = true;
  }

  return ret;
}
 800112a:	bd08      	pop	{r3, pc}
    return 0;
 800112c:	2000      	movs	r0, #0
 800112e:	e7fc      	b.n	800112a <cliArgsIsStr+0x22>
 8001130:	2000040c 	.word	0x2000040c

08001134 <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <cliArgsGetFloat+0x1c>)
 8001136:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 800113a:	4282      	cmp	r2, r0
 800113c:	d906      	bls.n	800114c <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800113e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8001142:	2100      	movs	r1, #0
 8001144:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001148:	f005 be3e 	b.w	8006dc8 <strtof>
}
 800114c:	2000      	movs	r0, #0
 800114e:	4770      	bx	lr
 8001150:	2000040c 	.word	0x2000040c

08001154 <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <cliArgsGetData+0x20>)
 8001156:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 800115a:	4282      	cmp	r2, r0
 800115c:	d907      	bls.n	800116e <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800115e:	2200      	movs	r2, #0
 8001160:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8001164:	4611      	mov	r1, r2
 8001166:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800116a:	f005 bf1d 	b.w	8006fa8 <strtoul>
}
 800116e:	2000      	movs	r0, #0
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2000040c 	.word	0x2000040c

08001178 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8001178:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->hist_line_count == 0)
 800117a:	4c25      	ldr	r4, [pc, #148]	; (8001210 <cliLineChange.constprop.0+0x98>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 800117c:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 800117e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 8001182:	2b00      	cmp	r3, #0
 8001184:	d03e      	beq.n	8001204 <cliLineChange.constprop.0+0x8c>
  if (p_cli->line.cursor > 0)
 8001186:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 800118a:	b11a      	cbz	r2, 8001194 <cliLineChange.constprop.0+0x1c>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800118c:	4921      	ldr	r1, [pc, #132]	; (8001214 <cliLineChange.constprop.0+0x9c>)
 800118e:	7820      	ldrb	r0, [r4, #0]
 8001190:	f000 fed8 	bl	8001f44 <uartPrintf>
  if (p_cli->line.count > 0)
 8001194:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8001198:	b11a      	cbz	r2, 80011a2 <cliLineChange.constprop.0+0x2a>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800119a:	491f      	ldr	r1, [pc, #124]	; (8001218 <cliLineChange.constprop.0+0xa0>)
 800119c:	7820      	ldrb	r0, [r4, #0]
 800119e:	f000 fed1 	bl	8001f44 <uartPrintf>
  if (key_up == true)
 80011a2:	2d01      	cmp	r5, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80011a4:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
  if (key_up == true)
 80011a8:	d12d      	bne.n	8001206 <cliLineChange.constprop.0+0x8e>
    if (p_cli->hist_line_new == true)
 80011aa:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 80011ae:	b11b      	cbz	r3, 80011b8 <cliLineChange.constprop.0+0x40>
      p_cli->hist_line_i = p_cli->hist_line_last;
 80011b0:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
 80011b4:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80011b8:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 80011bc:	4413      	add	r3, r2
 80011be:	3b01      	subs	r3, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80011c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80011c4:	fb02 3311 	mls	r3, r2, r1, r3
  p_cli->line = p_cli->line_buf[change_i];
 80011c8:	2223      	movs	r2, #35	; 0x23
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80011ca:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80011ce:	b2db      	uxtb	r3, r3
  p_cli->line = p_cli->line_buf[change_i];
 80011d0:	fb02 4303 	mla	r3, r2, r3, r4
 80011d4:	4d11      	ldr	r5, [pc, #68]	; (800121c <cliLineChange.constprop.0+0xa4>)
 80011d6:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80011da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011de:	462e      	mov	r6, r5
 80011e0:	6810      	ldr	r0, [r2, #0]
 80011e2:	6851      	ldr	r1, [r2, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	c603      	stmia	r6!, {r0, r1}
 80011e8:	429a      	cmp	r2, r3
 80011ea:	4635      	mov	r5, r6
 80011ec:	d1f7      	bne.n	80011de <cliLineChange.constprop.0+0x66>
 80011ee:	7893      	ldrb	r3, [r2, #2]
 80011f0:	8811      	ldrh	r1, [r2, #0]
 80011f2:	70b3      	strb	r3, [r6, #2]
 80011f4:	8031      	strh	r1, [r6, #0]
  p_cli->line.cursor = p_cli->line.count;
 80011f6:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80011fa:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
  p_cli->hist_line_new = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
}
 8001204:	bd70      	pop	{r4, r5, r6, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001206:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 800120a:	3301      	adds	r3, #1
 800120c:	e7d8      	b.n	80011c0 <cliLineChange.constprop.0+0x48>
 800120e:	bf00      	nop
 8001210:	2000040c 	.word	0x2000040c
 8001214:	08009480 	.word	0x08009480
 8001218:	08009486 	.word	0x08009486
 800121c:	20000630 	.word	0x20000630

08001220 <cliOpen>:
{
 8001220:	b510      	push	{r4, lr}
  cli_node.ch = ch;
 8001222:	4c03      	ldr	r4, [pc, #12]	; (8001230 <cliOpen+0x10>)
 8001224:	7020      	strb	r0, [r4, #0]
  cli_node.baud = baud;
 8001226:	6061      	str	r1, [r4, #4]
  cli_node.is_open = uartOpen(ch, baud);
 8001228:	f000 fde6 	bl	8001df8 <uartOpen>
 800122c:	7220      	strb	r0, [r4, #8]
}
 800122e:	bd10      	pop	{r4, pc}
 8001230:	2000040c 	.word	0x2000040c

08001234 <cliShowLog>:
{
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_node.is_log == true)
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <cliShowLog+0x90>)
{
 8001238:	4604      	mov	r4, r0
  if (cli_node.is_log == true)
 800123a:	7a5b      	ldrb	r3, [r3, #9]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d03f      	beq.n	80012c0 <cliShowLog+0x8c>
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001240:	f890 2245 	ldrb.w	r2, [r0, #581]	; 0x245
 8001244:	4920      	ldr	r1, [pc, #128]	; (80012c8 <cliShowLog+0x94>)
 8001246:	7a80      	ldrb	r0, [r0, #10]
 8001248:	f000 fe7c 	bl	8001f44 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800124c:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8001250:	491e      	ldr	r1, [pc, #120]	; (80012cc <cliShowLog+0x98>)
 8001252:	7aa0      	ldrb	r0, [r4, #10]
 8001254:	f000 fe76 	bl	8001f44 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001258:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 800125c:	491c      	ldr	r1, [pc, #112]	; (80012d0 <cliShowLog+0x9c>)
 800125e:	7aa0      	ldrb	r0, [r4, #10]
 8001260:	f000 fe70 	bl	8001f44 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001264:	491b      	ldr	r1, [pc, #108]	; (80012d4 <cliShowLog+0xa0>)
 8001266:	f504 7209 	add.w	r2, r4, #548	; 0x224
 800126a:	7aa0      	ldrb	r0, [r4, #10]
 800126c:	f000 fe6a 	bl	8001f44 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001270:	f994 2195 	ldrsb.w	r2, [r4, #405]	; 0x195
 8001274:	4918      	ldr	r1, [pc, #96]	; (80012d8 <cliShowLog+0xa4>)
 8001276:	7aa0      	ldrb	r0, [r4, #10]
 8001278:	f000 fe64 	bl	8001f44 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800127c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8001280:	4916      	ldr	r1, [pc, #88]	; (80012dc <cliShowLog+0xa8>)
 8001282:	7aa0      	ldrb	r0, [r4, #10]
 8001284:	f000 fe5e 	bl	8001f44 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001288:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
 800128c:	4914      	ldr	r1, [pc, #80]	; (80012e0 <cliShowLog+0xac>)
 800128e:	7aa0      	ldrb	r0, [r4, #10]
 8001290:	f000 fe58 	bl	8001f44 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001294:	2500      	movs	r5, #0
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001296:	4f13      	ldr	r7, [pc, #76]	; (80012e4 <cliShowLog+0xb0>)
 8001298:	f504 76cc 	add.w	r6, r4, #408	; 0x198
    for (int i=0; i<p_cli->hist_line_count; i++)
 800129c:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80012a0:	7aa0      	ldrb	r0, [r4, #10]
    for (int i=0; i<p_cli->hist_line_count; i++)
 80012a2:	429d      	cmp	r5, r3
 80012a4:	db04      	blt.n	80012b0 <cliShowLog+0x7c>
}
 80012a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uartPrintf(p_cli->log_ch, "\n");
 80012aa:	490f      	ldr	r1, [pc, #60]	; (80012e8 <cliShowLog+0xb4>)
 80012ac:	f000 be4a 	b.w	8001f44 <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80012b0:	4633      	mov	r3, r6
 80012b2:	462a      	mov	r2, r5
 80012b4:	4639      	mov	r1, r7
 80012b6:	f000 fe45 	bl	8001f44 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80012ba:	3501      	adds	r5, #1
 80012bc:	3623      	adds	r6, #35	; 0x23
 80012be:	e7ed      	b.n	800129c <cliShowLog+0x68>
}
 80012c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000040c 	.word	0x2000040c
 80012c8:	0800948c 	.word	0x0800948c
 80012cc:	0800949a 	.word	0x0800949a
 80012d0:	080094a8 	.word	0x080094a8
 80012d4:	080094b6 	.word	0x080094b6
 80012d8:	080094c4 	.word	0x080094c4
 80012dc:	080094d2 	.word	0x080094d2
 80012e0:	080094e0 	.word	0x080094e0
 80012e4:	080094ee 	.word	0x080094ee
 80012e8:	0800951b 	.word	0x0800951b

080012ec <cliPrintf>:
{
 80012ec:	b40f      	push	{r0, r1, r2, r3}
 80012ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80012f0:	4c0a      	ldr	r4, [pc, #40]	; (800131c <cliPrintf+0x30>)
{
 80012f2:	ab06      	add	r3, sp, #24
 80012f4:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80012f8:	f104 0511 	add.w	r5, r4, #17
 80012fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001300:	4628      	mov	r0, r5
  va_start (arg, fmt);
 8001302:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001304:	f005 fe86 	bl	8007014 <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001308:	4629      	mov	r1, r5
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800130a:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800130c:	7820      	ldrb	r0, [r4, #0]
 800130e:	f000 fdfb 	bl	8001f08 <uartWrite>
}
 8001312:	b003      	add	sp, #12
 8001314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001318:	b004      	add	sp, #16
 800131a:	4770      	bx	lr
 800131c:	2000040c 	.word	0x2000040c

08001320 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <cliShowList+0x3c>)
 8001324:	f7ff ffe2 	bl	80012ec <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <cliShowList+0x40>)
 800132a:	f7ff ffdf 	bl	80012ec <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800132e:	2500      	movs	r5, #0
 8001330:	4c0c      	ldr	r4, [pc, #48]	; (8001364 <cliShowList+0x44>)
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
    cliPrintf("\r\n");
 8001332:	4f0a      	ldr	r7, [pc, #40]	; (800135c <cliShowList+0x3c>)
  for (int i=0; i<p_cli->cmd_count; i++)
 8001334:	f5a4 7613 	sub.w	r6, r4, #588	; 0x24c
 8001338:	f8b6 3248 	ldrh.w	r3, [r6, #584]	; 0x248
 800133c:	42ab      	cmp	r3, r5
 800133e:	dc04      	bgt.n	800134a <cliShowList+0x2a>
  }

  cliPrintf("-----------------------------\r\n");
}
 8001340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cliPrintf("-----------------------------\r\n");
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <cliShowList+0x48>)
 8001346:	f7ff bfd1 	b.w	80012ec <cliPrintf>
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800134a:	4620      	mov	r0, r4
 800134c:	f7ff ffce 	bl	80012ec <cliPrintf>
    cliPrintf("\r\n");
 8001350:	4638      	mov	r0, r7
 8001352:	f7ff ffcb 	bl	80012ec <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8001356:	3501      	adds	r5, #1
 8001358:	3414      	adds	r4, #20
 800135a:	e7ed      	b.n	8001338 <cliShowList+0x18>
 800135c:	0800951a 	.word	0x0800951a
 8001360:	080094fd 	.word	0x080094fd
 8001364:	20000658 	.word	0x20000658
 8001368:	0800951d 	.word	0x0800951d

0800136c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8001370:	8803      	ldrh	r3, [r0, #0]
{
 8001372:	b085      	sub	sp, #20
  char **argv = args->argv;


  if(args->argc < 1)
 8001374:	b92b      	cbnz	r3, 8001382 <cliMemoryDump+0x16>
  {
    cliPrintf(">> md addr [size] \n");
 8001376:	482d      	ldr	r0, [pc, #180]	; (800142c <cliMemoryDump+0xc0>)
      }
      cliPrintf("|\n   ");
    }
    addr++;
  }
}
 8001378:	b005      	add	sp, #20
 800137a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 800137e:	f7ff bfb5 	b.w	80012ec <cliPrintf>
  if(argc > 1)
 8001382:	2b01      	cmp	r3, #1
  char **argv = args->argv;
 8001384:	6844      	ldr	r4, [r0, #4]
  if(argc > 1)
 8001386:	d015      	beq.n	80013b4 <cliMemoryDump+0x48>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8001388:	2200      	movs	r2, #0
 800138a:	6860      	ldr	r0, [r4, #4]
 800138c:	4611      	mov	r1, r2
 800138e:	f005 fe0b 	bl	8006fa8 <strtoul>
 8001392:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001394:	2200      	movs	r2, #0
 8001396:	6820      	ldr	r0, [r4, #0]
 8001398:	4611      	mov	r1, r2
 800139a:	f005 fe05 	bl	8006fa8 <strtoul>
 800139e:	4604      	mov	r4, r0
  cliPrintf("\n   ");
 80013a0:	4823      	ldr	r0, [pc, #140]	; (8001430 <cliMemoryDump+0xc4>)
 80013a2:	f7ff ffa3 	bl	80012ec <cliPrintf>
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80013a6:	4627      	mov	r7, r4
  for (idx = 0; idx<size; idx++)
 80013a8:	2500      	movs	r5, #0
 80013aa:	42b5      	cmp	r5, r6
 80013ac:	db04      	blt.n	80013b8 <cliMemoryDump+0x4c>
}
 80013ae:	b005      	add	sp, #20
 80013b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 80013b4:	2610      	movs	r6, #16
 80013b6:	e7ed      	b.n	8001394 <cliMemoryDump+0x28>
    if((idx%4) == 0)
 80013b8:	f015 0803 	ands.w	r8, r5, #3
 80013bc:	d103      	bne.n	80013c6 <cliMemoryDump+0x5a>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80013be:	4639      	mov	r1, r7
 80013c0:	481c      	ldr	r0, [pc, #112]	; (8001434 <cliMemoryDump+0xc8>)
 80013c2:	f7ff ff93 	bl	80012ec <cliPrintf>
    cliPrintf(" 0x%08X", *(addr));
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	481b      	ldr	r0, [pc, #108]	; (8001438 <cliMemoryDump+0xcc>)
 80013ca:	f7ff ff8f 	bl	80012ec <cliPrintf>
    if ((idx%4) == 3)
 80013ce:	f1b8 0f03 	cmp.w	r8, #3
 80013d2:	d124      	bne.n	800141e <cliMemoryDump+0xb2>
      cliPrintf ("  |");
 80013d4:	4819      	ldr	r0, [pc, #100]	; (800143c <cliMemoryDump+0xd0>)
 80013d6:	f7ff ff89 	bl	80012ec <cliPrintf>
            cliPrintf(".");
 80013da:	f8df a064 	ldr.w	sl, [pc, #100]	; 8001440 <cliMemoryDump+0xd4>
 80013de:	f104 0310 	add.w	r3, r4, #16
            cliPrintf("%c", asc[i]);
 80013e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8001444 <cliMemoryDump+0xd8>
 80013e6:	9301      	str	r3, [sp, #4]
        for (i=0;i<4;i++)
 80013e8:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	f10d 080c 	add.w	r8, sp, #12
 80013f2:	9303      	str	r3, [sp, #12]
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80013f4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80013f8:	f1a1 0220 	sub.w	r2, r1, #32
 80013fc:	2a5e      	cmp	r2, #94	; 0x5e
 80013fe:	d811      	bhi.n	8001424 <cliMemoryDump+0xb8>
            cliPrintf("%c", asc[i]);
 8001400:	4658      	mov	r0, fp
 8001402:	f7ff ff73 	bl	80012ec <cliPrintf>
        for (i=0;i<4;i++)
 8001406:	f109 0901 	add.w	r9, r9, #1
 800140a:	f1b9 0f04 	cmp.w	r9, #4
 800140e:	d1f1      	bne.n	80013f4 <cliMemoryDump+0x88>
      for (idx1= 0; idx1< 4; idx1++)
 8001410:	9b01      	ldr	r3, [sp, #4]
        ascptr+=1;
 8001412:	3404      	adds	r4, #4
      for (idx1= 0; idx1< 4; idx1++)
 8001414:	429c      	cmp	r4, r3
 8001416:	d1e7      	bne.n	80013e8 <cliMemoryDump+0x7c>
      cliPrintf("|\n   ");
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <cliMemoryDump+0xdc>)
 800141a:	f7ff ff67 	bl	80012ec <cliPrintf>
    addr++;
 800141e:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 8001420:	3501      	adds	r5, #1
 8001422:	e7c2      	b.n	80013aa <cliMemoryDump+0x3e>
            cliPrintf(".");
 8001424:	4650      	mov	r0, sl
 8001426:	f7ff ff61 	bl	80012ec <cliPrintf>
 800142a:	e7ec      	b.n	8001406 <cliMemoryDump+0x9a>
 800142c:	0800953d 	.word	0x0800953d
 8001430:	0800956d 	.word	0x0800956d
 8001434:	08009551 	.word	0x08009551
 8001438:	0800955b 	.word	0x0800955b
 800143c:	08009563 	.word	0x08009563
 8001440:	0800956a 	.word	0x0800956a
 8001444:	08009567 	.word	0x08009567
 8001448:	0800956c 	.word	0x0800956c

0800144c <cliMain>:
{
 800144c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 8001450:	4ca7      	ldr	r4, [pc, #668]	; (80016f0 <cliMain+0x2a4>)
{
 8001452:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 8001454:	7a27      	ldrb	r7, [r4, #8]
 8001456:	2f00      	cmp	r7, #0
 8001458:	f000 8143 	beq.w	80016e2 <cliMain+0x296>
  if (uartAvailable(cli_node.ch) > 0)
 800145c:	7820      	ldrb	r0, [r4, #0]
 800145e:	f000 fd23 	bl	8001ea8 <uartAvailable>
 8001462:	2800      	cmp	r0, #0
 8001464:	f000 813d 	beq.w	80016e2 <cliMain+0x296>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001468:	7820      	ldrb	r0, [r4, #0]
 800146a:	f000 fd33 	bl	8001ed4 <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 800146e:	f894 8010 	ldrb.w	r8, [r4, #16]
 8001472:	f88d 0007 	strb.w	r0, [sp, #7]
 8001476:	f1b8 0f00 	cmp.w	r8, #0
 800147a:	f040 80ea 	bne.w	8001652 <cliMain+0x206>
    switch(rx_data)
 800147e:	281b      	cmp	r0, #27
 8001480:	f000 812a 	beq.w	80016d8 <cliMain+0x28c>
 8001484:	d852      	bhi.n	800152c <cliMain+0xe0>
 8001486:	2808      	cmp	r0, #8
 8001488:	f000 80fa 	beq.w	8001680 <cliMain+0x234>
 800148c:	280d      	cmp	r0, #13
 800148e:	d06a      	beq.n	8001566 <cliMain+0x11a>
        if ((line->count + 1) < line->buf_len)
 8001490:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8001494:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 8001498:	1c59      	adds	r1, r3, #1
 800149a:	4291      	cmp	r1, r2
 800149c:	f280 811e 	bge.w	80016dc <cliMain+0x290>
          if (line->cursor == line->count)
 80014a0:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d119      	bne.n	80014dc <cliMain+0x90>
            uartWrite(p_cli->ch, &rx_data, 1);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f10d 0107 	add.w	r1, sp, #7
 80014ae:	7820      	ldrb	r0, [r4, #0]
 80014b0:	f000 fd2a 	bl	8001f08 <uartWrite>
            line->buf[line->cursor] = rx_data;
 80014b4:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80014b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80014bc:	18a3      	adds	r3, r4, r2
            line->cursor++;
 80014be:	3201      	adds	r2, #1
 80014c0:	f884 2245 	strb.w	r2, [r4, #581]	; 0x245
            line->buf[line->count] = 0;
 80014c4:	2200      	movs	r2, #0
            line->buf[line->cursor] = rx_data;
 80014c6:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            line->count++;
 80014ca:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80014ce:	3301      	adds	r3, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 80014d6:	4423      	add	r3, r4
 80014d8:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 80014dc:	f894 6245 	ldrb.w	r6, [r4, #581]	; 0x245
 80014e0:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 80014e4:	42ae      	cmp	r6, r5
 80014e6:	f080 80b4 	bcs.w	8001652 <cliMain+0x206>
            mov_len = line->count - line->cursor;
 80014ea:	1baa      	subs	r2, r5, r6
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	f505 7109 	add.w	r1, r5, #548	; 0x224
 80014f2:	f205 2025 	addw	r0, r5, #549	; 0x225
 80014f6:	1a89      	subs	r1, r1, r2
 80014f8:	1a80      	subs	r0, r0, r2
 80014fa:	4421      	add	r1, r4
 80014fc:	4420      	add	r0, r4
 80014fe:	f004 fe2d 	bl	800615c <memmove>
            line->buf[line->count] = 0;
 8001502:	2100      	movs	r1, #0
            line->buf[line->cursor] = rx_data;
 8001504:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001508:	19a3      	adds	r3, r4, r6
 800150a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
            line->count++;
 800150e:	1c6b      	adds	r3, r5, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 8001516:	4423      	add	r3, r4
            line->cursor++;
 8001518:	3601      	adds	r6, #1
            line->buf[line->count] = 0;
 800151a:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800151e:	7820      	ldrb	r0, [r4, #0]
 8001520:	4974      	ldr	r1, [pc, #464]	; (80016f4 <cliMain+0x2a8>)
            line->cursor++;
 8001522:	f884 6245 	strb.w	r6, [r4, #581]	; 0x245
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001526:	f000 fd0d 	bl	8001f44 <uartPrintf>
 800152a:	e092      	b.n	8001652 <cliMain+0x206>
    switch(rx_data)
 800152c:	287f      	cmp	r0, #127	; 0x7f
 800152e:	d1af      	bne.n	8001490 <cliMain+0x44>
        if (line->cursor < line->count)
 8001530:	f894 0245 	ldrb.w	r0, [r4, #581]	; 0x245
 8001534:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 8001538:	42a8      	cmp	r0, r5
 800153a:	f080 80cf 	bcs.w	80016dc <cliMain+0x290>
          mov_len = line->count - line->cursor;
 800153e:	1a2a      	subs	r2, r5, r0
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001540:	f200 2125 	addw	r1, r0, #549	; 0x225
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	f500 7009 	add.w	r0, r0, #548	; 0x224
          line->count--;
 800154a:	3d01      	subs	r5, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800154c:	4421      	add	r1, r4
          line->count--;
 800154e:	b2ed      	uxtb	r5, r5
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001550:	3a01      	subs	r2, #1
 8001552:	4420      	add	r0, r4
 8001554:	f004 fe02 	bl	800615c <memmove>
          line->count--;
 8001558:	f884 5246 	strb.w	r5, [r4, #582]	; 0x246
          line->buf[line->count] = 0; // 마지막 버퍼에 Null 문자 넣기
 800155c:	4425      	add	r5, r4
          uartPrintf(p_cli->ch, "\x1B[1P"); //teraterm에서 오른쪽 문자하나를 삭제해줌
 800155e:	4966      	ldr	r1, [pc, #408]	; (80016f8 <cliMain+0x2ac>)
          line->buf[line->count] = 0; // 마지막 버퍼에 Null 문자 넣기
 8001560:	f885 8224 	strb.w	r8, [r5, #548]	; 0x224
          uartPrintf(p_cli->ch, "\x1B[1P"); //teraterm에서 오른쪽 문자하나를 삭제해줌
 8001564:	e072      	b.n	800164c <cliMain+0x200>
        if (line->count > 0)
 8001566:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 800156a:	2b00      	cmp	r3, #0
 800156c:	d062      	beq.n	8001634 <cliMain+0x1e8>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800156e:	2323      	movs	r3, #35	; 0x23
 8001570:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8001574:	f504 7509 	add.w	r5, r4, #548	; 0x224
 8001578:	fb03 4302 	mla	r3, r3, r2, r4
 800157c:	f504 7c11 	add.w	ip, r4, #580	; 0x244
 8001580:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001584:	462e      	mov	r6, r5
 8001586:	ce03      	ldmia	r6!, {r0, r1}
 8001588:	4566      	cmp	r6, ip
 800158a:	6018      	str	r0, [r3, #0]
 800158c:	6059      	str	r1, [r3, #4]
 800158e:	4635      	mov	r5, r6
 8001590:	f103 0308 	add.w	r3, r3, #8
 8001594:	d1f6      	bne.n	8001584 <cliMain+0x138>
 8001596:	8830      	ldrh	r0, [r6, #0]
 8001598:	78b1      	ldrb	r1, [r6, #2]
 800159a:	8018      	strh	r0, [r3, #0]
 800159c:	7099      	strb	r1, [r3, #2]
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800159e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  p_cli->argc = 0;
 80015a2:	2600      	movs	r6, #0
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80015a4:	2b03      	cmp	r3, #3
    p_cli->hist_line_count++;
 80015a6:	bf9c      	itt	ls
 80015a8:	3301      	addls	r3, #1
 80015aa:	f884 3197 	strbls.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_new  = true;
 80015ae:	2301      	movs	r3, #1
  p_cli->hist_line_i    = p_cli->hist_line_last;
 80015b0:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80015b4:	3201      	adds	r2, #1
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80015be:	494f      	ldr	r1, [pc, #316]	; (80016fc <cliMain+0x2b0>)
 80015c0:	484f      	ldr	r0, [pc, #316]	; (8001700 <cliMain+0x2b4>)
 80015c2:	aa02      	add	r2, sp, #8
  p_cli->hist_line_new  = true;
 80015c4:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
  p_cli->argc = 0;
 80015c8:	f8a4 6112 	strh.w	r6, [r4, #274]	; 0x112
  argv[argc] = NULL;
 80015cc:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80015d0:	f005 fc74 	bl	8006ebc <strtok_r>
 80015d4:	4633      	mov	r3, r6
 80015d6:	4605      	mov	r5, r0
 80015d8:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80016fc <cliMain+0x2b0>
 80015dc:	b29a      	uxth	r2, r3
 80015de:	1c5e      	adds	r6, r3, #1
 80015e0:	2d00      	cmp	r5, #0
 80015e2:	d13e      	bne.n	8001662 <cliMain+0x216>
  p_cli->argc = argc;
 80015e4:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
  if (argc > 0)
 80015e8:	b322      	cbz	r2, 8001634 <cliMain+0x1e8>
    cliPrintf("\r\n");
 80015ea:	4846      	ldr	r0, [pc, #280]	; (8001704 <cliMain+0x2b8>)
 80015ec:	f7ff fe7e 	bl	80012ec <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 80015f0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 80015f4:	f7ff fd67 	bl	80010c6 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 80015f8:	4e43      	ldr	r6, [pc, #268]	; (8001708 <cliMain+0x2bc>)
 80015fa:	f8b4 8248 	ldrh.w	r8, [r4, #584]	; 0x248
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80015fe:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 8001602:	4545      	cmp	r5, r8
 8001604:	da16      	bge.n	8001634 <cliMain+0x1e8>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001606:	4631      	mov	r1, r6
 8001608:	4648      	mov	r0, r9
 800160a:	f7fe fda1 	bl	8000150 <strcmp>
 800160e:	3614      	adds	r6, #20
 8001610:	2800      	cmp	r0, #0
 8001612:	d133      	bne.n	800167c <cliMain+0x230>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001614:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001618:	483c      	ldr	r0, [pc, #240]	; (800170c <cliMain+0x2c0>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800161a:	3b01      	subs	r3, #1
 800161c:	f8a4 338c 	strh.w	r3, [r4, #908]	; 0x38c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001620:	2314      	movs	r3, #20
 8001622:	fb03 4505 	mla	r5, r3, r5, r4
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001626:	f8c4 0390 	str.w	r0, [r4, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800162a:	f8d5 325c 	ldr.w	r3, [r5, #604]	; 0x25c
 800162e:	f500 701d 	add.w	r0, r0, #628	; 0x274
 8001632:	4798      	blx	r3
        line->count = 0;
 8001634:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 8001636:	4936      	ldr	r1, [pc, #216]	; (8001710 <cliMain+0x2c4>)
 8001638:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 800163a:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
        line->cursor = 0;
 800163e:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        line->buf[0] = 0;
 8001642:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
  uartPrintf(p_cli->ch, "\n\r");
 8001646:	f000 fc7d 	bl	8001f44 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800164a:	4932      	ldr	r1, [pc, #200]	; (8001714 <cliMain+0x2c8>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800164c:	7820      	ldrb	r0, [r4, #0]
 800164e:	f000 fc79 	bl	8001f44 <uartPrintf>
  switch(p_cli->state)
 8001652:	7c23      	ldrb	r3, [r4, #16]
 8001654:	3b01      	subs	r3, #1
 8001656:	2b03      	cmp	r3, #3
 8001658:	d840      	bhi.n	80016dc <cliMain+0x290>
 800165a:	e8df f003 	tbb	[pc, r3]
 800165e:	463d      	.short	0x463d
 8001660:	da5f      	.short	0xda5f
    argv[argc++] = tok;
 8001662:	b29b      	uxth	r3, r3
 8001664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001668:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800166c:	4641      	mov	r1, r8
 800166e:	2000      	movs	r0, #0
 8001670:	aa02      	add	r2, sp, #8
 8001672:	f005 fc23 	bl	8006ebc <strtok_r>
 8001676:	4633      	mov	r3, r6
 8001678:	4605      	mov	r5, r0
 800167a:	e7af      	b.n	80015dc <cliMain+0x190>
    for (int i=0; i<p_cli->cmd_count; i++)
 800167c:	3501      	adds	r5, #1
 800167e:	e7c0      	b.n	8001602 <cliMain+0x1b6>
        if (line->count > 0 && line->cursor > 0)
 8001680:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
        if (line->cursor < line->count)
 8001684:	f894 6245 	ldrb.w	r6, [r4, #581]	; 0x245
        if (line->count > 0 && line->cursor > 0)
 8001688:	b92b      	cbnz	r3, 8001696 <cliMain+0x24a>
        if (line->cursor > 0)
 800168a:	b33e      	cbz	r6, 80016dc <cliMain+0x290>
          line->cursor--;
 800168c:	1e73      	subs	r3, r6, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800168e:	4922      	ldr	r1, [pc, #136]	; (8001718 <cliMain+0x2cc>)
          line->cursor--;
 8001690:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001694:	e7da      	b.n	800164c <cliMain+0x200>
        if (line->count > 0 && line->cursor > 0)
 8001696:	b30e      	cbz	r6, 80016dc <cliMain+0x290>
          if (line->cursor == line->count)
 8001698:	42b3      	cmp	r3, r6
 800169a:	d106      	bne.n	80016aa <cliMain+0x25e>
            line->count--;
 800169c:	1e73      	subs	r3, r6, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 80016a4:	4423      	add	r3, r4
 80016a6:	f883 8224 	strb.w	r8, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 80016aa:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 80016ae:	42b5      	cmp	r5, r6
 80016b0:	d9ec      	bls.n	800168c <cliMain+0x240>
            mov_len = line->count - line->cursor;
 80016b2:	1baa      	subs	r2, r5, r6
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80016b4:	f506 7109 	add.w	r1, r6, #548	; 0x224
 80016b8:	f206 2023 	addw	r0, r6, #547	; 0x223
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	4421      	add	r1, r4
 80016c0:	4420      	add	r0, r4
 80016c2:	f004 fd4b 	bl	800615c <memmove>
            line->buf[line->count] = 0;
 80016c6:	2300      	movs	r3, #0
            line->count--;
 80016c8:	3d01      	subs	r5, #1
 80016ca:	b2ed      	uxtb	r5, r5
 80016cc:	f884 5246 	strb.w	r5, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 80016d0:	4425      	add	r5, r4
 80016d2:	f885 3224 	strb.w	r3, [r5, #548]	; 0x224
        if (line->cursor > 0)
 80016d6:	e7d9      	b.n	800168c <cliMain+0x240>
      p_cli->state = CLI_RX_SP2;
 80016d8:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 80016da:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <cliMain+0x2a4>)
 80016de:	f7ff fda9 	bl	8001234 <cliShowLog>
}
 80016e2:	4638      	mov	r0, r7
 80016e4:	b005      	add	sp, #20
 80016e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_cli->state = CLI_RX_SP3;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e7f5      	b.n	80016da <cliMain+0x28e>
 80016ee:	bf00      	nop
 80016f0:	2000040c 	.word	0x2000040c
 80016f4:	0800958a 	.word	0x0800958a
 80016f8:	08009585 	.word	0x08009585
 80016fc:	08009572 	.word	0x08009572
 8001700:	20000630 	.word	0x20000630
 8001704:	0800951a 	.word	0x0800951a
 8001708:	20000658 	.word	0x20000658
 800170c:	20000524 	.word	0x20000524
 8001710:	08009579 	.word	0x08009579
 8001714:	0800957c 	.word	0x0800957c
 8001718:	08009582 	.word	0x08009582
      p_cli->state = CLI_RX_IDLE;
 800171c:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 800171e:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 8001722:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8001724:	2a44      	cmp	r2, #68	; 0x44
 8001726:	d112      	bne.n	800174e <cliMain+0x302>
        if (line->cursor > 0)
 8001728:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 800172c:	b3ab      	cbz	r3, 800179a <cliMain+0x34e>
          line->cursor--;
 800172e:	3b01      	subs	r3, #1
 8001730:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          tx_buf[0] = 0x1B;
 8001734:	231b      	movs	r3, #27
 8001736:	f88d 3008 	strb.w	r3, [sp, #8]
          tx_buf[1] = 0x5B;
 800173a:	235b      	movs	r3, #91	; 0x5b
          tx_buf[2] = rx_data;
 800173c:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001740:	7820      	ldrb	r0, [r4, #0]
 8001742:	2203      	movs	r2, #3
 8001744:	a902      	add	r1, sp, #8
          tx_buf[1] = 0x5B;
 8001746:	f88d 3009 	strb.w	r3, [sp, #9]
          uartWrite(p_cli->ch, tx_buf, 3);
 800174a:	f000 fbdd 	bl	8001f08 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 800174e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001752:	2b43      	cmp	r3, #67	; 0x43
 8001754:	d116      	bne.n	8001784 <cliMain+0x338>
        if (line->cursor < line->buf_len)
 8001756:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 800175a:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
        uartWrite(p_cli->ch, tx_buf, 3);
 800175e:	7820      	ldrb	r0, [r4, #0]
        if (line->cursor < line->buf_len)
 8001760:	429a      	cmp	r2, r3
          line->cursor++;
 8001762:	bf84      	itt	hi
 8001764:	3301      	addhi	r3, #1
 8001766:	f884 3245 	strbhi.w	r3, [r4, #581]	; 0x245
        tx_buf[0] = 0x1B;
 800176a:	231b      	movs	r3, #27
 800176c:	f88d 3008 	strb.w	r3, [sp, #8]
        tx_buf[1] = 0x5B;
 8001770:	235b      	movs	r3, #91	; 0x5b
 8001772:	f88d 3009 	strb.w	r3, [sp, #9]
        tx_buf[2] = rx_data;
 8001776:	2343      	movs	r3, #67	; 0x43
        uartWrite(p_cli->ch, tx_buf, 3);
 8001778:	2203      	movs	r2, #3
 800177a:	a902      	add	r1, sp, #8
        tx_buf[2] = rx_data;
 800177c:	f88d 300a 	strb.w	r3, [sp, #10]
        uartWrite(p_cli->ch, tx_buf, 3);
 8001780:	f000 fbc2 	bl	8001f08 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 8001784:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001788:	2b41      	cmp	r3, #65	; 0x41
 800178a:	d106      	bne.n	800179a <cliMain+0x34e>
        cliLineChange(p_cli, true);
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff fcf3 	bl	8001178 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001792:	4921      	ldr	r1, [pc, #132]	; (8001818 <cliMain+0x3cc>)
 8001794:	7820      	ldrb	r0, [r4, #0]
 8001796:	f000 fbd5 	bl	8001f44 <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 800179a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800179e:	2b42      	cmp	r3, #66	; 0x42
 80017a0:	d106      	bne.n	80017b0 <cliMain+0x364>
        cliLineChange(p_cli, false);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fce8 	bl	8001178 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80017a8:	491b      	ldr	r1, [pc, #108]	; (8001818 <cliMain+0x3cc>)
 80017aa:	7820      	ldrb	r0, [r4, #0]
 80017ac:	f000 fbca 	bl	8001f44 <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 80017b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017b4:	2b31      	cmp	r3, #49	; 0x31
 80017b6:	d10a      	bne.n	80017ce <cliMain+0x382>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80017b8:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80017bc:	4917      	ldr	r1, [pc, #92]	; (800181c <cliMain+0x3d0>)
 80017be:	7820      	ldrb	r0, [r4, #0]
 80017c0:	f000 fbc0 	bl	8001f44 <uartPrintf>
        line->cursor = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 80017ca:	2304      	movs	r3, #4
 80017cc:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 80017ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017d2:	2b34      	cmp	r3, #52	; 0x34
 80017d4:	d182      	bne.n	80016dc <cliMain+0x290>
        if (line->cursor < line->count)
 80017d6:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 80017da:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 80017de:	4293      	cmp	r3, r2
 80017e0:	d205      	bcs.n	80017ee <cliMain+0x3a2>
          mov_len = line->count - line->cursor;
 80017e2:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <cliMain+0x3d4>)
 80017e6:	7820      	ldrb	r0, [r4, #0]
 80017e8:	b292      	uxth	r2, r2
 80017ea:	f000 fbab 	bl	8001f44 <uartPrintf>
        if (line->cursor > line->count)
 80017ee:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80017f2:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d905      	bls.n	8001806 <cliMain+0x3ba>
          mov_len = line->cursor - line->count;
 80017fa:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <cliMain+0x3d0>)
 80017fe:	7820      	ldrb	r0, [r4, #0]
 8001800:	b292      	uxth	r2, r2
 8001802:	f000 fb9f 	bl	8001f44 <uartPrintf>
        line->cursor = line->count;
 8001806:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 800180a:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 800180e:	2304      	movs	r3, #4
 8001810:	e763      	b.n	80016da <cliMain+0x28e>
      p_cli->state = CLI_RX_IDLE;
 8001812:	2300      	movs	r3, #0
 8001814:	e761      	b.n	80016da <cliMain+0x28e>
 8001816:	bf00      	nop
 8001818:	20000630 	.word	0x20000630
 800181c:	08009480 	.word	0x08009480
 8001820:	08009595 	.word	0x08009595

08001824 <cliKeepLoop>:
{
 8001824:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <cliKeepLoop+0x14>)
 8001828:	7818      	ldrb	r0, [r3, #0]
 800182a:	f000 fb3d 	bl	8001ea8 <uartAvailable>
}
 800182e:	fab0 f080 	clz	r0, r0
 8001832:	0940      	lsrs	r0, r0, #5
 8001834:	bd08      	pop	{r3, pc}
 8001836:	bf00      	nop
 8001838:	2000040c 	.word	0x2000040c

0800183c <cliAdd>:
{
 800183c:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800183e:	4d0e      	ldr	r5, [pc, #56]	; (8001878 <cliAdd+0x3c>)
{
 8001840:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001842:	f8b5 4248 	ldrh.w	r4, [r5, #584]	; 0x248
 8001846:	2c0f      	cmp	r4, #15
 8001848:	d814      	bhi.n	8001874 <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800184a:	2314      	movs	r3, #20
 800184c:	435c      	muls	r4, r3
 800184e:	f504 7313 	add.w	r3, r4, #588	; 0x24c
 8001852:	442b      	add	r3, r5
 8001854:	4601      	mov	r1, r0
  p_cli->cmd_list[index].cmd_func = p_func;
 8001856:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001858:	4618      	mov	r0, r3
 800185a:	f004 fca1 	bl	80061a0 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800185e:	f8c4 625c 	str.w	r6, [r4, #604]	; 0x25c
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001862:	f7ff fc30 	bl	80010c6 <cliToUpper>
  return ret;
 8001866:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 8001868:	f8b5 3248 	ldrh.w	r3, [r5, #584]	; 0x248
 800186c:	3301      	adds	r3, #1
 800186e:	f8a5 3248 	strh.w	r3, [r5, #584]	; 0x248
}
 8001872:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8001874:	2000      	movs	r0, #0
 8001876:	e7fc      	b.n	8001872 <cliAdd+0x36>
 8001878:	2000040c 	.word	0x2000040c

0800187c <cliInit>:
{
 800187c:	b508      	push	{r3, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 800187e:	4911      	ldr	r1, [pc, #68]	; (80018c4 <cliInit+0x48>)
  cli_node.is_open = false;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <cliInit+0x4c>)
 8001882:	2200      	movs	r2, #0
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001884:	f8c3 1394 	str.w	r1, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001888:	4910      	ldr	r1, [pc, #64]	; (80018cc <cliInit+0x50>)
  cli_node.is_open = false;
 800188a:	811a      	strh	r2, [r3, #8]
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800188c:	f8c3 1398 	str.w	r1, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001890:	490f      	ldr	r1, [pc, #60]	; (80018d0 <cliInit+0x54>)
  cli_node.hist_line_new   = false;
 8001892:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001896:	f8c3 139c 	str.w	r1, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800189a:	490e      	ldr	r1, [pc, #56]	; (80018d4 <cliInit+0x58>)
  p_cli->line.buf[0]  = 0;
 800189c:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80018a0:	f8c3 13a0 	str.w	r1, [r3, #928]	; 0x3a0
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80018a4:	211f      	movs	r1, #31
  cliAdd("help", cliShowList);
 80018a6:	480c      	ldr	r0, [pc, #48]	; (80018d8 <cliInit+0x5c>)
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80018a8:	f8a3 1244 	strh.w	r1, [r3, #580]	; 0x244
  cliAdd("help", cliShowList);
 80018ac:	490b      	ldr	r1, [pc, #44]	; (80018dc <cliInit+0x60>)
  cli_node.state   = CLI_RX_IDLE;
 80018ae:	741a      	strb	r2, [r3, #16]
  p_cli->line.count   = 0;
 80018b0:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  cliAdd("help", cliShowList);
 80018b4:	f7ff ffc2 	bl	800183c <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80018b8:	4909      	ldr	r1, [pc, #36]	; (80018e0 <cliInit+0x64>)
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <cliInit+0x68>)
 80018bc:	f7ff ffbe 	bl	800183c <cliAdd>
}
 80018c0:	2001      	movs	r0, #1
 80018c2:	bd08      	pop	{r3, pc}
 80018c4:	08001155 	.word	0x08001155
 80018c8:	2000040c 	.word	0x2000040c
 80018cc:	08001135 	.word	0x08001135
 80018d0:	080010ed 	.word	0x080010ed
 80018d4:	08001109 	.word	0x08001109
 80018d8:	0800959b 	.word	0x0800959b
 80018dc:	08001321 	.word	0x08001321
 80018e0:	0800136d 	.word	0x0800136d
 80018e4:	080095a0 	.word	0x080095a0

080018e8 <gpioPinMode>:
  return ret;
}


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80018e8:	b530      	push	{r4, r5, lr}
 80018ea:	460d      	mov	r5, r1
 80018ec:	b085      	sub	sp, #20
bool ret= true;

GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	2100      	movs	r1, #0
{
 80018f0:	4604      	mov	r4, r0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	2210      	movs	r2, #16
 80018f4:	4668      	mov	r0, sp
 80018f6:	f004 fc4b 	bl	8006190 <memset>

switch (mode)
 80018fa:	1e69      	subs	r1, r5, #1
 80018fc:	2904      	cmp	r1, #4
 80018fe:	d809      	bhi.n	8001914 <gpioPinMode+0x2c>
 8001900:	e8df f001 	tbb	[pc, r1]
 8001904:	15061a03 	.word	0x15061a03
 8001908:	18          	.byte	0x18
 8001909:	00          	.byte	0x00
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    break;
  case _DEF_INPUT_PULLUP:
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800190a:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_PULLUP;

    break;
  case _DEF_OUTPUT_PULLDOWN:
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800190c:	9302      	str	r3, [sp, #8]
    break;
 800190e:	e001      	b.n	8001914 <gpioPinMode+0x2c>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	9301      	str	r3, [sp, #4]
}

GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
GPIO_InitStruct.Pin = gpio_tbl[ch].speed;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <gpioPinMode+0x54>)
 8001916:	0122      	lsls	r2, r4, #4
 8001918:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800191c:	7a61      	ldrb	r1, [r4, #9]
HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800191e:	5898      	ldr	r0, [r3, r2]
GPIO_InitStruct.Pin = gpio_tbl[ch].speed;
 8001920:	9100      	str	r1, [sp, #0]
HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8001922:	4669      	mov	r1, sp
 8001924:	f000 fe3a 	bl	800259c <HAL_GPIO_Init>

return ret;
}
 8001928:	2001      	movs	r0, #1
 800192a:	b005      	add	sp, #20
 800192c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001932:	e7eb      	b.n	800190c <gpioPinMode+0x24>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001938:	2302      	movs	r3, #2
 800193a:	e7e7      	b.n	800190c <gpioPinMode+0x24>
 800193c:	20000004 	.word	0x20000004

08001940 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
  if (ch >= GPIO_MAX_CH)
 8001940:	2803      	cmp	r0, #3
{
 8001942:	460a      	mov	r2, r1
 8001944:	b410      	push	{r4}
  if (ch >= GPIO_MAX_CH)
 8001946:	d80c      	bhi.n	8001962 <gpioPinWrite+0x22>
      return;
    }

  if (value == true)
    {
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <gpioPinWrite+0x28>)
 800194a:	0104      	lsls	r4, r0, #4
 800194c:	eb01 1300 	add.w	r3, r1, r0, lsl #4
 8001950:	5908      	ldr	r0, [r1, r4]
 8001952:	8899      	ldrh	r1, [r3, #4]
  if (value == true)
 8001954:	b11a      	cbz	r2, 800195e <gpioPinWrite+0x1e>
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001956:	7a9a      	ldrb	r2, [r3, #10]
    }
  else
    {
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
    }
}
 8001958:	bc10      	pop	{r4}
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 800195a:	f000 bf6d 	b.w	8002838 <HAL_GPIO_WritePin>
 800195e:	7ada      	ldrb	r2, [r3, #11]
 8001960:	e7fa      	b.n	8001958 <gpioPinWrite+0x18>
}
 8001962:	bc10      	pop	{r4}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000004 	.word	0x20000004

0800196c <gpioInit>:
{
 800196c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  for (int i =0; i<GPIO_MAX_CH; i++)
 800196e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <gpioInit+0x58>)
 8001972:	4d15      	ldr	r5, [pc, #84]	; (80019c8 <gpioInit+0x5c>)
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	f042 0204 	orr.w	r2, r2, #4
 800197a:	619a      	str	r2, [r3, #24]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	f002 0204 	and.w	r2, r2, #4
 8001982:	9200      	str	r2, [sp, #0]
 8001984:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	f042 0208 	orr.w	r2, r2, #8
 800198c:	619a      	str	r2, [r3, #24]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9b01      	ldr	r3, [sp, #4]
      gpioPinMode(i, gpio_tbl[i].mode);
 8001998:	b2e6      	uxtb	r6, r4
 800199a:	7a29      	ldrb	r1, [r5, #8]
 800199c:	4630      	mov	r0, r6
 800199e:	f7ff ffa3 	bl	80018e8 <gpioPinMode>
  for (int i =0; i<GPIO_MAX_CH; i++)
 80019a2:	3401      	adds	r4, #1
      gpioPinWrite(i, gpio_tbl[i].init_value);
 80019a4:	7b29      	ldrb	r1, [r5, #12]
 80019a6:	4630      	mov	r0, r6
 80019a8:	f7ff ffca 	bl	8001940 <gpioPinWrite>
  for (int i =0; i<GPIO_MAX_CH; i++)
 80019ac:	2c04      	cmp	r4, #4
 80019ae:	f105 0510 	add.w	r5, r5, #16
 80019b2:	d1f1      	bne.n	8001998 <gpioInit+0x2c>
  cliAdd("gpio", cliGpio);
 80019b4:	4905      	ldr	r1, [pc, #20]	; (80019cc <gpioInit+0x60>)
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <gpioInit+0x64>)
 80019b8:	f7ff ff40 	bl	800183c <cliAdd>
}
 80019bc:	2001      	movs	r0, #1
 80019be:	b002      	add	sp, #8
 80019c0:	bd70      	pop	{r4, r5, r6, pc}
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	20000004 	.word	0x20000004
 80019cc:	080019fd 	.word	0x080019fd
 80019d0:	080095a3 	.word	0x080095a3

080019d4 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
bool ret =false;

if (ch >= GPIO_MAX_CH)
 80019d4:	2803      	cmp	r0, #3
{
 80019d6:	b510      	push	{r4, lr}
if (ch >= GPIO_MAX_CH)
 80019d8:	d80c      	bhi.n	80019f4 <gpioPinRead+0x20>
  {
    return ret;
  }

if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin)== gpio_tbl[ch].on_state)
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <gpioPinRead+0x24>)
 80019dc:	0102      	lsls	r2, r0, #4
 80019de:	eb03 1400 	add.w	r4, r3, r0, lsl #4
 80019e2:	88a1      	ldrh	r1, [r4, #4]
 80019e4:	5898      	ldr	r0, [r3, r2]
 80019e6:	f000 ff21 	bl	800282c <HAL_GPIO_ReadPin>
 80019ea:	7aa3      	ldrb	r3, [r4, #10]
 80019ec:	1a1b      	subs	r3, r3, r0
 80019ee:	4258      	negs	r0, r3
 80019f0:	4158      	adcs	r0, r3
  {
    ret= true;
  }

return ret;
}
 80019f2:	bd10      	pop	{r4, pc}
    return ret;
 80019f4:	2000      	movs	r0, #0
 80019f6:	e7fc      	b.n	80019f2 <gpioPinRead+0x1e>
 80019f8:	20000004 	.word	0x20000004

080019fc <cliGpio>:
#ifdef _USE_HW_CLI
void cliGpio(cli_args_t* args)
{
  bool ret =false;

  if(args->argc ==1 && args-> isStr(0, "show") == true)
 80019fc:	8803      	ldrh	r3, [r0, #0]
{
 80019fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001a02:	2b01      	cmp	r3, #1
{
 8001a04:	4604      	mov	r4, r0
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001a06:	d034      	beq.n	8001a72 <cliGpio+0x76>
  bool ret =false;
 8001a08:	2500      	movs	r5, #0
	  delay(100);
	}
      ret = true;
    }

  if (args->argc == 2 && args->isStr (0, "read") == true)
 8001a0a:	8823      	ldrh	r3, [r4, #0]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d10f      	bne.n	8001a30 <cliGpio+0x34>
 8001a10:	2000      	movs	r0, #0
 8001a12:	6963      	ldr	r3, [r4, #20]
 8001a14:	4935      	ldr	r1, [pc, #212]	; (8001aec <cliGpio+0xf0>)
 8001a16:	4798      	blx	r3
 8001a18:	4606      	mov	r6, r0
 8001a1a:	b148      	cbz	r0, 8001a30 <cliGpio+0x34>
    {
      uint8_t ch;

      ch = (uint8_t)args->getData(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	68a3      	ldr	r3, [r4, #8]
 8001a20:	4798      	blx	r3
      while (cliKeepLoop())
	{
	  cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8001a22:	4f33      	ldr	r7, [pc, #204]	; (8001af0 <cliGpio+0xf4>)
      ch = (uint8_t)args->getData(1);
 8001a24:	b2c5      	uxtb	r5, r0
      while (cliKeepLoop())
 8001a26:	f7ff fefd 	bl	8001824 <cliKeepLoop>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d141      	bne.n	8001ab2 <cliGpio+0xb6>
	  delay(100);
	}
      ret =true;
 8001a2e:	4635      	mov	r5, r6
    }

  if (args->argc == 3 && args->isStr (0, "write") == true)
 8001a30:	8823      	ldrh	r3, [r4, #0]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d149      	bne.n	8001aca <cliGpio+0xce>
 8001a36:	2000      	movs	r0, #0
 8001a38:	6963      	ldr	r3, [r4, #20]
 8001a3a:	492e      	ldr	r1, [pc, #184]	; (8001af4 <cliGpio+0xf8>)
 8001a3c:	4798      	blx	r3
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d043      	beq.n	8001aca <cliGpio+0xce>
    {
      uint8_t ch;
      uint8_t value;
      ch = (uint8_t)args->getData(1);
 8001a42:	68a3      	ldr	r3, [r4, #8]
 8001a44:	2001      	movs	r0, #1
 8001a46:	4798      	blx	r3
      value = (uint8_t)args->getData(2);
 8001a48:	68a3      	ldr	r3, [r4, #8]
      ch = (uint8_t)args->getData(1);
 8001a4a:	4605      	mov	r5, r0
      value = (uint8_t)args->getData(2);
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	4798      	blx	r3
      gpioPinWrite(ch, value);
 8001a50:	b2ed      	uxtb	r5, r5
 8001a52:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8001a56:	bf18      	it	ne
 8001a58:	2101      	movne	r1, #1
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	bf08      	it	eq
 8001a5e:	2100      	moveq	r1, #0
 8001a60:	f7ff ff6e 	bl	8001940 <gpioPinWrite>
      cliPrintf("gpio write %d : %d\n", ch, value);
 8001a64:	4632      	mov	r2, r6
 8001a66:	4629      	mov	r1, r5
    {
      cliPrintf("gpio show\n");
      cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
      cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
    }
}
 8001a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      cliPrintf("gpio write %d : %d\n", ch, value);
 8001a6c:	4822      	ldr	r0, [pc, #136]	; (8001af8 <cliGpio+0xfc>)
 8001a6e:	f7ff bc3d 	b.w	80012ec <cliPrintf>
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001a72:	6943      	ldr	r3, [r0, #20]
 8001a74:	4921      	ldr	r1, [pc, #132]	; (8001afc <cliGpio+0x100>)
 8001a76:	2000      	movs	r0, #0
 8001a78:	4798      	blx	r3
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d0c3      	beq.n	8001a08 <cliGpio+0xc>
	      cliPrintf("%d", gpioPinRead(i));
 8001a80:	4f1f      	ldr	r7, [pc, #124]	; (8001b00 <cliGpio+0x104>)
	  cliPrintf("\n");
 8001a82:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001b04 <cliGpio+0x108>
      while(cliKeepLoop())
 8001a86:	f7ff fecd 	bl	8001824 <cliKeepLoop>
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	d0bd      	beq.n	8001a0a <cliGpio+0xe>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001a8e:	2600      	movs	r6, #0
	      cliPrintf("%d", gpioPinRead(i));
 8001a90:	b2f0      	uxtb	r0, r6
 8001a92:	f7ff ff9f 	bl	80019d4 <gpioPinRead>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001a96:	3601      	adds	r6, #1
	      cliPrintf("%d", gpioPinRead(i));
 8001a98:	4601      	mov	r1, r0
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	f7ff fc26 	bl	80012ec <cliPrintf>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001aa0:	2e04      	cmp	r6, #4
 8001aa2:	d1f5      	bne.n	8001a90 <cliGpio+0x94>
	  cliPrintf("\n");
 8001aa4:	4640      	mov	r0, r8
 8001aa6:	f7ff fc21 	bl	80012ec <cliPrintf>
	  delay(100);
 8001aaa:	2064      	movs	r0, #100	; 0x64
 8001aac:	f7ff f940 	bl	8000d30 <delay>
 8001ab0:	e7e9      	b.n	8001a86 <cliGpio+0x8a>
	  cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f7ff ff8e 	bl	80019d4 <gpioPinRead>
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4602      	mov	r2, r0
 8001abc:	4638      	mov	r0, r7
 8001abe:	f7ff fc15 	bl	80012ec <cliPrintf>
	  delay(100);
 8001ac2:	2064      	movs	r0, #100	; 0x64
 8001ac4:	f7ff f934 	bl	8000d30 <delay>
 8001ac8:	e7ad      	b.n	8001a26 <cliGpio+0x2a>
  if (ret !=true)
 8001aca:	b965      	cbnz	r5, 8001ae6 <cliGpio+0xea>
      cliPrintf("gpio show\n");
 8001acc:	480e      	ldr	r0, [pc, #56]	; (8001b08 <cliGpio+0x10c>)
 8001ace:	f7ff fc0d 	bl	80012ec <cliPrintf>
      cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <cliGpio+0x110>)
 8001ad6:	f7ff fc09 	bl	80012ec <cliPrintf>
}
 8001ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8001ade:	2103      	movs	r1, #3
 8001ae0:	480b      	ldr	r0, [pc, #44]	; (8001b10 <cliGpio+0x114>)
 8001ae2:	f7ff bc03 	b.w	80012ec <cliPrintf>
}
 8001ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aea:	bf00      	nop
 8001aec:	080095b0 	.word	0x080095b0
 8001af0:	080095b5 	.word	0x080095b5
 8001af4:	080095c8 	.word	0x080095c8
 8001af8:	080095ce 	.word	0x080095ce
 8001afc:	080095a8 	.word	0x080095a8
 8001b00:	080095ad 	.word	0x080095ad
 8001b04:	0800951b 	.word	0x0800951b
 8001b08:	080095e2 	.word	0x080095e2
 8001b0c:	080095ed 	.word	0x080095ed
 8001b10:	08009601 	.word	0x08009601

08001b14 <ledOff.part.0>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
  }
void ledOff(uint8_t ch)
{
  if (ch >=LED_MAX_CH ) return;
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <ledOff.part.0+0xc>)
 8001b16:	79da      	ldrb	r2, [r3, #7]
 8001b18:	8899      	ldrh	r1, [r3, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	f000 be8c 	b.w	8002838 <HAL_GPIO_WritePin>
 8001b20:	20000044 	.word	0x20000044

08001b24 <ledInit>:
{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	2210      	movs	r2, #16
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	a802      	add	r0, sp, #8
 8001b2e:	f004 fb2f 	bl	8006190 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <ledInit+0x5c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b3a:	4812      	ldr	r0, [pc, #72]	; (8001b84 <ledInit+0x60>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3c:	f042 0208 	orr.w	r2, r2, #8
 8001b40:	619a      	str	r2, [r3, #24]
 8001b42:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b50:	f000 fe72 	bl	8002838 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e9cd 4303 	strd	r4, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9305      	str	r3, [sp, #20]
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <ledInit+0x64>)
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001b60:	a902      	add	r1, sp, #8
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001b62:	889a      	ldrh	r2, [r3, #4]
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001b64:	6818      	ldr	r0, [r3, #0]
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001b66:	9202      	str	r2, [sp, #8]
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001b68:	f000 fd18 	bl	800259c <HAL_GPIO_Init>
  if (ch >=LED_MAX_CH ) return;
 8001b6c:	f7ff ffd2 	bl	8001b14 <ledOff.part.0>
  cliAdd("led", cliLED);
 8001b70:	4906      	ldr	r1, [pc, #24]	; (8001b8c <ledInit+0x68>)
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <ledInit+0x6c>)
 8001b74:	f7ff fe62 	bl	800183c <cliAdd>
}
 8001b78:	4620      	mov	r0, r4
 8001b7a:	b006      	add	sp, #24
 8001b7c:	bd10      	pop	{r4, pc}
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010c00 	.word	0x40010c00
 8001b88:	20000044 	.word	0x20000044
 8001b8c:	08001ba9 	.word	0x08001ba9
 8001b90:	0800961a 	.word	0x0800961a

08001b94 <ledToggle>:
  }
void ledToggle(uint8_t ch)
{
  if (ch >=LED_MAX_CH ) return;
 8001b94:	b920      	cbnz	r0, 8001ba0 <ledToggle+0xc>
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8001b96:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <ledToggle+0x10>)
 8001b98:	8899      	ldrh	r1, [r3, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f000 be51 	b.w	8002842 <HAL_GPIO_TogglePin>
  }
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000044 	.word	0x20000044

08001ba8 <cliLED>:

#ifdef _USE_HW_CLI
void cliLED(cli_args_t *args)
{
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool ret = false;

  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001baa:	8803      	ldrh	r3, [r0, #0]
{
 8001bac:	4604      	mov	r4, r0
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d01c      	beq.n	8001bec <cliLED+0x44>
            }
        }
    }


  if (args->argc == 2 && args->isStr(0, "switch") == true) // led toggle ch on
 8001bb2:	8823      	ldrh	r3, [r4, #0]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d10f      	bne.n	8001bd8 <cliLED+0x30>
 8001bb8:	2000      	movs	r0, #0
 8001bba:	6963      	ldr	r3, [r4, #20]
 8001bbc:	491d      	ldr	r1, [pc, #116]	; (8001c34 <cliLED+0x8c>)
 8001bbe:	4798      	blx	r3
 8001bc0:	b150      	cbz	r0, 8001bd8 <cliLED+0x30>
    {
      uint8_t led_ch;

      led_ch = (uint8_t)args->getData(1);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	68a3      	ldr	r3, [r4, #8]
 8001bc6:	4798      	blx	r3

      if (led_ch >0)
 8001bc8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        {
          led_ch--;
 8001bcc:	bf1c      	itt	ne
 8001bce:	f100 30ff 	addne.w	r0, r0, #4294967295
 8001bd2:	b2c0      	uxtbne	r0, r0
        }
      ledToggle(led_ch);
 8001bd4:	f7ff ffde 	bl	8001b94 <ledToggle>
    }


  if (ret != true)
    {
      cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4817      	ldr	r0, [pc, #92]	; (8001c38 <cliLED+0x90>)
 8001bdc:	f7ff fb86 	bl	80012ec <cliPrintf>
      cliPrintf("led switch ch[1~%d] \n", LED_MAX_CH);
    }
}
 8001be0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cliPrintf("led switch ch[1~%d] \n", LED_MAX_CH);
 8001be4:	2101      	movs	r1, #1
 8001be6:	4815      	ldr	r0, [pc, #84]	; (8001c3c <cliLED+0x94>)
 8001be8:	f7ff bb80 	b.w	80012ec <cliPrintf>
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001bec:	6943      	ldr	r3, [r0, #20]
 8001bee:	4914      	ldr	r1, [pc, #80]	; (8001c40 <cliLED+0x98>)
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	4798      	blx	r3
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d0dc      	beq.n	8001bb2 <cliLED+0xa>
      led_ch = (uint8_t)args->getData(1);
 8001bf8:	68a3      	ldr	r3, [r4, #8]
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	4798      	blx	r3
      toggle_time = (uint32_t)args->getData(2);
 8001bfe:	68a3      	ldr	r3, [r4, #8]
      led_ch = (uint8_t)args->getData(1);
 8001c00:	b2c5      	uxtb	r5, r0
      toggle_time = (uint32_t)args->getData(2);
 8001c02:	2002      	movs	r0, #2
 8001c04:	4798      	blx	r3
 8001c06:	4607      	mov	r7, r0
      if (led_ch >0)
 8001c08:	b10d      	cbz	r5, 8001c0e <cliLED+0x66>
          led_ch--;
 8001c0a:	3d01      	subs	r5, #1
 8001c0c:	b2ed      	uxtb	r5, r5
      pre_time=millis();
 8001c0e:	f7ff f891 	bl	8000d34 <millis>
 8001c12:	4606      	mov	r6, r0
      while (cliKeepLoop())
 8001c14:	f7ff fe06 	bl	8001824 <cliKeepLoop>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d0ca      	beq.n	8001bb2 <cliLED+0xa>
          if (millis()-pre_time >= toggle_time)
 8001c1c:	f7ff f88a 	bl	8000d34 <millis>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	42b8      	cmp	r0, r7
 8001c24:	d3f6      	bcc.n	8001c14 <cliLED+0x6c>
              pre_time = millis();
 8001c26:	f7ff f885 	bl	8000d34 <millis>
 8001c2a:	4606      	mov	r6, r0
              ledToggle(led_ch);
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f7ff ffb1 	bl	8001b94 <ledToggle>
 8001c32:	e7ef      	b.n	8001c14 <cliLED+0x6c>
 8001c34:	08009625 	.word	0x08009625
 8001c38:	0800962c 	.word	0x0800962c
 8001c3c:	08009649 	.word	0x08009649
 8001c40:	0800961e 	.word	0x0800961e

08001c44 <spiInit>:

bool spiInit(void) {
	bool ret = true;

	for (int i = 0; i < SPI_MAX_CH; i++) {
		spi_tbl[i].is_open = false;
 8001c44:	2200      	movs	r2, #0
 8001c46:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <spiInit+0x10>)
		spi_tbl[i].is_tx_done = false;
		spi_tbl[i].func_tx = NULL;
	}

	return ret;
}
 8001c48:	2001      	movs	r0, #1
		spi_tbl[i].is_open = false;
 8001c4a:	801a      	strh	r2, [r3, #0]
		spi_tbl[i].func_tx = NULL;
 8001c4c:	605a      	str	r2, [r3, #4]
		spi_tbl[i].is_open = false;
 8001c4e:	821a      	strh	r2, [r3, #16]
		spi_tbl[i].func_tx = NULL;
 8001c50:	615a      	str	r2, [r3, #20]
}
 8001c52:	4770      	bx	lr
 8001c54:	2000084c 	.word	0x2000084c

08001c58 <spiBegin>:

bool spiBegin(uint8_t ch) {
 8001c58:	b538      	push	{r3, r4, r5, lr}
	bool ret = false;
	spi_t *p_spi = &spi_tbl[ch];

	switch (ch) {
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	b118      	cbz	r0, 8001c66 <spiBegin+0xe>
 8001c5e:	2801      	cmp	r0, #1
 8001c60:	d022      	beq.n	8001ca8 <spiBegin+0x50>
	bool ret = false;
 8001c62:	2000      	movs	r0, #0
		}
		break;

	}
	return ret;
}
 8001c64:	bd38      	pop	{r3, r4, r5, pc}
		p_spi->h_spi = &hspi1;
 8001c66:	4d1f      	ldr	r5, [pc, #124]	; (8001ce4 <spiBegin+0x8c>)
		p_spi->h_dma = &hdma_spi1_tx;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <spiBegin+0x90>)
		p_spi->h_spi = &hspi1;
 8001c6a:	4820      	ldr	r0, [pc, #128]	; (8001cec <spiBegin+0x94>)
		p_spi->h_dma = &hdma_spi1_tx;
 8001c6c:	60eb      	str	r3, [r5, #12]
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001c6e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c72:	491f      	ldr	r1, [pc, #124]	; (8001cf0 <spiBegin+0x98>)
		p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c74:	f44f 7c00 	mov.w	ip, #512	; 0x200
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001c78:	e9c0 1300 	strd	r1, r3, [r0]
		p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8001c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
		p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c80:	e9c0 3403 	strd	r3, r4, [r0, #12]
		p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c84:	2308      	movs	r3, #8
 8001c86:	e9c0 c306 	strd	ip, r3, [r0, #24]
		p_spi->h_spi->Init.CRCPolynomial = 10;
 8001c8a:	230a      	movs	r3, #10
		p_spi->h_spi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8c:	e9c0 4408 	strd	r4, r4, [r0, #32]
		p_spi->h_spi = &hspi1;
 8001c90:	60a8      	str	r0, [r5, #8]
		p_spi->h_spi->Init.Direction = SPI_DIRECTION_2LINES;
 8001c92:	6084      	str	r4, [r0, #8]
		p_spi->h_spi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	6144      	str	r4, [r0, #20]
		p_spi->h_spi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c96:	6284      	str	r4, [r0, #40]	; 0x28
		p_spi->h_spi->Init.CRCPolynomial = 10;
 8001c98:	62c3      	str	r3, [r0, #44]	; 0x2c
		if (HAL_SPI_Init(p_spi->h_spi) == HAL_OK) {
 8001c9a:	f001 ff65 	bl	8003b68 <HAL_SPI_Init>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d1df      	bne.n	8001c62 <spiBegin+0xa>
			p_spi->is_open = true;
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	7028      	strb	r0, [r5, #0]
			ret = true;
 8001ca6:	e7dd      	b.n	8001c64 <spiBegin+0xc>
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001ca8:	f44f 7382 	mov.w	r3, #260	; 0x104
		p_spi->h_spi = &hspi1;
 8001cac:	480f      	ldr	r0, [pc, #60]	; (8001cec <spiBegin+0x94>)
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <spiBegin+0x9c>)
		p_spi->h_spi = &hspi1;
 8001cb0:	4d0c      	ldr	r5, [pc, #48]	; (8001ce4 <spiBegin+0x8c>)
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001cb2:	e9c0 2300 	strd	r2, r3, [r0]
		p_spi->h_spi->Init.Direction = SPI_DIRECTION_2LINES;
 8001cb6:	2300      	movs	r3, #0
		p_spi->h_spi->Init.NSS = SPI_NSS_SOFT;
 8001cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
		p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001cbc:	e9c0 3302 	strd	r3, r3, [r0, #8]
		p_spi->h_spi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc0:	e9c0 3304 	strd	r3, r3, [r0, #16]
		p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cc4:	e9c0 2306 	strd	r2, r3, [r0, #24]
		p_spi->h_spi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc8:	e9c0 3308 	strd	r3, r3, [r0, #32]
		p_spi->h_spi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ccc:	6283      	str	r3, [r0, #40]	; 0x28
		p_spi->h_spi->Init.CRCPolynomial = 10;
 8001cce:	230a      	movs	r3, #10
		p_spi->h_spi = &hspi1;
 8001cd0:	61a8      	str	r0, [r5, #24]
		p_spi->h_spi->Init.CRCPolynomial = 10;
 8001cd2:	62c3      	str	r3, [r0, #44]	; 0x2c
		if (HAL_SPI_Init(p_spi->h_spi) != HAL_OK) {
 8001cd4:	f001 ff48 	bl	8003b68 <HAL_SPI_Init>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d0c2      	beq.n	8001c62 <spiBegin+0xa>
			ret = true;
 8001cdc:	4620      	mov	r0, r4
			p_spi->is_open = true;
 8001cde:	742c      	strb	r4, [r5, #16]
			ret = true;
 8001ce0:	e7c0      	b.n	8001c64 <spiBegin+0xc>
 8001ce2:	bf00      	nop
 8001ce4:	2000084c 	.word	0x2000084c
 8001ce8:	200007b0 	.word	0x200007b0
 8001cec:	200007f4 	.word	0x200007f4
 8001cf0:	40013000 	.word	0x40013000
 8001cf4:	40003800 	.word	0x40003800

08001cf8 <HAL_SPI_MspInit>:
			p_spi->func_tx();
		}
	}
}

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001cf8:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cfa:	2610      	movs	r6, #16
void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001cfc:	4605      	mov	r5, r0
 8001cfe:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d00:	4632      	mov	r2, r6
 8001d02:	2100      	movs	r1, #0
 8001d04:	eb0d 0006 	add.w	r0, sp, r6
 8001d08:	f004 fa42 	bl	8006190 <memset>
	if (spiHandle->Instance == SPI1) {
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	4a32      	ldr	r2, [pc, #200]	; (8001dd8 <HAL_SPI_MspInit+0xe0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d13f      	bne.n	8001d94 <HAL_SPI_MspInit+0x9c>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* SPI1 clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_SPI_MspInit+0xe4>)
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	4832      	ldr	r0, [pc, #200]	; (8001de0 <HAL_SPI_MspInit+0xe8>)
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001d18:	699a      	ldr	r2, [r3, #24]

		/* SPI1 DMA Init */
		/* SPI1_TX Init */
		hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d1a:	4c32      	ldr	r4, [pc, #200]	; (8001de4 <HAL_SPI_MspInit+0xec>)
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001d1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	6999      	ldr	r1, [r3, #24]
 8001d24:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8001d28:	9100      	str	r1, [sp, #0]
 8001d2a:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	6999      	ldr	r1, [r3, #24]
 8001d2e:	f041 0104 	orr.w	r1, r1, #4
 8001d32:	6199      	str	r1, [r3, #24]
 8001d34:	699b      	ldr	r3, [r3, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	21a0      	movs	r1, #160	; 0xa0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	e9cd 1304 	strd	r1, r3, [sp, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d46:	2303      	movs	r3, #3
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	eb0d 0106 	add.w	r1, sp, r6
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4c:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f000 fc25 	bl	800259c <HAL_GPIO_Init>
		hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_SPI_MspInit+0xf0>)
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
		hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d54:	2280      	movs	r2, #128	; 0x80
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d56:	e9c4 3600 	strd	r3, r6, [r4]
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5a:	2300      	movs	r3, #0
		hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d5c:	f44f 7080 	mov.w	r0, #256	; 0x100
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	e9c4 3202 	strd	r3, r2, [r4, #8]
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d68:	e9c4 0204 	strd	r0, r2, [r4, #16]
		hdma_spi1_tx.Init.Mode = DMA_NORMAL;
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK) {
 8001d6c:	4620      	mov	r0, r4
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d6e:	e9c4 3306 	strd	r3, r3, [r4, #24]
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK) {
 8001d72:	f000 fa7d 	bl	8002270 <HAL_DMA_Init>
 8001d76:	b108      	cbz	r0, 8001d7c <HAL_SPI_MspInit+0x84>
			Error_Handler();
 8001d78:	f7ff f8aa 	bl	8000ed0 <Error_Handler>
		}

		__HAL_LINKDMA(spiHandle, hdmatx, hdma_spi1_tx);

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2023      	movs	r0, #35	; 0x23
 8001d80:	4611      	mov	r1, r2
		__HAL_LINKDMA(spiHandle, hdmatx, hdma_spi1_tx);
 8001d82:	64ac      	str	r4, [r5, #72]	; 0x48
 8001d84:	6265      	str	r5, [r4, #36]	; 0x24
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d86:	f000 fa0b 	bl	80021a0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d8a:	2023      	movs	r0, #35	; 0x23
 8001d8c:	f000 fa3a 	bl	8002204 <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	}
}
 8001d90:	b008      	add	sp, #32
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
	} else if (spiHandle->Instance == SPI2) {
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_SPI_MspInit+0xf4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d1fa      	bne.n	8001d90 <HAL_SPI_MspInit+0x98>
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_SPI_MspInit+0xe4>)
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	4814      	ldr	r0, [pc, #80]	; (8001df0 <HAL_SPI_MspInit+0xf8>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001d9e:	69da      	ldr	r2, [r3, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	a904      	add	r1, sp, #16
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da6:	61da      	str	r2, [r3, #28]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001dae:	9202      	str	r2, [sp, #8]
 8001db0:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	f042 0208 	orr.w	r2, r2, #8
 8001db8:	619a      	str	r2, [r3, #24]
 8001dba:	699b      	ldr	r3, [r3, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	f44f 4220 	mov.w	r2, #40960	; 0xa000
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	9303      	str	r3, [sp, #12]
 8001dc6:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e9cd 2304 	strd	r2, r3, [sp, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f000 fbe3 	bl	800259c <HAL_GPIO_Init>
}
 8001dd6:	e7db      	b.n	8001d90 <HAL_SPI_MspInit+0x98>
 8001dd8:	40013000 	.word	0x40013000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	200007b0 	.word	0x200007b0
 8001de8:	40020030 	.word	0x40020030
 8001dec:	40003800 	.word	0x40003800
 8001df0:	40010c00 	.word	0x40010c00

08001df4 <uartInit>:
  for (int i=0; i<UART_MAX_CH;i++)
    {
      is_open[i] = false;
    }
  return true;
}
 8001df4:	2001      	movs	r0, #1
 8001df6:	4770      	bx	lr

08001df8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;

  switch(ch)
 8001df8:	2801      	cmp	r0, #1
{
 8001dfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dfe:	4605      	mov	r5, r0
  switch(ch)
 8001e00:	d903      	bls.n	8001e0a <uartOpen+0x12>
  bool ret = false;
 8001e02:	2000      	movs	r0, #0
          qbuffer[ch].tail = qbuffer[ch].head; //Flash
        }
    break;
  }
  return ret;
}
 8001e04:	b002      	add	sp, #8
 8001e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart1.Instance          = USART1;
 8001e0a:	4c21      	ldr	r4, [pc, #132]	; (8001e90 <uartOpen+0x98>)
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <uartOpen+0x9c>)
      huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8001e0e:	2600      	movs	r6, #0
      huart1.Init.BaudRate     = baud;
 8001e10:	e9c4 3100 	strd	r3, r1, [r4]
      huart1.Init.Mode         = UART_MODE_TX_RX;
 8001e14:	230c      	movs	r3, #12
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001e16:	4f20      	ldr	r7, [pc, #128]	; (8001e98 <uartOpen+0xa0>)
      HAL_UART_DeInit(&huart1);
 8001e18:	4620      	mov	r0, r4
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001e1a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001e1e:	eb07 1505 	add.w	r5, r7, r5, lsl #4
      huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001e22:	e9c4 3605 	strd	r3, r6, [r4, #20]
      huart1.Init.StopBits     = UART_STOPBITS_1;
 8001e26:	e9c4 6602 	strd	r6, r6, [r4, #8]
      huart1.Init.Parity       = UART_PARITY_NONE;
 8001e2a:	6126      	str	r6, [r4, #16]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	61e6      	str	r6, [r4, #28]
      HAL_UART_DeInit(&huart1);
 8001e2e:	f002 f978 	bl	8004122 <HAL_UART_DeInit>
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e36:	4919      	ldr	r1, [pc, #100]	; (8001e9c <uartOpen+0xa4>)
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f7ff f91a 	bl	8001072 <qbufferCreate>
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <uartOpen+0xa8>)
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e40:	4631      	mov	r1, r6
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001e42:	695a      	ldr	r2, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e44:	200f      	movs	r0, #15
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	615a      	str	r2, [r3, #20]
 8001e4c:	695b      	ldr	r3, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e4e:	4632      	mov	r2, r6
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e58:	f000 f9a2 	bl	80021a0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f000 f9d1 	bl	8002204 <HAL_NVIC_EnableIRQ>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e62:	4620      	mov	r0, r4
 8001e64:	f002 f92e 	bl	80040c4 <HAL_UART_Init>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d1ca      	bne.n	8001e02 <uartOpen+0xa>
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e70:	4620      	mov	r0, r4
 8001e72:	490a      	ldr	r1, [pc, #40]	; (8001e9c <uartOpen+0xa4>)
 8001e74:	f002 fc42 	bl	80046fc <HAL_UART_Receive_DMA>
 8001e78:	fab0 f080 	clz	r0, r0
          qbuffer[ch].head = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR; //256-256= 0, 256-255= 1, ...
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <uartOpen+0xac>)
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001e7e:	0940      	lsrs	r0, r0, #5
          qbuffer[ch].head = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR; //256-256= 0, 256-255= 1, ...
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	68ab      	ldr	r3, [r5, #8]
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	f847 3008 	str.w	r3, [r7, r8]
          qbuffer[ch].tail = qbuffer[ch].head; //Flash
 8001e8c:	606b      	str	r3, [r5, #4]
 8001e8e:	e7b9      	b.n	8001e04 <uartOpen+0xc>
 8001e90:	200008b0 	.word	0x200008b0
 8001e94:	40013800 	.word	0x40013800
 8001e98:	200008f8 	.word	0x200008f8
 8001e9c:	20000918 	.word	0x20000918
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	2000086c 	.word	0x2000086c

08001ea8 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8001ea8:	b118      	cbz	r0, 8001eb2 <uartAvailable+0xa>
 8001eaa:	2801      	cmp	r0, #1
 8001eac:	d003      	beq.n	8001eb6 <uartAvailable+0xe>
      qbuffer[ch].head=qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
      ret = qbufferAvailable(&qbuffer[ch]);
      break;
  }
  return ret;
}
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4770      	bx	lr
      ret= cdcAvailable();
 8001eb2:	f003 bef7 	b.w	8005ca4 <cdcAvailable>
      qbuffer[ch].head=qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <uartAvailable+0x24>)
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <uartAvailable+0x28>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	6983      	ldr	r3, [r0, #24]
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	f840 3f10 	str.w	r3, [r0, #16]!
      ret = qbufferAvailable(&qbuffer[ch]);
 8001ec6:	f7ff b8f5 	b.w	80010b4 <qbufferAvailable>
 8001eca:	bf00      	nop
 8001ecc:	2000086c 	.word	0x2000086c
 8001ed0:	200008f8 	.word	0x200008f8

08001ed4 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret=0;
 8001ed4:	2300      	movs	r3, #0
{
 8001ed6:	b507      	push	{r0, r1, r2, lr}
  switch(ch)
 8001ed8:	4602      	mov	r2, r0
  uint8_t ret=0;
 8001eda:	f88d 3007 	strb.w	r3, [sp, #7]
  switch(ch)
 8001ede:	b130      	cbz	r0, 8001eee <uartRead+0x1a>
 8001ee0:	2801      	cmp	r0, #1
 8001ee2:	d009      	beq.n	8001ef8 <uartRead+0x24>
      qbufferRead(&qbuffer[ch], &ret ,1);
      break;

  }
  return ret;
}
 8001ee4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001ee8:	b003      	add	sp, #12
 8001eea:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = cdcRead();
 8001eee:	f003 ff2d 	bl	8005d4c <cdcRead>
 8001ef2:	f88d 0007 	strb.w	r0, [sp, #7]
      break;
 8001ef6:	e7f5      	b.n	8001ee4 <uartRead+0x10>
      qbufferRead(&qbuffer[ch], &ret ,1);
 8001ef8:	f10d 0107 	add.w	r1, sp, #7
 8001efc:	4801      	ldr	r0, [pc, #4]	; (8001f04 <uartRead+0x30>)
 8001efe:	f7ff f8bf 	bl	8001080 <qbufferRead>
      break;
 8001f02:	e7ef      	b.n	8001ee4 <uartRead+0x10>
 8001f04:	20000908 	.word	0x20000908

08001f08 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4614      	mov	r4, r2
  uint32_t ret= 0;

  switch(ch)
 8001f10:	b123      	cbz	r3, 8001f1c <uartWrite+0x14>
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d007      	beq.n	8001f26 <uartWrite+0x1e>
 8001f16:	2400      	movs	r4, #0
          ret= length;
        }
      break;
  }
  return ret;
}
 8001f18:	4620      	mov	r0, r4
 8001f1a:	bd10      	pop	{r4, pc}
      ret =cdcWrite(p_data, length);
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	f003 ff45 	bl	8005dac <cdcWrite>
 8001f22:	4604      	mov	r4, r0
      break;
 8001f24:	e7f8      	b.n	8001f18 <uartWrite+0x10>
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001f26:	2364      	movs	r3, #100	; 0x64
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <uartWrite+0x34>)
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	f002 f913 	bl	8004156 <HAL_UART_Transmit>
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <uartWrite+0x38>)
  uint32_t ret= 0;
 8001f32:	2800      	cmp	r0, #0
 8001f34:	bf18      	it	ne
 8001f36:	2400      	movne	r4, #0
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001f38:	7018      	strb	r0, [r3, #0]
      if (status==HAL_OK)
 8001f3a:	e7ed      	b.n	8001f18 <uartWrite+0x10>
 8001f3c:	200008b0 	.word	0x200008b0
 8001f40:	20000a18 	.word	0x20000a18

08001f44 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char*fmt, ...)
{
 8001f44:	b40e      	push	{r1, r2, r3}
 8001f46:	b510      	push	{r4, lr}
 8001f48:	b0c3      	sub	sp, #268	; 0x10c
 8001f4a:	ab45      	add	r3, sp, #276	; 0x114
 8001f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f50:	4604      	mov	r4, r0
  int len;
  uint32_t ret;
  va_start(args, fmt);


  len = vsnprintf(buf, 256, fmt, args);
 8001f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f56:	a802      	add	r0, sp, #8
  va_start(args, fmt);
 8001f58:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8001f5a:	f005 f85b 	bl	8007014 <vsniprintf>
  ret=uartWrite(ch, (uint8_t *)buf, len);
 8001f5e:	a902      	add	r1, sp, #8
  len = vsnprintf(buf, 256, fmt, args);
 8001f60:	4602      	mov	r2, r0
  ret=uartWrite(ch, (uint8_t *)buf, len);
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff ffd0 	bl	8001f08 <uartWrite>


  va_end(args);
  return ret;
}
 8001f68:	b043      	add	sp, #268	; 0x10c
 8001f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f6e:	b003      	add	sp, #12
 8001f70:	4770      	bx	lr

08001f72 <HAL_UART_ErrorCallback>:
 8001f72:	4770      	bx	lr

08001f74 <HAL_UART_RxCpltCallback>:

      HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
    }
#endif

}
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	4606      	mov	r6, r0
 8001f7c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	2210      	movs	r2, #16
 8001f80:	2100      	movs	r1, #0
 8001f82:	a802      	add	r0, sp, #8
 8001f84:	f004 f904 	bl	8006190 <memset>
  if(uartHandle->Instance==USART1)
 8001f88:	6832      	ldr	r2, [r6, #0]
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_UART_MspInit+0xa8>)
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d144      	bne.n	800201a <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f90:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001f94:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	4823      	ldr	r0, [pc, #140]	; (8002024 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001fa6:	9200      	str	r2, [sp, #0]
 8001fa8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	f042 0204 	orr.w	r2, r2, #4
 8001fb2:	619a      	str	r2, [r3, #24]
 8001fb4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f000 fae6 	bl	800259c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	4813      	ldr	r0, [pc, #76]	; (8002024 <HAL_UART_MspInit+0xac>)
 8001fd6:	a902      	add	r1, sp, #8

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001fd8:	4c13      	ldr	r4, [pc, #76]	; (8002028 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fda:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f000 fadc 	bl	800259c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_UART_MspInit+0xb4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fe6:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe8:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fec:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fee:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001ff2:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff4:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff6:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffa:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ffc:	f000 f938 	bl	8002270 <HAL_DMA_Init>
 8002000:	b108      	cbz	r0, 8002006 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8002002:	f7fe ff65 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2025      	movs	r0, #37	; 0x25
 800200a:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800200c:	63f4      	str	r4, [r6, #60]	; 0x3c
 800200e:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002010:	f000 f8c6 	bl	80021a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002014:	2025      	movs	r0, #37	; 0x25
 8002016:	f000 f8f5 	bl	8002204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800201a:	b006      	add	sp, #24
 800201c:	bd70      	pop	{r4, r5, r6, pc}
 800201e:	bf00      	nop
 8002020:	40013800 	.word	0x40013800
 8002024:	40010800 	.word	0x40010800
 8002028:	2000086c 	.word	0x2000086c
 800202c:	40020058 	.word	0x40020058

08002030 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 8002030:	6802      	ldr	r2, [r0, #0]
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_UART_MspDeInit+0x34>)
{
 8002034:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8002036:	429a      	cmp	r2, r3
{
 8002038:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 800203a:	d111      	bne.n	8002060 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_UART_MspDeInit+0x38>)

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800203e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8002042:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8002046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800204a:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800204c:	f000 fb80 	bl	8002750 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002050:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002052:	f000 f93f 	bl	80022d4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800205a:	2025      	movs	r0, #37	; 0x25
 800205c:	f000 b8e0 	b.w	8002220 <HAL_NVIC_DisableIRQ>
}
 8002060:	bd10      	pop	{r4, pc}
 8002062:	bf00      	nop
 8002064:	40013800 	.word	0x40013800
 8002068:	40021000 	.word	0x40021000
 800206c:	40010800 	.word	0x40010800

08002070 <usbInit>:
#include "usb_device.h"

#ifdef _USB_HW_USB

bool usbInit(void)
{
 8002070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool ret = true;

  GPIO_InitTypeDef GPIO_InitStruct;
  delay(200);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002072:	4c0a      	ldr	r4, [pc, #40]	; (800209c <usbInit+0x2c>)
  delay(200);
 8002074:	20c8      	movs	r0, #200	; 0xc8
 8002076:	f7fe fe5b 	bl	8000d30 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	4620      	mov	r0, r4
 800207e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002082:	f000 fbd9 	bl	8002838 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002086:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	4620      	mov	r0, r4
 800208a:	4669      	mov	r1, sp
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208c:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f000 fa85 	bl	800259c <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8002092:	f003 fd99 	bl	8005bc8 <MX_USB_DEVICE_Init>

  return ret;
}
 8002096:	2001      	movs	r0, #1
 8002098:	b004      	add	sp, #16
 800209a:	bd10      	pop	{r4, pc}
 800209c:	40010800 	.word	0x40010800

080020a0 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 80020a0:	b508      	push	{r3, lr}
  bspInit();
 80020a2:	f7fe fee3 	bl	8000e6c <bspInit>
  cliInit();
 80020a6:	f7ff fbe9 	bl	800187c <cliInit>
//  resetInit();
  usbInit();
 80020aa:	f7ff ffe1 	bl	8002070 <usbInit>
//  rtcInit();
  tim1Init();
 80020ae:	f7fe fe4f 	bl	8000d50 <tim1Init>
  gpioInit();
 80020b2:	f7ff fc5b 	bl	800196c <gpioInit>
  ledInit();
 80020b6:	f7ff fd35 	bl	8001b24 <ledInit>
//  motorInit();
  spiInit();
 80020ba:	f7ff fdc3 	bl	8001c44 <spiInit>
  uartInit();
//  flashInit();
}
 80020be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  uartInit();
 80020c2:	f7ff be97 	b.w	8001df4 <uartInit>
	...

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_InitTick+0x3c>)
{
 80020cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ce:	7818      	ldrb	r0, [r3, #0]
 80020d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_InitTick+0x40>)
 80020da:	6810      	ldr	r0, [r2, #0]
 80020dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80020e0:	f000 f8b2 	bl	8002248 <HAL_SYSTICK_Config>
 80020e4:	4604      	mov	r4, r0
 80020e6:	b958      	cbnz	r0, 8002100 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e8:	2d0f      	cmp	r5, #15
 80020ea:	d809      	bhi.n	8002100 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	4602      	mov	r2, r0
 80020ee:	4629      	mov	r1, r5
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f000 f854 	bl	80021a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4620      	mov	r0, r4
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_InitTick+0x44>)
 80020fc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002100:	2001      	movs	r0, #1
 8002102:	e7fc      	b.n	80020fe <HAL_InitTick+0x36>
 8002104:	2000004c 	.word	0x2000004c
 8002108:	20000000 	.word	0x20000000
 800210c:	20000050 	.word	0x20000050

08002110 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4a07      	ldr	r2, [pc, #28]	; (8002130 <HAL_Init+0x20>)
{
 8002112:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002114:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002116:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211e:	f000 f82d 	bl	800217c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002122:	200f      	movs	r0, #15
 8002124:	f7ff ffd0 	bl	80020c8 <HAL_InitTick>
  HAL_MspInit();
 8002128:	f7fe fed4 	bl	8000ed4 <HAL_MspInit>
}
 800212c:	2000      	movs	r0, #0
 800212e:	bd08      	pop	{r3, pc}
 8002130:	40022000 	.word	0x40022000

08002134 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002134:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_IncTick+0x10>)
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_IncTick+0x14>)
 8002138:	6811      	ldr	r1, [r2, #0]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	440b      	add	r3, r1
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000a1c 	.word	0x20000a1c
 8002148:	2000004c 	.word	0x2000004c

0800214c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800214c:	4b01      	ldr	r3, [pc, #4]	; (8002154 <HAL_GetTick+0x8>)
 800214e:	6818      	ldr	r0, [r3, #0]
}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000a1c 	.word	0x20000a1c

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff fff6 	bl	800214c <HAL_GetTick>
 8002160:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002162:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002164:	bf1e      	ittt	ne
 8002166:	4b04      	ldrne	r3, [pc, #16]	; (8002178 <HAL_Delay+0x20>)
 8002168:	781b      	ldrbne	r3, [r3, #0]
 800216a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	1b43      	subs	r3, r0, r5
 8002172:	42a3      	cmp	r3, r4
 8002174:	d3fa      	bcc.n	800216c <HAL_Delay+0x14>
  {
  }
}
 8002176:	bd38      	pop	{r3, r4, r5, pc}
 8002178:	2000004c 	.word	0x2000004c

0800217c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4907      	ldr	r1, [pc, #28]	; (800219c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800217e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002182:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800218a:	0412      	lsls	r2, r2, #16
 800218c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002198:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b530      	push	{r4, r5, lr}
 80021a4:	68dc      	ldr	r4, [r3, #12]
 80021a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	bf28      	it	cs
 80021b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021bc:	bf98      	it	ls
 80021be:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c4:	bf88      	it	hi
 80021c6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	ea21 0303 	bic.w	r3, r1, r3
 80021cc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ce:	fa05 f404 	lsl.w	r4, r5, r4
 80021d2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80021d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	bfac      	ite	ge
 80021de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	4a07      	ldrlt	r2, [pc, #28]	; (8002200 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	bfab      	itete	ge
 80021ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021fa:	bd30      	pop	{r4, r5, pc}
 80021fc:	e000ed00 	.word	0xe000ed00
 8002200:	e000ed14 	.word	0xe000ed14

08002204 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002204:	2800      	cmp	r0, #0
 8002206:	db08      	blt.n	800221a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002208:	2301      	movs	r3, #1
 800220a:	0942      	lsrs	r2, r0, #5
 800220c:	f000 001f 	and.w	r0, r0, #31
 8002210:	fa03 f000 	lsl.w	r0, r3, r0
 8002214:	4b01      	ldr	r3, [pc, #4]	; (800221c <HAL_NVIC_EnableIRQ+0x18>)
 8002216:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002220:	2800      	cmp	r0, #0
 8002222:	db0d      	blt.n	8002240 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002224:	2201      	movs	r2, #1
 8002226:	0943      	lsrs	r3, r0, #5
 8002228:	f000 001f 	and.w	r0, r0, #31
 800222c:	fa02 f000 	lsl.w	r0, r2, r0
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_NVIC_DisableIRQ+0x24>)
 8002232:	3320      	adds	r3, #32
 8002234:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800223c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100

08002248 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	3801      	subs	r0, #1
 800224a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800224e:	d20b      	bcs.n	8002268 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002250:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	21f0      	movs	r1, #240	; 0xf0
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002258:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002260:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002262:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002264:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002266:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002268:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002270:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002272:	b348      	cbz	r0, 80022c8 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002274:	2214      	movs	r2, #20
 8002276:	6801      	ldr	r1, [r0, #0]
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_DMA_Init+0x5c>)
 800227a:	440b      	add	r3, r1
 800227c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_DMA_Init+0x60>)
 8002286:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	2302      	movs	r3, #2
 800228a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800228e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8002292:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002294:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8002296:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002298:	4323      	orrs	r3, r4
 800229a:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800229c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a2:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022a4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	4323      	orrs	r3, r4
 80022aa:	6984      	ldr	r4, [r0, #24]
 80022ac:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ae:	69c4      	ldr	r4, [r0, #28]
 80022b0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80022b2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022b4:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022b6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022bc:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80022c0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 80022c4:	4618      	mov	r0, r3
}
 80022c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022c8:	2001      	movs	r0, #1
 80022ca:	e7fc      	b.n	80022c6 <HAL_DMA_Init+0x56>
 80022cc:	bffdfff8 	.word	0xbffdfff8
 80022d0:	40020000 	.word	0x40020000

080022d4 <HAL_DMA_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022d4:	4603      	mov	r3, r0
{
 80022d6:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80022d8:	b300      	cbz	r0, 800231c <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80022da:	6801      	ldr	r1, [r0, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80022dc:	2000      	movs	r0, #0
  __HAL_DMA_DISABLE(hdma);
 80022de:	680a      	ldr	r2, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
 80022e0:	4c0f      	ldr	r4, [pc, #60]	; (8002320 <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	600a      	str	r2, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_DMA_DeInit+0x50>)
  hdma->Instance->CCR  = 0U;
 80022ea:	6008      	str	r0, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022ec:	440a      	add	r2, r1
  hdma->Instance->CNDTR = 0U;
 80022ee:	6048      	str	r0, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 80022f0:	6088      	str	r0, [r1, #8]
  hdma->Instance->CMAR = 0U;
 80022f2:	60c8      	str	r0, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022f4:	2114      	movs	r1, #20
 80022f6:	fbb2 f2f1 	udiv	r2, r2, r1
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80022fa:	2101      	movs	r1, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8002304:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8002306:	6062      	str	r2, [r4, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
  hdma->XferHalfCpltCallback = NULL;
 8002308:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;
 800230c:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002310:	6398      	str	r0, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002312:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8002316:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

  return HAL_OK;
}
 800231a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800231c:	2001      	movs	r0, #1
 800231e:	e7fc      	b.n	800231a <HAL_DMA_DeInit+0x46>
 8002320:	40020000 	.word	0x40020000
 8002324:	bffdfff8 	.word	0xbffdfff8

08002328 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800232a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800232e:	2c01      	cmp	r4, #1
 8002330:	d034      	beq.n	800239c <HAL_DMA_Start_IT+0x74>
 8002332:	2401      	movs	r4, #1
 8002334:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002338:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 800233c:	2600      	movs	r6, #0
 800233e:	2c01      	cmp	r4, #1
 8002340:	b2e5      	uxtb	r5, r4
 8002342:	f04f 0402 	mov.w	r4, #2
 8002346:	d127      	bne.n	8002398 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002348:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800234c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002350:	6826      	ldr	r6, [r4, #0]
 8002352:	f026 0601 	bic.w	r6, r6, #1
 8002356:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002358:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 800235c:	40bd      	lsls	r5, r7
 800235e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002360:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002362:	6843      	ldr	r3, [r0, #4]
 8002364:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002366:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002368:	bf0b      	itete	eq
 800236a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800236c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800236e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002370:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002372:	b14b      	cbz	r3, 8002388 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800237a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800237c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6023      	str	r3, [r4, #0]
}
 8002386:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	f023 0304 	bic.w	r3, r3, #4
 800238e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	f043 030a 	orr.w	r3, r3, #10
 8002396:	e7f0      	b.n	800237a <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8002398:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800239c:	2002      	movs	r0, #2
 800239e:	e7f2      	b.n	8002386 <HAL_DMA_Start_IT+0x5e>

080023a0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d006      	beq.n	80023b6 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a8:	2304      	movs	r3, #4
 80023aa:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80023ac:	2300      	movs	r3, #0
 80023ae:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80023b2:	2001      	movs	r0, #1
 80023b4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023b8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f022 020e 	bic.w	r2, r2, #14
 80023c0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023ca:	2201      	movs	r2, #1
 80023cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hdma);      
 80023d4:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80023d6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80023da:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 80023de:	4618      	mov	r0, r3
}
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_DMA_Abort_IT>:
{  
 80023e4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023e6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d003      	beq.n	80023f6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ee:	2304      	movs	r3, #4
 80023f0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80023f2:	2001      	movs	r0, #1
}
 80023f4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f6:	6803      	ldr	r3, [r0, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f022 020e 	bic.w	r2, r2, #14
 80023fe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_DMA_Abort_IT+0x88>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01f      	beq.n	800244e <HAL_DMA_Abort_IT+0x6a>
 800240e:	3214      	adds	r2, #20
 8002410:	4293      	cmp	r3, r2
 8002412:	d01e      	beq.n	8002452 <HAL_DMA_Abort_IT+0x6e>
 8002414:	3214      	adds	r2, #20
 8002416:	4293      	cmp	r3, r2
 8002418:	d01d      	beq.n	8002456 <HAL_DMA_Abort_IT+0x72>
 800241a:	3214      	adds	r2, #20
 800241c:	4293      	cmp	r3, r2
 800241e:	d01d      	beq.n	800245c <HAL_DMA_Abort_IT+0x78>
 8002420:	3214      	adds	r2, #20
 8002422:	4293      	cmp	r3, r2
 8002424:	d01d      	beq.n	8002462 <HAL_DMA_Abort_IT+0x7e>
 8002426:	3214      	adds	r2, #20
 8002428:	4293      	cmp	r3, r2
 800242a:	bf0c      	ite	eq
 800242c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002430:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002436:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002438:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800243a:	2301      	movs	r3, #1
 800243c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002440:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002442:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002446:	b17b      	cbz	r3, 8002468 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002448:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	4620      	mov	r0, r4
 800244c:	e7d2      	b.n	80023f4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800244e:	2301      	movs	r3, #1
 8002450:	e7f0      	b.n	8002434 <HAL_DMA_Abort_IT+0x50>
 8002452:	2310      	movs	r3, #16
 8002454:	e7ee      	b.n	8002434 <HAL_DMA_Abort_IT+0x50>
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	e7eb      	b.n	8002434 <HAL_DMA_Abort_IT+0x50>
 800245c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002460:	e7e8      	b.n	8002434 <HAL_DMA_Abort_IT+0x50>
 8002462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002466:	e7e5      	b.n	8002434 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	4618      	mov	r0, r3
 800246a:	e7c3      	b.n	80023f4 <HAL_DMA_Abort_IT+0x10>
 800246c:	40020008 	.word	0x40020008
 8002470:	40020000 	.word	0x40020000

08002474 <HAL_DMA_IRQHandler>:
{
 8002474:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002476:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002478:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800247a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800247c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800247e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002480:	4095      	lsls	r5, r2
 8002482:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002484:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002486:	d032      	beq.n	80024ee <HAL_DMA_IRQHandler+0x7a>
 8002488:	074d      	lsls	r5, r1, #29
 800248a:	d530      	bpl.n	80024ee <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002490:	bf5e      	ittt	pl
 8002492:	681a      	ldrpl	r2, [r3, #0]
 8002494:	f022 0204 	bicpl.w	r2, r2, #4
 8002498:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800249a:	4a3e      	ldr	r2, [pc, #248]	; (8002594 <HAL_DMA_IRQHandler+0x120>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d019      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x60>
 80024a0:	3214      	adds	r2, #20
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d018      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x64>
 80024a6:	3214      	adds	r2, #20
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d017      	beq.n	80024dc <HAL_DMA_IRQHandler+0x68>
 80024ac:	3214      	adds	r2, #20
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d017      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x6e>
 80024b2:	3214      	adds	r2, #20
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d017      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x74>
 80024b8:	3214      	adds	r2, #20
 80024ba:	4293      	cmp	r3, r2
 80024bc:	bf0c      	ite	eq
 80024be:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80024c2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80024c6:	4a34      	ldr	r2, [pc, #208]	; (8002598 <HAL_DMA_IRQHandler+0x124>)
 80024c8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80024ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05e      	beq.n	800258e <HAL_DMA_IRQHandler+0x11a>
}
 80024d0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80024d2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024d4:	2304      	movs	r3, #4
 80024d6:	e7f6      	b.n	80024c6 <HAL_DMA_IRQHandler+0x52>
 80024d8:	2340      	movs	r3, #64	; 0x40
 80024da:	e7f4      	b.n	80024c6 <HAL_DMA_IRQHandler+0x52>
 80024dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e0:	e7f1      	b.n	80024c6 <HAL_DMA_IRQHandler+0x52>
 80024e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024e6:	e7ee      	b.n	80024c6 <HAL_DMA_IRQHandler+0x52>
 80024e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024ec:	e7eb      	b.n	80024c6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024ee:	2502      	movs	r5, #2
 80024f0:	4095      	lsls	r5, r2
 80024f2:	4225      	tst	r5, r4
 80024f4:	d035      	beq.n	8002562 <HAL_DMA_IRQHandler+0xee>
 80024f6:	078d      	lsls	r5, r1, #30
 80024f8:	d533      	bpl.n	8002562 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	0694      	lsls	r4, r2, #26
 80024fe:	d406      	bmi.n	800250e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	f022 020a 	bic.w	r2, r2, #10
 8002506:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002508:	2201      	movs	r2, #1
 800250a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <HAL_DMA_IRQHandler+0x120>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d019      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd4>
 8002514:	3214      	adds	r2, #20
 8002516:	4293      	cmp	r3, r2
 8002518:	d018      	beq.n	800254c <HAL_DMA_IRQHandler+0xd8>
 800251a:	3214      	adds	r2, #20
 800251c:	4293      	cmp	r3, r2
 800251e:	d017      	beq.n	8002550 <HAL_DMA_IRQHandler+0xdc>
 8002520:	3214      	adds	r2, #20
 8002522:	4293      	cmp	r3, r2
 8002524:	d017      	beq.n	8002556 <HAL_DMA_IRQHandler+0xe2>
 8002526:	3214      	adds	r2, #20
 8002528:	4293      	cmp	r3, r2
 800252a:	d017      	beq.n	800255c <HAL_DMA_IRQHandler+0xe8>
 800252c:	3214      	adds	r2, #20
 800252e:	4293      	cmp	r3, r2
 8002530:	bf0c      	ite	eq
 8002532:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002536:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <HAL_DMA_IRQHandler+0x124>)
 800253c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800253e:	2300      	movs	r3, #0
 8002540:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002544:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002546:	e7c1      	b.n	80024cc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002548:	2302      	movs	r3, #2
 800254a:	e7f6      	b.n	800253a <HAL_DMA_IRQHandler+0xc6>
 800254c:	2320      	movs	r3, #32
 800254e:	e7f4      	b.n	800253a <HAL_DMA_IRQHandler+0xc6>
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	e7f1      	b.n	800253a <HAL_DMA_IRQHandler+0xc6>
 8002556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255a:	e7ee      	b.n	800253a <HAL_DMA_IRQHandler+0xc6>
 800255c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002560:	e7eb      	b.n	800253a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002562:	2508      	movs	r5, #8
 8002564:	4095      	lsls	r5, r2
 8002566:	4225      	tst	r5, r4
 8002568:	d011      	beq.n	800258e <HAL_DMA_IRQHandler+0x11a>
 800256a:	0709      	lsls	r1, r1, #28
 800256c:	d50f      	bpl.n	800258e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	f021 010e 	bic.w	r1, r1, #14
 8002574:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002576:	2301      	movs	r3, #1
 8002578:	fa03 f202 	lsl.w	r2, r3, r2
 800257c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800257e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002580:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002584:	2300      	movs	r3, #0
 8002586:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800258a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800258c:	e79e      	b.n	80024cc <HAL_DMA_IRQHandler+0x58>
}
 800258e:	bc70      	pop	{r4, r5, r6}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40020008 	.word	0x40020008
 8002598:	40020000 	.word	0x40020000

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025a0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80025a2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a4:	4f64      	ldr	r7, [pc, #400]	; (8002738 <HAL_GPIO_Init+0x19c>)
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80025a8:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002740 <HAL_GPIO_Init+0x1a4>
 80025ac:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002744 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b0:	680d      	ldr	r5, [r1, #0]
 80025b2:	fa35 f406 	lsrs.w	r4, r5, r6
 80025b6:	d102      	bne.n	80025be <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80025b8:	b003      	add	sp, #12
 80025ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80025be:	f04f 0801 	mov.w	r8, #1
 80025c2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80025ca:	ea38 0505 	bics.w	r5, r8, r5
 80025ce:	d17b      	bne.n	80026c8 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80025d0:	684d      	ldr	r5, [r1, #4]
 80025d2:	2d03      	cmp	r5, #3
 80025d4:	d807      	bhi.n	80025e6 <HAL_GPIO_Init+0x4a>
 80025d6:	3d01      	subs	r5, #1
 80025d8:	2d02      	cmp	r5, #2
 80025da:	f200 8088 	bhi.w	80026ee <HAL_GPIO_Init+0x152>
 80025de:	e8df f005 	tbb	[pc, r5]
 80025e2:	9b96      	.short	0x9b96
 80025e4:	a1          	.byte	0xa1
 80025e5:	00          	.byte	0x00
 80025e6:	2d12      	cmp	r5, #18
 80025e8:	f000 8099 	beq.w	800271e <HAL_GPIO_Init+0x182>
 80025ec:	d86e      	bhi.n	80026cc <HAL_GPIO_Init+0x130>
 80025ee:	2d11      	cmp	r5, #17
 80025f0:	f000 808f 	beq.w	8002712 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025f4:	2cff      	cmp	r4, #255	; 0xff
 80025f6:	bf98      	it	ls
 80025f8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025fa:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025fe:	bf88      	it	hi
 8002600:	f100 0a04 	addhi.w	sl, r0, #4
 8002604:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002608:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800260c:	bf88      	it	hi
 800260e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002610:	fa09 fb05 	lsl.w	fp, r9, r5
 8002614:	ea28 080b 	bic.w	r8, r8, fp
 8002618:	fa02 f505 	lsl.w	r5, r2, r5
 800261c:	ea48 0505 	orr.w	r5, r8, r5
 8002620:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002624:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002628:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800262c:	d04c      	beq.n	80026c8 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800262e:	69bd      	ldr	r5, [r7, #24]
 8002630:	f026 0803 	bic.w	r8, r6, #3
 8002634:	f045 0501 	orr.w	r5, r5, #1
 8002638:	61bd      	str	r5, [r7, #24]
 800263a:	69bd      	ldr	r5, [r7, #24]
 800263c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002640:	f005 0501 	and.w	r5, r5, #1
 8002644:	9501      	str	r5, [sp, #4]
 8002646:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800264a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800264e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002650:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002654:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002658:	fa09 f90b 	lsl.w	r9, r9, fp
 800265c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002660:	4d39      	ldr	r5, [pc, #228]	; (8002748 <HAL_GPIO_Init+0x1ac>)
 8002662:	42a8      	cmp	r0, r5
 8002664:	d062      	beq.n	800272c <HAL_GPIO_Init+0x190>
 8002666:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800266a:	42a8      	cmp	r0, r5
 800266c:	d060      	beq.n	8002730 <HAL_GPIO_Init+0x194>
 800266e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002672:	42a8      	cmp	r0, r5
 8002674:	d05e      	beq.n	8002734 <HAL_GPIO_Init+0x198>
 8002676:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800267a:	42a8      	cmp	r0, r5
 800267c:	bf0c      	ite	eq
 800267e:	2503      	moveq	r5, #3
 8002680:	2504      	movne	r5, #4
 8002682:	fa05 f50b 	lsl.w	r5, r5, fp
 8002686:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800268a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800268e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002690:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002694:	bf14      	ite	ne
 8002696:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002698:	43a5      	biceq	r5, r4
 800269a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800269c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800269e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80026a2:	bf14      	ite	ne
 80026a4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026a6:	43a5      	biceq	r5, r4
 80026a8:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80026aa:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ac:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80026b0:	bf14      	ite	ne
 80026b2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026b4:	43a5      	biceq	r5, r4
 80026b6:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80026b8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ba:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80026be:	bf14      	ite	ne
 80026c0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026c2:	ea25 0404 	biceq.w	r4, r5, r4
 80026c6:	601c      	str	r4, [r3, #0]
	position++;
 80026c8:	3601      	adds	r6, #1
 80026ca:	e771      	b.n	80025b0 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80026cc:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800274c <HAL_GPIO_Init+0x1b0>
 80026d0:	454d      	cmp	r5, r9
 80026d2:	d00c      	beq.n	80026ee <HAL_GPIO_Init+0x152>
 80026d4:	d817      	bhi.n	8002706 <HAL_GPIO_Init+0x16a>
 80026d6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80026da:	454d      	cmp	r5, r9
 80026dc:	d007      	beq.n	80026ee <HAL_GPIO_Init+0x152>
 80026de:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80026e2:	454d      	cmp	r5, r9
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x152>
 80026e6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80026ea:	454d      	cmp	r5, r9
 80026ec:	d182      	bne.n	80025f4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ee:	688a      	ldr	r2, [r1, #8]
 80026f0:	b1d2      	cbz	r2, 8002728 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026f2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80026f4:	bf08      	it	eq
 80026f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026fa:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80026fe:	bf18      	it	ne
 8002700:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002704:	e776      	b.n	80025f4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002706:	4565      	cmp	r5, ip
 8002708:	d0f1      	beq.n	80026ee <HAL_GPIO_Init+0x152>
 800270a:	4575      	cmp	r5, lr
 800270c:	e7ee      	b.n	80026ec <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800270e:	68ca      	ldr	r2, [r1, #12]
          break;
 8002710:	e770      	b.n	80025f4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002712:	68ca      	ldr	r2, [r1, #12]
 8002714:	3204      	adds	r2, #4
          break;
 8002716:	e76d      	b.n	80025f4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002718:	68ca      	ldr	r2, [r1, #12]
 800271a:	3208      	adds	r2, #8
          break;
 800271c:	e76a      	b.n	80025f4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800271e:	68ca      	ldr	r2, [r1, #12]
 8002720:	320c      	adds	r2, #12
          break;
 8002722:	e767      	b.n	80025f4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002724:	2200      	movs	r2, #0
 8002726:	e765      	b.n	80025f4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002728:	2204      	movs	r2, #4
 800272a:	e763      	b.n	80025f4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800272c:	2500      	movs	r5, #0
 800272e:	e7a8      	b.n	8002682 <HAL_GPIO_Init+0xe6>
 8002730:	2501      	movs	r5, #1
 8002732:	e7a6      	b.n	8002682 <HAL_GPIO_Init+0xe6>
 8002734:	2502      	movs	r5, #2
 8002736:	e7a4      	b.n	8002682 <HAL_GPIO_Init+0xe6>
 8002738:	40021000 	.word	0x40021000
 800273c:	40010400 	.word	0x40010400
 8002740:	10310000 	.word	0x10310000
 8002744:	10320000 	.word	0x10320000
 8002748:	40010800 	.word	0x40010800
 800274c:	10220000 	.word	0x10220000

08002750 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002754:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8002758:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 800275a:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800275e:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002762:	eb00 030b 	add.w	r3, r0, fp
 8002766:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 800276a:	fa31 f402 	lsrs.w	r4, r1, r2
 800276e:	d102      	bne.n	8002776 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8002770:	b003      	add	sp, #12
 8002772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002776:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 800277a:	400f      	ands	r7, r1
 800277c:	d049      	beq.n	8002812 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 800277e:	f022 0403 	bic.w	r4, r2, #3
 8002782:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002786:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800278a:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 800278e:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002790:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002794:	fa08 f90c 	lsl.w	r9, r8, ip
 8002798:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800279c:	4d22      	ldr	r5, [pc, #136]	; (8002828 <HAL_GPIO_DeInit+0xd8>)
 800279e:	42a8      	cmp	r0, r5
 80027a0:	d039      	beq.n	8002816 <HAL_GPIO_DeInit+0xc6>
 80027a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027a6:	42a8      	cmp	r0, r5
 80027a8:	d037      	beq.n	800281a <HAL_GPIO_DeInit+0xca>
 80027aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027ae:	42a8      	cmp	r0, r5
 80027b0:	d035      	beq.n	800281e <HAL_GPIO_DeInit+0xce>
 80027b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027b6:	42a8      	cmp	r0, r5
 80027b8:	bf0c      	ite	eq
 80027ba:	2503      	moveq	r5, #3
 80027bc:	2504      	movne	r5, #4
 80027be:	fa05 f50c 	lsl.w	r5, r5, ip
 80027c2:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80027c4:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80027c8:	d10f      	bne.n	80027ea <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80027ca:	681d      	ldr	r5, [r3, #0]
 80027cc:	4035      	ands	r5, r6
 80027ce:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80027d0:	685d      	ldr	r5, [r3, #4]
 80027d2:	4035      	ands	r5, r6
 80027d4:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80027d6:	68dd      	ldr	r5, [r3, #12]
 80027d8:	4035      	ands	r5, r6
 80027da:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80027dc:	689d      	ldr	r5, [r3, #8]
 80027de:	4035      	ands	r5, r6
 80027e0:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80027e2:	68a5      	ldr	r5, [r4, #8]
 80027e4:	ea25 0509 	bic.w	r5, r5, r9
 80027e8:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027ea:	2fff      	cmp	r7, #255	; 0xff
 80027ec:	bf94      	ite	ls
 80027ee:	4607      	movls	r7, r0
 80027f0:	9f01      	ldrhi	r7, [sp, #4]
 80027f2:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80027f6:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027f8:	bf88      	it	hi
 80027fa:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80027fc:	fa08 fc04 	lsl.w	ip, r8, r4
 8002800:	ea25 050c 	bic.w	r5, r5, ip
 8002804:	fa0b f404 	lsl.w	r4, fp, r4
 8002808:	4325      	orrs	r5, r4
 800280a:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800280c:	68c4      	ldr	r4, [r0, #12]
 800280e:	4026      	ands	r6, r4
 8002810:	60c6      	str	r6, [r0, #12]
    position++;
 8002812:	3201      	adds	r2, #1
 8002814:	e7a9      	b.n	800276a <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002816:	2500      	movs	r5, #0
 8002818:	e7d1      	b.n	80027be <HAL_GPIO_DeInit+0x6e>
 800281a:	2501      	movs	r5, #1
 800281c:	e7cf      	b.n	80027be <HAL_GPIO_DeInit+0x6e>
 800281e:	2502      	movs	r5, #2
 8002820:	e7cd      	b.n	80027be <HAL_GPIO_DeInit+0x6e>
 8002822:	bf00      	nop
 8002824:	40010400 	.word	0x40010400
 8002828:	40010800 	.word	0x40010800

0800282c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800282c:	6883      	ldr	r3, [r0, #8]
 800282e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002830:	bf14      	ite	ne
 8002832:	2001      	movne	r0, #1
 8002834:	2000      	moveq	r0, #0
 8002836:	4770      	bx	lr

08002838 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002838:	b10a      	cbz	r2, 800283e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800283a:	6101      	str	r1, [r0, #16]
  }
}
 800283c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800283e:	0409      	lsls	r1, r1, #16
 8002840:	e7fb      	b.n	800283a <HAL_GPIO_WritePin+0x2>

08002842 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002842:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002844:	ea01 0203 	and.w	r2, r1, r3
 8002848:	ea21 0103 	bic.w	r1, r1, r3
 800284c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002850:	6101      	str	r1, [r0, #16]
}
 8002852:	4770      	bx	lr

08002854 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002854:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002856:	4604      	mov	r4, r0
{
 8002858:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800285a:	b310      	cbz	r0, 80028a2 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800285c:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002860:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002864:	b91b      	cbnz	r3, 800286e <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002866:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800286a:	f003 fb37 	bl	8005edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800286e:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002870:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002872:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002874:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002878:	f855 0b10 	ldr.w	r0, [r5], #16
 800287c:	f001 ff5f 	bl	800473e <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002882:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	1d27      	adds	r7, r4, #4
 8002888:	6033      	str	r3, [r6, #0]
 800288a:	4626      	mov	r6, r4
 800288c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002890:	f856 0b10 	ldr.w	r0, [r6], #16
 8002894:	f001 ff43 	bl	800471e <USB_CoreInit>
 8002898:	4605      	mov	r5, r0
 800289a:	b120      	cbz	r0, 80028a6 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800289c:	2302      	movs	r3, #2
 800289e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80028a2:	2501      	movs	r5, #1
 80028a4:	e04b      	b.n	800293e <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028a6:	4601      	mov	r1, r0
 80028a8:	6820      	ldr	r0, [r4, #0]
 80028aa:	f001 ff52 	bl	8004752 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ae:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028b0:	f04f 0e01 	mov.w	lr, #1
 80028b4:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028b6:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b8:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80028bc:	b2c8      	uxtb	r0, r1
 80028be:	4584      	cmp	ip, r0
 80028c0:	f101 0101 	add.w	r1, r1, #1
 80028c4:	d81b      	bhi.n	80028fe <HAL_PCD_Init+0xaa>
 80028c6:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028c8:	2528      	movs	r5, #40	; 0x28
 80028ca:	4619      	mov	r1, r3
 80028cc:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ce:	4584      	cmp	ip, r0
 80028d0:	f103 0301 	add.w	r3, r3, #1
 80028d4:	d81f      	bhi.n	8002916 <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d6:	46ec      	mov	ip, sp
 80028d8:	4635      	mov	r5, r6
 80028da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	f8cc 3000 	str.w	r3, [ip]
 80028e6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80028ea:	6820      	ldr	r0, [r4, #0]
 80028ec:	f001 ff33 	bl	8004756 <USB_DevInit>
 80028f0:	2301      	movs	r3, #1
 80028f2:	4605      	mov	r5, r0
 80028f4:	b1e0      	cbz	r0, 8002930 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028f6:	2202      	movs	r2, #2
 80028f8:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80028fc:	e7d1      	b.n	80028a2 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80028fe:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002902:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8002906:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800290a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800290e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002914:	e7d2      	b.n	80028bc <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8002916:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800291a:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800291e:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8002922:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002926:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800292a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292e:	e7cd      	b.n	80028cc <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8002930:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8002934:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002936:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800293a:	f002 f9c5 	bl	8004cc8 <USB_DevDisconnect>

  return HAL_OK;
}
 800293e:	4628      	mov	r0, r5
 8002940:	b007      	add	sp, #28
 8002942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002944 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002944:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002946:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 800294a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800294c:	2b01      	cmp	r3, #1
 800294e:	d010      	beq.n	8002972 <HAL_PCD_Start+0x2e>
 8002950:	2501      	movs	r5, #1
 8002952:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002956:	6800      	ldr	r0, [r0, #0]
 8002958:	f001 fee8 	bl	800472c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800295c:	4629      	mov	r1, r5
 800295e:	4620      	mov	r0, r4
 8002960:	f003 fbc7 	bl	80060f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002964:	6820      	ldr	r0, [r4, #0]
 8002966:	f002 f9ad 	bl	8004cc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800296a:	2000      	movs	r0, #0
 800296c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002970:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002972:	2002      	movs	r0, #2
 8002974:	e7fc      	b.n	8002970 <HAL_PCD_Start+0x2c>

08002976 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002976:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002978:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 800297c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800297e:	2a01      	cmp	r2, #1
 8002980:	d00b      	beq.n	800299a <HAL_PCD_SetAddress+0x24>
 8002982:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8002984:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8002988:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800298c:	6800      	ldr	r0, [r0, #0]
 800298e:	f002 f993 	bl	8004cb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002992:	2000      	movs	r0, #0
 8002994:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002998:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800299a:	2002      	movs	r0, #2
 800299c:	e7fc      	b.n	8002998 <HAL_PCD_SetAddress+0x22>
	...

080029a0 <HAL_PCD_IRQHandler>:
{
 80029a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a4:	4604      	mov	r4, r0
 80029a6:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80029a8:	6800      	ldr	r0, [r0, #0]
 80029aa:	f002 f98f 	bl	8004ccc <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80029ae:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 80029b2:	f000 8428 	beq.w	8003206 <HAL_PCD_IRQHandler+0x866>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029b6:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8002cd8 <HAL_PCD_IRQHandler+0x338>
 80029ba:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8002cdc <HAL_PCD_IRQHandler+0x33c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029be:	6820      	ldr	r0, [r4, #0]
 80029c0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80029c4:	041f      	lsls	r7, r3, #16
 80029c6:	d402      	bmi.n	80029ce <HAL_PCD_IRQHandler+0x2e>
}
 80029c8:	b005      	add	sp, #20
 80029ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80029ce:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 80029d2:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 80029d4:	f016 060f 	ands.w	r6, r6, #15
 80029d8:	f040 80c6 	bne.w	8002b68 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029dc:	f011 0110 	ands.w	r1, r1, #16
 80029e0:	d12b      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029e2:	8803      	ldrh	r3, [r0, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	ea03 0309 	and.w	r3, r3, r9
 80029ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ee:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80029f4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002a02:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8002a06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0c:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002a0e:	4413      	add	r3, r2
 8002a10:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a12:	4620      	mov	r0, r4
 8002a14:	f003 fa91 	bl	8005f3a <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a18:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ce      	beq.n	80029be <HAL_PCD_IRQHandler+0x1e>
 8002a20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a22:	2a00      	cmp	r2, #0
 8002a24:	d1cb      	bne.n	80029be <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a26:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002a2a:	6821      	ldr	r1, [r4, #0]
 8002a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a30:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a34:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002a38:	e7c1      	b.n	80029be <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a3a:	8805      	ldrh	r5, [r0, #0]
 8002a3c:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a3e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8002a42:	d021      	beq.n	8002a88 <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a44:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a48:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a56:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a5a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a62:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a66:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002a6a:	f002 fb7d 	bl	8005168 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a6e:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002a70:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a72:	8813      	ldrh	r3, [r2, #0]
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	051b      	lsls	r3, r3, #20
 8002a7a:	0d1b      	lsrs	r3, r3, #20
 8002a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a80:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002a82:	f003 fa4b 	bl	8005f1c <HAL_PCD_SetupStageCallback>
 8002a86:	e79a      	b.n	80029be <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a88:	0419      	lsls	r1, r3, #16
 8002a8a:	d598      	bpl.n	80029be <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a8c:	8803      	ldrh	r3, [r0, #0]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a92:	051b      	lsls	r3, r3, #20
 8002a94:	0d1b      	lsrs	r3, r3, #20
 8002a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a9c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002aa0:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002aaa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002aae:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab6:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002aba:	b18b      	cbz	r3, 8002ae0 <HAL_PCD_IRQHandler+0x140>
 8002abc:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002ac0:	b171      	cbz	r1, 8002ae0 <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ac2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002ac6:	f002 fb4f 	bl	8005168 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002ace:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ad2:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002ad4:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ad6:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8002ad8:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002adc:	f003 fa24 	bl	8005f28 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ae0:	6821      	ldr	r1, [r4, #0]
 8002ae2:	880a      	ldrh	r2, [r1, #0]
 8002ae4:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002ae6:	0512      	lsls	r2, r2, #20
 8002ae8:	f53f af69 	bmi.w	80029be <HAL_PCD_IRQHandler+0x1e>
 8002aec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002af0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002af4:	f43f af63 	beq.w	80029be <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002af8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002afc:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	5ac2      	ldrh	r2, [r0, r3]
 8002b04:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8002b08:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002b0c:	2d3e      	cmp	r5, #62	; 0x3e
 8002b0e:	52c2      	strh	r2, [r0, r3]
 8002b10:	d90c      	bls.n	8002b2c <HAL_PCD_IRQHandler+0x18c>
 8002b12:	5ac2      	ldrh	r2, [r0, r3]
 8002b14:	096e      	lsrs	r6, r5, #5
 8002b16:	06ef      	lsls	r7, r5, #27
 8002b18:	bf08      	it	eq
 8002b1a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002b24:	ea42 0208 	orr.w	r2, r2, r8
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	e004      	b.n	8002b36 <HAL_PCD_IRQHandler+0x196>
 8002b2c:	b99d      	cbnz	r5, 8002b56 <HAL_PCD_IRQHandler+0x1b6>
 8002b2e:	5ac2      	ldrh	r2, [r0, r3]
 8002b30:	b292      	uxth	r2, r2
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b36:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b38:	880b      	ldrh	r3, [r1, #0]
 8002b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b52:	800b      	strh	r3, [r1, #0]
 8002b54:	e733      	b.n	80029be <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b56:	5ac2      	ldrh	r2, [r0, r3]
 8002b58:	086e      	lsrs	r6, r5, #1
 8002b5a:	07ed      	lsls	r5, r5, #31
 8002b5c:	bf48      	it	mi
 8002b5e:	3601      	addmi	r6, #1
 8002b60:	b292      	uxth	r2, r2
 8002b62:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002b66:	e7df      	b.n	8002b28 <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b68:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b6c:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b6e:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b70:	f140 80f4 	bpl.w	8002d5c <HAL_PCD_IRQHandler+0x3bc>
        if (ep->doublebuffer == 0U)
 8002b74:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b76:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b7a:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	051b      	lsls	r3, r3, #20
 8002b84:	0d1b      	lsrs	r3, r3, #20
 8002b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8a:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b8e:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002b92:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8002b96:	b9b3      	cbnz	r3, 8002bc6 <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b98:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b9c:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3306      	adds	r3, #6
 8002ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ba8:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002bac:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8002bb0:	2d00      	cmp	r5, #0
 8002bb2:	f000 80b7 	beq.w	8002d24 <HAL_PCD_IRQHandler+0x384>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002bb6:	462b      	mov	r3, r5
 8002bb8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bbc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002bc0:	f002 fad2 	bl	8005168 <USB_ReadPMA>
 8002bc4:	e0ae      	b.n	8002d24 <HAL_PCD_IRQHandler+0x384>
          if (ep->type == EP_TYPE_BULK)
 8002bc6:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bca:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 8002bce:	2a02      	cmp	r2, #2
 8002bd0:	f040 8086 	bne.w	8002ce0 <HAL_PCD_IRQHandler+0x340>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bd8:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8002bdc:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be0:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002be4:	b2ad      	uxth	r5, r5
 8002be6:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bea:	d03b      	beq.n	8002c64 <HAL_PCD_IRQHandler+0x2c4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bec:	44ab      	add	fp, r5
 8002bee:	f10b 0b02 	add.w	fp, fp, #2
 8002bf2:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 8002bf6:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 8002bfa:	4295      	cmp	r5, r2
 8002bfc:	d913      	bls.n	8002c26 <HAL_PCD_IRQHandler+0x286>
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c04:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c10:	0412      	lsls	r2, r2, #16
 8002c12:	0c12      	lsrs	r2, r2, #16
 8002c14:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c20:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002c24:	e004      	b.n	8002c30 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 8002c26:	1b52      	subs	r2, r2, r5
 8002c28:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	d0e9      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x264>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c30:	f1be 0f00 	cmp.w	lr, #0
 8002c34:	d00d      	beq.n	8002c52 <HAL_PCD_IRQHandler+0x2b2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c3a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002c3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c42:	0412      	lsls	r2, r2, #16
 8002c44:	0c12      	lsrs	r2, r2, #16
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002c4e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d066      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c56:	2128      	movs	r1, #40	; 0x28
 8002c58:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002c62:	e7ab      	b.n	8002bbc <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c64:	445d      	add	r5, fp
 8002c66:	3506      	adds	r5, #6
 8002c68:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002c6c:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002c70:	4295      	cmp	r5, r2
 8002c72:	d912      	bls.n	8002c9a <HAL_PCD_IRQHandler+0x2fa>
 8002c74:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c78:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c84:	0412      	lsls	r2, r2, #16
 8002c86:	0c12      	lsrs	r2, r2, #16
 8002c88:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002c8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c94:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002c98:	e004      	b.n	8002ca4 <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 8002c9a:	1b52      	subs	r2, r2, r5
 8002c9c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002ca0:	2a00      	cmp	r2, #0
 8002ca2:	d0e9      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x2d8>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ca4:	f1be 0f00 	cmp.w	lr, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x326>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002caa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002cae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002cb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cb6:	0412      	lsls	r2, r2, #16
 8002cb8:	0c12      	lsrs	r2, r2, #16
 8002cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cbe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002cc2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8002cc6:	b36d      	cbz	r5, 8002d24 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cc8:	2128      	movs	r1, #40	; 0x28
 8002cca:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cce:	462b      	mov	r3, r5
 8002cd0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002cd4:	e772      	b.n	8002bbc <HAL_PCD_IRQHandler+0x21c>
 8002cd6:	bf00      	nop
 8002cd8:	ffff8f0f 	.word	0xffff8f0f
 8002cdc:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ce0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ce4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002ce8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cec:	0412      	lsls	r2, r2, #16
 8002cee:	0c12      	lsrs	r2, r2, #16
 8002cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002cf8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002cfc:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8002d00:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002d04:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002d08:	ea4f 02c3 	mov.w	r2, r3, lsl #3
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d10:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d12:	d056      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x422>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d14:	3302      	adds	r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002d1c:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002d20:	2d00      	cmp	r5, #0
 8002d22:	d19b      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x2bc>
        ep->xfer_count += count;
 8002d24:	2128      	movs	r1, #40	; 0x28
 8002d26:	4371      	muls	r1, r6
 8002d28:	1863      	adds	r3, r4, r1
 8002d2a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002d2e:	442a      	add	r2, r5
 8002d30:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002d34:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002d38:	442a      	add	r2, r5
 8002d3a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d3e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002d42:	b11a      	cbz	r2, 8002d4c <HAL_PCD_IRQHandler+0x3ac>
 8002d44:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002d48:	429d      	cmp	r5, r3
 8002d4a:	d243      	bcs.n	8002dd4 <HAL_PCD_IRQHandler+0x434>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d4c:	2328      	movs	r3, #40	; 0x28
 8002d4e:	fb03 4306 	mla	r3, r3, r6, r4
 8002d52:	4620      	mov	r0, r4
 8002d54:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002d58:	f003 f8e6 	bl	8005f28 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d5c:	063b      	lsls	r3, r7, #24
 8002d5e:	f57f ae2e 	bpl.w	80029be <HAL_PCD_IRQHandler+0x1e>
 8002d62:	f04f 0c28 	mov.w	ip, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	fb0c 4506 	mla	r5, ip, r6, r4
 8002d6c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	ea03 0309 	and.w	r3, r3, r9
 8002d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7a:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8002d7e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d150      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8002d86:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 8002d88:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8002d8c:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8002d8e:	b393      	cbz	r3, 8002df6 <HAL_PCD_IRQHandler+0x456>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d90:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002d94:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002d98:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002d9c:	d031      	beq.n	8002e02 <HAL_PCD_IRQHandler+0x462>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d9e:	bb02      	cbnz	r2, 8002de2 <HAL_PCD_IRQHandler+0x442>
 8002da0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	b292      	uxth	r2, r2
 8002da8:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dac:	4410      	add	r0, r2
 8002dae:	5a1a      	ldrh	r2, [r3, r0]
 8002db0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002db4:	521a      	strh	r2, [r3, r0]
 8002db6:	5a1a      	ldrh	r2, [r3, r0]
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dbe:	521a      	strh	r2, [r3, r0]
 8002dc0:	e019      	b.n	8002df6 <HAL_PCD_IRQHandler+0x456>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dc2:	3306      	adds	r3, #6
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002dca:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	d0a8      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x384>
 8002dd2:	e77c      	b.n	8002cce <HAL_PCD_IRQHandler+0x32e>
        ep = &hpcd->OUT_ep[epindex];
 8002dd4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dd8:	6820      	ldr	r0, [r4, #0]
 8002dda:	4421      	add	r1, r4
 8002ddc:	f001 ff8c 	bl	8004cf8 <USB_EPStartXfer>
 8002de0:	e7bc      	b.n	8002d5c <HAL_PCD_IRQHandler+0x3bc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de2:	2a01      	cmp	r2, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_PCD_IRQHandler+0x456>
 8002de6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002dea:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8002dee:	b292      	uxth	r2, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4410      	add	r0, r2
 8002df4:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002df6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f003 f89d 	bl	8005f3a <HAL_PCD_DataInStageCallback>
 8002e00:	e5dd      	b.n	80029be <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e02:	b932      	cbnz	r2, 8002e12 <HAL_PCD_IRQHandler+0x472>
 8002e04:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002e10:	e7cc      	b.n	8002dac <HAL_PCD_IRQHandler+0x40c>
 8002e12:	2a01      	cmp	r2, #1
 8002e14:	d1ef      	bne.n	8002df6 <HAL_PCD_IRQHandler+0x456>
 8002e16:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002e1a:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4410      	add	r0, r2
 8002e24:	521f      	strh	r7, [r3, r0]
 8002e26:	e7e6      	b.n	8002df6 <HAL_PCD_IRQHandler+0x456>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e28:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e2c:	f417 7280 	ands.w	r2, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8002e30:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e32:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8002e36:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e3a:	d11c      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x4d6>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e3c:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002e40:	b2bf      	uxth	r7, r7
 8002e42:	44ba      	add	sl, r7
 8002e44:	f10a 0a02 	add.w	sl, sl, #2
 8002e48:	f83e 701a 	ldrh.w	r7, [lr, sl, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8002e4c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8002e50:	429f      	cmp	r7, r3
 8002e52:	d301      	bcc.n	8002e58 <HAL_PCD_IRQHandler+0x4b8>
 8002e54:	642a      	str	r2, [r5, #64]	; 0x40
 8002e56:	e7d0      	b.n	8002dfa <HAL_PCD_IRQHandler+0x45a>
              ep->xfer_len -= TxPctSize;
 8002e58:	1bdb      	subs	r3, r3, r7
 8002e5a:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8002e5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8002e5e:	fb06 cc0c 	mla	ip, r6, ip, ip
              ep->xfer_buff += TxPctSize;
 8002e62:	443b      	add	r3, r7
 8002e64:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8002e66:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e68:	eb04 010c 	add.w	r1, r4, ip
              ep->xfer_count += TxPctSize;
 8002e6c:	443b      	add	r3, r7
 8002e6e:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e70:	f001 ff42 	bl	8004cf8 <USB_EPStartXfer>
 8002e74:	e5a3      	b.n	80029be <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e76:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e7a:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	4452      	add	r2, sl
 8002e82:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e86:	f000 80dc 	beq.w	8003042 <HAL_PCD_IRQHandler+0x6a2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e8a:	3202      	adds	r2, #2
 8002e8c:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8002e90:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 8002e94:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002e98:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8002e9a:	bf28      	it	cs
 8002e9c:	2300      	movcs	r3, #0
 8002e9e:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8002ea2:	bf38      	it	cc
 8002ea4:	1a9b      	subcc	r3, r3, r2
 8002ea6:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002eaa:	b2bf      	uxth	r7, r7
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d14d      	bne.n	8002f4c <HAL_PCD_IRQHandler+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eb0:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002eb4:	2a00      	cmp	r2, #0
 8002eb6:	d136      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x586>
 8002eb8:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002ebc:	010b      	lsls	r3, r1, #4
 8002ebe:	b2b2      	uxth	r2, r6
 8002ec0:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002ec4:	4416      	add	r6, r2
 8002ec6:	5af2      	ldrh	r2, [r6, r3]
 8002ec8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002ecc:	52f2      	strh	r2, [r6, r3]
 8002ece:	5af2      	ldrh	r2, [r6, r3]
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed6:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ed8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002edc:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	4410      	add	r0, r2
 8002ee4:	5ac2      	ldrh	r2, [r0, r3]
 8002ee6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002eea:	52c2      	strh	r2, [r0, r3]
 8002eec:	5ac2      	ldrh	r2, [r0, r3]
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef4:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f003 f81f 	bl	8005f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002efc:	2f00      	cmp	r7, #0
 8002efe:	f000 80dc 	beq.w	80030ba <HAL_PCD_IRQHandler+0x71a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f02:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	0c1b      	lsrs	r3, r3, #16
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f20:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002f24:	e0c9      	b.n	80030ba <HAL_PCD_IRQHandler+0x71a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f26:	2a01      	cmp	r2, #1
 8002f28:	d1e5      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x556>
 8002f2a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002f2e:	010a      	lsls	r2, r1, #4
 8002f30:	fa1f fc86 	uxth.w	ip, r6
 8002f34:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002f38:	4466      	add	r6, ip
 8002f3a:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f3c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002f40:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002f44:	b2b6      	uxth	r6, r6
 8002f46:	4430      	add	r0, r6
 8002f48:	5283      	strh	r3, [r0, r2]
 8002f4a:	e7d4      	b.n	8002ef6 <HAL_PCD_IRQHandler+0x556>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f4c:	b16f      	cbz	r7, 8002f6a <HAL_PCD_IRQHandler+0x5ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f4e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5a:	041b      	lsls	r3, r3, #16
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f66:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002f6a:	2728      	movs	r7, #40	; 0x28
 8002f6c:	fb07 4706 	mla	r7, r7, r6, r4
 8002f70:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	f040 80a0 	bne.w	80030ba <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_buff += TxPctSize;
 8002f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f7c:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002f80:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 8002f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8002f86:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8002f8a:	4413      	add	r3, r2
 8002f8c:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	459e      	cmp	lr, r3
 8002f92:	d32c      	bcc.n	8002fee <HAL_PCD_IRQHandler+0x64e>
          ep->xfer_len_db -= len;
 8002f94:	ebae 0203 	sub.w	r2, lr, r3
 8002f98:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f9a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002f9e:	fa1f fe83 	uxth.w	lr, r3
 8002fa2:	2a00      	cmp	r2, #0
 8002fa4:	d141      	bne.n	800302a <HAL_PCD_IRQHandler+0x68a>
 8002fa6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002faa:	f200 4704 	addw	r7, r0, #1028	; 0x404
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	443a      	add	r2, r7
 8002fb2:	0109      	lsls	r1, r1, #4
 8002fb4:	5a57      	ldrh	r7, [r2, r1]
 8002fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8002fb8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8002fbc:	5257      	strh	r7, [r2, r1]
 8002fbe:	d923      	bls.n	8003008 <HAL_PCD_IRQHandler+0x668>
 8002fc0:	06df      	lsls	r7, r3, #27
 8002fc2:	5a57      	ldrh	r7, [r2, r1]
 8002fc4:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 8002fc8:	bf08      	it	eq
 8002fca:	f10a 3aff 	addeq.w	sl, sl, #4294967295
 8002fce:	b2bf      	uxth	r7, r7
 8002fd0:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 8002fd4:	ea47 0708 	orr.w	r7, r7, r8
 8002fd8:	b2bf      	uxth	r7, r7
 8002fda:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fdc:	2128      	movs	r1, #40	; 0x28
 8002fde:	4673      	mov	r3, lr
 8002fe0:	fb01 4606 	mla	r6, r1, r6, r4
 8002fe4:	4661      	mov	r1, ip
 8002fe6:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fe8:	f001 fe76 	bl	8004cd8 <USB_WritePMA>
 8002fec:	e065      	b.n	80030ba <HAL_PCD_IRQHandler+0x71a>
        else if (ep->xfer_len_db == 0U)
 8002fee:	f1be 0f00 	cmp.w	lr, #0
 8002ff2:	d103      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x65c>
    if (ep->xfer_len > TxPctSize)
 8002ff4:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8002ff6:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 8002ffa:	e7ce      	b.n	8002f9a <HAL_PCD_IRQHandler+0x5fa>
          ep->xfer_fill_db = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
 8003004:	4673      	mov	r3, lr
 8003006:	e7c8      	b.n	8002f9a <HAL_PCD_IRQHandler+0x5fa>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003008:	b92b      	cbnz	r3, 8003016 <HAL_PCD_IRQHandler+0x676>
 800300a:	5a53      	ldrh	r3, [r2, r1]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003012:	5253      	strh	r3, [r2, r1]
 8003014:	e7e2      	b.n	8002fdc <HAL_PCD_IRQHandler+0x63c>
 8003016:	085f      	lsrs	r7, r3, #1
 8003018:	07db      	lsls	r3, r3, #31
 800301a:	5a53      	ldrh	r3, [r2, r1]
 800301c:	bf48      	it	mi
 800301e:	3701      	addmi	r7, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003026:	b29b      	uxth	r3, r3
 8003028:	e7f3      	b.n	8003012 <HAL_PCD_IRQHandler+0x672>
 800302a:	2a01      	cmp	r2, #1
 800302c:	d1d6      	bne.n	8002fdc <HAL_PCD_IRQHandler+0x63c>
 800302e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003032:	0109      	lsls	r1, r1, #4
 8003034:	b29a      	uxth	r2, r3
 8003036:	f200 4304 	addw	r3, r0, #1028	; 0x404
 800303a:	4413      	add	r3, r2
 800303c:	f823 e001 	strh.w	lr, [r3, r1]
 8003040:	e7cc      	b.n	8002fdc <HAL_PCD_IRQHandler+0x63c>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003042:	3206      	adds	r2, #6
 8003044:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003048:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 800304a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800304e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003050:	bf88      	it	hi
 8003052:	4663      	movhi	r3, ip
 8003054:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003058:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 800305c:	bf98      	it	ls
 800305e:	1a9b      	subls	r3, r3, r2
 8003060:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003064:	2b00      	cmp	r3, #0
 8003066:	d14e      	bne.n	8003106 <HAL_PCD_IRQHandler+0x766>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003068:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800306c:	2a00      	cmp	r2, #0
 800306e:	d137      	bne.n	80030e0 <HAL_PCD_IRQHandler+0x740>
 8003070:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003074:	010b      	lsls	r3, r1, #4
 8003076:	b2b2      	uxth	r2, r6
 8003078:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800307c:	4416      	add	r6, r2
 800307e:	5af2      	ldrh	r2, [r6, r3]
 8003080:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003084:	52f2      	strh	r2, [r6, r3]
 8003086:	5af2      	ldrh	r2, [r6, r3]
 8003088:	b292      	uxth	r2, r2
 800308a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308e:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003090:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003094:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003098:	b292      	uxth	r2, r2
 800309a:	4410      	add	r0, r2
 800309c:	5ac2      	ldrh	r2, [r0, r3]
 800309e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80030a2:	52c2      	strh	r2, [r0, r3]
 80030a4:	5ac2      	ldrh	r2, [r0, r3]
 80030a6:	b292      	uxth	r2, r2
 80030a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ac:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ae:	4620      	mov	r0, r4
 80030b0:	f002 ff43 	bl	8005f3a <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030b4:	2f00      	cmp	r7, #0
 80030b6:	f43f af24 	beq.w	8002f02 <HAL_PCD_IRQHandler+0x562>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030ba:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ce:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030da:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80030de:	e46e      	b.n	80029be <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030e0:	2a01      	cmp	r2, #1
 80030e2:	d1e4      	bne.n	80030ae <HAL_PCD_IRQHandler+0x70e>
 80030e4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80030e8:	010a      	lsls	r2, r1, #4
 80030ea:	fa1f fc86 	uxth.w	ip, r6
 80030ee:	f200 4604 	addw	r6, r0, #1028	; 0x404
 80030f2:	4466      	add	r6, ip
 80030f4:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030f6:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80030fa:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80030fe:	b2b6      	uxth	r6, r6
 8003100:	4430      	add	r0, r6
 8003102:	5283      	strh	r3, [r0, r2]
 8003104:	e7d3      	b.n	80030ae <HAL_PCD_IRQHandler+0x70e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003106:	b96f      	cbnz	r7, 8003124 <HAL_PCD_IRQHandler+0x784>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003108:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800310c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800311c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003120:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003124:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003128:	fb0c 4c06 	mla	ip, ip, r6, r4
 800312c:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d1c2      	bne.n	80030ba <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_count += TxPctSize;
 8003134:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8003138:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800313c:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 800313e:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8003142:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003146:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 800314a:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 800314c:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 800314e:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003152:	d326      	bcc.n	80031a2 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 8003154:	ebae 0203 	sub.w	r2, lr, r3
 8003158:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800315c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003160:	fa1f fc83 	uxth.w	ip, r3
 8003164:	2a00      	cmp	r2, #0
 8003166:	d142      	bne.n	80031ee <HAL_PCD_IRQHandler+0x84e>
 8003168:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800316c:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8003170:	b292      	uxth	r2, r2
 8003172:	4472      	add	r2, lr
 8003174:	0109      	lsls	r1, r1, #4
 8003176:	f832 e001 	ldrh.w	lr, [r2, r1]
 800317a:	2b3e      	cmp	r3, #62	; 0x3e
 800317c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003180:	f822 e001 	strh.w	lr, [r2, r1]
 8003184:	d91b      	bls.n	80031be <HAL_PCD_IRQHandler+0x81e>
 8003186:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 800318a:	06db      	lsls	r3, r3, #27
 800318c:	5a53      	ldrh	r3, [r2, r1]
 800318e:	bf08      	it	eq
 8003190:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8003194:	b29b      	uxth	r3, r3
 8003196:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 800319a:	ea43 0308 	orr.w	r3, r3, r8
 800319e:	b29b      	uxth	r3, r3
 80031a0:	e012      	b.n	80031c8 <HAL_PCD_IRQHandler+0x828>
        else if (ep->xfer_len_db == 0U)
 80031a2:	f1be 0f00 	cmp.w	lr, #0
 80031a6:	d103      	bne.n	80031b0 <HAL_PCD_IRQHandler+0x810>
    if (ep->xfer_len >= TxPctSize)
 80031a8:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 80031aa:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 80031ae:	e7d5      	b.n	800315c <HAL_PCD_IRQHandler+0x7bc>
          ep->xfer_len_db = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80031b6:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 80031ba:	4673      	mov	r3, lr
 80031bc:	e7ce      	b.n	800315c <HAL_PCD_IRQHandler+0x7bc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031be:	b95b      	cbnz	r3, 80031d8 <HAL_PCD_IRQHandler+0x838>
 80031c0:	5a53      	ldrh	r3, [r2, r1]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c8:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031ca:	2128      	movs	r1, #40	; 0x28
 80031cc:	fb01 4606 	mla	r6, r1, r6, r4
 80031d0:	4663      	mov	r3, ip
 80031d2:	4639      	mov	r1, r7
 80031d4:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80031d6:	e707      	b.n	8002fe8 <HAL_PCD_IRQHandler+0x648>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031d8:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 80031dc:	07db      	lsls	r3, r3, #31
 80031de:	5a53      	ldrh	r3, [r2, r1]
 80031e0:	bf48      	it	mi
 80031e2:	f10e 0e01 	addmi.w	lr, lr, #1
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 80031ec:	e7d7      	b.n	800319e <HAL_PCD_IRQHandler+0x7fe>
 80031ee:	2a01      	cmp	r2, #1
 80031f0:	d1eb      	bne.n	80031ca <HAL_PCD_IRQHandler+0x82a>
 80031f2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 80031fc:	4413      	add	r3, r2
 80031fe:	010a      	lsls	r2, r1, #4
 8003200:	f823 c002 	strh.w	ip, [r3, r2]
 8003204:	e7e1      	b.n	80031ca <HAL_PCD_IRQHandler+0x82a>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003206:	0546      	lsls	r6, r0, #21
 8003208:	d512      	bpl.n	8003230 <HAL_PCD_IRQHandler+0x890>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800320a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800320c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800320e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800321e:	f002 fe98 	bl	8005f52 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003222:	4629      	mov	r1, r5
 8003224:	4620      	mov	r0, r4
}
 8003226:	b005      	add	sp, #20
 8003228:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800322c:	f7ff bba3 	b.w	8002976 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003230:	0441      	lsls	r1, r0, #17
 8003232:	d50a      	bpl.n	800324a <HAL_PCD_IRQHandler+0x8aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800323a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003246:	f7ff bbbf 	b.w	80029c8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800324a:	0482      	lsls	r2, r0, #18
 800324c:	d505      	bpl.n	800325a <HAL_PCD_IRQHandler+0x8ba>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003258:	e7f1      	b.n	800323e <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800325a:	04c3      	lsls	r3, r0, #19
 800325c:	d519      	bpl.n	8003292 <HAL_PCD_IRQHandler+0x8f2>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800325e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8003260:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003262:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003266:	f023 0304 	bic.w	r3, r3, #4
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003272:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003276:	f023 0308 	bic.w	r3, r3, #8
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003282:	f002 fe89 	bl	8005f98 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800328c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003290:	e7d5      	b.n	800323e <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003292:	0507      	lsls	r7, r0, #20
 8003294:	d548      	bpl.n	8003328 <HAL_PCD_IRQHandler+0x988>
 8003296:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003298:	6822      	ldr	r2, [r4, #0]
 800329a:	4606      	mov	r6, r0
 800329c:	4611      	mov	r1, r2
 800329e:	4613      	mov	r3, r2
 80032a0:	f102 0520 	add.w	r5, r2, #32
 80032a4:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 80032a8:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80032aa:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80032ae:	d1f9      	bne.n	80032a4 <HAL_PCD_IRQHandler+0x904>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80032b0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032be:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80032ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032d2:	055e      	lsls	r6, r3, #21
 80032d4:	d5fb      	bpl.n	80032ce <HAL_PCD_IRQHandler+0x92e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80032e6:	f830 3b02 	ldrh.w	r3, [r0], #2
 80032ea:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 80032ee:	428d      	cmp	r5, r1
 80032f0:	d1f9      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x946>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032f2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80032f6:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f043 0308 	orr.w	r3, r3, #8
 80032fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003302:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003312:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003316:	b29b      	uxth	r3, r3
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003320:	f002 fe2a 	bl	8005f78 <HAL_PCD_SuspendCallback>
    return;
 8003324:	f7ff bb50 	b.w	80029c8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003328:	0582      	lsls	r2, r0, #22
 800332a:	d50d      	bpl.n	8003348 <HAL_PCD_IRQHandler+0x9a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800332c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800332e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003330:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003340:	f002 fe03 	bl	8005f4a <HAL_PCD_SOFCallback>
    return;
 8003344:	f7ff bb40 	b.w	80029c8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003348:	05c3      	lsls	r3, r0, #23
 800334a:	f57f ab3d 	bpl.w	80029c8 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003358:	e771      	b.n	800323e <HAL_PCD_IRQHandler+0x89e>
 800335a:	bf00      	nop

0800335c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800335c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4605      	mov	r5, r0
 8003364:	f04f 0428 	mov.w	r4, #40	; 0x28
 8003368:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800336c:	d01a      	beq.n	80033a4 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 800336e:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003370:	fb00 4104 	mla	r1, r0, r4, r4
 8003374:	4429      	add	r1, r5
    ep->is_in = 1U;
 8003376:	704e      	strb	r6, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 8003378:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800337a:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 800337c:	bf08      	it	eq
 800337e:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003380:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8003382:	bf08      	it	eq
 8003384:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8003386:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8003388:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 800338c:	2b01      	cmp	r3, #1
 800338e:	d012      	beq.n	80033b6 <HAL_PCD_EP_Open+0x5a>
 8003390:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003392:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8003394:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003398:	f001 f9f2 	bl	8004780 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800339c:	2000      	movs	r0, #0
 800339e:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80033a4:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	4344      	muls	r4, r0
 80033a8:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 80033ac:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ae:	4429      	add	r1, r5
    ep->is_in = 0U;
 80033b0:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 80033b4:	e7e0      	b.n	8003378 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80033b6:	2002      	movs	r0, #2
 80033b8:	e7f3      	b.n	80033a2 <HAL_PCD_EP_Open+0x46>

080033ba <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80033ba:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80033be:	b510      	push	{r4, lr}
 80033c0:	f04f 0328 	mov.w	r3, #40	; 0x28
 80033c4:	4604      	mov	r4, r0
 80033c6:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80033ca:	d013      	beq.n	80033f4 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033cc:	fb02 3103 	mla	r1, r2, r3, r3
 80033d0:	4401      	add	r1, r0
    ep->is_in = 1U;
 80033d2:	2001      	movs	r0, #1
 80033d4:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80033d8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d012      	beq.n	8003406 <HAL_PCD_EP_Close+0x4c>
 80033e0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033e2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80033e4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033e8:	f001 fb2c 	bl	8004a44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80033f2:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	4353      	muls	r3, r2
 80033f6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80033fa:	4401      	add	r1, r0
    ep->is_in = 0U;
 80033fc:	4403      	add	r3, r0
 80033fe:	2000      	movs	r0, #0
 8003400:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8003404:	e7e7      	b.n	80033d6 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8003406:	2002      	movs	r0, #2
 8003408:	e7f3      	b.n	80033f2 <HAL_PCD_EP_Close+0x38>

0800340a <HAL_PCD_EP_Receive>:
{
 800340a:	b570      	push	{r4, r5, r6, lr}
 800340c:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8003410:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 8003412:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8003414:	4369      	muls	r1, r5
 8003416:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003418:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800341c:	4401      	add	r1, r0
  ep->xfer_len = len;
 800341e:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8003422:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8003426:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800342a:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800342e:	6800      	ldr	r0, [r0, #0]
 8003430:	f001 fc62 	bl	8004cf8 <USB_EPStartXfer>
}
 8003434:	4630      	mov	r0, r6
 8003436:	bd70      	pop	{r4, r5, r6, pc}

08003438 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003438:	2328      	movs	r3, #40	; 0x28
 800343a:	f001 0107 	and.w	r1, r1, #7
 800343e:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003442:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8003446:	4770      	bx	lr

08003448 <HAL_PCD_EP_Transmit>:
{
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800344e:	2128      	movs	r1, #40	; 0x28
 8003450:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8003454:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8003456:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 800345a:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345c:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8003460:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003464:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8003466:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8003468:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800346a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800346e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	f001 fc40 	bl	8004cf8 <USB_EPStartXfer>
}
 8003478:	4630      	mov	r0, r6
 800347a:	bd70      	pop	{r4, r5, r6, pc}

0800347c <HAL_PCD_EP_SetStall>:
{
 800347c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800347e:	6843      	ldr	r3, [r0, #4]
 8003480:	f001 0507 	and.w	r5, r1, #7
 8003484:	429d      	cmp	r5, r3
{
 8003486:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003488:	d828      	bhi.n	80034dc <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800348a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800348e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8003492:	d01a      	beq.n	80034ca <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8003494:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003496:	fb05 3103 	mla	r1, r5, r3, r3
 800349a:	4401      	add	r1, r0
    ep->is_in = 1U;
 800349c:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 800349e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80034a0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80034a2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80034a4:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d019      	beq.n	80034e0 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034ac:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80034ae:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034b2:	f001 fb98 	bl	8004be6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b6:	b925      	cbnz	r5, 80034c2 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80034be:	f001 fc09 	bl	8004cd4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80034c8:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80034ca:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80034cc:	434b      	muls	r3, r1
 80034ce:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80034d2:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80034d4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80034d6:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80034da:	e7e0      	b.n	800349e <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80034dc:	2001      	movs	r0, #1
 80034de:	e7f3      	b.n	80034c8 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80034e0:	2002      	movs	r0, #2
 80034e2:	e7f1      	b.n	80034c8 <HAL_PCD_EP_SetStall+0x4c>

080034e4 <HAL_PCD_EP_ClrStall>:
{
 80034e4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034e6:	6843      	ldr	r3, [r0, #4]
 80034e8:	f001 020f 	and.w	r2, r1, #15
 80034ec:	429a      	cmp	r2, r3
{
 80034ee:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034f0:	d825      	bhi.n	800353e <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 80034f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034f6:	f04f 0328 	mov.w	r3, #40	; 0x28
 80034fa:	f001 0207 	and.w	r2, r1, #7
 80034fe:	d015      	beq.n	800352c <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003500:	fb02 3103 	mla	r1, r2, r3, r3
 8003504:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003506:	2001      	movs	r0, #1
 8003508:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 800350a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800350c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800350e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003510:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003514:	2b01      	cmp	r3, #1
 8003516:	d014      	beq.n	8003542 <HAL_PCD_EP_ClrStall+0x5e>
 8003518:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800351a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800351c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003520:	f001 fb81 	bl	8004c26 <USB_EPClearStall>
  return HAL_OK;
 8003524:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8003526:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 800352a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352c:	4353      	muls	r3, r2
 800352e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8003532:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003534:	4403      	add	r3, r0
 8003536:	2000      	movs	r0, #0
 8003538:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800353c:	e7e5      	b.n	800350a <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 800353e:	2001      	movs	r0, #1
 8003540:	e7f3      	b.n	800352a <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8003542:	2002      	movs	r0, #2
 8003544:	e7f1      	b.n	800352a <HAL_PCD_EP_ClrStall+0x46>

08003546 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003546:	b510      	push	{r4, lr}
 8003548:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800354a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354e:	bf1b      	ittet	ne
 8003550:	f001 0107 	andne.w	r1, r1, #7
 8003554:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003558:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355c:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800355e:	bf08      	it	eq
 8003560:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003564:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8003566:	b91a      	cbnz	r2, 8003570 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8003568:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800356a:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800356c:	2000      	movs	r0, #0
 800356e:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8003570:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003572:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8003574:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003576:	e7f9      	b.n	800356c <HAL_PCDEx_PMAConfig+0x26>

08003578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800357c:	4605      	mov	r5, r0
 800357e:	b338      	cbz	r0, 80035d0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003580:	6803      	ldr	r3, [r0, #0]
 8003582:	07db      	lsls	r3, r3, #31
 8003584:	d410      	bmi.n	80035a8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	079f      	lsls	r7, r3, #30
 800358a:	d45e      	bmi.n	800364a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358c:	682b      	ldr	r3, [r5, #0]
 800358e:	0719      	lsls	r1, r3, #28
 8003590:	f100 8095 	bmi.w	80036be <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	075a      	lsls	r2, r3, #29
 8003598:	f100 80c1 	bmi.w	800371e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359c:	69e8      	ldr	r0, [r5, #28]
 800359e:	2800      	cmp	r0, #0
 80035a0:	f040 812c 	bne.w	80037fc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80035a4:	2000      	movs	r0, #0
 80035a6:	e029      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a8:	4c90      	ldr	r4, [pc, #576]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 80035aa:	6863      	ldr	r3, [r4, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d007      	beq.n	80035c4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035b4:	6863      	ldr	r3, [r4, #4]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCC_OscConfig+0x5c>
 80035be:	6863      	ldr	r3, [r4, #4]
 80035c0:	03de      	lsls	r6, r3, #15
 80035c2:	d507      	bpl.n	80035d4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	039c      	lsls	r4, r3, #14
 80035c8:	d5dd      	bpl.n	8003586 <HAL_RCC_OscConfig+0xe>
 80035ca:	686b      	ldr	r3, [r5, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1da      	bne.n	8003586 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80035d0:	2001      	movs	r0, #1
 80035d2:	e013      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d4:	686b      	ldr	r3, [r5, #4]
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035da:	d112      	bne.n	8003602 <HAL_RCC_OscConfig+0x8a>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035e4:	f7fe fdb2 	bl	800214c <HAL_GetTick>
 80035e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	0398      	lsls	r0, r3, #14
 80035ee:	d4ca      	bmi.n	8003586 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe fdac 	bl	800214c <HAL_GetTick>
 80035f4:	1b80      	subs	r0, r0, r6
 80035f6:	2864      	cmp	r0, #100	; 0x64
 80035f8:	d9f7      	bls.n	80035ea <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80035fa:	2003      	movs	r0, #3
}
 80035fc:	b002      	add	sp, #8
 80035fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003602:	b99b      	cbnz	r3, 800362c <HAL_RCC_OscConfig+0xb4>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003612:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003614:	f7fe fd9a 	bl	800214c <HAL_GetTick>
 8003618:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	0399      	lsls	r1, r3, #14
 800361e:	d5b2      	bpl.n	8003586 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fd94 	bl	800214c <HAL_GetTick>
 8003624:	1b80      	subs	r0, r0, r6
 8003626:	2864      	cmp	r0, #100	; 0x64
 8003628:	d9f7      	bls.n	800361a <HAL_RCC_OscConfig+0xa2>
 800362a:	e7e6      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	d103      	bne.n	800363c <HAL_RCC_OscConfig+0xc4>
 8003634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	e7cf      	b.n	80035dc <HAL_RCC_OscConfig+0x64>
 800363c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003648:	e7cb      	b.n	80035e2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364a:	4c68      	ldr	r4, [pc, #416]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 800364c:	6863      	ldr	r3, [r4, #4]
 800364e:	f013 0f0c 	tst.w	r3, #12
 8003652:	d007      	beq.n	8003664 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b08      	cmp	r3, #8
 800365c:	d110      	bne.n	8003680 <HAL_RCC_OscConfig+0x108>
 800365e:	6863      	ldr	r3, [r4, #4]
 8003660:	03da      	lsls	r2, r3, #15
 8003662:	d40d      	bmi.n	8003680 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	079b      	lsls	r3, r3, #30
 8003668:	d502      	bpl.n	8003670 <HAL_RCC_OscConfig+0xf8>
 800366a:	692b      	ldr	r3, [r5, #16]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d1af      	bne.n	80035d0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	696a      	ldr	r2, [r5, #20]
 8003674:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003678:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	e785      	b.n	800358c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003680:	692a      	ldr	r2, [r5, #16]
 8003682:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <HAL_RCC_OscConfig+0x278>)
 8003684:	b16a      	cbz	r2, 80036a2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800368a:	f7fe fd5f 	bl	800214c <HAL_GetTick>
 800368e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	079f      	lsls	r7, r3, #30
 8003694:	d4ec      	bmi.n	8003670 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003696:	f7fe fd59 	bl	800214c <HAL_GetTick>
 800369a:	1b80      	subs	r0, r0, r6
 800369c:	2802      	cmp	r0, #2
 800369e:	d9f7      	bls.n	8003690 <HAL_RCC_OscConfig+0x118>
 80036a0:	e7ab      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80036a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036a4:	f7fe fd52 	bl	800214c <HAL_GetTick>
 80036a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	0798      	lsls	r0, r3, #30
 80036ae:	f57f af6d 	bpl.w	800358c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe fd4b 	bl	800214c <HAL_GetTick>
 80036b6:	1b80      	subs	r0, r0, r6
 80036b8:	2802      	cmp	r0, #2
 80036ba:	d9f6      	bls.n	80036aa <HAL_RCC_OscConfig+0x132>
 80036bc:	e79d      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036be:	69aa      	ldr	r2, [r5, #24]
 80036c0:	4e4a      	ldr	r6, [pc, #296]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 80036c2:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <HAL_RCC_OscConfig+0x278>)
 80036c4:	b1e2      	cbz	r2, 8003700 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80036c6:	2201      	movs	r2, #1
 80036c8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80036cc:	f7fe fd3e 	bl	800214c <HAL_GetTick>
 80036d0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036d4:	079b      	lsls	r3, r3, #30
 80036d6:	d50d      	bpl.n	80036f4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036e4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80036e6:	bf00      	nop
  }
  while (Delay --);
 80036e8:	9b01      	ldr	r3, [sp, #4]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	9201      	str	r2, [sp, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f9      	bne.n	80036e6 <HAL_RCC_OscConfig+0x16e>
 80036f2:	e74f      	b.n	8003594 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fe fd2a 	bl	800214c <HAL_GetTick>
 80036f8:	1b00      	subs	r0, r0, r4
 80036fa:	2802      	cmp	r0, #2
 80036fc:	d9e9      	bls.n	80036d2 <HAL_RCC_OscConfig+0x15a>
 80036fe:	e77c      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003700:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003704:	f7fe fd22 	bl	800214c <HAL_GetTick>
 8003708:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800370c:	079f      	lsls	r7, r3, #30
 800370e:	f57f af41 	bpl.w	8003594 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe fd1b 	bl	800214c <HAL_GetTick>
 8003716:	1b00      	subs	r0, r0, r4
 8003718:	2802      	cmp	r0, #2
 800371a:	d9f6      	bls.n	800370a <HAL_RCC_OscConfig+0x192>
 800371c:	e76d      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371e:	4c33      	ldr	r4, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 8003720:	69e3      	ldr	r3, [r4, #28]
 8003722:	00d8      	lsls	r0, r3, #3
 8003724:	d424      	bmi.n	8003770 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8003726:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003728:	69e3      	ldr	r3, [r4, #28]
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372e:	61e3      	str	r3, [r4, #28]
 8003730:	69e3      	ldr	r3, [r4, #28]
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4e2f      	ldr	r6, [pc, #188]	; (80037f8 <HAL_RCC_OscConfig+0x280>)
 800373c:	6833      	ldr	r3, [r6, #0]
 800373e:	05d9      	lsls	r1, r3, #23
 8003740:	d518      	bpl.n	8003774 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003742:	68eb      	ldr	r3, [r5, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d126      	bne.n	8003796 <HAL_RCC_OscConfig+0x21e>
 8003748:	6a23      	ldr	r3, [r4, #32]
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003750:	f7fe fcfc 	bl	800214c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003758:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	6a23      	ldr	r3, [r4, #32]
 800375c:	079b      	lsls	r3, r3, #30
 800375e:	d53f      	bpl.n	80037e0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003760:	2f00      	cmp	r7, #0
 8003762:	f43f af1b 	beq.w	800359c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	69e3      	ldr	r3, [r4, #28]
 8003768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376c:	61e3      	str	r3, [r4, #28]
 800376e:	e715      	b.n	800359c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003770:	2700      	movs	r7, #0
 8003772:	e7e2      	b.n	800373a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003774:	6833      	ldr	r3, [r6, #0]
 8003776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800377c:	f7fe fce6 	bl	800214c <HAL_GetTick>
 8003780:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	6833      	ldr	r3, [r6, #0]
 8003784:	05da      	lsls	r2, r3, #23
 8003786:	d4dc      	bmi.n	8003742 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003788:	f7fe fce0 	bl	800214c <HAL_GetTick>
 800378c:	eba0 0008 	sub.w	r0, r0, r8
 8003790:	2864      	cmp	r0, #100	; 0x64
 8003792:	d9f6      	bls.n	8003782 <HAL_RCC_OscConfig+0x20a>
 8003794:	e731      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003796:	b9ab      	cbnz	r3, 80037c4 <HAL_RCC_OscConfig+0x24c>
 8003798:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	6223      	str	r3, [r4, #32]
 80037a4:	6a23      	ldr	r3, [r4, #32]
 80037a6:	f023 0304 	bic.w	r3, r3, #4
 80037aa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80037ac:	f7fe fcce 	bl	800214c <HAL_GetTick>
 80037b0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b2:	6a23      	ldr	r3, [r4, #32]
 80037b4:	0798      	lsls	r0, r3, #30
 80037b6:	d5d3      	bpl.n	8003760 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fe fcc8 	bl	800214c <HAL_GetTick>
 80037bc:	1b80      	subs	r0, r0, r6
 80037be:	4540      	cmp	r0, r8
 80037c0:	d9f7      	bls.n	80037b2 <HAL_RCC_OscConfig+0x23a>
 80037c2:	e71a      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	6a23      	ldr	r3, [r4, #32]
 80037c8:	d103      	bne.n	80037d2 <HAL_RCC_OscConfig+0x25a>
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6223      	str	r3, [r4, #32]
 80037d0:	e7ba      	b.n	8003748 <HAL_RCC_OscConfig+0x1d0>
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6223      	str	r3, [r4, #32]
 80037d8:	6a23      	ldr	r3, [r4, #32]
 80037da:	f023 0304 	bic.w	r3, r3, #4
 80037de:	e7b6      	b.n	800374e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fe fcb4 	bl	800214c <HAL_GetTick>
 80037e4:	1b80      	subs	r0, r0, r6
 80037e6:	4540      	cmp	r0, r8
 80037e8:	d9b7      	bls.n	800375a <HAL_RCC_OscConfig+0x1e2>
 80037ea:	e706      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	42420000 	.word	0x42420000
 80037f4:	20000000 	.word	0x20000000
 80037f8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037fc:	4c2a      	ldr	r4, [pc, #168]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80037fe:	6863      	ldr	r3, [r4, #4]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b08      	cmp	r3, #8
 8003806:	d03e      	beq.n	8003886 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003808:	2200      	movs	r2, #0
 800380a:	4b28      	ldr	r3, [pc, #160]	; (80038ac <HAL_RCC_OscConfig+0x334>)
 800380c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800380e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003810:	d12c      	bne.n	800386c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8003812:	f7fe fc9b 	bl	800214c <HAL_GetTick>
 8003816:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	0199      	lsls	r1, r3, #6
 800381c:	d420      	bmi.n	8003860 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800381e:	6a2b      	ldr	r3, [r5, #32]
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d105      	bne.n	8003832 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003826:	6862      	ldr	r2, [r4, #4]
 8003828:	68a9      	ldr	r1, [r5, #8]
 800382a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800382e:	430a      	orrs	r2, r1
 8003830:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003832:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003834:	6862      	ldr	r2, [r4, #4]
 8003836:	430b      	orrs	r3, r1
 8003838:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800383c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800383e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003840:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003842:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <HAL_RCC_OscConfig+0x334>)
 8003844:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003846:	f7fe fc81 	bl	800214c <HAL_GetTick>
 800384a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	019a      	lsls	r2, r3, #6
 8003850:	f53f aea8 	bmi.w	80035a4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe fc7a 	bl	800214c <HAL_GetTick>
 8003858:	1b40      	subs	r0, r0, r5
 800385a:	2802      	cmp	r0, #2
 800385c:	d9f6      	bls.n	800384c <HAL_RCC_OscConfig+0x2d4>
 800385e:	e6cc      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fe fc74 	bl	800214c <HAL_GetTick>
 8003864:	1b80      	subs	r0, r0, r6
 8003866:	2802      	cmp	r0, #2
 8003868:	d9d6      	bls.n	8003818 <HAL_RCC_OscConfig+0x2a0>
 800386a:	e6c6      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800386c:	f7fe fc6e 	bl	800214c <HAL_GetTick>
 8003870:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	f57f ae95 	bpl.w	80035a4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387a:	f7fe fc67 	bl	800214c <HAL_GetTick>
 800387e:	1b40      	subs	r0, r0, r5
 8003880:	2802      	cmp	r0, #2
 8003882:	d9f6      	bls.n	8003872 <HAL_RCC_OscConfig+0x2fa>
 8003884:	e6b9      	b.n	80035fa <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003886:	2801      	cmp	r0, #1
 8003888:	f43f aeb8 	beq.w	80035fc <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800388c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	6a2a      	ldr	r2, [r5, #32]
 8003890:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003894:	4291      	cmp	r1, r2
 8003896:	f47f ae9b 	bne.w	80035d0 <HAL_RCC_OscConfig+0x58>
 800389a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800389c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a0:	4293      	cmp	r3, r2
 80038a2:	f43f ae7f 	beq.w	80035a4 <HAL_RCC_OscConfig+0x2c>
 80038a6:	e693      	b.n	80035d0 <HAL_RCC_OscConfig+0x58>
 80038a8:	40021000 	.word	0x40021000
 80038ac:	42420000 	.word	0x42420000

080038b0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x38>)
 80038b2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80038b4:	f003 010c 	and.w	r1, r3, #12
 80038b8:	2908      	cmp	r1, #8
 80038ba:	d112      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80038be:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038c4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c6:	d509      	bpl.n	80038dc <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038cc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d2:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x44>)
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80038da:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x48>)
 80038de:	4358      	muls	r0, r3
 80038e0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80038e2:	4803      	ldr	r0, [pc, #12]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	0800965f 	.word	0x0800965f
 80038f0:	007a1200 	.word	0x007a1200
 80038f4:	0800966f 	.word	0x0800966f
 80038f8:	003d0900 	.word	0x003d0900

080038fc <HAL_RCC_ClockConfig>:
{
 80038fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003900:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003902:	4604      	mov	r4, r0
 8003904:	b910      	cbnz	r0, 800390c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003906:	2001      	movs	r0, #1
}
 8003908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800390c:	4a44      	ldr	r2, [pc, #272]	; (8003a20 <HAL_RCC_ClockConfig+0x124>)
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	428b      	cmp	r3, r1
 8003916:	d328      	bcc.n	800396a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	6821      	ldr	r1, [r4, #0]
 800391a:	078e      	lsls	r6, r1, #30
 800391c:	d430      	bmi.n	8003980 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391e:	07ca      	lsls	r2, r1, #31
 8003920:	d443      	bmi.n	80039aa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003922:	4a3f      	ldr	r2, [pc, #252]	; (8003a20 <HAL_RCC_ClockConfig+0x124>)
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	42ab      	cmp	r3, r5
 800392c:	d865      	bhi.n	80039fa <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	4d3c      	ldr	r5, [pc, #240]	; (8003a24 <HAL_RCC_ClockConfig+0x128>)
 8003932:	f012 0f04 	tst.w	r2, #4
 8003936:	d16c      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	0713      	lsls	r3, r2, #28
 800393a:	d506      	bpl.n	800394a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800393c:	686b      	ldr	r3, [r5, #4]
 800393e:	6922      	ldr	r2, [r4, #16]
 8003940:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003944:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003948:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394a:	f7ff ffb1 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 800394e:	686b      	ldr	r3, [r5, #4]
 8003950:	4a35      	ldr	r2, [pc, #212]	; (8003a28 <HAL_RCC_ClockConfig+0x12c>)
 8003952:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	40d8      	lsrs	r0, r3
 800395a:	4b34      	ldr	r3, [pc, #208]	; (8003a2c <HAL_RCC_ClockConfig+0x130>)
 800395c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800395e:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <HAL_RCC_ClockConfig+0x134>)
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	f7fe fbb1 	bl	80020c8 <HAL_InitTick>
  return HAL_OK;
 8003966:	2000      	movs	r0, #0
 8003968:	e7ce      	b.n	8003908 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	f023 0307 	bic.w	r3, r3, #7
 8003970:	430b      	orrs	r3, r1
 8003972:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	428b      	cmp	r3, r1
 800397c:	d1c3      	bne.n	8003906 <HAL_RCC_ClockConfig+0xa>
 800397e:	e7cb      	b.n	8003918 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCC_ClockConfig+0x128>)
 8003982:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003986:	bf1e      	ittt	ne
 8003988:	685a      	ldrne	r2, [r3, #4]
 800398a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800398e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003992:	bf42      	ittt	mi
 8003994:	685a      	ldrmi	r2, [r3, #4]
 8003996:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800399a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68a0      	ldr	r0, [r4, #8]
 80039a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039a4:	4302      	orrs	r2, r0
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	e7b9      	b.n	800391e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	6862      	ldr	r2, [r4, #4]
 80039ac:	4e1d      	ldr	r6, [pc, #116]	; (8003a24 <HAL_RCC_ClockConfig+0x128>)
 80039ae:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	d11a      	bne.n	80039ea <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	d0a5      	beq.n	8003906 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	4313      	orrs	r3, r2
 80039c6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80039c8:	f7fe fbc0 	bl	800214c <HAL_GetTick>
 80039cc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	6873      	ldr	r3, [r6, #4]
 80039d0:	6862      	ldr	r2, [r4, #4]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039da:	d0a2      	beq.n	8003922 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe fbb6 	bl	800214c <HAL_GetTick>
 80039e0:	1bc0      	subs	r0, r0, r7
 80039e2:	4540      	cmp	r0, r8
 80039e4:	d9f3      	bls.n	80039ce <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80039e6:	2003      	movs	r0, #3
 80039e8:	e78e      	b.n	8003908 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ea:	2a02      	cmp	r2, #2
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039f2:	e7e1      	b.n	80039b8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	f013 0f02 	tst.w	r3, #2
 80039f8:	e7de      	b.n	80039b8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	6813      	ldr	r3, [r2, #0]
 80039fc:	f023 0307 	bic.w	r3, r3, #7
 8003a00:	432b      	orrs	r3, r5
 8003a02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a04:	6813      	ldr	r3, [r2, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	42ab      	cmp	r3, r5
 8003a0c:	f47f af7b 	bne.w	8003906 <HAL_RCC_ClockConfig+0xa>
 8003a10:	e78d      	b.n	800392e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a12:	686b      	ldr	r3, [r5, #4]
 8003a14:	68e1      	ldr	r1, [r4, #12]
 8003a16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	606b      	str	r3, [r5, #4]
 8003a1e:	e78b      	b.n	8003938 <HAL_RCC_ClockConfig+0x3c>
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08009468 	.word	0x08009468
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000050 	.word	0x20000050

08003a34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a42:	6810      	ldr	r0, [r2, #0]
}
 8003a44:	40d8      	lsrs	r0, r3
 8003a46:	4770      	bx	lr
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08009478 	.word	0x08009478
 8003a50:	20000000 	.word	0x20000000

08003a54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	4a03      	ldr	r2, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a62:	6810      	ldr	r0, [r2, #0]
}
 8003a64:	40d8      	lsrs	r0, r3
 8003a66:	4770      	bx	lr
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08009478 	.word	0x08009478
 8003a70:	20000000 	.word	0x20000000

08003a74 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a74:	6803      	ldr	r3, [r0, #0]
{
 8003a76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a7a:	07d9      	lsls	r1, r3, #31
{
 8003a7c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a7e:	d520      	bpl.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a80:	4c36      	ldr	r4, [pc, #216]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a82:	69e3      	ldr	r3, [r4, #28]
 8003a84:	00da      	lsls	r2, r3, #3
 8003a86:	d432      	bmi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003a88:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	69e3      	ldr	r3, [r4, #28]
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	61e3      	str	r3, [r4, #28]
 8003a92:	69e3      	ldr	r3, [r4, #28]
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4f30      	ldr	r7, [pc, #192]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	05db      	lsls	r3, r3, #23
 8003aa2:	d526      	bpl.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aa4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aa6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003aaa:	d136      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aac:	6a23      	ldr	r3, [r4, #32]
 8003aae:	686a      	ldr	r2, [r5, #4]
 8003ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab8:	b11e      	cbz	r6, 8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aba:	69e3      	ldr	r3, [r4, #28]
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac2:	6828      	ldr	r0, [r5, #0]
 8003ac4:	0783      	lsls	r3, r0, #30
 8003ac6:	d506      	bpl.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac8:	4924      	ldr	r1, [pc, #144]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aca:	68ab      	ldr	r3, [r5, #8]
 8003acc:	684a      	ldr	r2, [r1, #4]
 8003ace:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad6:	f010 0010 	ands.w	r0, r0, #16
 8003ada:	d01b      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003adc:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ade:	68e9      	ldr	r1, [r5, #12]
 8003ae0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ae2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6053      	str	r3, [r2, #4]
 8003aec:	e012      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8003aee:	2600      	movs	r6, #0
 8003af0:	e7d4      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003afa:	f7fe fb27 	bl	800214c <HAL_GetTick>
 8003afe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	05d8      	lsls	r0, r3, #23
 8003b04:	d4ce      	bmi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7fe fb21 	bl	800214c <HAL_GetTick>
 8003b0a:	eba0 0008 	sub.w	r0, r0, r8
 8003b0e:	2864      	cmp	r0, #100	; 0x64
 8003b10:	d9f6      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8003b12:	2003      	movs	r0, #3
}
 8003b14:	b002      	add	sp, #8
 8003b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b1a:	686a      	ldr	r2, [r5, #4]
 8003b1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d0c3      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b24:	2001      	movs	r0, #1
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b28:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b2a:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b30:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b34:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8003b38:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b3a:	07d9      	lsls	r1, r3, #31
 8003b3c:	d5b6      	bpl.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fb05 	bl	800214c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003b46:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	6a23      	ldr	r3, [r4, #32]
 8003b4a:	079a      	lsls	r2, r3, #30
 8003b4c:	d4ae      	bmi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe fafd 	bl	800214c <HAL_GetTick>
 8003b52:	1bc0      	subs	r0, r0, r7
 8003b54:	4540      	cmp	r0, r8
 8003b56:	d9f7      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b58:	e7db      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40007000 	.word	0x40007000
 8003b64:	42420000 	.word	0x42420000

08003b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b68:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d051      	beq.n	8003c14 <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d14a      	bne.n	8003c0c <HAL_SPI_Init+0xa4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b76:	6842      	ldr	r2, [r0, #4]
 8003b78:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003b7c:	d000      	beq.n	8003b80 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b7e:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003b88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b8c:	b923      	cbnz	r3, 8003b98 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003b90:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003b94:	f7fe f8b0 	bl	8001cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b98:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b9a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003ba0:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba2:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003bb0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003bb4:	4303      	orrs	r3, r0
 8003bb6:	68e0      	ldr	r0, [r4, #12]
 8003bb8:	69a1      	ldr	r1, [r4, #24]
 8003bba:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8003bbe:	4303      	orrs	r3, r0
 8003bc0:	6920      	ldr	r0, [r4, #16]
 8003bc2:	f000 0002 	and.w	r0, r0, #2
 8003bc6:	4303      	orrs	r3, r0
 8003bc8:	6960      	ldr	r0, [r4, #20]
 8003bca:	f000 0001 	and.w	r0, r0, #1
 8003bce:	4303      	orrs	r3, r0
 8003bd0:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8003bd4:	4303      	orrs	r3, r0
 8003bd6:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bd8:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bda:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003bde:	4303      	orrs	r3, r0
 8003be0:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003be2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be6:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003bea:	4303      	orrs	r3, r0
 8003bec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003bee:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003bf2:	4303      	orrs	r3, r0
 8003bf4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bf6:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf8:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bfa:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c00:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003c02:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c04:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c06:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8003c0a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c0c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c12:	e7b5      	b.n	8003b80 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e7f8      	b.n	8003c0a <HAL_SPI_Init+0xa2>

08003c18 <HAL_SPI_ErrorCallback>:
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003c1e:	6803      	ldr	r3, [r0, #0]
{
 8003c20:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003c22:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003c24:	689a      	ldr	r2, [r3, #8]
{
 8003c26:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c28:	0656      	lsls	r6, r2, #25
 8003c2a:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8003c2e:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8003c32:	d408      	bmi.n	8003c46 <HAL_SPI_IRQHandler+0x2a>
 8003c34:	07d6      	lsls	r6, r2, #31
 8003c36:	d506      	bpl.n	8003c46 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c38:	064e      	lsls	r6, r1, #25
 8003c3a:	d504      	bpl.n	8003c46 <HAL_SPI_IRQHandler+0x2a>
  {
    hspi->RxISR(hspi);
 8003c3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 8003c3e:	b005      	add	sp, #20
 8003c40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8003c44:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c46:	0796      	lsls	r6, r2, #30
 8003c48:	d504      	bpl.n	8003c54 <HAL_SPI_IRQHandler+0x38>
 8003c4a:	0608      	lsls	r0, r1, #24
 8003c4c:	d502      	bpl.n	8003c54 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8003c4e:	4620      	mov	r0, r4
 8003c50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c52:	e7f4      	b.n	8003c3e <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003c54:	0956      	lsrs	r6, r2, #5
 8003c56:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 8003c5a:	07d2      	lsls	r2, r2, #31
 8003c5c:	d54c      	bpl.n	8003cf8 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c5e:	068d      	lsls	r5, r1, #26
 8003c60:	d54a      	bpl.n	8003cf8 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c62:	b177      	cbz	r7, 8003c82 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c64:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8003c68:	2000      	movs	r0, #0
 8003c6a:	2a03      	cmp	r2, #3
 8003c6c:	d03e      	beq.n	8003cec <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c70:	f042 0204 	orr.w	r2, r2, #4
 8003c74:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c76:	9001      	str	r0, [sp, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	9201      	str	r2, [sp, #4]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	9201      	str	r2, [sp, #4]
 8003c80:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c82:	07f0      	lsls	r0, r6, #31
 8003c84:	d50c      	bpl.n	8003ca0 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c86:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	9203      	str	r2, [sp, #12]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	9203      	str	r2, [sp, #12]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003ca2:	b34a      	cbz	r2, 8003cf8 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003caa:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003cac:	2201      	movs	r2, #1
 8003cae:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cb2:	078a      	lsls	r2, r1, #30
 8003cb4:	d022      	beq.n	8003cfc <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cb6:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003cb8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cba:	f022 0203 	bic.w	r2, r2, #3
 8003cbe:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003cc0:	b140      	cbz	r0, 8003cd4 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <HAL_SPI_IRQHandler+0xe8>)
 8003cc4:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cc6:	f7fe fb8d 	bl	80023e4 <HAL_DMA_Abort_IT>
 8003cca:	b118      	cbz	r0, 8003cd4 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd2:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003cd4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003cd6:	b178      	cbz	r0, 8003cf8 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <HAL_SPI_IRQHandler+0xe8>)
 8003cda:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003cdc:	f7fe fb82 	bl	80023e4 <HAL_DMA_Abort_IT>
 8003ce0:	b150      	cbz	r0, 8003cf8 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ce2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce8:	6563      	str	r3, [r4, #84]	; 0x54
 8003cea:	e005      	b.n	8003cf8 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cec:	9002      	str	r0, [sp, #8]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	9202      	str	r2, [sp, #8]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	9302      	str	r3, [sp, #8]
 8003cf6:	9b02      	ldr	r3, [sp, #8]
}
 8003cf8:	b005      	add	sp, #20
 8003cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7ff ff8b 	bl	8003c18 <HAL_SPI_ErrorCallback>
 8003d02:	e7f9      	b.n	8003cf8 <HAL_SPI_IRQHandler+0xdc>
 8003d04:	08003d09 	.word	0x08003d09

08003d08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d08:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 8003d0a:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003d0e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d10:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d12:	f7ff ff81 	bl	8003c18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d16:	bd08      	pop	{r3, pc}

08003d18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d18:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003d1a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d1c:	4290      	cmp	r0, r2
 8003d1e:	d00a      	beq.n	8003d36 <TIM_Base_SetConfig+0x1e>
 8003d20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d24:	d007      	beq.n	8003d36 <TIM_Base_SetConfig+0x1e>
 8003d26:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d2a:	4290      	cmp	r0, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_Base_SetConfig+0x1e>
 8003d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d32:	4290      	cmp	r0, r2
 8003d34:	d115      	bne.n	8003d62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003d36:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d3c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3e:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <TIM_Base_SetConfig+0x6c>)
 8003d40:	4290      	cmp	r0, r2
 8003d42:	d00a      	beq.n	8003d5a <TIM_Base_SetConfig+0x42>
 8003d44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d48:	d007      	beq.n	8003d5a <TIM_Base_SetConfig+0x42>
 8003d4a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d4e:	4290      	cmp	r0, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_Base_SetConfig+0x42>
 8003d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d56:	4290      	cmp	r0, r2
 8003d58:	d103      	bne.n	8003d62 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d60:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d62:	694a      	ldr	r2, [r1, #20]
 8003d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d68:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003d6a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6c:	688b      	ldr	r3, [r1, #8]
 8003d6e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	680b      	ldr	r3, [r1, #0]
 8003d72:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <TIM_Base_SetConfig+0x6c>)
 8003d76:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d78:	bf04      	itt	eq
 8003d7a:	690b      	ldreq	r3, [r1, #16]
 8003d7c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	6143      	str	r3, [r0, #20]
}
 8003d82:	4770      	bx	lr
 8003d84:	40012c00 	.word	0x40012c00

08003d88 <HAL_TIM_Base_Init>:
{
 8003d88:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	b330      	cbz	r0, 8003ddc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d96:	b91b      	cbnz	r3, 8003da0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003d98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d9c:	f7fd f80e 	bl	8000dbc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da8:	1d21      	adds	r1, r4, #4
 8003daa:	f7ff ffb5 	bl	8003d18 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dae:	2301      	movs	r3, #1
  return HAL_OK;
 8003db0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003dba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003dbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003dc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003dd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003dd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003dda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ddc:	2001      	movs	r0, #1
 8003dde:	e7fc      	b.n	8003dda <HAL_TIM_Base_Init+0x52>

08003de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003dee:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df0:	6082      	str	r2, [r0, #8]
}
 8003df2:	bd10      	pop	{r4, pc}

08003df4 <HAL_TIM_ConfigClockSource>:
{
 8003df4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003df6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003dfa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	f04f 0302 	mov.w	r3, #2
 8003e02:	f000 8091 	beq.w	8003f28 <HAL_TIM_ConfigClockSource+0x134>
 8003e06:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003e0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	6800      	ldr	r0, [r0, #0]
 8003e12:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003e1c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003e1e:	680b      	ldr	r3, [r1, #0]
 8003e20:	2b60      	cmp	r3, #96	; 0x60
 8003e22:	d052      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0xd6>
 8003e24:	d833      	bhi.n	8003e8e <HAL_TIM_ConfigClockSource+0x9a>
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d067      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x106>
 8003e2a:	d816      	bhi.n	8003e5a <HAL_TIM_ConfigClockSource+0x66>
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d00d      	beq.n	8003e4c <HAL_TIM_ConfigClockSource+0x58>
 8003e30:	d80a      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x54>
 8003e32:	f033 0110 	bics.w	r1, r3, #16
 8003e36:	d009      	beq.n	8003e4c <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003e44:	4610      	mov	r0, r2
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d1f5      	bne.n	8003e38 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8003e4c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f043 0307 	orr.w	r3, r3, #7
 8003e58:	e017      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003e5a:	2b50      	cmp	r3, #80	; 0x50
 8003e5c:	d1ec      	bne.n	8003e38 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5e:	684a      	ldr	r2, [r1, #4]
 8003e60:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003e62:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e64:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e66:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6a:	f025 0501 	bic.w	r5, r5, #1
 8003e6e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e70:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003e72:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e78:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003e7c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e7e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003e80:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e86:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003e8a:	6083      	str	r3, [r0, #8]
 8003e8c:	e011      	b.n	8003eb2 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d00e      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0xbe>
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e98:	d00d      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xc2>
 8003e9a:	2b70      	cmp	r3, #112	; 0x70
 8003e9c:	d1cc      	bne.n	8003e38 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003e9e:	68cb      	ldr	r3, [r1, #12]
 8003ea0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003ea4:	f7ff ff9c 	bl	8003de0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	e7c0      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	68cb      	ldr	r3, [r1, #12]
 8003eb8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003ebc:	f7ff ff90 	bl	8003de0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	6893      	ldr	r3, [r2, #8]
 8003ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec8:	e7f2      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0xbc>
  tmpccer = TIMx->CCER;
 8003eca:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ecc:	684d      	ldr	r5, [r1, #4]
 8003ece:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed0:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed6:	f021 0110 	bic.w	r1, r1, #16
 8003eda:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003edc:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ede:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ee2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003eea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003eec:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003eee:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003ef8:	e7c7      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efa:	684a      	ldr	r2, [r1, #4]
 8003efc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003efe:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f00:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f02:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f06:	f025 0501 	bic.w	r5, r5, #1
 8003f0a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003f0e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f14:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003f18:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f1a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003f1c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f22:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003f26:	e7b0      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003f28:	461a      	mov	r2, r3
 8003f2a:	e78b      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x50>

08003f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f2c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003f32:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f04f 0002 	mov.w	r0, #2
 8003f3a:	d022      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003f42:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f44:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f46:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f4a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f4e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f50:	4c0c      	ldr	r4, [pc, #48]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003f52:	42a3      	cmp	r3, r4
 8003f54:	d00a      	beq.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5a:	d007      	beq.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003f5c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003f60:	42a3      	cmp	r3, r4
 8003f62:	d003      	beq.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003f64:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f6c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f6e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f72:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f74:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f76:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003f78:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f7a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f7e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003f82:	bd30      	pop	{r4, r5, pc}
 8003f84:	40012c00 	.word	0x40012c00

08003f88 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f88:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	f102 030c 	add.w	r3, r2, #12
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	320c      	adds	r2, #12
 8003f98:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003f9c:	6802      	ldr	r2, [r0, #0]
 8003f9e:	2900      	cmp	r1, #0
 8003fa0:	d1f2      	bne.n	8003f88 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	f102 0314 	add.w	r3, r2, #20
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	f102 0c14 	add.w	ip, r2, #20
 8003fb2:	e84c 3100 	strex	r1, r3, [ip]
 8003fb6:	2900      	cmp	r1, #0
 8003fb8:	d1f3      	bne.n	8003fa2 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10b      	bne.n	8003fd8 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	f102 030c 	add.w	r3, r2, #12
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	f102 0c0c 	add.w	ip, r2, #12
 8003fd0:	e84c 3100 	strex	r1, r3, [ip]
 8003fd4:	2900      	cmp	r1, #0
 8003fd6:	d1f3      	bne.n	8003fc0 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	2320      	movs	r3, #32
 8003fda:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003fe2:	4770      	bx	lr

08003fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe8:	6803      	ldr	r3, [r0, #0]
 8003fea:	68c1      	ldr	r1, [r0, #12]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ff6:	6882      	ldr	r2, [r0, #8]
 8003ff8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003ffa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ffc:	4302      	orrs	r2, r0
 8003ffe:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004000:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004004:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004008:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800400a:	430a      	orrs	r2, r1
 800400c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	69a1      	ldr	r1, [r4, #24]
 8004012:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004016:	430a      	orrs	r2, r1
 8004018:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <UART_SetConfig+0x70>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d115      	bne.n	800404c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7ff fd18 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004024:	2319      	movs	r3, #25
 8004026:	4343      	muls	r3, r0
 8004028:	6862      	ldr	r2, [r4, #4]
 800402a:	6820      	ldr	r0, [r4, #0]
 800402c:	0092      	lsls	r2, r2, #2
 800402e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004032:	2264      	movs	r2, #100	; 0x64
 8004034:	fbb3 f1f2 	udiv	r1, r3, r2
 8004038:	fb02 3311 	mls	r3, r2, r1, r3
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	3332      	adds	r3, #50	; 0x32
 8004040:	fbb3 f3f2 	udiv	r3, r3, r2
 8004044:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004048:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800404a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800404c:	f7ff fcf2 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8004050:	e7e8      	b.n	8004024 <UART_SetConfig+0x40>
 8004052:	bf00      	nop
 8004054:	40013800 	.word	0x40013800

08004058 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	4604      	mov	r4, r0
 800405c:	460e      	mov	r6, r1
 800405e:	4617      	mov	r7, r2
 8004060:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	6813      	ldr	r3, [r2, #0]
 8004066:	ea36 0303 	bics.w	r3, r6, r3
 800406a:	d101      	bne.n	8004070 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800406c:	2000      	movs	r0, #0
 800406e:	e028      	b.n	80040c2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8004070:	1c6b      	adds	r3, r5, #1
 8004072:	d0f7      	beq.n	8004064 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004074:	b125      	cbz	r5, 8004080 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8004076:	f7fe f869 	bl	800214c <HAL_GetTick>
 800407a:	1bc0      	subs	r0, r0, r7
 800407c:	4285      	cmp	r5, r0
 800407e:	d2f0      	bcs.n	8004062 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004080:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	f102 030c 	add.w	r3, r2, #12
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	320c      	adds	r2, #12
 8004090:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	2800      	cmp	r0, #0
 8004098:	d1f2      	bne.n	8004080 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	f101 0314 	add.w	r3, r1, #20
 800409e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	f101 0014 	add.w	r0, r1, #20
 80040aa:	e840 3200 	strex	r2, r3, [r0]
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	d1f3      	bne.n	800409a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80040b2:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80040b4:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80040b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80040ba:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80040be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80040c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040c4 <HAL_UART_Init>:
{
 80040c4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80040c6:	4604      	mov	r4, r0
 80040c8:	b348      	cbz	r0, 800411e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80040ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80040ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040d2:	b91b      	cbnz	r3, 80040dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80040d4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80040d8:	f7fd ff4e 	bl	8001f78 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80040dc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80040de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80040e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80040e4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80040e6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80040e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ec:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80040ee:	f7ff ff79 	bl	8003fe4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004104:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800410c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800410e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004112:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004116:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800411c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800411e:	2001      	movs	r0, #1
 8004120:	e7fc      	b.n	800411c <HAL_UART_Init+0x58>

08004122 <HAL_UART_DeInit>:
{
 8004122:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004124:	4604      	mov	r4, r0
 8004126:	b1a0      	cbz	r0, 8004152 <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8004128:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800412a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800412c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8004130:	68d3      	ldr	r3, [r2, #12]
 8004132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004136:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8004138:	f7fd ff7a 	bl	8002030 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	2000      	movs	r0, #0
 800413e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 8004140:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004144:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8004148:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800414e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8004150:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004152:	2001      	movs	r0, #1
 8004154:	e7fc      	b.n	8004150 <HAL_UART_DeInit+0x2e>

08004156 <HAL_UART_Transmit>:
{
 8004156:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800415a:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800415c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004160:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004162:	2b20      	cmp	r3, #32
{
 8004164:	460e      	mov	r6, r1
 8004166:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004168:	d13c      	bne.n	80041e4 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 800416a:	2900      	cmp	r1, #0
 800416c:	d03c      	beq.n	80041e8 <HAL_UART_Transmit+0x92>
 800416e:	2a00      	cmp	r2, #0
 8004170:	d03a      	beq.n	80041e8 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004172:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004174:	2500      	movs	r5, #0
 8004176:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004178:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 800417c:	f7fd ffe6 	bl	800214c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004180:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004182:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8004188:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800418a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	d103      	bne.n	8004196 <HAL_UART_Transmit+0x40>
 800418e:	6923      	ldr	r3, [r4, #16]
 8004190:	b90b      	cbnz	r3, 8004196 <HAL_UART_Transmit+0x40>
 8004192:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004194:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8004196:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004198:	b29b      	uxth	r3, r3
 800419a:	b953      	cbnz	r3, 80041b2 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800419c:	464b      	mov	r3, r9
 800419e:	4642      	mov	r2, r8
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	4620      	mov	r0, r4
 80041a4:	f7ff ff58 	bl	8004058 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80041a8:	b950      	cbnz	r0, 80041c0 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80041aa:	2320      	movs	r3, #32
 80041ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80041b0:	e007      	b.n	80041c2 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041b2:	464b      	mov	r3, r9
 80041b4:	4642      	mov	r2, r8
 80041b6:	2180      	movs	r1, #128	; 0x80
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7ff ff4d 	bl	8004058 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80041be:	b110      	cbz	r0, 80041c6 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 80041c0:	2003      	movs	r0, #3
}
 80041c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80041c8:	b94e      	cbnz	r6, 80041de <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ca:	f835 3b02 	ldrh.w	r3, [r5], #2
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041d2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80041d4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80041d6:	3901      	subs	r1, #1
 80041d8:	b289      	uxth	r1, r1
 80041da:	84e1      	strh	r1, [r4, #38]	; 0x26
 80041dc:	e7db      	b.n	8004196 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041de:	f816 3b01 	ldrb.w	r3, [r6], #1
 80041e2:	e7f6      	b.n	80041d2 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 80041e4:	2002      	movs	r0, #2
 80041e6:	e7ec      	b.n	80041c2 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 80041e8:	2001      	movs	r0, #1
 80041ea:	e7ea      	b.n	80041c2 <HAL_UART_Transmit+0x6c>

080041ec <HAL_UART_TxCpltCallback>:
 80041ec:	4770      	bx	lr

080041ee <HAL_UART_RxHalfCpltCallback>:
 80041ee:	4770      	bx	lr

080041f0 <UART_DMAError>:
{
 80041f0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041f4:	6803      	ldr	r3, [r0, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041f8:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80041fc:	2921      	cmp	r1, #33	; 0x21
 80041fe:	d112      	bne.n	8004226 <UART_DMAError+0x36>
 8004200:	0612      	lsls	r2, r2, #24
 8004202:	d510      	bpl.n	8004226 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8004204:	2200      	movs	r2, #0
 8004206:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	f103 020c 	add.w	r2, r3, #12
 800420c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004210:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	f103 0c0c 	add.w	ip, r3, #12
 8004218:	e84c 2100 	strex	r1, r2, [ip]
 800421c:	2900      	cmp	r1, #0
 800421e:	d1f3      	bne.n	8004208 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8004220:	2220      	movs	r2, #32
 8004222:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004226:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004228:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 800422c:	2a22      	cmp	r2, #34	; 0x22
 800422e:	d105      	bne.n	800423c <UART_DMAError+0x4c>
 8004230:	065b      	lsls	r3, r3, #25
 8004232:	d503      	bpl.n	800423c <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8004234:	2300      	movs	r3, #0
 8004236:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004238:	f7ff fea6 	bl	8003f88 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800423c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800423e:	f043 0310 	orr.w	r3, r3, #16
 8004242:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8004244:	f7fd fe95 	bl	8001f72 <HAL_UART_ErrorCallback>
}
 8004248:	bd08      	pop	{r3, pc}

0800424a <UART_DMAAbortOnError>:
{
 800424a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800424c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004250:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004252:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004254:	f7fd fe8d 	bl	8001f72 <HAL_UART_ErrorCallback>
}
 8004258:	bd08      	pop	{r3, pc}

0800425a <HAL_UARTEx_RxEventCallback>:
}
 800425a:	4770      	bx	lr

0800425c <UART_DMARxHalfCplt>:
{
 800425c:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800425e:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004260:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004262:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004266:	2b01      	cmp	r3, #1
 8004268:	d104      	bne.n	8004274 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800426a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800426c:	0849      	lsrs	r1, r1, #1
 800426e:	f7ff fff4 	bl	800425a <HAL_UARTEx_RxEventCallback>
}
 8004272:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8004274:	f7ff ffbb 	bl	80041ee <HAL_UART_RxHalfCpltCallback>
}
 8004278:	e7fb      	b.n	8004272 <UART_DMARxHalfCplt+0x16>

0800427a <UART_DMAReceiveCplt>:
{
 800427a:	b508      	push	{r3, lr}
 800427c:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800427e:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004280:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f013 0320 	ands.w	r3, r3, #32
 8004288:	d137      	bne.n	80042fa <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 800428a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	f102 030c 	add.w	r3, r2, #12
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	320c      	adds	r2, #12
 800429c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80042a0:	6803      	ldr	r3, [r0, #0]
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d1f2      	bne.n	800428c <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	f103 0214 	add.w	r2, r3, #20
 80042aa:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	f103 0c14 	add.w	ip, r3, #20
 80042b6:	e84c 2100 	strex	r1, r2, [ip]
 80042ba:	2900      	cmp	r1, #0
 80042bc:	d1f3      	bne.n	80042a6 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	f103 0214 	add.w	r2, r3, #20
 80042c2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	f103 0c14 	add.w	ip, r3, #20
 80042ce:	e84c 2100 	strex	r1, r2, [ip]
 80042d2:	2900      	cmp	r1, #0
 80042d4:	d1f3      	bne.n	80042be <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80042d6:	2220      	movs	r2, #32
 80042d8:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042dc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80042de:	2a01      	cmp	r2, #1
 80042e0:	d10b      	bne.n	80042fa <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	f103 020c 	add.w	r2, r3, #12
 80042e6:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	f103 0c0c 	add.w	ip, r3, #12
 80042f2:	e84c 2100 	strex	r1, r2, [ip]
 80042f6:	2900      	cmp	r1, #0
 80042f8:	d1f3      	bne.n	80042e2 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042fa:	2300      	movs	r3, #0
 80042fc:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004300:	2b01      	cmp	r3, #1
 8004302:	d103      	bne.n	800430c <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004304:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004306:	f7ff ffa8 	bl	800425a <HAL_UARTEx_RxEventCallback>
}
 800430a:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 800430c:	f7fd fe32 	bl	8001f74 <HAL_UART_RxCpltCallback>
}
 8004310:	e7fb      	b.n	800430a <UART_DMAReceiveCplt+0x90>

08004312 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004312:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004314:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004316:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004318:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431c:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431e:	d13f      	bne.n	80043a0 <UART_Receive_IT.part.0.isra.0+0x8e>
 8004320:	6901      	ldr	r1, [r0, #16]
 8004322:	2900      	cmp	r1, #0
 8004324:	d13f      	bne.n	80043a6 <UART_Receive_IT.part.0.isra.0+0x94>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004326:	6852      	ldr	r2, [r2, #4]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 8004330:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004332:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004334:	3b01      	subs	r3, #1
 8004336:	b29b      	uxth	r3, r3
 8004338:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800433a:	2b00      	cmp	r3, #0
 800433c:	d12d      	bne.n	800439a <UART_Receive_IT.part.0.isra.0+0x88>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800433e:	6802      	ldr	r2, [r0, #0]
 8004340:	68d1      	ldr	r1, [r2, #12]
 8004342:	f021 0120 	bic.w	r1, r1, #32
 8004346:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004348:	68d1      	ldr	r1, [r2, #12]
 800434a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800434e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004350:	6951      	ldr	r1, [r2, #20]
 8004352:	f021 0101 	bic.w	r1, r1, #1
 8004356:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004358:	2220      	movs	r2, #32
 800435a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800435e:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004362:	2a01      	cmp	r2, #1
 8004364:	6802      	ldr	r2, [r0, #0]
 8004366:	d128      	bne.n	80043ba <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004368:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	f102 030c 	add.w	r3, r2, #12
 800436e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004372:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	f102 0c0c 	add.w	ip, r2, #12
 800437a:	e84c 3100 	strex	r1, r3, [ip]
 800437e:	2900      	cmp	r1, #0
 8004380:	d1f3      	bne.n	800436a <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	06db      	lsls	r3, r3, #27
 8004386:	d505      	bpl.n	8004394 <UART_Receive_IT.part.0.isra.0+0x82>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004388:	9101      	str	r1, [sp, #4]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	6853      	ldr	r3, [r2, #4]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004394:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004396:	f7ff ff60 	bl	800425a <HAL_UARTEx_RxEventCallback>
}
 800439a:	b003      	add	sp, #12
 800439c:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043a0:	b939      	cbnz	r1, 80043b2 <UART_Receive_IT.part.0.isra.0+0xa0>
 80043a2:	6901      	ldr	r1, [r0, #16]
 80043a4:	b929      	cbnz	r1, 80043b2 <UART_Receive_IT.part.0.isra.0+0xa0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043a6:	6852      	ldr	r2, [r2, #4]
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80043ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043ae:	3301      	adds	r3, #1
 80043b0:	e7be      	b.n	8004330 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043b2:	6852      	ldr	r2, [r2, #4]
 80043b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043b8:	e7f7      	b.n	80043aa <UART_Receive_IT.part.0.isra.0+0x98>
        HAL_UART_RxCpltCallback(huart);
 80043ba:	f7fd fddb 	bl	8001f74 <HAL_UART_RxCpltCallback>
 80043be:	e7ec      	b.n	800439a <UART_Receive_IT.part.0.isra.0+0x88>

080043c0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c0:	6803      	ldr	r3, [r0, #0]
{
 80043c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c4:	681a      	ldr	r2, [r3, #0]
{
 80043c6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80043c8:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043cc:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ce:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80043d0:	d10c      	bne.n	80043ec <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043d2:	0695      	lsls	r5, r2, #26
 80043d4:	d570      	bpl.n	80044b8 <HAL_UART_IRQHandler+0xf8>
 80043d6:	068d      	lsls	r5, r1, #26
 80043d8:	d56e      	bpl.n	80044b8 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043da:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80043de:	2b22      	cmp	r3, #34	; 0x22
 80043e0:	d164      	bne.n	80044ac <HAL_UART_IRQHandler+0xec>
}
 80043e2:	b003      	add	sp, #12
 80043e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043e8:	f7ff bf93 	b.w	8004312 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ec:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043f0:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80043f4:	4305      	orrs	r5, r0
 80043f6:	d05f      	beq.n	80044b8 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043f8:	07d5      	lsls	r5, r2, #31
 80043fa:	d505      	bpl.n	8004408 <HAL_UART_IRQHandler+0x48>
 80043fc:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043fe:	bf42      	ittt	mi
 8004400:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8004402:	f043 0301 	orrmi.w	r3, r3, #1
 8004406:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004408:	0755      	lsls	r5, r2, #29
 800440a:	d504      	bpl.n	8004416 <HAL_UART_IRQHandler+0x56>
 800440c:	b118      	cbz	r0, 8004416 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800440e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004416:	0793      	lsls	r3, r2, #30
 8004418:	d504      	bpl.n	8004424 <HAL_UART_IRQHandler+0x64>
 800441a:	b118      	cbz	r0, 8004424 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800441c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004424:	0715      	lsls	r5, r2, #28
 8004426:	d507      	bpl.n	8004438 <HAL_UART_IRQHandler+0x78>
 8004428:	f001 0320 	and.w	r3, r1, #32
 800442c:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800442e:	bf1e      	ittt	ne
 8004430:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8004432:	f043 0308 	orrne.w	r3, r3, #8
 8004436:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004438:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800443a:	2b00      	cmp	r3, #0
 800443c:	d036      	beq.n	80044ac <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800443e:	0690      	lsls	r0, r2, #26
 8004440:	d508      	bpl.n	8004454 <HAL_UART_IRQHandler+0x94>
 8004442:	068a      	lsls	r2, r1, #26
 8004444:	d506      	bpl.n	8004454 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004446:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800444a:	2b22      	cmp	r3, #34	; 0x22
 800444c:	d102      	bne.n	8004454 <HAL_UART_IRQHandler+0x94>
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff ff5f 	bl	8004312 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004454:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8004456:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004458:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800445a:	6c65      	ldr	r5, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004460:	f005 0508 	and.w	r5, r5, #8
 8004464:	431d      	orrs	r5, r3
 8004466:	d023      	beq.n	80044b0 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8004468:	f7ff fd8e 	bl	8003f88 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	6953      	ldr	r3, [r2, #20]
 8004470:	065b      	lsls	r3, r3, #25
 8004472:	d518      	bpl.n	80044a6 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	f102 0314 	add.w	r3, r2, #20
 8004478:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	f102 0014 	add.w	r0, r2, #20
 8004484:	e840 3100 	strex	r1, r3, [r0]
 8004488:	2900      	cmp	r1, #0
 800448a:	d1f3      	bne.n	8004474 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 800448c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800448e:	b150      	cbz	r0, 80044a6 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004490:	4b73      	ldr	r3, [pc, #460]	; (8004660 <HAL_UART_IRQHandler+0x2a0>)
 8004492:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004494:	f7fd ffa6 	bl	80023e4 <HAL_DMA_Abort_IT>
 8004498:	b140      	cbz	r0, 80044ac <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800449a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800449c:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800449e:	b003      	add	sp, #12
 80044a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044a4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80044a6:	4620      	mov	r0, r4
 80044a8:	f7fd fd63 	bl	8001f72 <HAL_UART_ErrorCallback>
}
 80044ac:	b003      	add	sp, #12
 80044ae:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80044b0:	f7fd fd5f 	bl	8001f72 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b4:	6465      	str	r5, [r4, #68]	; 0x44
 80044b6:	e7f9      	b.n	80044ac <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80044ba:	2801      	cmp	r0, #1
 80044bc:	f040 8094 	bne.w	80045e8 <HAL_UART_IRQHandler+0x228>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044c0:	06d5      	lsls	r5, r2, #27
 80044c2:	f140 8091 	bpl.w	80045e8 <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044c6:	06c8      	lsls	r0, r1, #27
 80044c8:	f140 808e 	bpl.w	80045e8 <HAL_UART_IRQHandler+0x228>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044cc:	2200      	movs	r2, #0
 80044ce:	9201      	str	r2, [sp, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	9201      	str	r2, [sp, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	9201      	str	r2, [sp, #4]
 80044d8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	0655      	lsls	r5, r2, #25
 80044de:	d54d      	bpl.n	800457c <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80044e2:	680a      	ldr	r2, [r1, #0]
 80044e4:	6852      	ldr	r2, [r2, #4]
 80044e6:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80044e8:	2a00      	cmp	r2, #0
 80044ea:	d0df      	beq.n	80044ac <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ec:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80044ee:	4290      	cmp	r0, r2
 80044f0:	d9dc      	bls.n	80044ac <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 80044f2:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044f4:	698a      	ldr	r2, [r1, #24]
 80044f6:	2a20      	cmp	r2, #32
 80044f8:	d036      	beq.n	8004568 <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	f103 020c 	add.w	r2, r3, #12
 80044fe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	f103 000c 	add.w	r0, r3, #12
 800450a:	e840 2100 	strex	r1, r2, [r0]
 800450e:	2900      	cmp	r1, #0
 8004510:	d1f3      	bne.n	80044fa <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	f103 0214 	add.w	r2, r3, #20
 8004516:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	f103 0014 	add.w	r0, r3, #20
 8004522:	e840 2100 	strex	r1, r2, [r0]
 8004526:	2900      	cmp	r1, #0
 8004528:	d1f3      	bne.n	8004512 <HAL_UART_IRQHandler+0x152>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	f103 0214 	add.w	r2, r3, #20
 800452e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	f103 0014 	add.w	r0, r3, #20
 800453a:	e840 2100 	strex	r1, r2, [r0]
 800453e:	2900      	cmp	r1, #0
 8004540:	d1f3      	bne.n	800452a <HAL_UART_IRQHandler+0x16a>
          huart->RxState = HAL_UART_STATE_READY;
 8004542:	2220      	movs	r2, #32
 8004544:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004548:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	f103 020c 	add.w	r2, r3, #12
 800454e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	f103 000c 	add.w	r0, r3, #12
 800455a:	e840 2100 	strex	r1, r2, [r0]
 800455e:	2900      	cmp	r1, #0
 8004560:	d1f3      	bne.n	800454a <HAL_UART_IRQHandler+0x18a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004562:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004564:	f7fd ff1c 	bl	80023a0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004568:	2302      	movs	r3, #2
 800456a:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800456c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800456e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004570:	1ac9      	subs	r1, r1, r3
 8004572:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004574:	4620      	mov	r0, r4
 8004576:	f7ff fe70 	bl	800425a <HAL_UARTEx_RxEventCallback>
 800457a:	e797      	b.n	80044ac <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800457c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800457e:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8004580:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004582:	b289      	uxth	r1, r1
 8004584:	2900      	cmp	r1, #0
 8004586:	d091      	beq.n	80044ac <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004588:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800458a:	1a89      	subs	r1, r1, r2
 800458c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800458e:	2900      	cmp	r1, #0
 8004590:	d08c      	beq.n	80044ac <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	f103 020c 	add.w	r2, r3, #12
 8004596:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	f103 050c 	add.w	r5, r3, #12
 80045a2:	e845 2000 	strex	r0, r2, [r5]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d1f3      	bne.n	8004592 <HAL_UART_IRQHandler+0x1d2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	f103 0214 	add.w	r2, r3, #20
 80045ae:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	f103 0514 	add.w	r5, r3, #20
 80045ba:	e845 2000 	strex	r0, r2, [r5]
 80045be:	2800      	cmp	r0, #0
 80045c0:	d1f3      	bne.n	80045aa <HAL_UART_IRQHandler+0x1ea>
        huart->RxState = HAL_UART_STATE_READY;
 80045c2:	2220      	movs	r2, #32
 80045c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	f103 020c 	add.w	r2, r3, #12
 80045ce:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	f103 050c 	add.w	r5, r3, #12
 80045da:	e845 2000 	strex	r0, r2, [r5]
 80045de:	2800      	cmp	r0, #0
 80045e0:	d1f3      	bne.n	80045ca <HAL_UART_IRQHandler+0x20a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045e2:	2302      	movs	r3, #2
 80045e4:	6363      	str	r3, [r4, #52]	; 0x34
 80045e6:	e7c5      	b.n	8004574 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045e8:	0610      	lsls	r0, r2, #24
 80045ea:	d528      	bpl.n	800463e <HAL_UART_IRQHandler+0x27e>
 80045ec:	060d      	lsls	r5, r1, #24
 80045ee:	d526      	bpl.n	800463e <HAL_UART_IRQHandler+0x27e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045f0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80045f4:	2a21      	cmp	r2, #33	; 0x21
 80045f6:	f47f af59 	bne.w	80044ac <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045fc:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fe:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004602:	d117      	bne.n	8004634 <HAL_UART_IRQHandler+0x274>
 8004604:	6921      	ldr	r1, [r4, #16]
 8004606:	b9a9      	cbnz	r1, 8004634 <HAL_UART_IRQHandler+0x274>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004608:	f832 1b02 	ldrh.w	r1, [r2], #2
 800460c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004610:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004612:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004614:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004616:	3a01      	subs	r2, #1
 8004618:	b292      	uxth	r2, r2
 800461a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800461c:	2a00      	cmp	r2, #0
 800461e:	f47f af45 	bne.w	80044ac <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004628:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	e73b      	b.n	80044ac <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004634:	1c51      	adds	r1, r2, #1
 8004636:	6221      	str	r1, [r4, #32]
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	e7ea      	b.n	8004614 <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800463e:	0650      	lsls	r0, r2, #25
 8004640:	f57f af34 	bpl.w	80044ac <HAL_UART_IRQHandler+0xec>
 8004644:	064a      	lsls	r2, r1, #25
 8004646:	f57f af31 	bpl.w	80044ac <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800464a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800464c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800464e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004652:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004654:	2320      	movs	r3, #32
 8004656:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 800465a:	f7ff fdc7 	bl	80041ec <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800465e:	e725      	b.n	80044ac <HAL_UART_IRQHandler+0xec>
 8004660:	0800424b 	.word	0x0800424b

08004664 <UART_Start_Receive_DMA>:
{
 8004664:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004666:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8004668:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466a:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800466c:	2222      	movs	r2, #34	; 0x22
{
 800466e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8004670:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004672:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004674:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004678:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800467a:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800467c:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800467e:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <UART_Start_Receive_DMA+0x90>)
 8004682:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004684:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8004686:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800468a:	460a      	mov	r2, r1
 800468c:	1d31      	adds	r1, r6, #4
 800468e:	f7fd fe4b 	bl	8002328 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	9501      	str	r5, [sp, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	9201      	str	r2, [sp, #4]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	9201      	str	r2, [sp, #4]
 800469e:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046a0:	6922      	ldr	r2, [r4, #16]
 80046a2:	b15a      	cbz	r2, 80046bc <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	f103 020c 	add.w	r2, r3, #12
 80046a8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	f103 000c 	add.w	r0, r3, #12
 80046b4:	e840 2100 	strex	r1, r2, [r0]
 80046b8:	2900      	cmp	r1, #0
 80046ba:	d1f3      	bne.n	80046a4 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	f103 0214 	add.w	r2, r3, #20
 80046c0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c4:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	f103 0014 	add.w	r0, r3, #20
 80046cc:	e840 2100 	strex	r1, r2, [r0]
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d1f3      	bne.n	80046bc <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	f103 0214 	add.w	r2, r3, #20
 80046d8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	f103 0114 	add.w	r1, r3, #20
 80046e4:	e841 2000 	strex	r0, r2, [r1]
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d1f3      	bne.n	80046d4 <UART_Start_Receive_DMA+0x70>
}
 80046ec:	b002      	add	sp, #8
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	0800427b 	.word	0x0800427b
 80046f4:	0800425d 	.word	0x0800425d
 80046f8:	080041f1 	.word	0x080041f1

080046fc <HAL_UART_Receive_DMA>:
{
 80046fc:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 80046fe:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8004702:	2e20      	cmp	r6, #32
 8004704:	d106      	bne.n	8004714 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8004706:	b141      	cbz	r1, 800471a <HAL_UART_Receive_DMA+0x1e>
 8004708:	b13a      	cbz	r2, 800471a <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	2400      	movs	r4, #0
 800470c:	6304      	str	r4, [r0, #48]	; 0x30
}
 800470e:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004710:	f7ff bfa8 	b.w	8004664 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8004714:	2002      	movs	r0, #2
}
 8004716:	bc70      	pop	{r4, r5, r6}
 8004718:	4770      	bx	lr
      return HAL_ERROR;
 800471a:	2001      	movs	r0, #1
 800471c:	e7fb      	b.n	8004716 <HAL_UART_Receive_DMA+0x1a>

0800471e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800471e:	b084      	sub	sp, #16
 8004720:	a801      	add	r0, sp, #4
 8004722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004726:	b004      	add	sp, #16
 8004728:	2000      	movs	r0, #0
 800472a:	4770      	bx	lr

0800472c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800472c:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800472e:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8004732:	2000      	movs	r0, #0
 8004734:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800473c:	4770      	bx	lr

0800473e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800473e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004742:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004746:	045b      	lsls	r3, r3, #17
 8004748:	0c5b      	lsrs	r3, r3, #17
 800474a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800474e:	2000      	movs	r0, #0
 8004750:	4770      	bx	lr

08004752 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004752:	2000      	movs	r0, #0
 8004754:	4770      	bx	lr

08004756 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004756:	b084      	sub	sp, #16
 8004758:	b510      	push	{r4, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	a803      	add	r0, sp, #12
 800475e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004762:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004764:	2301      	movs	r3, #1
 8004766:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 800476a:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800476e:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004772:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8004776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800477a:	b004      	add	sp, #16
 800477c:	4770      	bx	lr
	...

08004780 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004780:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004782:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004784:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004786:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 800478a:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800478c:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8004790:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8004794:	0424      	lsls	r4, r4, #16
 8004796:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8004798:	2e03      	cmp	r6, #3
 800479a:	d84c      	bhi.n	8004836 <USB_ActivateEndpoint+0xb6>
 800479c:	e8df f006 	tbb	[pc, r6]
 80047a0:	44464802 	.word	0x44464802
  HAL_StatusTypeDef ret = HAL_OK;
 80047a4:	4630      	mov	r0, r6
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047a6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047aa:	f248 0780 	movw	r7, #32896	; 0x8080
 80047ae:	433c      	orrs	r4, r7
 80047b0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047b4:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80047b8:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8004a38 <USB_ActivateEndpoint+0x2b8>
 80047bc:	b2a4      	uxth	r4, r4
 80047be:	ea04 040c 	and.w	r4, r4, ip
 80047c2:	4314      	orrs	r4, r2
 80047c4:	433c      	orrs	r4, r7
 80047c6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80047ca:	7b0c      	ldrb	r4, [r1, #12]
 80047cc:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	f040 808b 	bne.w	80048ec <USB_ActivateEndpoint+0x16c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047d6:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 80047d8:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047da:	086d      	lsrs	r5, r5, #1
 80047dc:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 80047de:	b364      	cbz	r4, 800483a <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047e0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80047e4:	b2a4      	uxth	r4, r4
 80047e6:	4474      	add	r4, lr
 80047e8:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80047f0:	064f      	lsls	r7, r1, #25
 80047f2:	d50a      	bpl.n	800480a <USB_ActivateEndpoint+0x8a>
 80047f4:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80047f8:	b2ad      	uxth	r5, r5
 80047fa:	ea05 050c 	and.w	r5, r5, ip
 80047fe:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8004802:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8004806:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800480a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800480e:	4c8b      	ldr	r4, [pc, #556]	; (8004a3c <USB_ActivateEndpoint+0x2bc>)
 8004810:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8004812:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004814:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004818:	d001      	beq.n	800481e <USB_ActivateEndpoint+0x9e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800481a:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800481e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004822:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004826:	e0bf      	b.n	80049a8 <USB_ActivateEndpoint+0x228>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004828:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800482c:	2000      	movs	r0, #0
      break;
 800482e:	e7bc      	b.n	80047aa <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004830:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8004834:	e7fa      	b.n	800482c <USB_ActivateEndpoint+0xac>
  switch (ep->type)
 8004836:	2001      	movs	r0, #1
 8004838:	e7b7      	b.n	80047aa <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800483a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800483e:	b2a4      	uxth	r4, r4
 8004840:	4474      	add	r4, lr
 8004842:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004846:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800484a:	b2a4      	uxth	r4, r4
 800484c:	4474      	add	r4, lr
 800484e:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 8004852:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004856:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 800485a:	690d      	ldr	r5, [r1, #16]
 800485c:	2d3e      	cmp	r5, #62	; 0x3e
 800485e:	d92f      	bls.n	80048c0 <USB_ActivateEndpoint+0x140>
 8004860:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8004864:	096e      	lsrs	r6, r5, #5
 8004866:	06ed      	lsls	r5, r5, #27
 8004868:	bf08      	it	eq
 800486a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800486e:	b289      	uxth	r1, r1
 8004870:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004874:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004878:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800487c:	b289      	uxth	r1, r1
 800487e:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004882:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004886:	044f      	lsls	r7, r1, #17
 8004888:	d50d      	bpl.n	80048a6 <USB_ActivateEndpoint+0x126>
 800488a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800488e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004892:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004896:	0409      	lsls	r1, r1, #16
 8004898:	0c09      	lsrs	r1, r1, #16
 800489a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800489e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80048a2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 80048a6:	4c66      	ldr	r4, [pc, #408]	; (8004a40 <USB_ActivateEndpoint+0x2c0>)
 80048a8:	b9ca      	cbnz	r2, 80048de <USB_ActivateEndpoint+0x15e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048aa:	8819      	ldrh	r1, [r3, #0]
 80048ac:	b289      	uxth	r1, r1
 80048ae:	4021      	ands	r1, r4
 80048b0:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80048b4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80048b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80048bc:	8019      	strh	r1, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80048be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048c0:	b915      	cbnz	r5, 80048c8 <USB_ActivateEndpoint+0x148>
 80048c2:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80048c6:	e7d5      	b.n	8004874 <USB_ActivateEndpoint+0xf4>
 80048c8:	07e9      	lsls	r1, r5, #31
 80048ca:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80048ce:	ea4f 0655 	mov.w	r6, r5, lsr #1
 80048d2:	bf48      	it	mi
 80048d4:	3601      	addmi	r6, #1
 80048d6:	b289      	uxth	r1, r1
 80048d8:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80048dc:	e7ce      	b.n	800487c <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048e2:	b289      	uxth	r1, r1
 80048e4:	4021      	ands	r1, r4
 80048e6:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80048ea:	e798      	b.n	800481e <USB_ActivateEndpoint+0x9e>
    if (ep->type == EP_TYPE_BULK)
 80048ec:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80048ee:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 80048f2:	d15c      	bne.n	80049ae <USB_ActivateEndpoint+0x22e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80048f4:	b2ad      	uxth	r5, r5
 80048f6:	ea05 050c 	and.w	r5, r5, ip
 80048fa:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 80048fe:	f045 0580 	orr.w	r5, r5, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004902:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004906:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800490a:	890d      	ldrh	r5, [r1, #8]
 800490c:	b2a4      	uxth	r4, r4
 800490e:	086d      	lsrs	r5, r5, #1
 8004910:	4474      	add	r4, lr
 8004912:	006d      	lsls	r5, r5, #1
 8004914:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
 8004918:	894d      	ldrh	r5, [r1, #10]
 800491a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800491e:	086d      	lsrs	r5, r5, #1
 8004920:	b2a4      	uxth	r4, r4
 8004922:	4474      	add	r4, lr
 8004924:	006d      	lsls	r5, r5, #1
 8004926:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 800492a:	7849      	ldrb	r1, [r1, #1]
 800492c:	2900      	cmp	r1, #0
 800492e:	d146      	bne.n	80049be <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004930:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004934:	044e      	lsls	r6, r1, #17
 8004936:	d50d      	bpl.n	8004954 <USB_ActivateEndpoint+0x1d4>
 8004938:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800493c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004940:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004944:	0409      	lsls	r1, r1, #16
 8004946:	0c09      	lsrs	r1, r1, #16
 8004948:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800494c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004950:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004954:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004958:	064d      	lsls	r5, r1, #25
 800495a:	d50d      	bpl.n	8004978 <USB_ActivateEndpoint+0x1f8>
 800495c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004960:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004964:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004968:	0409      	lsls	r1, r1, #16
 800496a:	0c09      	lsrs	r1, r1, #16
 800496c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004970:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004974:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004978:	f248 0480 	movw	r4, #32896	; 0x8080
 800497c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004980:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004984:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004988:	0409      	lsls	r1, r1, #16
 800498a:	0c09      	lsrs	r1, r1, #16
 800498c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8004990:	4321      	orrs	r1, r4
 8004992:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004996:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800499a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800499e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80049a2:	0409      	lsls	r1, r1, #16
 80049a4:	0c09      	lsrs	r1, r1, #16
 80049a6:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049a8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 80049ac:	e787      	b.n	80048be <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049ae:	f425 45e2 	bic.w	r5, r5, #28928	; 0x7100
 80049b2:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80049b6:	042d      	lsls	r5, r5, #16
 80049b8:	0c2d      	lsrs	r5, r5, #16
 80049ba:	433d      	orrs	r5, r7
 80049bc:	e7a1      	b.n	8004902 <USB_ActivateEndpoint+0x182>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049be:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049c2:	044c      	lsls	r4, r1, #17
 80049c4:	d50d      	bpl.n	80049e2 <USB_ActivateEndpoint+0x262>
 80049c6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049ca:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80049ce:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80049d2:	0409      	lsls	r1, r1, #16
 80049d4:	0c09      	lsrs	r1, r1, #16
 80049d6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80049da:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80049de:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049e2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049e6:	0649      	lsls	r1, r1, #25
 80049e8:	d50d      	bpl.n	8004a06 <USB_ActivateEndpoint+0x286>
 80049ea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049ee:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80049f2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80049f6:	0409      	lsls	r1, r1, #16
 80049f8:	0c09      	lsrs	r1, r1, #16
 80049fa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80049fe:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004a02:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a06:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a0a:	4c0c      	ldr	r4, [pc, #48]	; (8004a3c <USB_ActivateEndpoint+0x2bc>)
 8004a0c:	b289      	uxth	r1, r1
 8004a0e:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004a10:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a12:	bf18      	it	ne
 8004a14:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a18:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004a1c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004a20:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a24:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a28:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004a2c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004a30:	0409      	lsls	r1, r1, #16
 8004a32:	0c09      	lsrs	r1, r1, #16
 8004a34:	e6f3      	b.n	800481e <USB_ActivateEndpoint+0x9e>
 8004a36:	bf00      	nop
 8004a38:	ffff8f8f 	.word	0xffff8f8f
 8004a3c:	ffff8fbf 	.word	0xffff8fbf
 8004a40:	ffffbf8f 	.word	0xffffbf8f

08004a44 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004a44:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a46:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004a48:	7b09      	ldrb	r1, [r1, #12]
 8004a4a:	bbd9      	cbnz	r1, 8004ac4 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004a4c:	b30a      	cbz	r2, 8004a92 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a52:	0651      	lsls	r1, r2, #25
 8004a54:	d50d      	bpl.n	8004a72 <USB_DeactivateEndpoint+0x2e>
 8004a56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a5a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004a5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a62:	0412      	lsls	r2, r2, #16
 8004a64:	0c12      	lsrs	r2, r2, #16
 8004a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004a6e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a72:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a76:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a7e:	0412      	lsls	r2, r2, #16
 8004a80:	0c12      	lsrs	r2, r2, #16
 8004a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a8a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004a8e:	2000      	movs	r0, #0
 8004a90:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a92:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a96:	0452      	lsls	r2, r2, #17
 8004a98:	d50d      	bpl.n	8004ab6 <USB_DeactivateEndpoint+0x72>
 8004a9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a9e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004aa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004aa6:	0412      	lsls	r2, r2, #16
 8004aa8:	0c12      	lsrs	r2, r2, #16
 8004aaa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ab2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ab6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004aba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004abe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ac2:	e7dc      	b.n	8004a7e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8004ac4:	2a00      	cmp	r2, #0
 8004ac6:	d148      	bne.n	8004b5a <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ac8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004acc:	0451      	lsls	r1, r2, #17
 8004ace:	d50d      	bpl.n	8004aec <USB_DeactivateEndpoint+0xa8>
 8004ad0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ad4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ad8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004adc:	0412      	lsls	r2, r2, #16
 8004ade:	0c12      	lsrs	r2, r2, #16
 8004ae0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ae8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004af0:	0652      	lsls	r2, r2, #25
 8004af2:	d50d      	bpl.n	8004b10 <USB_DeactivateEndpoint+0xcc>
 8004af4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004af8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004afc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b00:	0412      	lsls	r2, r2, #16
 8004b02:	0c12      	lsrs	r2, r2, #16
 8004b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b08:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004b0c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b10:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004b14:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b18:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b20:	0412      	lsls	r2, r2, #16
 8004b22:	0c12      	lsrs	r2, r2, #16
 8004b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b28:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004b2c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b30:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b3c:	0412      	lsls	r2, r2, #16
 8004b3e:	0c12      	lsrs	r2, r2, #16
 8004b40:	430a      	orrs	r2, r1
 8004b42:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b52:	0412      	lsls	r2, r2, #16
 8004b54:	0c12      	lsrs	r2, r2, #16
 8004b56:	430a      	orrs	r2, r1
 8004b58:	e797      	b.n	8004a8a <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b5e:	0451      	lsls	r1, r2, #17
 8004b60:	d50d      	bpl.n	8004b7e <USB_DeactivateEndpoint+0x13a>
 8004b62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b66:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b6e:	0412      	lsls	r2, r2, #16
 8004b70:	0c12      	lsrs	r2, r2, #16
 8004b72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b7a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b82:	0652      	lsls	r2, r2, #25
 8004b84:	d50d      	bpl.n	8004ba2 <USB_DeactivateEndpoint+0x15e>
 8004b86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b92:	0412      	lsls	r2, r2, #16
 8004b94:	0c12      	lsrs	r2, r2, #16
 8004b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004b9e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba2:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004ba6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004baa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004bae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bb2:	0412      	lsls	r2, r2, #16
 8004bb4:	0c12      	lsrs	r2, r2, #16
 8004bb6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bbe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bc6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bce:	0412      	lsls	r2, r2, #16
 8004bd0:	0c12      	lsrs	r2, r2, #16
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004be0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004be4:	e7b5      	b.n	8004b52 <USB_DeactivateEndpoint+0x10e>

08004be6 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004be6:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004be8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8004bea:	b18b      	cbz	r3, 8004c10 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004bec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c24:	e7ec      	b.n	8004c00 <USB_EPSetStall+0x1a>

08004c26 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004c26:	7b0b      	ldrb	r3, [r1, #12]
 8004c28:	bb3b      	cbnz	r3, 8004c7a <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8004c2a:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c2c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8004c2e:	b333      	cbz	r3, 8004c7e <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c34:	065b      	lsls	r3, r3, #25
 8004c36:	d50d      	bpl.n	8004c54 <USB_EPClearStall+0x2e>
 8004c38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004c54:	78cb      	ldrb	r3, [r1, #3]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d00f      	beq.n	8004c7a <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c82:	045b      	lsls	r3, r3, #17
 8004c84:	d50d      	bpl.n	8004ca2 <USB_EPClearStall+0x7c>
 8004c86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ca2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004cb6:	e7da      	b.n	8004c6e <USB_EPClearStall+0x48>

08004cb8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004cb8:	b911      	cbnz	r1, 8004cc0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	4770      	bx	lr

08004cc4 <USB_DevConnect>:
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	4770      	bx	lr

08004cc8 <USB_DevDisconnect>:
 8004cc8:	2000      	movs	r0, #0
 8004cca:	4770      	bx	lr

08004ccc <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ccc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004cd0:	b280      	uxth	r0, r0
 8004cd2:	4770      	bx	lr

08004cd4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	4770      	bx	lr

08004cd8 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cd8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004cdc:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (count = n; count != 0U; count--)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d100      	bne.n	8004cee <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8004cec:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004cee:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004cf2:	f822 0b04 	strh.w	r0, [r2], #4
  for (count = n; count != 0U; count--)
 8004cf6:	e7f7      	b.n	8004ce8 <USB_WritePMA+0x10>

08004cf8 <USB_EPStartXfer>:
{
 8004cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfc:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8004cfe:	7849      	ldrb	r1, [r1, #1]
{
 8004d00:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8004d02:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8004d04:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8004d06:	f040 811e 	bne.w	8004f46 <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 8004d0a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8004d0e:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d10:	6961      	ldr	r1, [r4, #20]
 8004d12:	4576      	cmp	r6, lr
 8004d14:	bf28      	it	cs
 8004d16:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8004d18:	bb0a      	cbnz	r2, 8004d5e <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d1a:	b2b6      	uxth	r6, r6
 8004d1c:	88e2      	ldrh	r2, [r4, #6]
 8004d1e:	4633      	mov	r3, r6
 8004d20:	f7ff ffda 	bl	8004cd8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d24:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004d28:	7821      	ldrb	r1, [r4, #0]
 8004d2a:	b290      	uxth	r0, r2
 8004d2c:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8004d30:	0109      	lsls	r1, r1, #4
 8004d32:	4402      	add	r2, r0
 8004d34:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004d36:	7822      	ldrb	r2, [r4, #0]
 8004d38:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8004d4c:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d56:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8004d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 8004d5e:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d60:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8004d62:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8004d64:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d66:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8004d6a:	f040 80d6 	bne.w	8004f1a <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 8004d6e:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d70:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8004d74:	f080 80ba 	bcs.w	8004eec <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d80:	0412      	lsls	r2, r2, #16
 8004d82:	0c12      	lsrs	r2, r2, #16
 8004d84:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004d88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d8c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d90:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d94:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d98:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d9a:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8004d9e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004da0:	b297      	uxth	r7, r2
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004da2:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004da4:	d052      	beq.n	8004e4c <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004da6:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8004daa:	443a      	add	r2, r7
 8004dac:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004db0:	8962      	ldrh	r2, [r4, #10]
 8004db2:	f7ff ff91 	bl	8004cd8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004db6:	6a27      	ldr	r7, [r4, #32]
 8004db8:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8004dba:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004dbc:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 8004dbe:	bf8a      	itet	hi
 8004dc0:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 8004dc2:	2300      	movls	r3, #0
 8004dc4:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dc6:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8004dc8:	4431      	add	r1, r6
 8004dca:	6223      	str	r3, [r4, #32]
 8004dcc:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dce:	b2bb      	uxth	r3, r7
 8004dd0:	bb82      	cbnz	r2, 8004e34 <USB_EPStartXfer+0x13c>
 8004dd2:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004dd6:	7826      	ldrb	r6, [r4, #0]
 8004dd8:	b282      	uxth	r2, r0
 8004dda:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8004dde:	0136      	lsls	r6, r6, #4
 8004de0:	4410      	add	r0, r2
 8004de2:	5a32      	ldrh	r2, [r6, r0]
 8004de4:	2f3e      	cmp	r7, #62	; 0x3e
 8004de6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004dea:	5232      	strh	r2, [r6, r0]
 8004dec:	d914      	bls.n	8004e18 <USB_EPStartXfer+0x120>
 8004dee:	06fa      	lsls	r2, r7, #27
 8004df0:	5a32      	ldrh	r2, [r6, r0]
 8004df2:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 8004df6:	bf08      	it	eq
 8004df8:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004dfc:	b292      	uxth	r2, r2
 8004dfe:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8004e02:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004e06:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004e0a:	b292      	uxth	r2, r2
 8004e0c:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e0e:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e10:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e12:	f7ff ff61 	bl	8004cd8 <USB_WritePMA>
 8004e16:	e78e      	b.n	8004d36 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e18:	b90f      	cbnz	r7, 8004e1e <USB_EPStartXfer+0x126>
 8004e1a:	5a32      	ldrh	r2, [r6, r0]
 8004e1c:	e7f1      	b.n	8004e02 <USB_EPStartXfer+0x10a>
 8004e1e:	5a32      	ldrh	r2, [r6, r0]
 8004e20:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 8004e24:	07ff      	lsls	r7, r7, #31
 8004e26:	bf48      	it	mi
 8004e28:	f10c 0c01 	addmi.w	ip, ip, #1
 8004e2c:	b292      	uxth	r2, r2
 8004e2e:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8004e32:	e7ea      	b.n	8004e0a <USB_EPStartXfer+0x112>
 8004e34:	2a01      	cmp	r2, #1
 8004e36:	d1ea      	bne.n	8004e0e <USB_EPStartXfer+0x116>
 8004e38:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004e3c:	7820      	ldrb	r0, [r4, #0]
 8004e3e:	b296      	uxth	r6, r2
 8004e40:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8004e44:	0100      	lsls	r0, r0, #4
 8004e46:	4432      	add	r2, r6
 8004e48:	5283      	strh	r3, [r0, r2]
 8004e4a:	e7e0      	b.n	8004e0e <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e4c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004e50:	443a      	add	r2, r7
 8004e52:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e56:	8922      	ldrh	r2, [r4, #8]
 8004e58:	f7ff ff3e 	bl	8004cd8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004e5c:	6a27      	ldr	r7, [r4, #32]
 8004e5e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8004e60:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004e62:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 8004e64:	bf8a      	itet	hi
 8004e66:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 8004e68:	4643      	movls	r3, r8
 8004e6a:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e6c:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8004e6e:	4431      	add	r1, r6
 8004e70:	6223      	str	r3, [r4, #32]
 8004e72:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e74:	b2bb      	uxth	r3, r7
 8004e76:	bb6a      	cbnz	r2, 8004ed4 <USB_EPStartXfer+0x1dc>
 8004e78:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004e7c:	7826      	ldrb	r6, [r4, #0]
 8004e7e:	b282      	uxth	r2, r0
 8004e80:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8004e84:	0136      	lsls	r6, r6, #4
 8004e86:	4410      	add	r0, r2
 8004e88:	5a32      	ldrh	r2, [r6, r0]
 8004e8a:	2f3e      	cmp	r7, #62	; 0x3e
 8004e8c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e90:	5232      	strh	r2, [r6, r0]
 8004e92:	d911      	bls.n	8004eb8 <USB_EPStartXfer+0x1c0>
 8004e94:	06fa      	lsls	r2, r7, #27
 8004e96:	5a32      	ldrh	r2, [r6, r0]
 8004e98:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 8004e9c:	bf08      	it	eq
 8004e9e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8004ea8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004eac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eb4:	8962      	ldrh	r2, [r4, #10]
 8004eb6:	e7ab      	b.n	8004e10 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004eb8:	b90f      	cbnz	r7, 8004ebe <USB_EPStartXfer+0x1c6>
 8004eba:	5a32      	ldrh	r2, [r6, r0]
 8004ebc:	e7f4      	b.n	8004ea8 <USB_EPStartXfer+0x1b0>
 8004ebe:	5a32      	ldrh	r2, [r6, r0]
 8004ec0:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 8004ec4:	07ff      	lsls	r7, r7, #31
 8004ec6:	bf48      	it	mi
 8004ec8:	f10c 0c01 	addmi.w	ip, ip, #1
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8004ed2:	e7ed      	b.n	8004eb0 <USB_EPStartXfer+0x1b8>
 8004ed4:	2a01      	cmp	r2, #1
 8004ed6:	d1ed      	bne.n	8004eb4 <USB_EPStartXfer+0x1bc>
 8004ed8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004edc:	7820      	ldrb	r0, [r4, #0]
 8004ede:	b296      	uxth	r6, r2
 8004ee0:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8004ee4:	0100      	lsls	r0, r0, #4
 8004ee6:	4432      	add	r2, r6
 8004ee8:	5283      	strh	r3, [r0, r2]
 8004eea:	e7e3      	b.n	8004eb4 <USB_EPStartXfer+0x1bc>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004eec:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8004ef0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ef4:	0412      	lsls	r2, r2, #16
 8004ef6:	0c12      	lsrs	r2, r2, #16
 8004ef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004efc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f00:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f04:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	b296      	uxth	r6, r2
 8004f0c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004f10:	4432      	add	r2, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f12:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f16:	8922      	ldrh	r2, [r4, #8]
 8004f18:	e77b      	b.n	8004e12 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f1a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 8004f1e:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f20:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f24:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
        ep->xfer_len_db -= len;
 8004f28:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f2a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f2c:	b296      	uxth	r6, r2
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f2e:	d006      	beq.n	8004f3e <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f30:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8004f34:	4432      	add	r2, r6
 8004f36:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f3a:	8962      	ldrh	r2, [r4, #10]
 8004f3c:	e769      	b.n	8004e12 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f3e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004f42:	4432      	add	r2, r6
 8004f44:	e7e5      	b.n	8004f12 <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	d131      	bne.n	8004fae <USB_EPStartXfer+0x2b6>
      if (ep->xfer_len > ep->maxpacket)
 8004f4a:	69a0      	ldr	r0, [r4, #24]
 8004f4c:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f4e:	7821      	ldrb	r1, [r4, #0]
      if (ep->xfer_len > ep->maxpacket)
 8004f50:	4298      	cmp	r0, r3
        ep->xfer_len -= len;
 8004f52:	bf84      	itt	hi
 8004f54:	1ac2      	subhi	r2, r0, r3
 8004f56:	4618      	movhi	r0, r3
 8004f58:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f5a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004f5e:	0109      	lsls	r1, r1, #4
 8004f60:	b293      	uxth	r3, r2
 8004f62:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8004f66:	441a      	add	r2, r3
 8004f68:	5a8b      	ldrh	r3, [r1, r2]
 8004f6a:	283e      	cmp	r0, #62	; 0x3e
 8004f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f70:	528b      	strh	r3, [r1, r2]
 8004f72:	d90d      	bls.n	8004f90 <USB_EPStartXfer+0x298>
 8004f74:	5a8b      	ldrh	r3, [r1, r2]
 8004f76:	0946      	lsrs	r6, r0, #5
 8004f78:	06c0      	lsls	r0, r0, #27
 8004f7a:	bf08      	it	eq
 8004f7c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8e:	e00b      	b.n	8004fa8 <USB_EPStartXfer+0x2b0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f90:	b908      	cbnz	r0, 8004f96 <USB_EPStartXfer+0x29e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f92:	5a53      	ldrh	r3, [r2, r1]
 8004f94:	e7f7      	b.n	8004f86 <USB_EPStartXfer+0x28e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f96:	07c3      	lsls	r3, r0, #31
 8004f98:	5a8b      	ldrh	r3, [r1, r2]
 8004f9a:	ea4f 0650 	mov.w	r6, r0, lsr #1
 8004f9e:	bf48      	it	mi
 8004fa0:	3601      	addmi	r6, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	5253      	strh	r3, [r2, r1]
 8004fac:	e06a      	b.n	8005084 <USB_EPStartXfer+0x38c>
      if (ep->type == EP_TYPE_BULK)
 8004fae:	78e3      	ldrb	r3, [r4, #3]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d17c      	bne.n	80050ae <USB_EPStartXfer+0x3b6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	d14b      	bne.n	8005050 <USB_EPStartXfer+0x358>
 8004fb8:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004fbc:	7820      	ldrb	r0, [r4, #0]
 8004fbe:	b28b      	uxth	r3, r1
 8004fc0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8004fc4:	0100      	lsls	r0, r0, #4
 8004fc6:	4419      	add	r1, r3
 8004fc8:	5a43      	ldrh	r3, [r0, r1]
 8004fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fce:	5243      	strh	r3, [r0, r1]
 8004fd0:	6923      	ldr	r3, [r4, #16]
 8004fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fd4:	d920      	bls.n	8005018 <USB_EPStartXfer+0x320>
 8004fd6:	5a42      	ldrh	r2, [r0, r1]
 8004fd8:	095e      	lsrs	r6, r3, #5
 8004fda:	06df      	lsls	r7, r3, #27
 8004fdc:	bf08      	it	eq
 8004fde:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8004fe8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004fec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004ff0:	b292      	uxth	r2, r2
 8004ff2:	5242      	strh	r2, [r0, r1]
 8004ff4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8004ff8:	7822      	ldrb	r2, [r4, #0]
 8004ffa:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8004ffe:	b289      	uxth	r1, r1
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	4401      	add	r1, r0
 8005004:	5a50      	ldrh	r0, [r2, r1]
 8005006:	2b3e      	cmp	r3, #62	; 0x3e
 8005008:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800500c:	5250      	strh	r0, [r2, r1]
 800500e:	d810      	bhi.n	8005032 <USB_EPStartXfer+0x33a>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d143      	bne.n	800509c <USB_EPStartXfer+0x3a4>
 8005014:	5a53      	ldrh	r3, [r2, r1]
 8005016:	e015      	b.n	8005044 <USB_EPStartXfer+0x34c>
 8005018:	b90b      	cbnz	r3, 800501e <USB_EPStartXfer+0x326>
 800501a:	5a42      	ldrh	r2, [r0, r1]
 800501c:	e7e4      	b.n	8004fe8 <USB_EPStartXfer+0x2f0>
 800501e:	07da      	lsls	r2, r3, #31
 8005020:	5a42      	ldrh	r2, [r0, r1]
 8005022:	ea4f 0653 	mov.w	r6, r3, lsr #1
 8005026:	bf48      	it	mi
 8005028:	3601      	addmi	r6, #1
 800502a:	b292      	uxth	r2, r2
 800502c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005030:	e7de      	b.n	8004ff0 <USB_EPStartXfer+0x2f8>
 8005032:	0958      	lsrs	r0, r3, #5
 8005034:	06df      	lsls	r7, r3, #27
 8005036:	5a53      	ldrh	r3, [r2, r1]
 8005038:	bf08      	it	eq
 800503a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800503e:	b29b      	uxth	r3, r3
 8005040:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504c:	b29b      	uxth	r3, r3
 800504e:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 8005050:	69e3      	ldr	r3, [r4, #28]
 8005052:	b1bb      	cbz	r3, 8005084 <USB_EPStartXfer+0x38c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005054:	f244 0340 	movw	r3, #16448	; 0x4040
 8005058:	7822      	ldrb	r2, [r4, #0]
 800505a:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800505e:	ea03 0001 	and.w	r0, r3, r1
 8005062:	438b      	bics	r3, r1
 8005064:	d000      	beq.n	8005068 <USB_EPStartXfer+0x370>
 8005066:	b968      	cbnz	r0, 8005084 <USB_EPStartXfer+0x38c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005068:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800506c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005080:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005084:	7822      	ldrb	r2, [r4, #0]
 8005086:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800508a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	0c1b      	lsrs	r3, r3, #16
 8005096:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800509a:	e657      	b.n	8004d4c <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800509c:	0858      	lsrs	r0, r3, #1
 800509e:	07de      	lsls	r6, r3, #31
 80050a0:	5a53      	ldrh	r3, [r2, r1]
 80050a2:	bf48      	it	mi
 80050a4:	3001      	addmi	r0, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80050ac:	e7ce      	b.n	800504c <USB_EPStartXfer+0x354>
      else if (ep->type == EP_TYPE_ISOC)
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d158      	bne.n	8005164 <USB_EPStartXfer+0x46c>
        if (ep->xfer_len > ep->maxpacket)
 80050b2:	69a3      	ldr	r3, [r4, #24]
 80050b4:	6922      	ldr	r2, [r4, #16]
 80050b6:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 80050b8:	bf94      	ite	ls
 80050ba:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 80050bc:	1a98      	subhi	r0, r3, r2
 80050be:	61a0      	str	r0, [r4, #24]
 80050c0:	bf88      	it	hi
 80050c2:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d1dd      	bne.n	8005084 <USB_EPStartXfer+0x38c>
 80050c8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80050cc:	7820      	ldrb	r0, [r4, #0]
 80050ce:	b28a      	uxth	r2, r1
 80050d0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80050d4:	0100      	lsls	r0, r0, #4
 80050d6:	4411      	add	r1, r2
 80050d8:	5a42      	ldrh	r2, [r0, r1]
 80050da:	2b3e      	cmp	r3, #62	; 0x3e
 80050dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80050e0:	5242      	strh	r2, [r0, r1]
 80050e2:	d929      	bls.n	8005138 <USB_EPStartXfer+0x440>
 80050e4:	06da      	lsls	r2, r3, #27
 80050e6:	5a42      	ldrh	r2, [r0, r1]
 80050e8:	ea4f 1653 	mov.w	r6, r3, lsr #5
 80050ec:	bf08      	it	eq
 80050ee:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80050f2:	b292      	uxth	r2, r2
 80050f4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80050f8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80050fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005100:	b292      	uxth	r2, r2
 8005102:	5242      	strh	r2, [r0, r1]
 8005104:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005108:	7822      	ldrb	r2, [r4, #0]
 800510a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800510e:	b289      	uxth	r1, r1
 8005110:	0112      	lsls	r2, r2, #4
 8005112:	4401      	add	r1, r0
 8005114:	5a50      	ldrh	r0, [r2, r1]
 8005116:	2b3e      	cmp	r3, #62	; 0x3e
 8005118:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800511c:	5250      	strh	r0, [r2, r1]
 800511e:	d817      	bhi.n	8005150 <USB_EPStartXfer+0x458>
 8005120:	2b00      	cmp	r3, #0
 8005122:	f43f af36 	beq.w	8004f92 <USB_EPStartXfer+0x29a>
 8005126:	0858      	lsrs	r0, r3, #1
 8005128:	07db      	lsls	r3, r3, #31
 800512a:	5a53      	ldrh	r3, [r2, r1]
 800512c:	bf48      	it	mi
 800512e:	3001      	addmi	r0, #1
 8005130:	b29b      	uxth	r3, r3
 8005132:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005136:	e737      	b.n	8004fa8 <USB_EPStartXfer+0x2b0>
 8005138:	b90b      	cbnz	r3, 800513e <USB_EPStartXfer+0x446>
 800513a:	5a42      	ldrh	r2, [r0, r1]
 800513c:	e7dc      	b.n	80050f8 <USB_EPStartXfer+0x400>
 800513e:	5a42      	ldrh	r2, [r0, r1]
 8005140:	085e      	lsrs	r6, r3, #1
 8005142:	07df      	lsls	r7, r3, #31
 8005144:	bf48      	it	mi
 8005146:	3601      	addmi	r6, #1
 8005148:	b292      	uxth	r2, r2
 800514a:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800514e:	e7d7      	b.n	8005100 <USB_EPStartXfer+0x408>
 8005150:	0958      	lsrs	r0, r3, #5
 8005152:	06de      	lsls	r6, r3, #27
 8005154:	5a53      	ldrh	r3, [r2, r1]
 8005156:	bf08      	it	eq
 8005158:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800515c:	b29b      	uxth	r3, r3
 800515e:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005162:	e710      	b.n	8004f86 <USB_EPStartXfer+0x28e>
        return HAL_ERROR;
 8005164:	2001      	movs	r0, #1
 8005166:	e5f8      	b.n	8004d5a <USB_EPStartXfer+0x62>

08005168 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005168:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 800516c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800516e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005172:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8005174:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005176:	4617      	mov	r7, r2
  for (count = n; count != 0U; count--)
 8005178:	462e      	mov	r6, r5
 800517a:	3402      	adds	r4, #2
 800517c:	b936      	cbnz	r6, 800518c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800517e:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8005180:	bf44      	itt	mi
 8005182:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005186:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800518c:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (count = n; count != 0U; count--)
 8005190:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8005192:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005194:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005198:	0a00      	lsrs	r0, r0, #8
 800519a:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (count = n; count != 0U; count--)
 800519e:	e7ec      	b.n	800517a <USB_ReadPMA+0x12>

080051a0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051a0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 80051a4:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051a6:	b16b      	cbz	r3, 80051c4 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051a8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051ac:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80051b0:	28ff      	cmp	r0, #255	; 0xff
 80051b2:	d007      	beq.n	80051c4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	4621      	mov	r1, r4
 80051b8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80051bc:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80051be:	23ff      	movs	r3, #255	; 0xff
 80051c0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80051c4:	2000      	movs	r0, #0
 80051c6:	bd10      	pop	{r4, pc}

080051c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051c8:	2343      	movs	r3, #67	; 0x43
 80051ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80051cc:	4800      	ldr	r0, [pc, #0]	; (80051d0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80051ce:	4770      	bx	lr
 80051d0:	2000008c 	.word	0x2000008c

080051d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051d4:	2343      	movs	r3, #67	; 0x43
 80051d6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80051d8:	4800      	ldr	r0, [pc, #0]	; (80051dc <USBD_CDC_GetHSCfgDesc+0x8>)
 80051da:	4770      	bx	lr
 80051dc:	200000d0 	.word	0x200000d0

080051e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051e0:	2343      	movs	r3, #67	; 0x43
 80051e2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80051e4:	4800      	ldr	r0, [pc, #0]	; (80051e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80051e6:	4770      	bx	lr
 80051e8:	20000120 	.word	0x20000120

080051ec <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051ec:	230a      	movs	r3, #10
 80051ee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80051f0:	4800      	ldr	r0, [pc, #0]	; (80051f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80051f2:	4770      	bx	lr
 80051f4:	20000114 	.word	0x20000114

080051f8 <USBD_CDC_DataOut>:
{
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051fc:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005200:	f000 ff6d 	bl	80060de <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8005204:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005208:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800520c:	b14b      	cbz	r3, 8005222 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800520e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005212:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800521c:	4798      	blx	r3
    return USBD_OK;
 800521e:	2000      	movs	r0, #0
}
 8005220:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005222:	2002      	movs	r0, #2
 8005224:	e7fc      	b.n	8005220 <USBD_CDC_DataOut+0x28>

08005226 <USBD_CDC_DataIn>:
{
 8005226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005228:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800522c:	b1d6      	cbz	r6, 8005264 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800522e:	2214      	movs	r2, #20
 8005230:	fb02 0201 	mla	r2, r2, r1, r0
 8005234:	69d4      	ldr	r4, [r2, #28]
 8005236:	b18c      	cbz	r4, 800525c <USBD_CDC_DataIn+0x36>
 8005238:	2728      	movs	r7, #40	; 0x28
 800523a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800523e:	fb07 3501 	mla	r5, r7, r1, r3
 8005242:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005244:	fbb4 f5f3 	udiv	r5, r4, r3
 8005248:	fb03 4415 	mls	r4, r3, r5, r4
 800524c:	b934      	cbnz	r4, 800525c <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800524e:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005250:	4623      	mov	r3, r4
 8005252:	4622      	mov	r2, r4
 8005254:	f000 ff31 	bl	80060ba <USBD_LL_Transmit>
    return USBD_OK;
 8005258:	4620      	mov	r0, r4
}
 800525a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800525c:	2000      	movs	r0, #0
 800525e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8005262:	e7fa      	b.n	800525a <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8005264:	2002      	movs	r0, #2
 8005266:	e7f8      	b.n	800525a <USBD_CDC_DataIn+0x34>

08005268 <USBD_CDC_Setup>:
{
 8005268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 800526c:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005270:	780a      	ldrb	r2, [r1, #0]
{
 8005272:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005274:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8005278:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800527a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800527e:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8005282:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005286:	d028      	beq.n	80052da <USBD_CDC_Setup+0x72>
 8005288:	2c20      	cmp	r4, #32
 800528a:	d142      	bne.n	8005312 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 800528c:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800528e:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8005290:	b1e4      	cbz	r4, 80052cc <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8005292:	0612      	lsls	r2, r2, #24
 8005294:	d511      	bpl.n	80052ba <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005296:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800529a:	4639      	mov	r1, r7
 800529c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	4622      	mov	r2, r4
 80052a4:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052a6:	4639      	mov	r1, r7
 80052a8:	4628      	mov	r0, r5
 80052aa:	88f2      	ldrh	r2, [r6, #6]
 80052ac:	f000 fc4b 	bl	8005b46 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80052b0:	4644      	mov	r4, r8
}
 80052b2:	4620      	mov	r0, r4
 80052b4:	b003      	add	sp, #12
 80052b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052ba:	4622      	mov	r2, r4
 80052bc:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 80052be:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80052c2:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052c6:	f000 fc53 	bl	8005b70 <USBD_CtlPrepareRx>
 80052ca:	e7f1      	b.n	80052b0 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052cc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80052d0:	4618      	mov	r0, r3
 80052d2:	6895      	ldr	r5, [r2, #8]
 80052d4:	4622      	mov	r2, r4
 80052d6:	47a8      	blx	r5
 80052d8:	e7eb      	b.n	80052b2 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80052da:	784b      	ldrb	r3, [r1, #1]
 80052dc:	2b0a      	cmp	r3, #10
 80052de:	d00c      	beq.n	80052fa <USBD_CDC_Setup+0x92>
 80052e0:	2b0b      	cmp	r3, #11
 80052e2:	d012      	beq.n	800530a <USBD_CDC_Setup+0xa2>
 80052e4:	b9ab      	cbnz	r3, 8005312 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d111      	bne.n	8005312 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80052ee:	2202      	movs	r2, #2
 80052f0:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80052f4:	f000 fc27 	bl	8005b46 <USBD_CtlSendData>
 80052f8:	e7db      	b.n	80052b2 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d107      	bne.n	8005312 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005302:	2201      	movs	r2, #1
 8005304:	f10d 0105 	add.w	r1, sp, #5
 8005308:	e7f4      	b.n	80052f4 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800530a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800530e:	2b03      	cmp	r3, #3
 8005310:	d0cf      	beq.n	80052b2 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	f000 fbef 	bl	8005af8 <USBD_CtlError>
          ret = USBD_FAIL;
 800531a:	2402      	movs	r4, #2
          break;
 800531c:	e7c9      	b.n	80052b2 <USBD_CDC_Setup+0x4a>

0800531e <USBD_CDC_DeInit>:
{
 800531e:	b538      	push	{r3, r4, r5, lr}
 8005320:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005322:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005324:	2181      	movs	r1, #129	; 0x81
 8005326:	f000 fe92 	bl	800604e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800532a:	2101      	movs	r1, #1
 800532c:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800532e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005330:	f000 fe8d 	bl	800604e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005334:	2182      	movs	r1, #130	; 0x82
 8005336:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005338:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800533c:	f000 fe87 	bl	800604e <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005340:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005344:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005346:	b14b      	cbz	r3, 800535c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005348:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005350:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005354:	f000 fecc 	bl	80060f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005358:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800535c:	2000      	movs	r0, #0
 800535e:	bd38      	pop	{r3, r4, r5, pc}

08005360 <USBD_CDC_Init>:
{
 8005360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005364:	7c03      	ldrb	r3, [r0, #16]
{
 8005366:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005368:	bbbb      	cbnz	r3, 80053da <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800536a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800536e:	2202      	movs	r2, #2
 8005370:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005372:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005374:	f000 fe5f 	bl	8006036 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005378:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800537c:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800537e:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005380:	4629      	mov	r1, r5
 8005382:	2202      	movs	r2, #2
 8005384:	4620      	mov	r0, r4
 8005386:	f000 fe56 	bl	8006036 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800538a:	2308      	movs	r3, #8
 800538c:	2203      	movs	r2, #3
 800538e:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005390:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005394:	4620      	mov	r0, r4
 8005396:	f000 fe4e 	bl	8006036 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800539a:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800539e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053a0:	f000 fea2 	bl	80060e8 <USBD_static_malloc>
 80053a4:	4605      	mov	r5, r0
 80053a6:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80053aa:	b340      	cbz	r0, 80053fe <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 80053ac:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053b0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4798      	blx	r3
    hcdc->TxState = 0U;
 80053b8:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80053bc:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053c0:	7c26      	ldrb	r6, [r4, #16]
 80053c2:	b99e      	cbnz	r6, 80053ec <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053c8:	4639      	mov	r1, r7
 80053ca:	4620      	mov	r0, r4
 80053cc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80053d0:	f000 fe7c 	bl	80060cc <USBD_LL_PrepareReceive>
}
 80053d4:	4630      	mov	r0, r6
 80053d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053da:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053dc:	2340      	movs	r3, #64	; 0x40
 80053de:	2202      	movs	r2, #2
 80053e0:	2181      	movs	r1, #129	; 0x81
 80053e2:	f000 fe28 	bl	8006036 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053e6:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053e8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053ea:	e7c8      	b.n	800537e <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053ec:	2340      	movs	r3, #64	; 0x40
 80053ee:	4639      	mov	r1, r7
 80053f0:	4620      	mov	r0, r4
 80053f2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80053f6:	f000 fe69 	bl	80060cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80053fa:	4646      	mov	r6, r8
 80053fc:	e7ea      	b.n	80053d4 <USBD_CDC_Init+0x74>
    ret = 1U;
 80053fe:	463e      	mov	r6, r7
 8005400:	e7e8      	b.n	80053d4 <USBD_CDC_Init+0x74>

08005402 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005402:	b119      	cbz	r1, 800540c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005404:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8005408:	2000      	movs	r0, #0
 800540a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800540c:	2002      	movs	r0, #2
  }

  return ret;
}
 800540e:	4770      	bx	lr

08005410 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005410:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005414:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005416:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800541a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800541e:	4770      	bx	lr

08005420 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005420:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8005424:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005426:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800542a:	4770      	bx	lr

0800542c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800542c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8005430:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8005432:	b182      	cbz	r2, 8005456 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8005434:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8005438:	2301      	movs	r3, #1
 800543a:	b974      	cbnz	r4, 800545a <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800543c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005440:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005444:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005446:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005448:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800544c:	b29b      	uxth	r3, r3
 800544e:	f000 fe34 	bl	80060ba <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8005452:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005454:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005456:	2002      	movs	r0, #2
 8005458:	e7fc      	b.n	8005454 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800545a:	4618      	mov	r0, r3
 800545c:	e7fa      	b.n	8005454 <USBD_CDC_TransmitPacket+0x28>

0800545e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800545e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8005462:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005464:	b182      	cbz	r2, 8005488 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005466:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005468:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800546c:	b934      	cbnz	r4, 800547c <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800546e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005472:	2101      	movs	r1, #1
 8005474:	f000 fe2a 	bl	80060cc <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005478:	4620      	mov	r0, r4
 800547a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800547c:	2340      	movs	r3, #64	; 0x40
 800547e:	2101      	movs	r1, #1
 8005480:	f000 fe24 	bl	80060cc <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005484:	2400      	movs	r4, #0
 8005486:	e7f7      	b.n	8005478 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8005488:	2402      	movs	r4, #2
 800548a:	e7f5      	b.n	8005478 <USBD_CDC_ReceivePacket+0x1a>

0800548c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800548c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800548e:	b180      	cbz	r0, 80054b2 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005490:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005494:	b113      	cbz	r3, 800549c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800549c:	b109      	cbz	r1, 80054a2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800549e:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054a2:	2301      	movs	r3, #1
  pdev->id = id;
 80054a4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054a6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80054aa:	f000 fd79 	bl	8005fa0 <USBD_LL_Init>

  return USBD_OK;
 80054ae:	2000      	movs	r0, #0
}
 80054b0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80054b2:	2002      	movs	r0, #2
 80054b4:	e7fc      	b.n	80054b0 <USBD_Init+0x24>

080054b6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80054b6:	b119      	cbz	r1, 80054c0 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80054b8:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80054bc:	2000      	movs	r0, #0
 80054be:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80054c0:	2002      	movs	r0, #2
  }

  return status;
}
 80054c2:	4770      	bx	lr

080054c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054c4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80054c6:	f000 fdad 	bl	8006024 <USBD_LL_Start>

  return USBD_OK;
}
 80054ca:	2000      	movs	r0, #0
 80054cc:	bd08      	pop	{r3, pc}

080054ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054ce:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80054d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80054d4:	b90b      	cbnz	r3, 80054da <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80054d6:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80054d8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4798      	blx	r3
 80054de:	2800      	cmp	r0, #0
 80054e0:	d0fa      	beq.n	80054d8 <USBD_SetClassConfig+0xa>
 80054e2:	e7f8      	b.n	80054d6 <USBD_SetClassConfig+0x8>

080054e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054e4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80054e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4798      	blx	r3

  return USBD_OK;
}
 80054ee:	2000      	movs	r0, #0
 80054f0:	bd08      	pop	{r3, pc}

080054f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054f2:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054f4:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80054f8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054fa:	4628      	mov	r0, r5
 80054fc:	f000 fae8 	bl	8005ad0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005500:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005502:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8005506:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800550a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800550e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005512:	f001 031f 	and.w	r3, r1, #31
 8005516:	2b01      	cmp	r3, #1
 8005518:	d008      	beq.n	800552c <USBD_LL_SetupStage+0x3a>
 800551a:	2b02      	cmp	r3, #2
 800551c:	d00b      	beq.n	8005536 <USBD_LL_SetupStage+0x44>
 800551e:	b97b      	cbnz	r3, 8005540 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005520:	4629      	mov	r1, r5
 8005522:	4620      	mov	r0, r4
 8005524:	f000 f8fc 	bl	8005720 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8005528:	2000      	movs	r0, #0
 800552a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800552c:	4629      	mov	r1, r5
 800552e:	4620      	mov	r0, r4
 8005530:	f000 fa20 	bl	8005974 <USBD_StdItfReq>
      break;
 8005534:	e7f8      	b.n	8005528 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8005536:	4629      	mov	r1, r5
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fa3f 	bl	80059bc <USBD_StdEPReq>
      break;
 800553e:	e7f3      	b.n	8005528 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005540:	4620      	mov	r0, r4
 8005542:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005546:	f000 fd8b 	bl	8006060 <USBD_LL_StallEP>
      break;
 800554a:	e7ed      	b.n	8005528 <USBD_LL_SetupStage+0x36>

0800554c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	4604      	mov	r4, r0
 8005550:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005552:	460d      	mov	r5, r1
 8005554:	bb39      	cbnz	r1, 80055a6 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005556:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800555a:	2b03      	cmp	r3, #3
 800555c:	d11c      	bne.n	8005598 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 800555e:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8005562:	4296      	cmp	r6, r2
 8005564:	d90b      	bls.n	800557e <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8005566:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8005568:	42b2      	cmp	r2, r6
 800556a:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 800556c:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005570:	bf8c      	ite	hi
 8005572:	b2b2      	uxthhi	r2, r6
 8005574:	b292      	uxthls	r2, r2
 8005576:	f000 fb08 	bl	8005b8a <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800557a:	4628      	mov	r0, r5
 800557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800557e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	b123      	cbz	r3, 8005590 <USBD_LL_DataOutStage+0x44>
 8005586:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800558a:	2a03      	cmp	r2, #3
 800558c:	d100      	bne.n	8005590 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800558e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005590:	4620      	mov	r0, r4
 8005592:	f000 fb02 	bl	8005b9a <USBD_CtlSendStatus>
 8005596:	e7f0      	b.n	800557a <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005598:	2b05      	cmp	r3, #5
 800559a:	d1ee      	bne.n	800557a <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800559c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80055a0:	f000 fd5e 	bl	8006060 <USBD_LL_StallEP>
 80055a4:	e7e9      	b.n	800557a <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 80055a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	b133      	cbz	r3, 80055bc <USBD_LL_DataOutStage+0x70>
 80055ae:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80055b2:	2a03      	cmp	r2, #3
 80055b4:	d102      	bne.n	80055bc <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80055b6:	4798      	blx	r3
  return USBD_OK;
 80055b8:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80055ba:	e7de      	b.n	800557a <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 80055bc:	2502      	movs	r5, #2
 80055be:	e7dc      	b.n	800557a <USBD_LL_DataOutStage+0x2e>

080055c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	4604      	mov	r4, r0
 80055c4:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055c6:	460d      	mov	r5, r1
 80055c8:	2900      	cmp	r1, #0
 80055ca:	d147      	bne.n	800565c <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055cc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d13c      	bne.n	800564e <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80055d4:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80055d8:	429e      	cmp	r6, r3
 80055da:	d914      	bls.n	8005606 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80055dc:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055de:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80055e0:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f000 fabc 	bl	8005b60 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055e8:	462b      	mov	r3, r5
 80055ea:	462a      	mov	r2, r5
 80055ec:	4629      	mov	r1, r5
 80055ee:	4620      	mov	r0, r4
 80055f0:	f000 fd6c 	bl	80060cc <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80055f4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d102      	bne.n	8005602 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005602:	4628      	mov	r0, r5
 8005604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005606:	69c2      	ldr	r2, [r0, #28]
 8005608:	fbb2 f6f3 	udiv	r6, r2, r3
 800560c:	fb03 2616 	mls	r6, r3, r6, r2
 8005610:	b95e      	cbnz	r6, 800562a <USBD_LL_DataInStage+0x6a>
 8005612:	4293      	cmp	r3, r2
 8005614:	d809      	bhi.n	800562a <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8005616:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800561a:	429a      	cmp	r2, r3
 800561c:	d205      	bcs.n	800562a <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800561e:	460a      	mov	r2, r1
 8005620:	f000 fa9e 	bl	8005b60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005624:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8005628:	e7de      	b.n	80055e8 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800562a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	b12b      	cbz	r3, 800563e <USBD_LL_DataInStage+0x7e>
 8005632:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005636:	2a03      	cmp	r2, #3
 8005638:	d101      	bne.n	800563e <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800563a:	4620      	mov	r0, r4
 800563c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fd0d 	bl	8006060 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005646:	4620      	mov	r0, r4
 8005648:	f000 fab2 	bl	8005bb0 <USBD_CtlReceiveStatus>
 800564c:	e7d2      	b.n	80055f4 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800564e:	f033 0304 	bics.w	r3, r3, #4
 8005652:	d1cf      	bne.n	80055f4 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005654:	2180      	movs	r1, #128	; 0x80
 8005656:	f000 fd03 	bl	8006060 <USBD_LL_StallEP>
 800565a:	e7cb      	b.n	80055f4 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800565c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	b133      	cbz	r3, 8005672 <USBD_LL_DataInStage+0xb2>
 8005664:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005668:	2a03      	cmp	r2, #3
 800566a:	d102      	bne.n	8005672 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800566c:	4798      	blx	r3
  return USBD_OK;
 800566e:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005670:	e7c7      	b.n	8005602 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8005672:	2502      	movs	r5, #2
 8005674:	e7c5      	b.n	8005602 <USBD_LL_DataInStage+0x42>

08005676 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005676:	2200      	movs	r2, #0
{
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800567c:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800567e:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005680:	4611      	mov	r1, r2
 8005682:	2340      	movs	r3, #64	; 0x40
 8005684:	f000 fcd7 	bl	8006036 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005688:	4633      	mov	r3, r6
 800568a:	2180      	movs	r1, #128	; 0x80
 800568c:	2200      	movs	r2, #0
 800568e:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005690:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005694:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005698:	f000 fccd 	bl	8006036 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800569c:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800569e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056a2:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056a4:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056a6:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80056aa:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80056ae:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80056b0:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80056b4:	b123      	cbz	r3, 80056c0 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056b6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80056ba:	4620      	mov	r0, r4
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	4798      	blx	r3
  }

  return USBD_OK;
}
 80056c0:	2000      	movs	r0, #0
 80056c2:	bd70      	pop	{r4, r5, r6, pc}

080056c4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80056c4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80056c6:	2000      	movs	r0, #0
 80056c8:	4770      	bx	lr

080056ca <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80056ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80056ce:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80056d2:	2304      	movs	r3, #4
 80056d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80056d8:	2000      	movs	r0, #0
 80056da:	4770      	bx	lr

080056dc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80056e0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80056e2:	bf04      	itt	eq
 80056e4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80056e8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80056ec:	2000      	movs	r0, #0
 80056ee:	4770      	bx	lr

080056f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056f0:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80056f6:	2a03      	cmp	r2, #3
 80056f8:	d104      	bne.n	8005704 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80056fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	b103      	cbz	r3, 8005704 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005702:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005704:	2000      	movs	r0, #0
 8005706:	bd08      	pop	{r3, pc}

08005708 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005708:	b510      	push	{r4, lr}
 800570a:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800570c:	2180      	movs	r1, #128	; 0x80
 800570e:	f000 fca7 	bl	8006060 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005712:	4620      	mov	r0, r4
}
 8005714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005718:	2100      	movs	r1, #0
 800571a:	f000 bca1 	b.w	8006060 <USBD_LL_StallEP>
	...

08005720 <USBD_StdDevReq>:
{
 8005720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005722:	780b      	ldrb	r3, [r1, #0]
 8005724:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800572a:	2b20      	cmp	r3, #32
{
 800572c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800572e:	d012      	beq.n	8005756 <USBD_StdDevReq+0x36>
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d010      	beq.n	8005756 <USBD_StdDevReq+0x36>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d151      	bne.n	80057dc <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8005738:	784b      	ldrb	r3, [r1, #1]
 800573a:	2b09      	cmp	r3, #9
 800573c:	d84e      	bhi.n	80057dc <USBD_StdDevReq+0xbc>
 800573e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005742:	00ee      	.short	0x00ee
 8005744:	004d010a 	.word	0x004d010a
 8005748:	004d0103 	.word	0x004d0103
 800574c:	00130087 	.word	0x00130087
 8005750:	00d6004d 	.word	0x00d6004d
 8005754:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8005756:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800575a:	4629      	mov	r1, r5
 800575c:	4620      	mov	r0, r4
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4798      	blx	r3
}
 8005762:	2000      	movs	r0, #0
 8005764:	b003      	add	sp, #12
 8005766:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800576e:	884b      	ldrh	r3, [r1, #2]
 8005770:	0a1a      	lsrs	r2, r3, #8
 8005772:	3a01      	subs	r2, #1
 8005774:	2a06      	cmp	r2, #6
 8005776:	d831      	bhi.n	80057dc <USBD_StdDevReq+0xbc>
 8005778:	e8df f002 	tbb	[pc, r2]
 800577c:	30231604 	.word	0x30231604
 8005780:	4830      	.short	0x4830
 8005782:	52          	.byte	0x52
 8005783:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005784:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005788:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800578a:	7c20      	ldrb	r0, [r4, #16]
 800578c:	f10d 0106 	add.w	r1, sp, #6
 8005790:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005792:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005796:	2a00      	cmp	r2, #0
 8005798:	d056      	beq.n	8005848 <USBD_StdDevReq+0x128>
 800579a:	88eb      	ldrh	r3, [r5, #6]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d14a      	bne.n	8005836 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 f9fa 	bl	8005b9a <USBD_CtlSendStatus>
 80057a6:	e7dc      	b.n	8005762 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057a8:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 80057aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ae:	b932      	cbnz	r2, 80057be <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80057b2:	f10d 0006 	add.w	r0, sp, #6
 80057b6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057b8:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057ba:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80057bc:	e7e9      	b.n	8005792 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	e7f7      	b.n	80057b2 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b05      	cmp	r3, #5
 80057c6:	d809      	bhi.n	80057dc <USBD_StdDevReq+0xbc>
 80057c8:	e8df f003 	tbb	[pc, r3]
 80057cc:	14100c03 	.word	0x14100c03
 80057d0:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80057d2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057d6:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1d6      	bne.n	800578a <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80057dc:	4620      	mov	r0, r4
 80057de:	f7ff ff93 	bl	8005708 <USBD_CtlError.constprop.0>
        break;
 80057e2:	e7be      	b.n	8005762 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057e4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	e7f5      	b.n	80057d8 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057ec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	e7f1      	b.n	80057d8 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057f4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	e7ed      	b.n	80057d8 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057fc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	e7e9      	b.n	80057d8 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005804:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	e7e5      	b.n	80057d8 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800580c:	7c03      	ldrb	r3, [r0, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e4      	bne.n	80057dc <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005812:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005816:	f10d 0006 	add.w	r0, sp, #6
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	4798      	blx	r3
  if (err != 0U)
 800581e:	e7b8      	b.n	8005792 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005820:	7c03      	ldrb	r3, [r0, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1da      	bne.n	80057dc <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005826:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800582a:	f10d 0006 	add.w	r0, sp, #6
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005832:	2307      	movs	r3, #7
 8005834:	e7c1      	b.n	80057ba <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8005836:	429a      	cmp	r2, r3
 8005838:	bf28      	it	cs
 800583a:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800583c:	4601      	mov	r1, r0
 800583e:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005840:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005844:	f000 f97f 	bl	8005b46 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005848:	88eb      	ldrh	r3, [r5, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d189      	bne.n	8005762 <USBD_StdDevReq+0x42>
 800584e:	e7a7      	b.n	80057a0 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005850:	888b      	ldrh	r3, [r1, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1c2      	bne.n	80057dc <USBD_StdDevReq+0xbc>
 8005856:	88cb      	ldrh	r3, [r1, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1bf      	bne.n	80057dc <USBD_StdDevReq+0xbc>
 800585c:	884d      	ldrh	r5, [r1, #2]
 800585e:	2d7f      	cmp	r5, #127	; 0x7f
 8005860:	d8bc      	bhi.n	80057dc <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005862:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005866:	2b03      	cmp	r3, #3
 8005868:	d0b8      	beq.n	80057dc <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800586a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800586c:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005870:	f000 fc1a 	bl	80060a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005874:	4620      	mov	r0, r4
 8005876:	f000 f990 	bl	8005b9a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800587a:	b11d      	cbz	r5, 8005884 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800587c:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800587e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005882:	e76e      	b.n	8005762 <USBD_StdDevReq+0x42>
 8005884:	2301      	movs	r3, #1
 8005886:	e7fa      	b.n	800587e <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8005888:	7889      	ldrb	r1, [r1, #2]
 800588a:	4d39      	ldr	r5, [pc, #228]	; (8005970 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800588c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800588e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005890:	d8a4      	bhi.n	80057dc <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8005892:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005896:	2b02      	cmp	r3, #2
 8005898:	d008      	beq.n	80058ac <USBD_StdDevReq+0x18c>
 800589a:	2b03      	cmp	r3, #3
 800589c:	d015      	beq.n	80058ca <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800589e:	f7ff ff33 	bl	8005708 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 80058a2:	4620      	mov	r0, r4
 80058a4:	7829      	ldrb	r1, [r5, #0]
 80058a6:	f7ff fe1d 	bl	80054e4 <USBD_ClrClassConfig>
        break;
 80058aa:	e75a      	b.n	8005762 <USBD_StdDevReq+0x42>
        if (cfgidx)
 80058ac:	2900      	cmp	r1, #0
 80058ae:	f43f af77 	beq.w	80057a0 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 80058b2:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80058b4:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80058b6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80058b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff fe06 	bl	80054ce <USBD_SetClassConfig>
 80058c2:	2802      	cmp	r0, #2
 80058c4:	f47f af6c 	bne.w	80057a0 <USBD_StdDevReq+0x80>
 80058c8:	e788      	b.n	80057dc <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80058ca:	b931      	cbnz	r1, 80058da <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058cc:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80058ce:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058d0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80058d4:	f7ff fe06 	bl	80054e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80058d8:	e762      	b.n	80057a0 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80058da:	6841      	ldr	r1, [r0, #4]
 80058dc:	2901      	cmp	r1, #1
 80058de:	f43f af5f 	beq.w	80057a0 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058e2:	b2c9      	uxtb	r1, r1
 80058e4:	f7ff fdfe 	bl	80054e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80058e8:	7829      	ldrb	r1, [r5, #0]
 80058ea:	6061      	str	r1, [r4, #4]
 80058ec:	e7e6      	b.n	80058bc <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80058ee:	88ca      	ldrh	r2, [r1, #6]
 80058f0:	2a01      	cmp	r2, #1
 80058f2:	f47f af73 	bne.w	80057dc <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80058f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d80a      	bhi.n	8005914 <USBD_StdDevReq+0x1f4>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f43f af6c 	beq.w	80057dc <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8005904:	4601      	mov	r1, r0
 8005906:	2300      	movs	r3, #0
 8005908:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800590c:	4620      	mov	r0, r4
 800590e:	f000 f91a 	bl	8005b46 <USBD_CtlSendData>
      break;
 8005912:	e726      	b.n	8005762 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8005914:	2b03      	cmp	r3, #3
 8005916:	f47f af61 	bne.w	80057dc <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800591a:	1d01      	adds	r1, r0, #4
 800591c:	e7f6      	b.n	800590c <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800591e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005922:	3b01      	subs	r3, #1
 8005924:	2b02      	cmp	r3, #2
 8005926:	f63f af59 	bhi.w	80057dc <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800592a:	88cb      	ldrh	r3, [r1, #6]
 800592c:	2b02      	cmp	r3, #2
 800592e:	f47f af55 	bne.w	80057dc <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005932:	2301      	movs	r3, #1
 8005934:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8005936:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800593a:	b10b      	cbz	r3, 8005940 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800593c:	2303      	movs	r3, #3
 800593e:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005940:	2202      	movs	r2, #2
 8005942:	f104 010c 	add.w	r1, r4, #12
 8005946:	e7e1      	b.n	800590c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005948:	884b      	ldrh	r3, [r1, #2]
 800594a:	2b01      	cmp	r3, #1
 800594c:	f47f af09 	bne.w	8005762 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005950:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8005954:	e724      	b.n	80057a0 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8005956:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800595a:	3b01      	subs	r3, #1
 800595c:	2b02      	cmp	r3, #2
 800595e:	f63f af3d 	bhi.w	80057dc <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005962:	884b      	ldrh	r3, [r1, #2]
 8005964:	2b01      	cmp	r3, #1
 8005966:	f47f aefc 	bne.w	8005762 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	e7f0      	b.n	8005950 <USBD_StdDevReq+0x230>
 800596e:	bf00      	nop
 8005970:	20000a20 	.word	0x20000a20

08005974 <USBD_StdItfReq>:
{
 8005974:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005976:	780b      	ldrb	r3, [r1, #0]
{
 8005978:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800597a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800597e:	2a40      	cmp	r2, #64	; 0x40
{
 8005980:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005982:	d001      	beq.n	8005988 <USBD_StdItfReq+0x14>
 8005984:	065b      	lsls	r3, r3, #25
 8005986:	d415      	bmi.n	80059b4 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8005988:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800598c:	3b01      	subs	r3, #1
 800598e:	2b02      	cmp	r3, #2
 8005990:	d810      	bhi.n	80059b4 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005992:	792b      	ldrb	r3, [r5, #4]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d80d      	bhi.n	80059b4 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005998:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800599c:	4629      	mov	r1, r5
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4620      	mov	r0, r4
 80059a2:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80059a4:	88eb      	ldrh	r3, [r5, #6]
 80059a6:	b91b      	cbnz	r3, 80059b0 <USBD_StdItfReq+0x3c>
 80059a8:	b910      	cbnz	r0, 80059b0 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 f8f5 	bl	8005b9a <USBD_CtlSendStatus>
}
 80059b0:	2000      	movs	r0, #0
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7ff fea7 	bl	8005708 <USBD_CtlError.constprop.0>
          break;
 80059ba:	e7f9      	b.n	80059b0 <USBD_StdItfReq+0x3c>

080059bc <USBD_StdEPReq>:
{
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	780a      	ldrb	r2, [r1, #0]
 80059c0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059c2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80059c6:	2a20      	cmp	r2, #32
{
 80059c8:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ca:	d027      	beq.n	8005a1c <USBD_StdEPReq+0x60>
 80059cc:	2a40      	cmp	r2, #64	; 0x40
 80059ce:	d025      	beq.n	8005a1c <USBD_StdEPReq+0x60>
 80059d0:	bb92      	cbnz	r2, 8005a38 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 80059d2:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80059d4:	888d      	ldrh	r5, [r1, #4]
 80059d6:	2a01      	cmp	r2, #1
 80059d8:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 80059da:	d03d      	beq.n	8005a58 <USBD_StdEPReq+0x9c>
 80059dc:	2a03      	cmp	r2, #3
 80059de:	d025      	beq.n	8005a2c <USBD_StdEPReq+0x70>
 80059e0:	bb52      	cbnz	r2, 8005a38 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80059e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d04d      	beq.n	8005a86 <USBD_StdEPReq+0xca>
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d124      	bne.n	8005a38 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80059ee:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059f0:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80059f4:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059f8:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80059fc:	d054      	beq.n	8005aa8 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	b1d3      	cbz	r3, 8005a38 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a02:	2314      	movs	r3, #20
 8005a04:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005a08:	fb05 3303 	mla	r3, r5, r3, r3
 8005a0c:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a0e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8005a12:	d155      	bne.n	8005ac0 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8005a14:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a16:	2202      	movs	r2, #2
 8005a18:	4629      	mov	r1, r5
 8005a1a:	e041      	b.n	8005aa0 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8005a1c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4620      	mov	r0, r4
 8005a24:	6892      	ldr	r2, [r2, #8]
 8005a26:	4790      	blx	r2
}
 8005a28:	2000      	movs	r0, #0
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8005a2c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005a30:	2a02      	cmp	r2, #2
 8005a32:	d01f      	beq.n	8005a74 <USBD_StdEPReq+0xb8>
 8005a34:	2a03      	cmp	r2, #3
 8005a36:	d003      	beq.n	8005a40 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff fe65 	bl	8005708 <USBD_CtlError.constprop.0>
              break;
 8005a3e:	e7f3      	b.n	8005a28 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a40:	885a      	ldrh	r2, [r3, #2]
 8005a42:	b92a      	cbnz	r2, 8005a50 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8005a44:	064a      	lsls	r2, r1, #25
 8005a46:	d003      	beq.n	8005a50 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a48:	88db      	ldrh	r3, [r3, #6]
 8005a4a:	b90b      	cbnz	r3, 8005a50 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a4c:	f000 fb08 	bl	8006060 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 f8a2 	bl	8005b9a <USBD_CtlSendStatus>
              break;
 8005a56:	e7e7      	b.n	8005a28 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8005a58:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005a5c:	2a02      	cmp	r2, #2
 8005a5e:	d009      	beq.n	8005a74 <USBD_StdEPReq+0xb8>
 8005a60:	2a03      	cmp	r2, #3
 8005a62:	d1e9      	bne.n	8005a38 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a64:	885b      	ldrh	r3, [r3, #2]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1de      	bne.n	8005a28 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a6a:	064d      	lsls	r5, r1, #25
 8005a6c:	d0f0      	beq.n	8005a50 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a6e:	f000 fb00 	bl	8006072 <USBD_LL_ClearStallEP>
 8005a72:	e7ed      	b.n	8005a50 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a74:	064b      	lsls	r3, r1, #25
 8005a76:	d0df      	beq.n	8005a38 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8005a78:	f000 faf2 	bl	8006060 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a7c:	2180      	movs	r1, #128	; 0x80
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 faee 	bl	8006060 <USBD_LL_StallEP>
 8005a84:	e7d0      	b.n	8005a28 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a86:	064a      	lsls	r2, r1, #25
 8005a88:	d1d6      	bne.n	8005a38 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a8a:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8005a8c:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a90:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a94:	bf4c      	ite	mi
 8005a96:	f100 0114 	addmi.w	r1, r0, #20
 8005a9a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8005a9e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 f850 	bl	8005b46 <USBD_CtlSendData>
              break;
 8005aa6:	e7bf      	b.n	8005a28 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005aa8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0c3      	beq.n	8005a38 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ab0:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ab2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ab6:	fb03 0505 	mla	r5, r3, r5, r0
 8005aba:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005abe:	e7a6      	b.n	8005a0e <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fadf 	bl	8006084 <USBD_LL_IsStallEP>
 8005ac6:	b108      	cbz	r0, 8005acc <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e7a3      	b.n	8005a14 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8005acc:	6028      	str	r0, [r5, #0]
 8005ace:	e7a2      	b.n	8005a16 <USBD_StdEPReq+0x5a>

08005ad0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005ad0:	780b      	ldrb	r3, [r1, #0]
 8005ad2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005ad4:	784b      	ldrb	r3, [r1, #1]
 8005ad6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005ad8:	78ca      	ldrb	r2, [r1, #3]
 8005ada:	788b      	ldrb	r3, [r1, #2]
 8005adc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ae0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005ae2:	794a      	ldrb	r2, [r1, #5]
 8005ae4:	790b      	ldrb	r3, [r1, #4]
 8005ae6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005aea:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005aec:	79ca      	ldrb	r2, [r1, #7]
 8005aee:	798b      	ldrb	r3, [r1, #6]
 8005af0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005af4:	80c3      	strh	r3, [r0, #6]
}
 8005af6:	4770      	bx	lr

08005af8 <USBD_CtlError>:
{
 8005af8:	b510      	push	{r4, lr}
 8005afa:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005afc:	2180      	movs	r1, #128	; 0x80
 8005afe:	f000 faaf 	bl	8006060 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005b02:	4620      	mov	r0, r4
}
 8005b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005b08:	2100      	movs	r1, #0
 8005b0a:	f000 baa9 	b.w	8006060 <USBD_LL_StallEP>

08005b0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b0e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8005b10:	b188      	cbz	r0, 8005b36 <USBD_GetString+0x28>
 8005b12:	2400      	movs	r4, #0
 8005b14:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005b16:	4623      	mov	r3, r4
 8005b18:	3401      	adds	r4, #1
 8005b1a:	5d05      	ldrb	r5, [r0, r4]
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	d1fa      	bne.n	8005b16 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	3301      	adds	r3, #1
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005b28:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	704b      	strb	r3, [r1, #1]
 8005b2e:	2302      	movs	r3, #2
    while (*desc != '\0')
 8005b30:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005b34:	b904      	cbnz	r4, 8005b38 <USBD_GetString+0x2a>
}
 8005b36:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	54cc      	strb	r4, [r1, r3]
 8005b3c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005b3e:	3302      	adds	r3, #2
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	548d      	strb	r5, [r1, r2]
 8005b44:	e7f4      	b.n	8005b30 <USBD_GetString+0x22>

08005b46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005b46:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b48:	2202      	movs	r2, #2
{
 8005b4a:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8005b4c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b50:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b54:	460a      	mov	r2, r1
 8005b56:	2100      	movs	r1, #0
 8005b58:	f000 faaf 	bl	80060ba <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	bd10      	pop	{r4, pc}

08005b60 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005b60:	b508      	push	{r3, lr}
 8005b62:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b64:	460a      	mov	r2, r1
 8005b66:	2100      	movs	r1, #0
 8005b68:	f000 faa7 	bl	80060ba <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	bd08      	pop	{r3, pc}

08005b70 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005b70:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b72:	2203      	movs	r2, #3
{
 8005b74:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8005b76:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b7a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b7e:	460a      	mov	r2, r1
 8005b80:	2100      	movs	r1, #0
 8005b82:	f000 faa3 	bl	80060cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b86:	2000      	movs	r0, #0
 8005b88:	bd10      	pop	{r4, pc}

08005b8a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005b8a:	b508      	push	{r3, lr}
 8005b8c:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b8e:	460a      	mov	r2, r1
 8005b90:	2100      	movs	r1, #0
 8005b92:	f000 fa9b 	bl	80060cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b96:	2000      	movs	r0, #0
 8005b98:	bd08      	pop	{r3, pc}

08005b9a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b9a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f000 fa87 	bl	80060ba <USBD_LL_Transmit>

  return USBD_OK;
}
 8005bac:	2000      	movs	r0, #0
 8005bae:	bd08      	pop	{r3, pc}

08005bb0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005bb0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005bb2:	2305      	movs	r3, #5
 8005bb4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bb8:	2300      	movs	r3, #0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f000 fa85 	bl	80060cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	bd08      	pop	{r3, pc}
	...

08005bc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005bc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	490e      	ldr	r1, [pc, #56]	; (8005c08 <MX_USB_DEVICE_Init+0x40>)
 8005bce:	480f      	ldr	r0, [pc, #60]	; (8005c0c <MX_USB_DEVICE_Init+0x44>)
 8005bd0:	f7ff fc5c 	bl	800548c <USBD_Init>
 8005bd4:	b108      	cbz	r0, 8005bda <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8005bd6:	f7fb f97b 	bl	8000ed0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005bda:	490d      	ldr	r1, [pc, #52]	; (8005c10 <MX_USB_DEVICE_Init+0x48>)
 8005bdc:	480b      	ldr	r0, [pc, #44]	; (8005c0c <MX_USB_DEVICE_Init+0x44>)
 8005bde:	f7ff fc6a 	bl	80054b6 <USBD_RegisterClass>
 8005be2:	b108      	cbz	r0, 8005be8 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8005be4:	f7fb f974 	bl	8000ed0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005be8:	490a      	ldr	r1, [pc, #40]	; (8005c14 <MX_USB_DEVICE_Init+0x4c>)
 8005bea:	4808      	ldr	r0, [pc, #32]	; (8005c0c <MX_USB_DEVICE_Init+0x44>)
 8005bec:	f7ff fc09 	bl	8005402 <USBD_CDC_RegisterInterface>
 8005bf0:	b108      	cbz	r0, 8005bf6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8005bf2:	f7fb f96d 	bl	8000ed0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005bf6:	4805      	ldr	r0, [pc, #20]	; (8005c0c <MX_USB_DEVICE_Init+0x44>)
 8005bf8:	f7ff fc64 	bl	80054c4 <USBD_Start>
 8005bfc:	b118      	cbz	r0, 8005c06 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005c02:	f7fb b965 	b.w	8000ed0 <Error_Handler>
}
 8005c06:	bd08      	pop	{r3, pc}
 8005c08:	20000180 	.word	0x20000180
 8005c0c:	20000a24 	.word	0x20000a24
 8005c10:	20000054 	.word	0x20000054
 8005c14:	2000016c 	.word	0x2000016c

08005c18 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005c18:	2000      	movs	r0, #0
 8005c1a:	4770      	bx	lr

08005c1c <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005c1c:	2820      	cmp	r0, #32
 8005c1e:	d003      	beq.n	8005c28 <CDC_Control_FS+0xc>
 8005c20:	2821      	cmp	r0, #33	; 0x21
 8005c22:	d017      	beq.n	8005c54 <CDC_Control_FS+0x38>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005c24:	2000      	movs	r0, #0
 8005c26:	4770      	bx	lr
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 8005c28:	780b      	ldrb	r3, [r1, #0]
 8005c2a:	4a13      	ldr	r2, [pc, #76]	; (8005c78 <CDC_Control_FS+0x5c>)
 8005c2c:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1]<<8);
 8005c2e:	7848      	ldrb	r0, [r1, #1]
 8005c30:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005c34:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2]<<16);
 8005c36:	7888      	ldrb	r0, [r1, #2]
 8005c38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c3c:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3]<<24);
 8005c3e:	78c8      	ldrb	r0, [r1, #3]
 8005c40:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005c44:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 8005c46:	790b      	ldrb	r3, [r1, #4]
 8005c48:	7113      	strb	r3, [r2, #4]
      LineCoding.paritytype = pbuf[5];
 8005c4a:	794b      	ldrb	r3, [r1, #5]
 8005c4c:	7153      	strb	r3, [r2, #5]
      LineCoding.datatype   = pbuf[6];
 8005c4e:	798b      	ldrb	r3, [r1, #6]
 8005c50:	7193      	strb	r3, [r2, #6]
    break;
 8005c52:	e7e7      	b.n	8005c24 <CDC_Control_FS+0x8>
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <CDC_Control_FS+0x5c>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	700a      	strb	r2, [r1, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	0a12      	lsrs	r2, r2, #8
 8005c5e:	704a      	strb	r2, [r1, #1]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8005c60:	885a      	ldrh	r2, [r3, #2]
 8005c62:	708a      	strb	r2, [r1, #2]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8005c64:	78da      	ldrb	r2, [r3, #3]
 8005c66:	70ca      	strb	r2, [r1, #3]
      pbuf[4] = LineCoding.format;
 8005c68:	791a      	ldrb	r2, [r3, #4]
 8005c6a:	710a      	strb	r2, [r1, #4]
      pbuf[5] = LineCoding.paritytype;
 8005c6c:	795a      	ldrb	r2, [r3, #5]
 8005c6e:	714a      	strb	r2, [r1, #5]
      pbuf[6] = LineCoding.datatype;
 8005c70:	799b      	ldrb	r3, [r3, #6]
 8005c72:	718b      	strb	r3, [r1, #6]
    break;
 8005c74:	e7d6      	b.n	8005c24 <CDC_Control_FS+0x8>
 8005c76:	bf00      	nop
 8005c78:	20000164 	.word	0x20000164

08005c7c <CDC_Init_FS>:
{
 8005c7c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005c7e:	4c06      	ldr	r4, [pc, #24]	; (8005c98 <CDC_Init_FS+0x1c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	4620      	mov	r0, r4
 8005c84:	4905      	ldr	r1, [pc, #20]	; (8005c9c <CDC_Init_FS+0x20>)
 8005c86:	f7ff fbc3 	bl	8005410 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	4904      	ldr	r1, [pc, #16]	; (8005ca0 <CDC_Init_FS+0x24>)
 8005c8e:	f7ff fbc7 	bl	8005420 <USBD_CDC_SetRxBuffer>
}
 8005c92:	2000      	movs	r0, #0
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	20000a24 	.word	0x20000a24
 8005c9c:	20000ee8 	.word	0x20000ee8
 8005ca0:	20000ce8 	.word	0x20000ce8

08005ca4 <cdcAvailable>:
  ret = (rx_head - rx_tail) % rx_len;
 8005ca4:	4a05      	ldr	r2, [pc, #20]	; (8005cbc <cdcAvailable+0x18>)
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <cdcAvailable+0x1c>)
 8005ca8:	6810      	ldr	r0, [r2, #0]
 8005caa:	4a06      	ldr	r2, [pc, #24]	; (8005cc4 <cdcAvailable+0x20>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	1a1b      	subs	r3, r3, r0
 8005cb2:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8005cb6:	fb02 3010 	mls	r0, r2, r0, r3
 8005cba:	4770      	bx	lr
 8005cbc:	200012f0 	.word	0x200012f0
 8005cc0:	200012ec 	.word	0x200012ec
 8005cc4:	2000017c 	.word	0x2000017c

08005cc8 <cdcDataIn>:
  rx_buf[rx_head]= rx_data;
 8005cc8:	4a08      	ldr	r2, [pc, #32]	; (8005cec <cdcDataIn+0x24>)
 8005cca:	4909      	ldr	r1, [pc, #36]	; (8005cf0 <cdcDataIn+0x28>)
 8005ccc:	6813      	ldr	r3, [r2, #0]
 8005cce:	54c8      	strb	r0, [r1, r3]
  next_rx_head =(rx_head +1)% rx_len;
 8005cd0:	4908      	ldr	r1, [pc, #32]	; (8005cf4 <cdcDataIn+0x2c>)
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	6809      	ldr	r1, [r1, #0]
 8005cd6:	fbb3 f0f1 	udiv	r0, r3, r1
 8005cda:	fb01 3310 	mls	r3, r1, r0, r3
  if (next_rx_head != rx_tail)
 8005cde:	4906      	ldr	r1, [pc, #24]	; (8005cf8 <cdcDataIn+0x30>)
}
 8005ce0:	2000      	movs	r0, #0
  if (next_rx_head != rx_tail)
 8005ce2:	6809      	ldr	r1, [r1, #0]
 8005ce4:	4299      	cmp	r1, r3
      rx_head = next_rx_head;
 8005ce6:	bf18      	it	ne
 8005ce8:	6013      	strne	r3, [r2, #0]
}
 8005cea:	4770      	bx	lr
 8005cec:	200012ec 	.word	0x200012ec
 8005cf0:	200010e8 	.word	0x200010e8
 8005cf4:	2000017c 	.word	0x2000017c
 8005cf8:	200012f0 	.word	0x200012f0

08005cfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4605      	mov	r5, r0
 8005d00:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */


  for (int i=0; i<*Len ; i++)
 8005d02:	2400      	movs	r4, #0
 8005d04:	6833      	ldr	r3, [r6, #0]
 8005d06:	42a3      	cmp	r3, r4
 8005d08:	d810      	bhi.n	8005d2c <CDC_Receive_FS+0x30>
      cdcDataIn(Buf[i]);
    }

  uint32_t buf_len;

  buf_len = ( rx_len - cdcAvailable() ) -1; //-1 : ?��?�� ?��?�� ?��칸을 비워?���???
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <CDC_Receive_FS+0x44>)
 8005d0c:	681c      	ldr	r4, [r3, #0]
 8005d0e:	f7ff ffc9 	bl	8005ca4 <cdcAvailable>
 8005d12:	3c01      	subs	r4, #1
 8005d14:	1a24      	subs	r4, r4, r0
  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8005d16:	2c3f      	cmp	r4, #63	; 0x3f
 8005d18:	d90d      	bls.n	8005d36 <CDC_Receive_FS+0x3a>
    {
      //?��?��?��?��?��?�� 보내�???
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	4809      	ldr	r0, [pc, #36]	; (8005d44 <CDC_Receive_FS+0x48>)
 8005d1e:	f7ff fb7f 	bl	8005420 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005d22:	4808      	ldr	r0, [pc, #32]	; (8005d44 <CDC_Receive_FS+0x48>)
 8005d24:	f7ff fb9b 	bl	800545e <USBD_CDC_ReceivePacket>
      rx_full = true;
    }

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005d28:	2000      	movs	r0, #0
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
      cdcDataIn(Buf[i]);
 8005d2c:	5d28      	ldrb	r0, [r5, r4]
 8005d2e:	f7ff ffcb 	bl	8005cc8 <cdcDataIn>
  for (int i=0; i<*Len ; i++)
 8005d32:	3401      	adds	r4, #1
 8005d34:	e7e6      	b.n	8005d04 <CDC_Receive_FS+0x8>
      rx_full = true;
 8005d36:	2201      	movs	r2, #1
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <CDC_Receive_FS+0x4c>)
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e7f4      	b.n	8005d28 <CDC_Receive_FS+0x2c>
 8005d3e:	bf00      	nop
 8005d40:	2000017c 	.word	0x2000017c
 8005d44:	20000a24 	.word	0x20000a24
 8005d48:	200012e8 	.word	0x200012e8

08005d4c <cdcRead>:
{
 8005d4c:	b510      	push	{r4, lr}
  ret = rx_buf[rx_tail];
 8005d4e:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <cdcRead+0x24>)
 8005d50:	4908      	ldr	r1, [pc, #32]	; (8005d74 <cdcRead+0x28>)
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	5cc8      	ldrb	r0, [r1, r3]
  if (rx_head != rx_tail)
 8005d56:	4908      	ldr	r1, [pc, #32]	; (8005d78 <cdcRead+0x2c>)
 8005d58:	6809      	ldr	r1, [r1, #0]
 8005d5a:	428b      	cmp	r3, r1
 8005d5c:	d007      	beq.n	8005d6e <cdcRead+0x22>
      rx_tail = (rx_tail + 1) % rx_len;
 8005d5e:	4907      	ldr	r1, [pc, #28]	; (8005d7c <cdcRead+0x30>)
 8005d60:	3301      	adds	r3, #1
 8005d62:	6809      	ldr	r1, [r1, #0]
 8005d64:	fbb3 f4f1 	udiv	r4, r3, r1
 8005d68:	fb01 3314 	mls	r3, r1, r4, r3
 8005d6c:	6013      	str	r3, [r2, #0]
}
 8005d6e:	bd10      	pop	{r4, pc}
 8005d70:	200012f0 	.word	0x200012f0
 8005d74:	200010e8 	.word	0x200010e8
 8005d78:	200012ec 	.word	0x200012ec
 8005d7c:	2000017c 	.word	0x2000017c

08005d80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005d80:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d82:	4c09      	ldr	r4, [pc, #36]	; (8005da8 <CDC_Transmit_FS+0x28>)
{
 8005d84:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d86:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8005d8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d8e:	b943      	cbnz	r3, 8005da2 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005d90:	4601      	mov	r1, r0
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7ff fb3c 	bl	8005410 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d98:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8005d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d9e:	f7ff bb45 	b.w	800542c <USBD_CDC_TransmitPacket>
}
 8005da2:	2001      	movs	r0, #1
 8005da4:	bd10      	pop	{r4, pc}
 8005da6:	bf00      	nop
 8005da8:	20000a24 	.word	0x20000a24

08005dac <cdcWrite>:
{
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	460c      	mov	r4, r1
 8005db0:	4606      	mov	r6, r0
  pre_time = millis();
 8005db2:	f7fa ffbf 	bl	8000d34 <millis>
 8005db6:	4605      	mov	r5, r0
      ret= CDC_Transmit_FS(p_data, length);
 8005db8:	b2a7      	uxth	r7, r4
 8005dba:	4639      	mov	r1, r7
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff ffdf 	bl	8005d80 <CDC_Transmit_FS>
      if (ret == USBD_OK)
 8005dc2:	b908      	cbnz	r0, 8005dc8 <cdcWrite+0x1c>
          return length;
 8005dc4:	b2e0      	uxtb	r0, r4
}
 8005dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (ret == USBD_FAIL)
 8005dc8:	2802      	cmp	r0, #2
 8005dca:	d004      	beq.n	8005dd6 <cdcWrite+0x2a>
      if (millis()- pre_time  >=100)
 8005dcc:	f7fa ffb2 	bl	8000d34 <millis>
 8005dd0:	1b43      	subs	r3, r0, r5
 8005dd2:	2b63      	cmp	r3, #99	; 0x63
 8005dd4:	d9f1      	bls.n	8005dba <cdcWrite+0xe>
          return 0;
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	e7f5      	b.n	8005dc6 <cdcWrite+0x1a>
	...

08005ddc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ddc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005dde:	4801      	ldr	r0, [pc, #4]	; (8005de4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005de0:	800b      	strh	r3, [r1, #0]
}
 8005de2:	4770      	bx	lr
 8005de4:	2000019c 	.word	0x2000019c

08005de8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005de8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005dea:	4801      	ldr	r0, [pc, #4]	; (8005df0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005dec:	800b      	strh	r3, [r1, #0]
}
 8005dee:	4770      	bx	lr
 8005df0:	200001b0 	.word	0x200001b0

08005df4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005df4:	2300      	movs	r3, #0
 8005df6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005df8:	461e      	mov	r6, r3
 8005dfa:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8005dfc:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8005dfe:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8005e02:	bf34      	ite	cc
 8005e04:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005e06:	3437      	addcs	r4, #55	; 0x37
 8005e08:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005e0c:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8005e10:	3301      	adds	r3, #1
 8005e12:	b2dc      	uxtb	r4, r3
 8005e14:	42a2      	cmp	r2, r4
    value = value << 4;
 8005e16:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8005e1a:	d8ef      	bhi.n	8005dfc <IntToUnicode+0x8>
  }
}
 8005e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e20 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005e20:	231a      	movs	r3, #26
{
 8005e22:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005e24:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e26:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <USBD_FS_SerialStrDescriptor+0x30>)
 8005e28:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8005e2c:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8005e30:	1880      	adds	r0, r0, r2
 8005e32:	d00a      	beq.n	8005e4a <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e34:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e38:	4906      	ldr	r1, [pc, #24]	; (8005e54 <USBD_FS_SerialStrDescriptor+0x34>)
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	f7ff ffda 	bl	8005df4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e40:	2204      	movs	r2, #4
 8005e42:	4620      	mov	r0, r4
 8005e44:	3110      	adds	r1, #16
 8005e46:	f7ff ffd5 	bl	8005df4 <IntToUnicode>
}
 8005e4a:	4803      	ldr	r0, [pc, #12]	; (8005e58 <USBD_FS_SerialStrDescriptor+0x38>)
 8005e4c:	bd10      	pop	{r4, pc}
 8005e4e:	bf00      	nop
 8005e50:	1ffff000 	.word	0x1ffff000
 8005e54:	200001b6 	.word	0x200001b6
 8005e58:	200001b4 	.word	0x200001b4

08005e5c <USBD_FS_ManufacturerStrDescriptor>:
{
 8005e5c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e5e:	4c04      	ldr	r4, [pc, #16]	; (8005e70 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005e60:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e62:	4804      	ldr	r0, [pc, #16]	; (8005e74 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005e64:	4621      	mov	r1, r4
 8005e66:	f7ff fe52 	bl	8005b0e <USBD_GetString>
}
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	bf00      	nop
 8005e70:	200012f4 	.word	0x200012f4
 8005e74:	08009671 	.word	0x08009671

08005e78 <USBD_FS_ProductStrDescriptor>:
{
 8005e78:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e7a:	4c04      	ldr	r4, [pc, #16]	; (8005e8c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8005e7c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e7e:	4804      	ldr	r0, [pc, #16]	; (8005e90 <USBD_FS_ProductStrDescriptor+0x18>)
 8005e80:	4621      	mov	r1, r4
 8005e82:	f7ff fe44 	bl	8005b0e <USBD_GetString>
}
 8005e86:	4620      	mov	r0, r4
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200012f4 	.word	0x200012f4
 8005e90:	08009684 	.word	0x08009684

08005e94 <USBD_FS_ConfigStrDescriptor>:
{
 8005e94:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e96:	4c04      	ldr	r4, [pc, #16]	; (8005ea8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8005e98:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e9a:	4804      	ldr	r0, [pc, #16]	; (8005eac <USBD_FS_ConfigStrDescriptor+0x18>)
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f7ff fe36 	bl	8005b0e <USBD_GetString>
}
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	bf00      	nop
 8005ea8:	200012f4 	.word	0x200012f4
 8005eac:	0800969a 	.word	0x0800969a

08005eb0 <USBD_FS_InterfaceStrDescriptor>:
{
 8005eb0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005eb2:	4c04      	ldr	r4, [pc, #16]	; (8005ec4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8005eb4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005eb6:	4804      	ldr	r0, [pc, #16]	; (8005ec8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005eb8:	4621      	mov	r1, r4
 8005eba:	f7ff fe28 	bl	8005b0e <USBD_GetString>
}
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200012f4 	.word	0x200012f4
 8005ec8:	080096a5 	.word	0x080096a5

08005ecc <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005ecc:	2803      	cmp	r0, #3
 8005ece:	bf9a      	itte	ls
 8005ed0:	4b01      	ldrls	r3, [pc, #4]	; (8005ed8 <USBD_Get_USB_Status+0xc>)
 8005ed2:	5c18      	ldrbls	r0, [r3, r0]
{
 8005ed4:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005ed6:	4770      	bx	lr
 8005ed8:	080096b3 	.word	0x080096b3

08005edc <HAL_PCD_MspInit>:
{
 8005edc:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005ede:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <HAL_PCD_MspInit+0x3c>)
 8005ee0:	6802      	ldr	r2, [r0, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d115      	bne.n	8005f12 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8005ee6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8005eea:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005eec:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8005eee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005ef2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005ef4:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005ef6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005ef8:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005f02:	f7fc f94d 	bl	80021a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005f06:	2014      	movs	r0, #20
}
 8005f08:	b003      	add	sp, #12
 8005f0a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005f0e:	f7fc b979 	b.w	8002204 <HAL_NVIC_EnableIRQ>
}
 8005f12:	b003      	add	sp, #12
 8005f14:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f18:	40005c00 	.word	0x40005c00

08005f1c <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f1c:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8005f20:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f24:	f7ff bae5 	b.w	80054f2 <USBD_LL_SetupStage>

08005f28 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f28:	2328      	movs	r3, #40	; 0x28
 8005f2a:	fb03 0301 	mla	r3, r3, r1, r0
 8005f2e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f32:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005f36:	f7ff bb09 	b.w	800554c <USBD_LL_DataOutStage>

08005f3a <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f3a:	2328      	movs	r3, #40	; 0x28
 8005f3c:	fb03 0301 	mla	r3, r3, r1, r0
 8005f40:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f46:	f7ff bb3b 	b.w	80055c0 <USBD_LL_DataInStage>

08005f4a <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f4a:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f4e:	f7ff bbcf 	b.w	80056f0 <USBD_LL_SOF>

08005f52 <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f52:	6883      	ldr	r3, [r0, #8]
{
 8005f54:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f56:	2b02      	cmp	r3, #2
{
 8005f58:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f5a:	d001      	beq.n	8005f60 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8005f5c:	f7fa ffb8 	bl	8000ed0 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f60:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8005f64:	2101      	movs	r1, #1
 8005f66:	f7ff fbad 	bl	80056c4 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f6a:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 8005f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f72:	f7ff bb80 	b.w	8005676 <USBD_LL_Reset>
	...

08005f78 <HAL_PCD_SuspendCallback>:
{
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f7c:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f80:	f7ff fba3 	bl	80056ca <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8005f84:	69a3      	ldr	r3, [r4, #24]
 8005f86:	b123      	cbz	r3, 8005f92 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f88:	4a02      	ldr	r2, [pc, #8]	; (8005f94 <HAL_PCD_SuspendCallback+0x1c>)
 8005f8a:	6913      	ldr	r3, [r2, #16]
 8005f8c:	f043 0306 	orr.w	r3, r3, #6
 8005f90:	6113      	str	r3, [r2, #16]
}
 8005f92:	bd10      	pop	{r4, pc}
 8005f94:	e000ed00 	.word	0xe000ed00

08005f98 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f98:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f9c:	f7ff bb9e 	b.w	80056dc <USBD_LL_Resume>

08005fa0 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005fa0:	2308      	movs	r3, #8
{
 8005fa2:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	; (800601c <USBD_LL_Init+0x7c>)
{
 8005fa6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005fa8:	481d      	ldr	r0, [pc, #116]	; (8006020 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005faa:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005fb2:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8005fb4:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8005fb8:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005fbc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005fc0:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005fc2:	f7fc fc47 	bl	8002854 <HAL_PCD_Init>
 8005fc6:	b108      	cbz	r0, 8005fcc <USBD_LL_Init+0x2c>
    Error_Handler( );
 8005fc8:	f7fa ff82 	bl	8000ed0 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2318      	movs	r3, #24
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005fd6:	f7fd fab6 	bl	8003546 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005fda:	2358      	movs	r3, #88	; 0x58
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005fe4:	f7fd faaf 	bl	8003546 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005fe8:	23c0      	movs	r3, #192	; 0xc0
 8005fea:	2200      	movs	r2, #0
 8005fec:	2181      	movs	r1, #129	; 0x81
 8005fee:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005ff2:	f7fd faa8 	bl	8003546 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005ff6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006002:	f7fd faa0 	bl	8003546 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800600a:	2200      	movs	r2, #0
 800600c:	2182      	movs	r1, #130	; 0x82
 800600e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006012:	f7fd fa98 	bl	8003546 <HAL_PCDEx_PMAConfig>
}
 8006016:	2000      	movs	r0, #0
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	40005c00 	.word	0x40005c00
 8006020:	200014f4 	.word	0x200014f4

08006024 <USBD_LL_Start>:
{
 8006024:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006026:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800602a:	f7fc fc8b 	bl	8002944 <HAL_PCD_Start>
}
 800602e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006032:	f7ff bf4b 	b.w	8005ecc <USBD_Get_USB_Status>

08006036 <USBD_LL_OpenEP>:
{
 8006036:	b510      	push	{r4, lr}
 8006038:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800603a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 800603e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006040:	4623      	mov	r3, r4
 8006042:	f7fd f98b 	bl	800335c <HAL_PCD_EP_Open>
}
 8006046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800604a:	f7ff bf3f 	b.w	8005ecc <USBD_Get_USB_Status>

0800604e <USBD_LL_CloseEP>:
{
 800604e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006050:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006054:	f7fd f9b1 	bl	80033ba <HAL_PCD_EP_Close>
}
 8006058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800605c:	f7ff bf36 	b.w	8005ecc <USBD_Get_USB_Status>

08006060 <USBD_LL_StallEP>:
{
 8006060:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006062:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006066:	f7fd fa09 	bl	800347c <HAL_PCD_EP_SetStall>
}
 800606a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800606e:	f7ff bf2d 	b.w	8005ecc <USBD_Get_USB_Status>

08006072 <USBD_LL_ClearStallEP>:
{
 8006072:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006074:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006078:	f7fd fa34 	bl	80034e4 <HAL_PCD_EP_ClrStall>
}
 800607c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006080:	f7ff bf24 	b.w	8005ecc <USBD_Get_USB_Status>

08006084 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006084:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8006086:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800608a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800608e:	bf1b      	ittet	ne
 8006090:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8006094:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006098:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800609c:	185b      	addne	r3, r3, r1
 800609e:	bf14      	ite	ne
 80060a0:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80060a2:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 80060a6:	4770      	bx	lr

080060a8 <USBD_LL_SetUSBAddress>:
{
 80060a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060ae:	f7fc fc62 	bl	8002976 <HAL_PCD_SetAddress>
}
 80060b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80060b6:	f7ff bf09 	b.w	8005ecc <USBD_Get_USB_Status>

080060ba <USBD_LL_Transmit>:
{
 80060ba:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060c0:	f7fd f9c2 	bl	8003448 <HAL_PCD_EP_Transmit>
}
 80060c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80060c8:	f7ff bf00 	b.w	8005ecc <USBD_Get_USB_Status>

080060cc <USBD_LL_PrepareReceive>:
{
 80060cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80060ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060d2:	f7fd f99a 	bl	800340a <HAL_PCD_EP_Receive>
}
 80060d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80060da:	f7ff bef7 	b.w	8005ecc <USBD_Get_USB_Status>

080060de <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80060de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060e2:	f7fd b9a9 	b.w	8003438 <HAL_PCD_EP_GetRxCount>
	...

080060e8 <USBD_static_malloc>:
}
 80060e8:	4800      	ldr	r0, [pc, #0]	; (80060ec <USBD_static_malloc+0x4>)
 80060ea:	4770      	bx	lr
 80060ec:	200017e4 	.word	0x200017e4

080060f0 <USBD_static_free>:
}
 80060f0:	4770      	bx	lr

080060f2 <HAL_PCDEx_SetConnectionState>:
}
 80060f2:	4770      	bx	lr

080060f4 <main>:

#include "main.h"


int main(void)
{
 80060f4:	b508      	push	{r3, lr}
  hwInit();
 80060f6:	f7fb ffd3 	bl	80020a0 <hwInit>
  apInit();
 80060fa:	f7fa fddb 	bl	8000cb4 <apInit>
  apMain();
 80060fe:	f7fa fdeb 	bl	8000cd8 <apMain>
  return 0;
}
 8006102:	2000      	movs	r0, #0
 8006104:	bd08      	pop	{r3, pc}
	...

08006108 <__errno>:
 8006108:	4b01      	ldr	r3, [pc, #4]	; (8006110 <__errno+0x8>)
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	200001d0 	.word	0x200001d0

08006114 <__libc_init_array>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	2600      	movs	r6, #0
 8006118:	4d0c      	ldr	r5, [pc, #48]	; (800614c <__libc_init_array+0x38>)
 800611a:	4c0d      	ldr	r4, [pc, #52]	; (8006150 <__libc_init_array+0x3c>)
 800611c:	1b64      	subs	r4, r4, r5
 800611e:	10a4      	asrs	r4, r4, #2
 8006120:	42a6      	cmp	r6, r4
 8006122:	d109      	bne.n	8006138 <__libc_init_array+0x24>
 8006124:	f003 f994 	bl	8009450 <_init>
 8006128:	2600      	movs	r6, #0
 800612a:	4d0a      	ldr	r5, [pc, #40]	; (8006154 <__libc_init_array+0x40>)
 800612c:	4c0a      	ldr	r4, [pc, #40]	; (8006158 <__libc_init_array+0x44>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	42a6      	cmp	r6, r4
 8006134:	d105      	bne.n	8006142 <__libc_init_array+0x2e>
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	f855 3b04 	ldr.w	r3, [r5], #4
 800613c:	4798      	blx	r3
 800613e:	3601      	adds	r6, #1
 8006140:	e7ee      	b.n	8006120 <__libc_init_array+0xc>
 8006142:	f855 3b04 	ldr.w	r3, [r5], #4
 8006146:	4798      	blx	r3
 8006148:	3601      	adds	r6, #1
 800614a:	e7f2      	b.n	8006132 <__libc_init_array+0x1e>
 800614c:	08009ae4 	.word	0x08009ae4
 8006150:	08009ae4 	.word	0x08009ae4
 8006154:	08009ae4 	.word	0x08009ae4
 8006158:	08009ae8 	.word	0x08009ae8

0800615c <memmove>:
 800615c:	4288      	cmp	r0, r1
 800615e:	b510      	push	{r4, lr}
 8006160:	eb01 0402 	add.w	r4, r1, r2
 8006164:	d902      	bls.n	800616c <memmove+0x10>
 8006166:	4284      	cmp	r4, r0
 8006168:	4623      	mov	r3, r4
 800616a:	d807      	bhi.n	800617c <memmove+0x20>
 800616c:	1e43      	subs	r3, r0, #1
 800616e:	42a1      	cmp	r1, r4
 8006170:	d008      	beq.n	8006184 <memmove+0x28>
 8006172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800617a:	e7f8      	b.n	800616e <memmove+0x12>
 800617c:	4601      	mov	r1, r0
 800617e:	4402      	add	r2, r0
 8006180:	428a      	cmp	r2, r1
 8006182:	d100      	bne.n	8006186 <memmove+0x2a>
 8006184:	bd10      	pop	{r4, pc}
 8006186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800618a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800618e:	e7f7      	b.n	8006180 <memmove+0x24>

08006190 <memset>:
 8006190:	4603      	mov	r3, r0
 8006192:	4402      	add	r2, r0
 8006194:	4293      	cmp	r3, r2
 8006196:	d100      	bne.n	800619a <memset+0xa>
 8006198:	4770      	bx	lr
 800619a:	f803 1b01 	strb.w	r1, [r3], #1
 800619e:	e7f9      	b.n	8006194 <memset+0x4>

080061a0 <strcpy>:
 80061a0:	4603      	mov	r3, r0
 80061a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061a6:	f803 2b01 	strb.w	r2, [r3], #1
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	d1f9      	bne.n	80061a2 <strcpy+0x2>
 80061ae:	4770      	bx	lr

080061b0 <sulp>:
 80061b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b4:	460f      	mov	r7, r1
 80061b6:	4690      	mov	r8, r2
 80061b8:	f001 fe30 	bl	8007e1c <__ulp>
 80061bc:	4604      	mov	r4, r0
 80061be:	460d      	mov	r5, r1
 80061c0:	f1b8 0f00 	cmp.w	r8, #0
 80061c4:	d011      	beq.n	80061ea <sulp+0x3a>
 80061c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80061ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd0b      	ble.n	80061ea <sulp+0x3a>
 80061d2:	2400      	movs	r4, #0
 80061d4:	051b      	lsls	r3, r3, #20
 80061d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80061da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80061de:	4622      	mov	r2, r4
 80061e0:	462b      	mov	r3, r5
 80061e2:	f7fa f983 	bl	80004ec <__aeabi_dmul>
 80061e6:	4604      	mov	r4, r0
 80061e8:	460d      	mov	r5, r1
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f2:	0000      	movs	r0, r0
 80061f4:	0000      	movs	r0, r0
	...

080061f8 <_strtod_l>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	469b      	mov	fp, r3
 80061fe:	2300      	movs	r3, #0
 8006200:	b09f      	sub	sp, #124	; 0x7c
 8006202:	931a      	str	r3, [sp, #104]	; 0x68
 8006204:	4b9e      	ldr	r3, [pc, #632]	; (8006480 <_strtod_l+0x288>)
 8006206:	4682      	mov	sl, r0
 8006208:	681f      	ldr	r7, [r3, #0]
 800620a:	460e      	mov	r6, r1
 800620c:	4638      	mov	r0, r7
 800620e:	9215      	str	r2, [sp, #84]	; 0x54
 8006210:	f7f9 ffa8 	bl	8000164 <strlen>
 8006214:	f04f 0800 	mov.w	r8, #0
 8006218:	4604      	mov	r4, r0
 800621a:	f04f 0900 	mov.w	r9, #0
 800621e:	9619      	str	r6, [sp, #100]	; 0x64
 8006220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	2a2b      	cmp	r2, #43	; 0x2b
 8006226:	d04c      	beq.n	80062c2 <_strtod_l+0xca>
 8006228:	d83a      	bhi.n	80062a0 <_strtod_l+0xa8>
 800622a:	2a0d      	cmp	r2, #13
 800622c:	d833      	bhi.n	8006296 <_strtod_l+0x9e>
 800622e:	2a08      	cmp	r2, #8
 8006230:	d833      	bhi.n	800629a <_strtod_l+0xa2>
 8006232:	2a00      	cmp	r2, #0
 8006234:	d03d      	beq.n	80062b2 <_strtod_l+0xba>
 8006236:	2300      	movs	r3, #0
 8006238:	930a      	str	r3, [sp, #40]	; 0x28
 800623a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800623c:	782b      	ldrb	r3, [r5, #0]
 800623e:	2b30      	cmp	r3, #48	; 0x30
 8006240:	f040 80aa 	bne.w	8006398 <_strtod_l+0x1a0>
 8006244:	786b      	ldrb	r3, [r5, #1]
 8006246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800624a:	2b58      	cmp	r3, #88	; 0x58
 800624c:	d166      	bne.n	800631c <_strtod_l+0x124>
 800624e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006250:	4650      	mov	r0, sl
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	ab1a      	add	r3, sp, #104	; 0x68
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	4a8a      	ldr	r2, [pc, #552]	; (8006484 <_strtod_l+0x28c>)
 800625a:	f8cd b008 	str.w	fp, [sp, #8]
 800625e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006260:	a919      	add	r1, sp, #100	; 0x64
 8006262:	f000 ff4d 	bl	8007100 <__gethex>
 8006266:	f010 0607 	ands.w	r6, r0, #7
 800626a:	4604      	mov	r4, r0
 800626c:	d005      	beq.n	800627a <_strtod_l+0x82>
 800626e:	2e06      	cmp	r6, #6
 8006270:	d129      	bne.n	80062c6 <_strtod_l+0xce>
 8006272:	2300      	movs	r3, #0
 8006274:	3501      	adds	r5, #1
 8006276:	9519      	str	r5, [sp, #100]	; 0x64
 8006278:	930a      	str	r3, [sp, #40]	; 0x28
 800627a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 858a 	bne.w	8006d96 <_strtod_l+0xb9e>
 8006282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006284:	b1d3      	cbz	r3, 80062bc <_strtod_l+0xc4>
 8006286:	4642      	mov	r2, r8
 8006288:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800628c:	4610      	mov	r0, r2
 800628e:	4619      	mov	r1, r3
 8006290:	b01f      	add	sp, #124	; 0x7c
 8006292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006296:	2a20      	cmp	r2, #32
 8006298:	d1cd      	bne.n	8006236 <_strtod_l+0x3e>
 800629a:	3301      	adds	r3, #1
 800629c:	9319      	str	r3, [sp, #100]	; 0x64
 800629e:	e7bf      	b.n	8006220 <_strtod_l+0x28>
 80062a0:	2a2d      	cmp	r2, #45	; 0x2d
 80062a2:	d1c8      	bne.n	8006236 <_strtod_l+0x3e>
 80062a4:	2201      	movs	r2, #1
 80062a6:	920a      	str	r2, [sp, #40]	; 0x28
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	9219      	str	r2, [sp, #100]	; 0x64
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1c3      	bne.n	800623a <_strtod_l+0x42>
 80062b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062b4:	9619      	str	r6, [sp, #100]	; 0x64
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 856b 	bne.w	8006d92 <_strtod_l+0xb9a>
 80062bc:	4642      	mov	r2, r8
 80062be:	464b      	mov	r3, r9
 80062c0:	e7e4      	b.n	800628c <_strtod_l+0x94>
 80062c2:	2200      	movs	r2, #0
 80062c4:	e7ef      	b.n	80062a6 <_strtod_l+0xae>
 80062c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80062c8:	b13a      	cbz	r2, 80062da <_strtod_l+0xe2>
 80062ca:	2135      	movs	r1, #53	; 0x35
 80062cc:	a81c      	add	r0, sp, #112	; 0x70
 80062ce:	f001 fea9 	bl	8008024 <__copybits>
 80062d2:	4650      	mov	r0, sl
 80062d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062d6:	f001 fa71 	bl	80077bc <_Bfree>
 80062da:	3e01      	subs	r6, #1
 80062dc:	2e04      	cmp	r6, #4
 80062de:	d806      	bhi.n	80062ee <_strtod_l+0xf6>
 80062e0:	e8df f006 	tbb	[pc, r6]
 80062e4:	1714030a 	.word	0x1714030a
 80062e8:	0a          	.byte	0x0a
 80062e9:	00          	.byte	0x00
 80062ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80062ee:	0721      	lsls	r1, r4, #28
 80062f0:	d5c3      	bpl.n	800627a <_strtod_l+0x82>
 80062f2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80062f6:	e7c0      	b.n	800627a <_strtod_l+0x82>
 80062f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80062fa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80062fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006302:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006306:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800630a:	e7f0      	b.n	80062ee <_strtod_l+0xf6>
 800630c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006488 <_strtod_l+0x290>
 8006310:	e7ed      	b.n	80062ee <_strtod_l+0xf6>
 8006312:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006316:	f04f 38ff 	mov.w	r8, #4294967295
 800631a:	e7e8      	b.n	80062ee <_strtod_l+0xf6>
 800631c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	9219      	str	r2, [sp, #100]	; 0x64
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b30      	cmp	r3, #48	; 0x30
 8006326:	d0f9      	beq.n	800631c <_strtod_l+0x124>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0a6      	beq.n	800627a <_strtod_l+0x82>
 800632c:	2301      	movs	r3, #1
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006332:	220a      	movs	r2, #10
 8006334:	9308      	str	r3, [sp, #32]
 8006336:	2300      	movs	r3, #0
 8006338:	469b      	mov	fp, r3
 800633a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800633e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006340:	7805      	ldrb	r5, [r0, #0]
 8006342:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006346:	b2d9      	uxtb	r1, r3
 8006348:	2909      	cmp	r1, #9
 800634a:	d927      	bls.n	800639c <_strtod_l+0x1a4>
 800634c:	4622      	mov	r2, r4
 800634e:	4639      	mov	r1, r7
 8006350:	f002 fa60 	bl	8008814 <strncmp>
 8006354:	2800      	cmp	r0, #0
 8006356:	d033      	beq.n	80063c0 <_strtod_l+0x1c8>
 8006358:	2000      	movs	r0, #0
 800635a:	462a      	mov	r2, r5
 800635c:	465c      	mov	r4, fp
 800635e:	4603      	mov	r3, r0
 8006360:	9004      	str	r0, [sp, #16]
 8006362:	2a65      	cmp	r2, #101	; 0x65
 8006364:	d001      	beq.n	800636a <_strtod_l+0x172>
 8006366:	2a45      	cmp	r2, #69	; 0x45
 8006368:	d114      	bne.n	8006394 <_strtod_l+0x19c>
 800636a:	b91c      	cbnz	r4, 8006374 <_strtod_l+0x17c>
 800636c:	9a07      	ldr	r2, [sp, #28]
 800636e:	4302      	orrs	r2, r0
 8006370:	d09f      	beq.n	80062b2 <_strtod_l+0xba>
 8006372:	2400      	movs	r4, #0
 8006374:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006376:	1c72      	adds	r2, r6, #1
 8006378:	9219      	str	r2, [sp, #100]	; 0x64
 800637a:	7872      	ldrb	r2, [r6, #1]
 800637c:	2a2b      	cmp	r2, #43	; 0x2b
 800637e:	d079      	beq.n	8006474 <_strtod_l+0x27c>
 8006380:	2a2d      	cmp	r2, #45	; 0x2d
 8006382:	f000 8083 	beq.w	800648c <_strtod_l+0x294>
 8006386:	2700      	movs	r7, #0
 8006388:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800638c:	2909      	cmp	r1, #9
 800638e:	f240 8083 	bls.w	8006498 <_strtod_l+0x2a0>
 8006392:	9619      	str	r6, [sp, #100]	; 0x64
 8006394:	2500      	movs	r5, #0
 8006396:	e09f      	b.n	80064d8 <_strtod_l+0x2e0>
 8006398:	2300      	movs	r3, #0
 800639a:	e7c8      	b.n	800632e <_strtod_l+0x136>
 800639c:	f1bb 0f08 	cmp.w	fp, #8
 80063a0:	bfd5      	itete	le
 80063a2:	9906      	ldrle	r1, [sp, #24]
 80063a4:	9905      	ldrgt	r1, [sp, #20]
 80063a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80063aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80063ae:	f100 0001 	add.w	r0, r0, #1
 80063b2:	bfd4      	ite	le
 80063b4:	9306      	strle	r3, [sp, #24]
 80063b6:	9305      	strgt	r3, [sp, #20]
 80063b8:	f10b 0b01 	add.w	fp, fp, #1
 80063bc:	9019      	str	r0, [sp, #100]	; 0x64
 80063be:	e7be      	b.n	800633e <_strtod_l+0x146>
 80063c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063c2:	191a      	adds	r2, r3, r4
 80063c4:	9219      	str	r2, [sp, #100]	; 0x64
 80063c6:	5d1a      	ldrb	r2, [r3, r4]
 80063c8:	f1bb 0f00 	cmp.w	fp, #0
 80063cc:	d036      	beq.n	800643c <_strtod_l+0x244>
 80063ce:	465c      	mov	r4, fp
 80063d0:	9004      	str	r0, [sp, #16]
 80063d2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d912      	bls.n	8006400 <_strtod_l+0x208>
 80063da:	2301      	movs	r3, #1
 80063dc:	e7c1      	b.n	8006362 <_strtod_l+0x16a>
 80063de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063e0:	3001      	adds	r0, #1
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	9219      	str	r2, [sp, #100]	; 0x64
 80063e6:	785a      	ldrb	r2, [r3, #1]
 80063e8:	2a30      	cmp	r2, #48	; 0x30
 80063ea:	d0f8      	beq.n	80063de <_strtod_l+0x1e6>
 80063ec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	f200 84d5 	bhi.w	8006da0 <_strtod_l+0xba8>
 80063f6:	9004      	str	r0, [sp, #16]
 80063f8:	2000      	movs	r0, #0
 80063fa:	4604      	mov	r4, r0
 80063fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063fe:	9308      	str	r3, [sp, #32]
 8006400:	3a30      	subs	r2, #48	; 0x30
 8006402:	f100 0301 	add.w	r3, r0, #1
 8006406:	d013      	beq.n	8006430 <_strtod_l+0x238>
 8006408:	9904      	ldr	r1, [sp, #16]
 800640a:	1905      	adds	r5, r0, r4
 800640c:	4419      	add	r1, r3
 800640e:	9104      	str	r1, [sp, #16]
 8006410:	4623      	mov	r3, r4
 8006412:	210a      	movs	r1, #10
 8006414:	42ab      	cmp	r3, r5
 8006416:	d113      	bne.n	8006440 <_strtod_l+0x248>
 8006418:	1823      	adds	r3, r4, r0
 800641a:	2b08      	cmp	r3, #8
 800641c:	f104 0401 	add.w	r4, r4, #1
 8006420:	4404      	add	r4, r0
 8006422:	dc1b      	bgt.n	800645c <_strtod_l+0x264>
 8006424:	230a      	movs	r3, #10
 8006426:	9906      	ldr	r1, [sp, #24]
 8006428:	fb03 2301 	mla	r3, r3, r1, r2
 800642c:	9306      	str	r3, [sp, #24]
 800642e:	2300      	movs	r3, #0
 8006430:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006432:	4618      	mov	r0, r3
 8006434:	1c51      	adds	r1, r2, #1
 8006436:	9119      	str	r1, [sp, #100]	; 0x64
 8006438:	7852      	ldrb	r2, [r2, #1]
 800643a:	e7ca      	b.n	80063d2 <_strtod_l+0x1da>
 800643c:	4658      	mov	r0, fp
 800643e:	e7d3      	b.n	80063e8 <_strtod_l+0x1f0>
 8006440:	2b08      	cmp	r3, #8
 8006442:	dc04      	bgt.n	800644e <_strtod_l+0x256>
 8006444:	9f06      	ldr	r7, [sp, #24]
 8006446:	434f      	muls	r7, r1
 8006448:	9706      	str	r7, [sp, #24]
 800644a:	3301      	adds	r3, #1
 800644c:	e7e2      	b.n	8006414 <_strtod_l+0x21c>
 800644e:	1c5f      	adds	r7, r3, #1
 8006450:	2f10      	cmp	r7, #16
 8006452:	bfde      	ittt	le
 8006454:	9f05      	ldrle	r7, [sp, #20]
 8006456:	434f      	mulle	r7, r1
 8006458:	9705      	strle	r7, [sp, #20]
 800645a:	e7f6      	b.n	800644a <_strtod_l+0x252>
 800645c:	2c10      	cmp	r4, #16
 800645e:	bfdf      	itttt	le
 8006460:	230a      	movle	r3, #10
 8006462:	9905      	ldrle	r1, [sp, #20]
 8006464:	fb03 2301 	mlale	r3, r3, r1, r2
 8006468:	9305      	strle	r3, [sp, #20]
 800646a:	e7e0      	b.n	800642e <_strtod_l+0x236>
 800646c:	2300      	movs	r3, #0
 800646e:	9304      	str	r3, [sp, #16]
 8006470:	2301      	movs	r3, #1
 8006472:	e77b      	b.n	800636c <_strtod_l+0x174>
 8006474:	2700      	movs	r7, #0
 8006476:	1cb2      	adds	r2, r6, #2
 8006478:	9219      	str	r2, [sp, #100]	; 0x64
 800647a:	78b2      	ldrb	r2, [r6, #2]
 800647c:	e784      	b.n	8006388 <_strtod_l+0x190>
 800647e:	bf00      	nop
 8006480:	08009890 	.word	0x08009890
 8006484:	080096c8 	.word	0x080096c8
 8006488:	7ff00000 	.word	0x7ff00000
 800648c:	2701      	movs	r7, #1
 800648e:	e7f2      	b.n	8006476 <_strtod_l+0x27e>
 8006490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006492:	1c51      	adds	r1, r2, #1
 8006494:	9119      	str	r1, [sp, #100]	; 0x64
 8006496:	7852      	ldrb	r2, [r2, #1]
 8006498:	2a30      	cmp	r2, #48	; 0x30
 800649a:	d0f9      	beq.n	8006490 <_strtod_l+0x298>
 800649c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80064a0:	2908      	cmp	r1, #8
 80064a2:	f63f af77 	bhi.w	8006394 <_strtod_l+0x19c>
 80064a6:	f04f 0e0a 	mov.w	lr, #10
 80064aa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80064ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064b0:	9209      	str	r2, [sp, #36]	; 0x24
 80064b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064b4:	1c51      	adds	r1, r2, #1
 80064b6:	9119      	str	r1, [sp, #100]	; 0x64
 80064b8:	7852      	ldrb	r2, [r2, #1]
 80064ba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80064be:	2d09      	cmp	r5, #9
 80064c0:	d935      	bls.n	800652e <_strtod_l+0x336>
 80064c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80064c4:	1b49      	subs	r1, r1, r5
 80064c6:	2908      	cmp	r1, #8
 80064c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80064cc:	dc02      	bgt.n	80064d4 <_strtod_l+0x2dc>
 80064ce:	4565      	cmp	r5, ip
 80064d0:	bfa8      	it	ge
 80064d2:	4665      	movge	r5, ip
 80064d4:	b107      	cbz	r7, 80064d8 <_strtod_l+0x2e0>
 80064d6:	426d      	negs	r5, r5
 80064d8:	2c00      	cmp	r4, #0
 80064da:	d14c      	bne.n	8006576 <_strtod_l+0x37e>
 80064dc:	9907      	ldr	r1, [sp, #28]
 80064de:	4301      	orrs	r1, r0
 80064e0:	f47f aecb 	bne.w	800627a <_strtod_l+0x82>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f aee4 	bne.w	80062b2 <_strtod_l+0xba>
 80064ea:	2a69      	cmp	r2, #105	; 0x69
 80064ec:	d026      	beq.n	800653c <_strtod_l+0x344>
 80064ee:	dc23      	bgt.n	8006538 <_strtod_l+0x340>
 80064f0:	2a49      	cmp	r2, #73	; 0x49
 80064f2:	d023      	beq.n	800653c <_strtod_l+0x344>
 80064f4:	2a4e      	cmp	r2, #78	; 0x4e
 80064f6:	f47f aedc 	bne.w	80062b2 <_strtod_l+0xba>
 80064fa:	499d      	ldr	r1, [pc, #628]	; (8006770 <_strtod_l+0x578>)
 80064fc:	a819      	add	r0, sp, #100	; 0x64
 80064fe:	f001 f84d 	bl	800759c <__match>
 8006502:	2800      	cmp	r0, #0
 8006504:	f43f aed5 	beq.w	80062b2 <_strtod_l+0xba>
 8006508:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b28      	cmp	r3, #40	; 0x28
 800650e:	d12c      	bne.n	800656a <_strtod_l+0x372>
 8006510:	4998      	ldr	r1, [pc, #608]	; (8006774 <_strtod_l+0x57c>)
 8006512:	aa1c      	add	r2, sp, #112	; 0x70
 8006514:	a819      	add	r0, sp, #100	; 0x64
 8006516:	f001 f855 	bl	80075c4 <__hexnan>
 800651a:	2805      	cmp	r0, #5
 800651c:	d125      	bne.n	800656a <_strtod_l+0x372>
 800651e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006520:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006524:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006528:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800652c:	e6a5      	b.n	800627a <_strtod_l+0x82>
 800652e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006532:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006536:	e7bc      	b.n	80064b2 <_strtod_l+0x2ba>
 8006538:	2a6e      	cmp	r2, #110	; 0x6e
 800653a:	e7dc      	b.n	80064f6 <_strtod_l+0x2fe>
 800653c:	498e      	ldr	r1, [pc, #568]	; (8006778 <_strtod_l+0x580>)
 800653e:	a819      	add	r0, sp, #100	; 0x64
 8006540:	f001 f82c 	bl	800759c <__match>
 8006544:	2800      	cmp	r0, #0
 8006546:	f43f aeb4 	beq.w	80062b2 <_strtod_l+0xba>
 800654a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800654c:	498b      	ldr	r1, [pc, #556]	; (800677c <_strtod_l+0x584>)
 800654e:	3b01      	subs	r3, #1
 8006550:	a819      	add	r0, sp, #100	; 0x64
 8006552:	9319      	str	r3, [sp, #100]	; 0x64
 8006554:	f001 f822 	bl	800759c <__match>
 8006558:	b910      	cbnz	r0, 8006560 <_strtod_l+0x368>
 800655a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800655c:	3301      	adds	r3, #1
 800655e:	9319      	str	r3, [sp, #100]	; 0x64
 8006560:	f04f 0800 	mov.w	r8, #0
 8006564:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006780 <_strtod_l+0x588>
 8006568:	e687      	b.n	800627a <_strtod_l+0x82>
 800656a:	4886      	ldr	r0, [pc, #536]	; (8006784 <_strtod_l+0x58c>)
 800656c:	f002 f938 	bl	80087e0 <nan>
 8006570:	4680      	mov	r8, r0
 8006572:	4689      	mov	r9, r1
 8006574:	e681      	b.n	800627a <_strtod_l+0x82>
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	f1bb 0f00 	cmp.w	fp, #0
 800657c:	bf08      	it	eq
 800657e:	46a3      	moveq	fp, r4
 8006580:	1aeb      	subs	r3, r5, r3
 8006582:	2c10      	cmp	r4, #16
 8006584:	9806      	ldr	r0, [sp, #24]
 8006586:	4626      	mov	r6, r4
 8006588:	9307      	str	r3, [sp, #28]
 800658a:	bfa8      	it	ge
 800658c:	2610      	movge	r6, #16
 800658e:	f7f9 ff33 	bl	80003f8 <__aeabi_ui2d>
 8006592:	2c09      	cmp	r4, #9
 8006594:	4680      	mov	r8, r0
 8006596:	4689      	mov	r9, r1
 8006598:	dd13      	ble.n	80065c2 <_strtod_l+0x3ca>
 800659a:	4b7b      	ldr	r3, [pc, #492]	; (8006788 <_strtod_l+0x590>)
 800659c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065a4:	f7f9 ffa2 	bl	80004ec <__aeabi_dmul>
 80065a8:	4680      	mov	r8, r0
 80065aa:	9805      	ldr	r0, [sp, #20]
 80065ac:	4689      	mov	r9, r1
 80065ae:	f7f9 ff23 	bl	80003f8 <__aeabi_ui2d>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7f9 fde1 	bl	8000180 <__adddf3>
 80065be:	4680      	mov	r8, r0
 80065c0:	4689      	mov	r9, r1
 80065c2:	2c0f      	cmp	r4, #15
 80065c4:	dc36      	bgt.n	8006634 <_strtod_l+0x43c>
 80065c6:	9b07      	ldr	r3, [sp, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f43f ae56 	beq.w	800627a <_strtod_l+0x82>
 80065ce:	dd22      	ble.n	8006616 <_strtod_l+0x41e>
 80065d0:	2b16      	cmp	r3, #22
 80065d2:	dc09      	bgt.n	80065e8 <_strtod_l+0x3f0>
 80065d4:	496c      	ldr	r1, [pc, #432]	; (8006788 <_strtod_l+0x590>)
 80065d6:	4642      	mov	r2, r8
 80065d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065dc:	464b      	mov	r3, r9
 80065de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065e2:	f7f9 ff83 	bl	80004ec <__aeabi_dmul>
 80065e6:	e7c3      	b.n	8006570 <_strtod_l+0x378>
 80065e8:	9a07      	ldr	r2, [sp, #28]
 80065ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80065ee:	4293      	cmp	r3, r2
 80065f0:	db20      	blt.n	8006634 <_strtod_l+0x43c>
 80065f2:	4d65      	ldr	r5, [pc, #404]	; (8006788 <_strtod_l+0x590>)
 80065f4:	f1c4 040f 	rsb	r4, r4, #15
 80065f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80065fc:	4642      	mov	r2, r8
 80065fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006602:	464b      	mov	r3, r9
 8006604:	f7f9 ff72 	bl	80004ec <__aeabi_dmul>
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	1b1c      	subs	r4, r3, r4
 800660c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006610:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006614:	e7e5      	b.n	80065e2 <_strtod_l+0x3ea>
 8006616:	9b07      	ldr	r3, [sp, #28]
 8006618:	3316      	adds	r3, #22
 800661a:	db0b      	blt.n	8006634 <_strtod_l+0x43c>
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	4640      	mov	r0, r8
 8006620:	1b5d      	subs	r5, r3, r5
 8006622:	4b59      	ldr	r3, [pc, #356]	; (8006788 <_strtod_l+0x590>)
 8006624:	4649      	mov	r1, r9
 8006626:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800662a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800662e:	f7fa f887 	bl	8000740 <__aeabi_ddiv>
 8006632:	e79d      	b.n	8006570 <_strtod_l+0x378>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	1ba6      	subs	r6, r4, r6
 8006638:	441e      	add	r6, r3
 800663a:	2e00      	cmp	r6, #0
 800663c:	dd74      	ble.n	8006728 <_strtod_l+0x530>
 800663e:	f016 030f 	ands.w	r3, r6, #15
 8006642:	d00a      	beq.n	800665a <_strtod_l+0x462>
 8006644:	4950      	ldr	r1, [pc, #320]	; (8006788 <_strtod_l+0x590>)
 8006646:	4642      	mov	r2, r8
 8006648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800664c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006650:	464b      	mov	r3, r9
 8006652:	f7f9 ff4b 	bl	80004ec <__aeabi_dmul>
 8006656:	4680      	mov	r8, r0
 8006658:	4689      	mov	r9, r1
 800665a:	f036 060f 	bics.w	r6, r6, #15
 800665e:	d052      	beq.n	8006706 <_strtod_l+0x50e>
 8006660:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006664:	dd27      	ble.n	80066b6 <_strtod_l+0x4be>
 8006666:	f04f 0b00 	mov.w	fp, #0
 800666a:	f8cd b010 	str.w	fp, [sp, #16]
 800666e:	f8cd b020 	str.w	fp, [sp, #32]
 8006672:	f8cd b018 	str.w	fp, [sp, #24]
 8006676:	2322      	movs	r3, #34	; 0x22
 8006678:	f04f 0800 	mov.w	r8, #0
 800667c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006780 <_strtod_l+0x588>
 8006680:	f8ca 3000 	str.w	r3, [sl]
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f43f adf7 	beq.w	800627a <_strtod_l+0x82>
 800668c:	4650      	mov	r0, sl
 800668e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006690:	f001 f894 	bl	80077bc <_Bfree>
 8006694:	4650      	mov	r0, sl
 8006696:	9906      	ldr	r1, [sp, #24]
 8006698:	f001 f890 	bl	80077bc <_Bfree>
 800669c:	4650      	mov	r0, sl
 800669e:	9904      	ldr	r1, [sp, #16]
 80066a0:	f001 f88c 	bl	80077bc <_Bfree>
 80066a4:	4650      	mov	r0, sl
 80066a6:	9908      	ldr	r1, [sp, #32]
 80066a8:	f001 f888 	bl	80077bc <_Bfree>
 80066ac:	4659      	mov	r1, fp
 80066ae:	4650      	mov	r0, sl
 80066b0:	f001 f884 	bl	80077bc <_Bfree>
 80066b4:	e5e1      	b.n	800627a <_strtod_l+0x82>
 80066b6:	4b35      	ldr	r3, [pc, #212]	; (800678c <_strtod_l+0x594>)
 80066b8:	4640      	mov	r0, r8
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	2300      	movs	r3, #0
 80066be:	4649      	mov	r1, r9
 80066c0:	461f      	mov	r7, r3
 80066c2:	1136      	asrs	r6, r6, #4
 80066c4:	2e01      	cmp	r6, #1
 80066c6:	dc21      	bgt.n	800670c <_strtod_l+0x514>
 80066c8:	b10b      	cbz	r3, 80066ce <_strtod_l+0x4d6>
 80066ca:	4680      	mov	r8, r0
 80066cc:	4689      	mov	r9, r1
 80066ce:	4b2f      	ldr	r3, [pc, #188]	; (800678c <_strtod_l+0x594>)
 80066d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80066d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80066d8:	4642      	mov	r2, r8
 80066da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066de:	464b      	mov	r3, r9
 80066e0:	f7f9 ff04 	bl	80004ec <__aeabi_dmul>
 80066e4:	4b26      	ldr	r3, [pc, #152]	; (8006780 <_strtod_l+0x588>)
 80066e6:	460a      	mov	r2, r1
 80066e8:	400b      	ands	r3, r1
 80066ea:	4929      	ldr	r1, [pc, #164]	; (8006790 <_strtod_l+0x598>)
 80066ec:	4680      	mov	r8, r0
 80066ee:	428b      	cmp	r3, r1
 80066f0:	d8b9      	bhi.n	8006666 <_strtod_l+0x46e>
 80066f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80066f6:	428b      	cmp	r3, r1
 80066f8:	bf86      	itte	hi
 80066fa:	f04f 38ff 	movhi.w	r8, #4294967295
 80066fe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006794 <_strtod_l+0x59c>
 8006702:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006706:	2300      	movs	r3, #0
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	e07f      	b.n	800680c <_strtod_l+0x614>
 800670c:	07f2      	lsls	r2, r6, #31
 800670e:	d505      	bpl.n	800671c <_strtod_l+0x524>
 8006710:	9b05      	ldr	r3, [sp, #20]
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 fee9 	bl	80004ec <__aeabi_dmul>
 800671a:	2301      	movs	r3, #1
 800671c:	9a05      	ldr	r2, [sp, #20]
 800671e:	3701      	adds	r7, #1
 8006720:	3208      	adds	r2, #8
 8006722:	1076      	asrs	r6, r6, #1
 8006724:	9205      	str	r2, [sp, #20]
 8006726:	e7cd      	b.n	80066c4 <_strtod_l+0x4cc>
 8006728:	d0ed      	beq.n	8006706 <_strtod_l+0x50e>
 800672a:	4276      	negs	r6, r6
 800672c:	f016 020f 	ands.w	r2, r6, #15
 8006730:	d00a      	beq.n	8006748 <_strtod_l+0x550>
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <_strtod_l+0x590>)
 8006734:	4640      	mov	r0, r8
 8006736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800673a:	4649      	mov	r1, r9
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f7f9 fffe 	bl	8000740 <__aeabi_ddiv>
 8006744:	4680      	mov	r8, r0
 8006746:	4689      	mov	r9, r1
 8006748:	1136      	asrs	r6, r6, #4
 800674a:	d0dc      	beq.n	8006706 <_strtod_l+0x50e>
 800674c:	2e1f      	cmp	r6, #31
 800674e:	dd23      	ble.n	8006798 <_strtod_l+0x5a0>
 8006750:	f04f 0b00 	mov.w	fp, #0
 8006754:	f8cd b010 	str.w	fp, [sp, #16]
 8006758:	f8cd b020 	str.w	fp, [sp, #32]
 800675c:	f8cd b018 	str.w	fp, [sp, #24]
 8006760:	2322      	movs	r3, #34	; 0x22
 8006762:	f04f 0800 	mov.w	r8, #0
 8006766:	f04f 0900 	mov.w	r9, #0
 800676a:	f8ca 3000 	str.w	r3, [sl]
 800676e:	e789      	b.n	8006684 <_strtod_l+0x48c>
 8006770:	080096c5 	.word	0x080096c5
 8006774:	080096dc 	.word	0x080096dc
 8006778:	080096bc 	.word	0x080096bc
 800677c:	080096bf 	.word	0x080096bf
 8006780:	7ff00000 	.word	0x7ff00000
 8006784:	0800951c 	.word	0x0800951c
 8006788:	08009940 	.word	0x08009940
 800678c:	08009918 	.word	0x08009918
 8006790:	7ca00000 	.word	0x7ca00000
 8006794:	7fefffff 	.word	0x7fefffff
 8006798:	f016 0310 	ands.w	r3, r6, #16
 800679c:	bf18      	it	ne
 800679e:	236a      	movne	r3, #106	; 0x6a
 80067a0:	4640      	mov	r0, r8
 80067a2:	9305      	str	r3, [sp, #20]
 80067a4:	4649      	mov	r1, r9
 80067a6:	2300      	movs	r3, #0
 80067a8:	4fb0      	ldr	r7, [pc, #704]	; (8006a6c <_strtod_l+0x874>)
 80067aa:	07f2      	lsls	r2, r6, #31
 80067ac:	d504      	bpl.n	80067b8 <_strtod_l+0x5c0>
 80067ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b2:	f7f9 fe9b 	bl	80004ec <__aeabi_dmul>
 80067b6:	2301      	movs	r3, #1
 80067b8:	1076      	asrs	r6, r6, #1
 80067ba:	f107 0708 	add.w	r7, r7, #8
 80067be:	d1f4      	bne.n	80067aa <_strtod_l+0x5b2>
 80067c0:	b10b      	cbz	r3, 80067c6 <_strtod_l+0x5ce>
 80067c2:	4680      	mov	r8, r0
 80067c4:	4689      	mov	r9, r1
 80067c6:	9b05      	ldr	r3, [sp, #20]
 80067c8:	b1c3      	cbz	r3, 80067fc <_strtod_l+0x604>
 80067ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80067ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	4649      	mov	r1, r9
 80067d6:	dd11      	ble.n	80067fc <_strtod_l+0x604>
 80067d8:	2b1f      	cmp	r3, #31
 80067da:	f340 8127 	ble.w	8006a2c <_strtod_l+0x834>
 80067de:	2b34      	cmp	r3, #52	; 0x34
 80067e0:	bfd8      	it	le
 80067e2:	f04f 33ff 	movle.w	r3, #4294967295
 80067e6:	f04f 0800 	mov.w	r8, #0
 80067ea:	bfcf      	iteee	gt
 80067ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80067f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80067f4:	fa03 f202 	lslle.w	r2, r3, r2
 80067f8:	ea02 0901 	andle.w	r9, r2, r1
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	4640      	mov	r0, r8
 8006802:	4649      	mov	r1, r9
 8006804:	f7fa f8da 	bl	80009bc <__aeabi_dcmpeq>
 8006808:	2800      	cmp	r0, #0
 800680a:	d1a1      	bne.n	8006750 <_strtod_l+0x558>
 800680c:	9b06      	ldr	r3, [sp, #24]
 800680e:	465a      	mov	r2, fp
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	4650      	mov	r0, sl
 8006814:	4623      	mov	r3, r4
 8006816:	9908      	ldr	r1, [sp, #32]
 8006818:	f001 f838 	bl	800788c <__s2b>
 800681c:	9008      	str	r0, [sp, #32]
 800681e:	2800      	cmp	r0, #0
 8006820:	f43f af21 	beq.w	8006666 <_strtod_l+0x46e>
 8006824:	9b04      	ldr	r3, [sp, #16]
 8006826:	f04f 0b00 	mov.w	fp, #0
 800682a:	1b5d      	subs	r5, r3, r5
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	f8cd b010 	str.w	fp, [sp, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	bfb4      	ite	lt
 8006836:	462b      	movlt	r3, r5
 8006838:	2300      	movge	r3, #0
 800683a:	930e      	str	r3, [sp, #56]	; 0x38
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006842:	9314      	str	r3, [sp, #80]	; 0x50
 8006844:	9b08      	ldr	r3, [sp, #32]
 8006846:	4650      	mov	r0, sl
 8006848:	6859      	ldr	r1, [r3, #4]
 800684a:	f000 ff77 	bl	800773c <_Balloc>
 800684e:	9006      	str	r0, [sp, #24]
 8006850:	2800      	cmp	r0, #0
 8006852:	f43f af10 	beq.w	8006676 <_strtod_l+0x47e>
 8006856:	9b08      	ldr	r3, [sp, #32]
 8006858:	300c      	adds	r0, #12
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	f103 010c 	add.w	r1, r3, #12
 8006860:	3202      	adds	r2, #2
 8006862:	0092      	lsls	r2, r2, #2
 8006864:	f000 ff5c 	bl	8007720 <memcpy>
 8006868:	ab1c      	add	r3, sp, #112	; 0x70
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	ab1b      	add	r3, sp, #108	; 0x6c
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	4650      	mov	r0, sl
 8006876:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800687a:	f001 fb49 	bl	8007f10 <__d2b>
 800687e:	901a      	str	r0, [sp, #104]	; 0x68
 8006880:	2800      	cmp	r0, #0
 8006882:	f43f aef8 	beq.w	8006676 <_strtod_l+0x47e>
 8006886:	2101      	movs	r1, #1
 8006888:	4650      	mov	r0, sl
 800688a:	f001 f897 	bl	80079bc <__i2b>
 800688e:	4603      	mov	r3, r0
 8006890:	9004      	str	r0, [sp, #16]
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f aeef 	beq.w	8006676 <_strtod_l+0x47e>
 8006898:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800689a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800689c:	2d00      	cmp	r5, #0
 800689e:	bfab      	itete	ge
 80068a0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80068a2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80068a4:	18ee      	addge	r6, r5, r3
 80068a6:	1b5c      	sublt	r4, r3, r5
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	bfa8      	it	ge
 80068ac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80068ae:	eba5 0503 	sub.w	r5, r5, r3
 80068b2:	4415      	add	r5, r2
 80068b4:	4b6e      	ldr	r3, [pc, #440]	; (8006a70 <_strtod_l+0x878>)
 80068b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80068ba:	bfb8      	it	lt
 80068bc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80068be:	429d      	cmp	r5, r3
 80068c0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80068c4:	f280 80c4 	bge.w	8006a50 <_strtod_l+0x858>
 80068c8:	1b5b      	subs	r3, r3, r5
 80068ca:	2b1f      	cmp	r3, #31
 80068cc:	f04f 0701 	mov.w	r7, #1
 80068d0:	eba2 0203 	sub.w	r2, r2, r3
 80068d4:	f300 80b1 	bgt.w	8006a3a <_strtod_l+0x842>
 80068d8:	2500      	movs	r5, #0
 80068da:	fa07 f303 	lsl.w	r3, r7, r3
 80068de:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e0:	18b7      	adds	r7, r6, r2
 80068e2:	9b05      	ldr	r3, [sp, #20]
 80068e4:	42be      	cmp	r6, r7
 80068e6:	4414      	add	r4, r2
 80068e8:	441c      	add	r4, r3
 80068ea:	4633      	mov	r3, r6
 80068ec:	bfa8      	it	ge
 80068ee:	463b      	movge	r3, r7
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	bfa8      	it	ge
 80068f4:	4623      	movge	r3, r4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfc2      	ittt	gt
 80068fa:	1aff      	subgt	r7, r7, r3
 80068fc:	1ae4      	subgt	r4, r4, r3
 80068fe:	1af6      	subgt	r6, r6, r3
 8006900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006902:	2b00      	cmp	r3, #0
 8006904:	dd17      	ble.n	8006936 <_strtod_l+0x73e>
 8006906:	461a      	mov	r2, r3
 8006908:	4650      	mov	r0, sl
 800690a:	9904      	ldr	r1, [sp, #16]
 800690c:	f001 f914 	bl	8007b38 <__pow5mult>
 8006910:	9004      	str	r0, [sp, #16]
 8006912:	2800      	cmp	r0, #0
 8006914:	f43f aeaf 	beq.w	8006676 <_strtod_l+0x47e>
 8006918:	4601      	mov	r1, r0
 800691a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800691c:	4650      	mov	r0, sl
 800691e:	f001 f863 	bl	80079e8 <__multiply>
 8006922:	9009      	str	r0, [sp, #36]	; 0x24
 8006924:	2800      	cmp	r0, #0
 8006926:	f43f aea6 	beq.w	8006676 <_strtod_l+0x47e>
 800692a:	4650      	mov	r0, sl
 800692c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800692e:	f000 ff45 	bl	80077bc <_Bfree>
 8006932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006934:	931a      	str	r3, [sp, #104]	; 0x68
 8006936:	2f00      	cmp	r7, #0
 8006938:	f300 808e 	bgt.w	8006a58 <_strtod_l+0x860>
 800693c:	9b07      	ldr	r3, [sp, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	dd08      	ble.n	8006954 <_strtod_l+0x75c>
 8006942:	4650      	mov	r0, sl
 8006944:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006946:	9906      	ldr	r1, [sp, #24]
 8006948:	f001 f8f6 	bl	8007b38 <__pow5mult>
 800694c:	9006      	str	r0, [sp, #24]
 800694e:	2800      	cmp	r0, #0
 8006950:	f43f ae91 	beq.w	8006676 <_strtod_l+0x47e>
 8006954:	2c00      	cmp	r4, #0
 8006956:	dd08      	ble.n	800696a <_strtod_l+0x772>
 8006958:	4622      	mov	r2, r4
 800695a:	4650      	mov	r0, sl
 800695c:	9906      	ldr	r1, [sp, #24]
 800695e:	f001 f945 	bl	8007bec <__lshift>
 8006962:	9006      	str	r0, [sp, #24]
 8006964:	2800      	cmp	r0, #0
 8006966:	f43f ae86 	beq.w	8006676 <_strtod_l+0x47e>
 800696a:	2e00      	cmp	r6, #0
 800696c:	dd08      	ble.n	8006980 <_strtod_l+0x788>
 800696e:	4632      	mov	r2, r6
 8006970:	4650      	mov	r0, sl
 8006972:	9904      	ldr	r1, [sp, #16]
 8006974:	f001 f93a 	bl	8007bec <__lshift>
 8006978:	9004      	str	r0, [sp, #16]
 800697a:	2800      	cmp	r0, #0
 800697c:	f43f ae7b 	beq.w	8006676 <_strtod_l+0x47e>
 8006980:	4650      	mov	r0, sl
 8006982:	9a06      	ldr	r2, [sp, #24]
 8006984:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006986:	f001 f9bd 	bl	8007d04 <__mdiff>
 800698a:	4683      	mov	fp, r0
 800698c:	2800      	cmp	r0, #0
 800698e:	f43f ae72 	beq.w	8006676 <_strtod_l+0x47e>
 8006992:	2400      	movs	r4, #0
 8006994:	68c3      	ldr	r3, [r0, #12]
 8006996:	9904      	ldr	r1, [sp, #16]
 8006998:	60c4      	str	r4, [r0, #12]
 800699a:	930b      	str	r3, [sp, #44]	; 0x2c
 800699c:	f001 f996 	bl	8007ccc <__mcmp>
 80069a0:	42a0      	cmp	r0, r4
 80069a2:	da6b      	bge.n	8006a7c <_strtod_l+0x884>
 80069a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a6:	ea53 0308 	orrs.w	r3, r3, r8
 80069aa:	f040 8091 	bne.w	8006ad0 <_strtod_l+0x8d8>
 80069ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 808c 	bne.w	8006ad0 <_strtod_l+0x8d8>
 80069b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069bc:	0d1b      	lsrs	r3, r3, #20
 80069be:	051b      	lsls	r3, r3, #20
 80069c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80069c4:	f240 8084 	bls.w	8006ad0 <_strtod_l+0x8d8>
 80069c8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80069cc:	b91b      	cbnz	r3, 80069d6 <_strtod_l+0x7de>
 80069ce:	f8db 3010 	ldr.w	r3, [fp, #16]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	dd7c      	ble.n	8006ad0 <_strtod_l+0x8d8>
 80069d6:	4659      	mov	r1, fp
 80069d8:	2201      	movs	r2, #1
 80069da:	4650      	mov	r0, sl
 80069dc:	f001 f906 	bl	8007bec <__lshift>
 80069e0:	9904      	ldr	r1, [sp, #16]
 80069e2:	4683      	mov	fp, r0
 80069e4:	f001 f972 	bl	8007ccc <__mcmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	dd71      	ble.n	8006ad0 <_strtod_l+0x8d8>
 80069ec:	9905      	ldr	r1, [sp, #20]
 80069ee:	464b      	mov	r3, r9
 80069f0:	4a20      	ldr	r2, [pc, #128]	; (8006a74 <_strtod_l+0x87c>)
 80069f2:	2900      	cmp	r1, #0
 80069f4:	f000 808c 	beq.w	8006b10 <_strtod_l+0x918>
 80069f8:	ea02 0109 	and.w	r1, r2, r9
 80069fc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a00:	f300 8086 	bgt.w	8006b10 <_strtod_l+0x918>
 8006a04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a08:	f77f aeaa 	ble.w	8006760 <_strtod_l+0x568>
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <_strtod_l+0x880>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	f7f9 fd6a 	bl	80004ec <__aeabi_dmul>
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4303      	orrs	r3, r0
 8006a1c:	bf08      	it	eq
 8006a1e:	2322      	moveq	r3, #34	; 0x22
 8006a20:	4680      	mov	r8, r0
 8006a22:	4689      	mov	r9, r1
 8006a24:	bf08      	it	eq
 8006a26:	f8ca 3000 	streq.w	r3, [sl]
 8006a2a:	e62f      	b.n	800668c <_strtod_l+0x494>
 8006a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	ea03 0808 	and.w	r8, r3, r8
 8006a38:	e6e0      	b.n	80067fc <_strtod_l+0x604>
 8006a3a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006a3e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006a42:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006a46:	35e2      	adds	r5, #226	; 0xe2
 8006a48:	fa07 f505 	lsl.w	r5, r7, r5
 8006a4c:	970f      	str	r7, [sp, #60]	; 0x3c
 8006a4e:	e747      	b.n	80068e0 <_strtod_l+0x6e8>
 8006a50:	2301      	movs	r3, #1
 8006a52:	2500      	movs	r5, #0
 8006a54:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a56:	e743      	b.n	80068e0 <_strtod_l+0x6e8>
 8006a58:	463a      	mov	r2, r7
 8006a5a:	4650      	mov	r0, sl
 8006a5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a5e:	f001 f8c5 	bl	8007bec <__lshift>
 8006a62:	901a      	str	r0, [sp, #104]	; 0x68
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f47f af69 	bne.w	800693c <_strtod_l+0x744>
 8006a6a:	e604      	b.n	8006676 <_strtod_l+0x47e>
 8006a6c:	080096f0 	.word	0x080096f0
 8006a70:	fffffc02 	.word	0xfffffc02
 8006a74:	7ff00000 	.word	0x7ff00000
 8006a78:	39500000 	.word	0x39500000
 8006a7c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a80:	d165      	bne.n	8006b4e <_strtod_l+0x956>
 8006a82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a88:	b35a      	cbz	r2, 8006ae2 <_strtod_l+0x8ea>
 8006a8a:	4a99      	ldr	r2, [pc, #612]	; (8006cf0 <_strtod_l+0xaf8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d12b      	bne.n	8006ae8 <_strtod_l+0x8f0>
 8006a90:	9b05      	ldr	r3, [sp, #20]
 8006a92:	4641      	mov	r1, r8
 8006a94:	b303      	cbz	r3, 8006ad8 <_strtod_l+0x8e0>
 8006a96:	464a      	mov	r2, r9
 8006a98:	4b96      	ldr	r3, [pc, #600]	; (8006cf4 <_strtod_l+0xafc>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa4:	d81b      	bhi.n	8006ade <_strtod_l+0x8e6>
 8006aa6:	0d1b      	lsrs	r3, r3, #20
 8006aa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	4299      	cmp	r1, r3
 8006ab2:	d119      	bne.n	8006ae8 <_strtod_l+0x8f0>
 8006ab4:	4b90      	ldr	r3, [pc, #576]	; (8006cf8 <_strtod_l+0xb00>)
 8006ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d102      	bne.n	8006ac2 <_strtod_l+0x8ca>
 8006abc:	3101      	adds	r1, #1
 8006abe:	f43f adda 	beq.w	8006676 <_strtod_l+0x47e>
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	4b8b      	ldr	r3, [pc, #556]	; (8006cf4 <_strtod_l+0xafc>)
 8006ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aca:	401a      	ands	r2, r3
 8006acc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006ad0:	9b05      	ldr	r3, [sp, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d19a      	bne.n	8006a0c <_strtod_l+0x814>
 8006ad6:	e5d9      	b.n	800668c <_strtod_l+0x494>
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	e7e8      	b.n	8006ab0 <_strtod_l+0x8b8>
 8006ade:	4613      	mov	r3, r2
 8006ae0:	e7e6      	b.n	8006ab0 <_strtod_l+0x8b8>
 8006ae2:	ea53 0308 	orrs.w	r3, r3, r8
 8006ae6:	d081      	beq.n	80069ec <_strtod_l+0x7f4>
 8006ae8:	b1e5      	cbz	r5, 8006b24 <_strtod_l+0x92c>
 8006aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aec:	421d      	tst	r5, r3
 8006aee:	d0ef      	beq.n	8006ad0 <_strtod_l+0x8d8>
 8006af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af2:	4640      	mov	r0, r8
 8006af4:	4649      	mov	r1, r9
 8006af6:	9a05      	ldr	r2, [sp, #20]
 8006af8:	b1c3      	cbz	r3, 8006b2c <_strtod_l+0x934>
 8006afa:	f7ff fb59 	bl	80061b0 <sulp>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b06:	f7f9 fb3b 	bl	8000180 <__adddf3>
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	e7df      	b.n	8006ad0 <_strtod_l+0x8d8>
 8006b10:	4013      	ands	r3, r2
 8006b12:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b16:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006b1a:	f04f 38ff 	mov.w	r8, #4294967295
 8006b1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006b22:	e7d5      	b.n	8006ad0 <_strtod_l+0x8d8>
 8006b24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b26:	ea13 0f08 	tst.w	r3, r8
 8006b2a:	e7e0      	b.n	8006aee <_strtod_l+0x8f6>
 8006b2c:	f7ff fb40 	bl	80061b0 <sulp>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b38:	f7f9 fb20 	bl	800017c <__aeabi_dsub>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4680      	mov	r8, r0
 8006b42:	4689      	mov	r9, r1
 8006b44:	f7f9 ff3a 	bl	80009bc <__aeabi_dcmpeq>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d0c1      	beq.n	8006ad0 <_strtod_l+0x8d8>
 8006b4c:	e608      	b.n	8006760 <_strtod_l+0x568>
 8006b4e:	4658      	mov	r0, fp
 8006b50:	9904      	ldr	r1, [sp, #16]
 8006b52:	f001 fa39 	bl	8007fc8 <__ratio>
 8006b56:	2200      	movs	r2, #0
 8006b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	f7f9 ff40 	bl	80009e4 <__aeabi_dcmple>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d070      	beq.n	8006c4a <_strtod_l+0xa52>
 8006b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d042      	beq.n	8006bf4 <_strtod_l+0x9fc>
 8006b6e:	2600      	movs	r6, #0
 8006b70:	4f62      	ldr	r7, [pc, #392]	; (8006cfc <_strtod_l+0xb04>)
 8006b72:	4d62      	ldr	r5, [pc, #392]	; (8006cfc <_strtod_l+0xb04>)
 8006b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b7a:	0d1b      	lsrs	r3, r3, #20
 8006b7c:	051b      	lsls	r3, r3, #20
 8006b7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b82:	4b5f      	ldr	r3, [pc, #380]	; (8006d00 <_strtod_l+0xb08>)
 8006b84:	429a      	cmp	r2, r3
 8006b86:	f040 80c3 	bne.w	8006d10 <_strtod_l+0xb18>
 8006b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006b92:	4649      	mov	r1, r9
 8006b94:	f001 f942 	bl	8007e1c <__ulp>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	f7f9 fca4 	bl	80004ec <__aeabi_dmul>
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	f7f9 faea 	bl	8000180 <__adddf3>
 8006bac:	460b      	mov	r3, r1
 8006bae:	4951      	ldr	r1, [pc, #324]	; (8006cf4 <_strtod_l+0xafc>)
 8006bb0:	4a54      	ldr	r2, [pc, #336]	; (8006d04 <_strtod_l+0xb0c>)
 8006bb2:	4019      	ands	r1, r3
 8006bb4:	4291      	cmp	r1, r2
 8006bb6:	4680      	mov	r8, r0
 8006bb8:	d95d      	bls.n	8006c76 <_strtod_l+0xa7e>
 8006bba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bbc:	4b4e      	ldr	r3, [pc, #312]	; (8006cf8 <_strtod_l+0xb00>)
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d103      	bne.n	8006bca <_strtod_l+0x9d2>
 8006bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	f43f ad56 	beq.w	8006676 <_strtod_l+0x47e>
 8006bca:	f04f 38ff 	mov.w	r8, #4294967295
 8006bce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006cf8 <_strtod_l+0xb00>
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006bd6:	f000 fdf1 	bl	80077bc <_Bfree>
 8006bda:	4650      	mov	r0, sl
 8006bdc:	9906      	ldr	r1, [sp, #24]
 8006bde:	f000 fded 	bl	80077bc <_Bfree>
 8006be2:	4650      	mov	r0, sl
 8006be4:	9904      	ldr	r1, [sp, #16]
 8006be6:	f000 fde9 	bl	80077bc <_Bfree>
 8006bea:	4659      	mov	r1, fp
 8006bec:	4650      	mov	r0, sl
 8006bee:	f000 fde5 	bl	80077bc <_Bfree>
 8006bf2:	e627      	b.n	8006844 <_strtod_l+0x64c>
 8006bf4:	f1b8 0f00 	cmp.w	r8, #0
 8006bf8:	d119      	bne.n	8006c2e <_strtod_l+0xa36>
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c00:	b9e3      	cbnz	r3, 8006c3c <_strtod_l+0xa44>
 8006c02:	2200      	movs	r2, #0
 8006c04:	4630      	mov	r0, r6
 8006c06:	4639      	mov	r1, r7
 8006c08:	4b3c      	ldr	r3, [pc, #240]	; (8006cfc <_strtod_l+0xb04>)
 8006c0a:	f7f9 fee1 	bl	80009d0 <__aeabi_dcmplt>
 8006c0e:	b9c8      	cbnz	r0, 8006c44 <_strtod_l+0xa4c>
 8006c10:	2200      	movs	r2, #0
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	4b3c      	ldr	r3, [pc, #240]	; (8006d08 <_strtod_l+0xb10>)
 8006c18:	f7f9 fc68 	bl	80004ec <__aeabi_dmul>
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	460d      	mov	r5, r1
 8006c20:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006c24:	9416      	str	r4, [sp, #88]	; 0x58
 8006c26:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c28:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006c2c:	e7a2      	b.n	8006b74 <_strtod_l+0x97c>
 8006c2e:	f1b8 0f01 	cmp.w	r8, #1
 8006c32:	d103      	bne.n	8006c3c <_strtod_l+0xa44>
 8006c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f43f ad92 	beq.w	8006760 <_strtod_l+0x568>
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	2400      	movs	r4, #0
 8006c40:	4f32      	ldr	r7, [pc, #200]	; (8006d0c <_strtod_l+0xb14>)
 8006c42:	e796      	b.n	8006b72 <_strtod_l+0x97a>
 8006c44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006c46:	4d30      	ldr	r5, [pc, #192]	; (8006d08 <_strtod_l+0xb10>)
 8006c48:	e7ea      	b.n	8006c20 <_strtod_l+0xa28>
 8006c4a:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <_strtod_l+0xb10>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4630      	mov	r0, r6
 8006c50:	4639      	mov	r1, r7
 8006c52:	f7f9 fc4b 	bl	80004ec <__aeabi_dmul>
 8006c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c58:	4604      	mov	r4, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	b933      	cbnz	r3, 8006c6c <_strtod_l+0xa74>
 8006c5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c62:	9010      	str	r0, [sp, #64]	; 0x40
 8006c64:	9311      	str	r3, [sp, #68]	; 0x44
 8006c66:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006c6a:	e783      	b.n	8006b74 <_strtod_l+0x97c>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006c74:	e7f7      	b.n	8006c66 <_strtod_l+0xa6e>
 8006c76:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006c7a:	9b05      	ldr	r3, [sp, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1a8      	bne.n	8006bd2 <_strtod_l+0x9da>
 8006c80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c86:	0d1b      	lsrs	r3, r3, #20
 8006c88:	051b      	lsls	r3, r3, #20
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d1a1      	bne.n	8006bd2 <_strtod_l+0x9da>
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 ffd7 	bl	8000c44 <__aeabi_d2lz>
 8006c96:	f7f9 fbfb 	bl	8000490 <__aeabi_l2d>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 fa6b 	bl	800017c <__aeabi_dsub>
 8006ca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cac:	ea43 0308 	orr.w	r3, r3, r8
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	460d      	mov	r5, r1
 8006cb6:	d066      	beq.n	8006d86 <_strtod_l+0xb8e>
 8006cb8:	a309      	add	r3, pc, #36	; (adr r3, 8006ce0 <_strtod_l+0xae8>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f7f9 fe87 	bl	80009d0 <__aeabi_dcmplt>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	f47f ace2 	bne.w	800668c <_strtod_l+0x494>
 8006cc8:	a307      	add	r3, pc, #28	; (adr r3, 8006ce8 <_strtod_l+0xaf0>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 fe9b 	bl	8000a0c <__aeabi_dcmpgt>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f af7b 	beq.w	8006bd2 <_strtod_l+0x9da>
 8006cdc:	e4d6      	b.n	800668c <_strtod_l+0x494>
 8006cde:	bf00      	nop
 8006ce0:	94a03595 	.word	0x94a03595
 8006ce4:	3fdfffff 	.word	0x3fdfffff
 8006ce8:	35afe535 	.word	0x35afe535
 8006cec:	3fe00000 	.word	0x3fe00000
 8006cf0:	000fffff 	.word	0x000fffff
 8006cf4:	7ff00000 	.word	0x7ff00000
 8006cf8:	7fefffff 	.word	0x7fefffff
 8006cfc:	3ff00000 	.word	0x3ff00000
 8006d00:	7fe00000 	.word	0x7fe00000
 8006d04:	7c9fffff 	.word	0x7c9fffff
 8006d08:	3fe00000 	.word	0x3fe00000
 8006d0c:	bff00000 	.word	0xbff00000
 8006d10:	9b05      	ldr	r3, [sp, #20]
 8006d12:	b313      	cbz	r3, 8006d5a <_strtod_l+0xb62>
 8006d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d1a:	d81e      	bhi.n	8006d5a <_strtod_l+0xb62>
 8006d1c:	a326      	add	r3, pc, #152	; (adr r3, 8006db8 <_strtod_l+0xbc0>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7f9 fe5d 	bl	80009e4 <__aeabi_dcmple>
 8006d2a:	b190      	cbz	r0, 8006d52 <_strtod_l+0xb5a>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7f9 fe8c 	bl	8000a4c <__aeabi_d2uiz>
 8006d34:	2801      	cmp	r0, #1
 8006d36:	bf38      	it	cc
 8006d38:	2001      	movcc	r0, #1
 8006d3a:	f7f9 fb5d 	bl	80003f8 <__aeabi_ui2d>
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d40:	4604      	mov	r4, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	b9d3      	cbnz	r3, 8006d7c <_strtod_l+0xb84>
 8006d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d4a:	9012      	str	r0, [sp, #72]	; 0x48
 8006d4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d4e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006d52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d54:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006d58:	1a9f      	subs	r7, r3, r2
 8006d5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d5e:	f001 f85d 	bl	8007e1c <__ulp>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4630      	mov	r0, r6
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7f9 fbbf 	bl	80004ec <__aeabi_dmul>
 8006d6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d72:	f7f9 fa05 	bl	8000180 <__adddf3>
 8006d76:	4680      	mov	r8, r0
 8006d78:	4689      	mov	r9, r1
 8006d7a:	e77e      	b.n	8006c7a <_strtod_l+0xa82>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006d84:	e7e3      	b.n	8006d4e <_strtod_l+0xb56>
 8006d86:	a30e      	add	r3, pc, #56	; (adr r3, 8006dc0 <_strtod_l+0xbc8>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fe20 	bl	80009d0 <__aeabi_dcmplt>
 8006d90:	e7a1      	b.n	8006cd6 <_strtod_l+0xade>
 8006d92:	2300      	movs	r3, #0
 8006d94:	930a      	str	r3, [sp, #40]	; 0x28
 8006d96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	f7ff ba71 	b.w	8006282 <_strtod_l+0x8a>
 8006da0:	2a65      	cmp	r2, #101	; 0x65
 8006da2:	f43f ab63 	beq.w	800646c <_strtod_l+0x274>
 8006da6:	2a45      	cmp	r2, #69	; 0x45
 8006da8:	f43f ab60 	beq.w	800646c <_strtod_l+0x274>
 8006dac:	2301      	movs	r3, #1
 8006dae:	f7ff bb95 	b.w	80064dc <_strtod_l+0x2e4>
 8006db2:	bf00      	nop
 8006db4:	f3af 8000 	nop.w
 8006db8:	ffc00000 	.word	0xffc00000
 8006dbc:	41dfffff 	.word	0x41dfffff
 8006dc0:	94a03595 	.word	0x94a03595
 8006dc4:	3fcfffff 	.word	0x3fcfffff

08006dc8 <strtof>:
 8006dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dcc:	4f22      	ldr	r7, [pc, #136]	; (8006e58 <strtof+0x90>)
 8006dce:	460a      	mov	r2, r1
 8006dd0:	4b22      	ldr	r3, [pc, #136]	; (8006e5c <strtof+0x94>)
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	6838      	ldr	r0, [r7, #0]
 8006dd6:	f7ff fa0f 	bl	80061f8 <_strtod_l>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4606      	mov	r6, r0
 8006de0:	460c      	mov	r4, r1
 8006de2:	f7f9 fe1d 	bl	8000a20 <__aeabi_dcmpun>
 8006de6:	b168      	cbz	r0, 8006e04 <strtof+0x3c>
 8006de8:	2c00      	cmp	r4, #0
 8006dea:	481d      	ldr	r0, [pc, #116]	; (8006e60 <strtof+0x98>)
 8006dec:	da06      	bge.n	8006dfc <strtof+0x34>
 8006dee:	f001 fd0d 	bl	800880c <nanf>
 8006df2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8006df6:	4628      	mov	r0, r5
 8006df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e00:	f001 bd04 	b.w	800880c <nanf>
 8006e04:	4621      	mov	r1, r4
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7f9 fe40 	bl	8000a8c <__aeabi_d2f>
 8006e0c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8006e10:	4605      	mov	r5, r0
 8006e12:	4914      	ldr	r1, [pc, #80]	; (8006e64 <strtof+0x9c>)
 8006e14:	4640      	mov	r0, r8
 8006e16:	f7f9 feff 	bl	8000c18 <__aeabi_fcmpun>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d1eb      	bne.n	8006df6 <strtof+0x2e>
 8006e1e:	4640      	mov	r0, r8
 8006e20:	4910      	ldr	r1, [pc, #64]	; (8006e64 <strtof+0x9c>)
 8006e22:	f7f9 fedb 	bl	8000bdc <__aeabi_fcmple>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d1e5      	bne.n	8006df6 <strtof+0x2e>
 8006e2a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e32:	4630      	mov	r0, r6
 8006e34:	4621      	mov	r1, r4
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <strtof+0xa0>)
 8006e38:	f7f9 fdf2 	bl	8000a20 <__aeabi_dcmpun>
 8006e3c:	b940      	cbnz	r0, 8006e50 <strtof+0x88>
 8006e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e42:	4630      	mov	r0, r6
 8006e44:	4621      	mov	r1, r4
 8006e46:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <strtof+0xa0>)
 8006e48:	f7f9 fdcc 	bl	80009e4 <__aeabi_dcmple>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d0d2      	beq.n	8006df6 <strtof+0x2e>
 8006e50:	2222      	movs	r2, #34	; 0x22
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e7ce      	b.n	8006df6 <strtof+0x2e>
 8006e58:	200001d0 	.word	0x200001d0
 8006e5c:	20000238 	.word	0x20000238
 8006e60:	0800951c 	.word	0x0800951c
 8006e64:	7f7fffff 	.word	0x7f7fffff
 8006e68:	7fefffff 	.word	0x7fefffff

08006e6c <__strtok_r>:
 8006e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e6e:	b908      	cbnz	r0, 8006e74 <__strtok_r+0x8>
 8006e70:	6810      	ldr	r0, [r2, #0]
 8006e72:	b188      	cbz	r0, 8006e98 <__strtok_r+0x2c>
 8006e74:	4604      	mov	r4, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e7e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e82:	b91e      	cbnz	r6, 8006e8c <__strtok_r+0x20>
 8006e84:	b965      	cbnz	r5, 8006ea0 <__strtok_r+0x34>
 8006e86:	4628      	mov	r0, r5
 8006e88:	6015      	str	r5, [r2, #0]
 8006e8a:	e005      	b.n	8006e98 <__strtok_r+0x2c>
 8006e8c:	42b5      	cmp	r5, r6
 8006e8e:	d1f6      	bne.n	8006e7e <__strtok_r+0x12>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f0      	bne.n	8006e76 <__strtok_r+0xa>
 8006e94:	6014      	str	r4, [r2, #0]
 8006e96:	7003      	strb	r3, [r0, #0]
 8006e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e9a:	461c      	mov	r4, r3
 8006e9c:	e00c      	b.n	8006eb8 <__strtok_r+0x4c>
 8006e9e:	b915      	cbnz	r5, 8006ea6 <__strtok_r+0x3a>
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ea6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006eaa:	42ab      	cmp	r3, r5
 8006eac:	d1f7      	bne.n	8006e9e <__strtok_r+0x32>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f3      	beq.n	8006e9a <__strtok_r+0x2e>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006eb8:	6014      	str	r4, [r2, #0]
 8006eba:	e7ed      	b.n	8006e98 <__strtok_r+0x2c>

08006ebc <strtok_r>:
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f7ff bfd5 	b.w	8006e6c <__strtok_r>
	...

08006ec4 <_strtoul_l.constprop.0>:
 8006ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	4686      	mov	lr, r0
 8006eca:	460d      	mov	r5, r1
 8006ecc:	4f35      	ldr	r7, [pc, #212]	; (8006fa4 <_strtoul_l.constprop.0+0xe0>)
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ed4:	5de6      	ldrb	r6, [r4, r7]
 8006ed6:	f016 0608 	ands.w	r6, r6, #8
 8006eda:	d1f8      	bne.n	8006ece <_strtoul_l.constprop.0+0xa>
 8006edc:	2c2d      	cmp	r4, #45	; 0x2d
 8006ede:	d12f      	bne.n	8006f40 <_strtoul_l.constprop.0+0x7c>
 8006ee0:	2601      	movs	r6, #1
 8006ee2:	782c      	ldrb	r4, [r5, #0]
 8006ee4:	1c85      	adds	r5, r0, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d057      	beq.n	8006f9a <_strtoul_l.constprop.0+0xd6>
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d109      	bne.n	8006f02 <_strtoul_l.constprop.0+0x3e>
 8006eee:	2c30      	cmp	r4, #48	; 0x30
 8006ef0:	d107      	bne.n	8006f02 <_strtoul_l.constprop.0+0x3e>
 8006ef2:	7828      	ldrb	r0, [r5, #0]
 8006ef4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006ef8:	2858      	cmp	r0, #88	; 0x58
 8006efa:	d149      	bne.n	8006f90 <_strtoul_l.constprop.0+0xcc>
 8006efc:	2310      	movs	r3, #16
 8006efe:	786c      	ldrb	r4, [r5, #1]
 8006f00:	3502      	adds	r5, #2
 8006f02:	f04f 38ff 	mov.w	r8, #4294967295
 8006f06:	fbb8 f8f3 	udiv	r8, r8, r3
 8006f0a:	2700      	movs	r7, #0
 8006f0c:	fb03 f908 	mul.w	r9, r3, r8
 8006f10:	4638      	mov	r0, r7
 8006f12:	ea6f 0909 	mvn.w	r9, r9
 8006f16:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006f1a:	f1bc 0f09 	cmp.w	ip, #9
 8006f1e:	d814      	bhi.n	8006f4a <_strtoul_l.constprop.0+0x86>
 8006f20:	4664      	mov	r4, ip
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	dd22      	ble.n	8006f6c <_strtoul_l.constprop.0+0xa8>
 8006f26:	2f00      	cmp	r7, #0
 8006f28:	db1d      	blt.n	8006f66 <_strtoul_l.constprop.0+0xa2>
 8006f2a:	4580      	cmp	r8, r0
 8006f2c:	d31b      	bcc.n	8006f66 <_strtoul_l.constprop.0+0xa2>
 8006f2e:	d101      	bne.n	8006f34 <_strtoul_l.constprop.0+0x70>
 8006f30:	45a1      	cmp	r9, r4
 8006f32:	db18      	blt.n	8006f66 <_strtoul_l.constprop.0+0xa2>
 8006f34:	2701      	movs	r7, #1
 8006f36:	fb00 4003 	mla	r0, r0, r3, r4
 8006f3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f3e:	e7ea      	b.n	8006f16 <_strtoul_l.constprop.0+0x52>
 8006f40:	2c2b      	cmp	r4, #43	; 0x2b
 8006f42:	bf04      	itt	eq
 8006f44:	782c      	ldrbeq	r4, [r5, #0]
 8006f46:	1c85      	addeq	r5, r0, #2
 8006f48:	e7cd      	b.n	8006ee6 <_strtoul_l.constprop.0+0x22>
 8006f4a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006f4e:	f1bc 0f19 	cmp.w	ip, #25
 8006f52:	d801      	bhi.n	8006f58 <_strtoul_l.constprop.0+0x94>
 8006f54:	3c37      	subs	r4, #55	; 0x37
 8006f56:	e7e4      	b.n	8006f22 <_strtoul_l.constprop.0+0x5e>
 8006f58:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006f5c:	f1bc 0f19 	cmp.w	ip, #25
 8006f60:	d804      	bhi.n	8006f6c <_strtoul_l.constprop.0+0xa8>
 8006f62:	3c57      	subs	r4, #87	; 0x57
 8006f64:	e7dd      	b.n	8006f22 <_strtoul_l.constprop.0+0x5e>
 8006f66:	f04f 37ff 	mov.w	r7, #4294967295
 8006f6a:	e7e6      	b.n	8006f3a <_strtoul_l.constprop.0+0x76>
 8006f6c:	2f00      	cmp	r7, #0
 8006f6e:	da07      	bge.n	8006f80 <_strtoul_l.constprop.0+0xbc>
 8006f70:	2322      	movs	r3, #34	; 0x22
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
 8006f76:	f8ce 3000 	str.w	r3, [lr]
 8006f7a:	b932      	cbnz	r2, 8006f8a <_strtoul_l.constprop.0+0xc6>
 8006f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f80:	b106      	cbz	r6, 8006f84 <_strtoul_l.constprop.0+0xc0>
 8006f82:	4240      	negs	r0, r0
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	d0f9      	beq.n	8006f7c <_strtoul_l.constprop.0+0xb8>
 8006f88:	b107      	cbz	r7, 8006f8c <_strtoul_l.constprop.0+0xc8>
 8006f8a:	1e69      	subs	r1, r5, #1
 8006f8c:	6011      	str	r1, [r2, #0]
 8006f8e:	e7f5      	b.n	8006f7c <_strtoul_l.constprop.0+0xb8>
 8006f90:	2430      	movs	r4, #48	; 0x30
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1b5      	bne.n	8006f02 <_strtoul_l.constprop.0+0x3e>
 8006f96:	2308      	movs	r3, #8
 8006f98:	e7b3      	b.n	8006f02 <_strtoul_l.constprop.0+0x3e>
 8006f9a:	2c30      	cmp	r4, #48	; 0x30
 8006f9c:	d0a9      	beq.n	8006ef2 <_strtoul_l.constprop.0+0x2e>
 8006f9e:	230a      	movs	r3, #10
 8006fa0:	e7af      	b.n	8006f02 <_strtoul_l.constprop.0+0x3e>
 8006fa2:	bf00      	nop
 8006fa4:	08009719 	.word	0x08009719

08006fa8 <strtoul>:
 8006fa8:	4613      	mov	r3, r2
 8006faa:	460a      	mov	r2, r1
 8006fac:	4601      	mov	r1, r0
 8006fae:	4802      	ldr	r0, [pc, #8]	; (8006fb8 <strtoul+0x10>)
 8006fb0:	6800      	ldr	r0, [r0, #0]
 8006fb2:	f7ff bf87 	b.w	8006ec4 <_strtoul_l.constprop.0>
 8006fb6:	bf00      	nop
 8006fb8:	200001d0 	.word	0x200001d0

08006fbc <_vsniprintf_r>:
 8006fbc:	b530      	push	{r4, r5, lr}
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	b09b      	sub	sp, #108	; 0x6c
 8006fc8:	da05      	bge.n	8006fd6 <_vsniprintf_r+0x1a>
 8006fca:	238b      	movs	r3, #139	; 0x8b
 8006fcc:	6003      	str	r3, [r0, #0]
 8006fce:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd2:	b01b      	add	sp, #108	; 0x6c
 8006fd4:	bd30      	pop	{r4, r5, pc}
 8006fd6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006fda:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006fde:	bf0c      	ite	eq
 8006fe0:	4623      	moveq	r3, r4
 8006fe2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006fe6:	9302      	str	r3, [sp, #8]
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fee:	9100      	str	r1, [sp, #0]
 8006ff0:	9104      	str	r1, [sp, #16]
 8006ff2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006ff6:	4669      	mov	r1, sp
 8006ff8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ffa:	f001 f95b 	bl	80082b4 <_svfiprintf_r>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	bfbc      	itt	lt
 8007002:	238b      	movlt	r3, #139	; 0x8b
 8007004:	602b      	strlt	r3, [r5, #0]
 8007006:	2c00      	cmp	r4, #0
 8007008:	d0e3      	beq.n	8006fd2 <_vsniprintf_r+0x16>
 800700a:	2200      	movs	r2, #0
 800700c:	9b00      	ldr	r3, [sp, #0]
 800700e:	701a      	strb	r2, [r3, #0]
 8007010:	e7df      	b.n	8006fd2 <_vsniprintf_r+0x16>
	...

08007014 <vsniprintf>:
 8007014:	b507      	push	{r0, r1, r2, lr}
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4613      	mov	r3, r2
 800701a:	460a      	mov	r2, r1
 800701c:	4601      	mov	r1, r0
 800701e:	4803      	ldr	r0, [pc, #12]	; (800702c <vsniprintf+0x18>)
 8007020:	6800      	ldr	r0, [r0, #0]
 8007022:	f7ff ffcb 	bl	8006fbc <_vsniprintf_r>
 8007026:	b003      	add	sp, #12
 8007028:	f85d fb04 	ldr.w	pc, [sp], #4
 800702c:	200001d0 	.word	0x200001d0

08007030 <rshift>:
 8007030:	6903      	ldr	r3, [r0, #16]
 8007032:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007036:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800703a:	f100 0414 	add.w	r4, r0, #20
 800703e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007042:	dd46      	ble.n	80070d2 <rshift+0xa2>
 8007044:	f011 011f 	ands.w	r1, r1, #31
 8007048:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800704c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007050:	d10c      	bne.n	800706c <rshift+0x3c>
 8007052:	4629      	mov	r1, r5
 8007054:	f100 0710 	add.w	r7, r0, #16
 8007058:	42b1      	cmp	r1, r6
 800705a:	d335      	bcc.n	80070c8 <rshift+0x98>
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	1eea      	subs	r2, r5, #3
 8007062:	4296      	cmp	r6, r2
 8007064:	bf38      	it	cc
 8007066:	2300      	movcc	r3, #0
 8007068:	4423      	add	r3, r4
 800706a:	e015      	b.n	8007098 <rshift+0x68>
 800706c:	46a1      	mov	r9, r4
 800706e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007072:	f1c1 0820 	rsb	r8, r1, #32
 8007076:	40cf      	lsrs	r7, r1
 8007078:	f105 0e04 	add.w	lr, r5, #4
 800707c:	4576      	cmp	r6, lr
 800707e:	46f4      	mov	ip, lr
 8007080:	d816      	bhi.n	80070b0 <rshift+0x80>
 8007082:	1a9a      	subs	r2, r3, r2
 8007084:	0092      	lsls	r2, r2, #2
 8007086:	3a04      	subs	r2, #4
 8007088:	3501      	adds	r5, #1
 800708a:	42ae      	cmp	r6, r5
 800708c:	bf38      	it	cc
 800708e:	2200      	movcc	r2, #0
 8007090:	18a3      	adds	r3, r4, r2
 8007092:	50a7      	str	r7, [r4, r2]
 8007094:	b107      	cbz	r7, 8007098 <rshift+0x68>
 8007096:	3304      	adds	r3, #4
 8007098:	42a3      	cmp	r3, r4
 800709a:	eba3 0204 	sub.w	r2, r3, r4
 800709e:	bf08      	it	eq
 80070a0:	2300      	moveq	r3, #0
 80070a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80070a6:	6102      	str	r2, [r0, #16]
 80070a8:	bf08      	it	eq
 80070aa:	6143      	streq	r3, [r0, #20]
 80070ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070b0:	f8dc c000 	ldr.w	ip, [ip]
 80070b4:	fa0c fc08 	lsl.w	ip, ip, r8
 80070b8:	ea4c 0707 	orr.w	r7, ip, r7
 80070bc:	f849 7b04 	str.w	r7, [r9], #4
 80070c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070c4:	40cf      	lsrs	r7, r1
 80070c6:	e7d9      	b.n	800707c <rshift+0x4c>
 80070c8:	f851 cb04 	ldr.w	ip, [r1], #4
 80070cc:	f847 cf04 	str.w	ip, [r7, #4]!
 80070d0:	e7c2      	b.n	8007058 <rshift+0x28>
 80070d2:	4623      	mov	r3, r4
 80070d4:	e7e0      	b.n	8007098 <rshift+0x68>

080070d6 <__hexdig_fun>:
 80070d6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80070da:	2b09      	cmp	r3, #9
 80070dc:	d802      	bhi.n	80070e4 <__hexdig_fun+0xe>
 80070de:	3820      	subs	r0, #32
 80070e0:	b2c0      	uxtb	r0, r0
 80070e2:	4770      	bx	lr
 80070e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80070e8:	2b05      	cmp	r3, #5
 80070ea:	d801      	bhi.n	80070f0 <__hexdig_fun+0x1a>
 80070ec:	3847      	subs	r0, #71	; 0x47
 80070ee:	e7f7      	b.n	80070e0 <__hexdig_fun+0xa>
 80070f0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80070f4:	2b05      	cmp	r3, #5
 80070f6:	d801      	bhi.n	80070fc <__hexdig_fun+0x26>
 80070f8:	3827      	subs	r0, #39	; 0x27
 80070fa:	e7f1      	b.n	80070e0 <__hexdig_fun+0xa>
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr

08007100 <__gethex>:
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	b08b      	sub	sp, #44	; 0x2c
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	4bb2      	ldr	r3, [pc, #712]	; (80073d4 <__gethex+0x2d4>)
 800710a:	9002      	str	r0, [sp, #8]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	468b      	mov	fp, r1
 8007110:	4618      	mov	r0, r3
 8007112:	4690      	mov	r8, r2
 8007114:	9303      	str	r3, [sp, #12]
 8007116:	f7f9 f825 	bl	8000164 <strlen>
 800711a:	4682      	mov	sl, r0
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	f8db 2000 	ldr.w	r2, [fp]
 8007122:	4403      	add	r3, r0
 8007124:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007128:	9306      	str	r3, [sp, #24]
 800712a:	1c93      	adds	r3, r2, #2
 800712c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007130:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007134:	32fe      	adds	r2, #254	; 0xfe
 8007136:	18d1      	adds	r1, r2, r3
 8007138:	461f      	mov	r7, r3
 800713a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800713e:	9101      	str	r1, [sp, #4]
 8007140:	2830      	cmp	r0, #48	; 0x30
 8007142:	d0f8      	beq.n	8007136 <__gethex+0x36>
 8007144:	f7ff ffc7 	bl	80070d6 <__hexdig_fun>
 8007148:	4604      	mov	r4, r0
 800714a:	2800      	cmp	r0, #0
 800714c:	d13a      	bne.n	80071c4 <__gethex+0xc4>
 800714e:	4652      	mov	r2, sl
 8007150:	4638      	mov	r0, r7
 8007152:	9903      	ldr	r1, [sp, #12]
 8007154:	f001 fb5e 	bl	8008814 <strncmp>
 8007158:	4605      	mov	r5, r0
 800715a:	2800      	cmp	r0, #0
 800715c:	d166      	bne.n	800722c <__gethex+0x12c>
 800715e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007162:	eb07 060a 	add.w	r6, r7, sl
 8007166:	f7ff ffb6 	bl	80070d6 <__hexdig_fun>
 800716a:	2800      	cmp	r0, #0
 800716c:	d060      	beq.n	8007230 <__gethex+0x130>
 800716e:	4633      	mov	r3, r6
 8007170:	7818      	ldrb	r0, [r3, #0]
 8007172:	461f      	mov	r7, r3
 8007174:	2830      	cmp	r0, #48	; 0x30
 8007176:	f103 0301 	add.w	r3, r3, #1
 800717a:	d0f9      	beq.n	8007170 <__gethex+0x70>
 800717c:	f7ff ffab 	bl	80070d6 <__hexdig_fun>
 8007180:	2301      	movs	r3, #1
 8007182:	fab0 f480 	clz	r4, r0
 8007186:	4635      	mov	r5, r6
 8007188:	0964      	lsrs	r4, r4, #5
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	463a      	mov	r2, r7
 800718e:	4616      	mov	r6, r2
 8007190:	7830      	ldrb	r0, [r6, #0]
 8007192:	3201      	adds	r2, #1
 8007194:	f7ff ff9f 	bl	80070d6 <__hexdig_fun>
 8007198:	2800      	cmp	r0, #0
 800719a:	d1f8      	bne.n	800718e <__gethex+0x8e>
 800719c:	4652      	mov	r2, sl
 800719e:	4630      	mov	r0, r6
 80071a0:	9903      	ldr	r1, [sp, #12]
 80071a2:	f001 fb37 	bl	8008814 <strncmp>
 80071a6:	b980      	cbnz	r0, 80071ca <__gethex+0xca>
 80071a8:	b94d      	cbnz	r5, 80071be <__gethex+0xbe>
 80071aa:	eb06 050a 	add.w	r5, r6, sl
 80071ae:	462a      	mov	r2, r5
 80071b0:	4616      	mov	r6, r2
 80071b2:	7830      	ldrb	r0, [r6, #0]
 80071b4:	3201      	adds	r2, #1
 80071b6:	f7ff ff8e 	bl	80070d6 <__hexdig_fun>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d1f8      	bne.n	80071b0 <__gethex+0xb0>
 80071be:	1bad      	subs	r5, r5, r6
 80071c0:	00ad      	lsls	r5, r5, #2
 80071c2:	e004      	b.n	80071ce <__gethex+0xce>
 80071c4:	2400      	movs	r4, #0
 80071c6:	4625      	mov	r5, r4
 80071c8:	e7e0      	b.n	800718c <__gethex+0x8c>
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	d1f7      	bne.n	80071be <__gethex+0xbe>
 80071ce:	7833      	ldrb	r3, [r6, #0]
 80071d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071d4:	2b50      	cmp	r3, #80	; 0x50
 80071d6:	d139      	bne.n	800724c <__gethex+0x14c>
 80071d8:	7873      	ldrb	r3, [r6, #1]
 80071da:	2b2b      	cmp	r3, #43	; 0x2b
 80071dc:	d02a      	beq.n	8007234 <__gethex+0x134>
 80071de:	2b2d      	cmp	r3, #45	; 0x2d
 80071e0:	d02c      	beq.n	800723c <__gethex+0x13c>
 80071e2:	f04f 0900 	mov.w	r9, #0
 80071e6:	1c71      	adds	r1, r6, #1
 80071e8:	7808      	ldrb	r0, [r1, #0]
 80071ea:	f7ff ff74 	bl	80070d6 <__hexdig_fun>
 80071ee:	1e43      	subs	r3, r0, #1
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b18      	cmp	r3, #24
 80071f4:	d82a      	bhi.n	800724c <__gethex+0x14c>
 80071f6:	f1a0 0210 	sub.w	r2, r0, #16
 80071fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80071fe:	f7ff ff6a 	bl	80070d6 <__hexdig_fun>
 8007202:	1e43      	subs	r3, r0, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b18      	cmp	r3, #24
 8007208:	d91b      	bls.n	8007242 <__gethex+0x142>
 800720a:	f1b9 0f00 	cmp.w	r9, #0
 800720e:	d000      	beq.n	8007212 <__gethex+0x112>
 8007210:	4252      	negs	r2, r2
 8007212:	4415      	add	r5, r2
 8007214:	f8cb 1000 	str.w	r1, [fp]
 8007218:	b1d4      	cbz	r4, 8007250 <__gethex+0x150>
 800721a:	9b01      	ldr	r3, [sp, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	bf14      	ite	ne
 8007220:	2700      	movne	r7, #0
 8007222:	2706      	moveq	r7, #6
 8007224:	4638      	mov	r0, r7
 8007226:	b00b      	add	sp, #44	; 0x2c
 8007228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722c:	463e      	mov	r6, r7
 800722e:	4625      	mov	r5, r4
 8007230:	2401      	movs	r4, #1
 8007232:	e7cc      	b.n	80071ce <__gethex+0xce>
 8007234:	f04f 0900 	mov.w	r9, #0
 8007238:	1cb1      	adds	r1, r6, #2
 800723a:	e7d5      	b.n	80071e8 <__gethex+0xe8>
 800723c:	f04f 0901 	mov.w	r9, #1
 8007240:	e7fa      	b.n	8007238 <__gethex+0x138>
 8007242:	230a      	movs	r3, #10
 8007244:	fb03 0202 	mla	r2, r3, r2, r0
 8007248:	3a10      	subs	r2, #16
 800724a:	e7d6      	b.n	80071fa <__gethex+0xfa>
 800724c:	4631      	mov	r1, r6
 800724e:	e7e1      	b.n	8007214 <__gethex+0x114>
 8007250:	4621      	mov	r1, r4
 8007252:	1bf3      	subs	r3, r6, r7
 8007254:	3b01      	subs	r3, #1
 8007256:	2b07      	cmp	r3, #7
 8007258:	dc0a      	bgt.n	8007270 <__gethex+0x170>
 800725a:	9802      	ldr	r0, [sp, #8]
 800725c:	f000 fa6e 	bl	800773c <_Balloc>
 8007260:	4604      	mov	r4, r0
 8007262:	b940      	cbnz	r0, 8007276 <__gethex+0x176>
 8007264:	4602      	mov	r2, r0
 8007266:	21de      	movs	r1, #222	; 0xde
 8007268:	4b5b      	ldr	r3, [pc, #364]	; (80073d8 <__gethex+0x2d8>)
 800726a:	485c      	ldr	r0, [pc, #368]	; (80073dc <__gethex+0x2dc>)
 800726c:	f001 faf4 	bl	8008858 <__assert_func>
 8007270:	3101      	adds	r1, #1
 8007272:	105b      	asrs	r3, r3, #1
 8007274:	e7ef      	b.n	8007256 <__gethex+0x156>
 8007276:	f04f 0b00 	mov.w	fp, #0
 800727a:	f100 0914 	add.w	r9, r0, #20
 800727e:	f1ca 0301 	rsb	r3, sl, #1
 8007282:	f8cd 9010 	str.w	r9, [sp, #16]
 8007286:	f8cd b004 	str.w	fp, [sp, #4]
 800728a:	9308      	str	r3, [sp, #32]
 800728c:	42b7      	cmp	r7, r6
 800728e:	d33f      	bcc.n	8007310 <__gethex+0x210>
 8007290:	9f04      	ldr	r7, [sp, #16]
 8007292:	9b01      	ldr	r3, [sp, #4]
 8007294:	f847 3b04 	str.w	r3, [r7], #4
 8007298:	eba7 0709 	sub.w	r7, r7, r9
 800729c:	10bf      	asrs	r7, r7, #2
 800729e:	6127      	str	r7, [r4, #16]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fb3d 	bl	8007920 <__hi0bits>
 80072a6:	017f      	lsls	r7, r7, #5
 80072a8:	f8d8 6000 	ldr.w	r6, [r8]
 80072ac:	1a3f      	subs	r7, r7, r0
 80072ae:	42b7      	cmp	r7, r6
 80072b0:	dd62      	ble.n	8007378 <__gethex+0x278>
 80072b2:	1bbf      	subs	r7, r7, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 fed7 	bl	800806a <__any_on>
 80072bc:	4682      	mov	sl, r0
 80072be:	b1a8      	cbz	r0, 80072ec <__gethex+0x1ec>
 80072c0:	f04f 0a01 	mov.w	sl, #1
 80072c4:	1e7b      	subs	r3, r7, #1
 80072c6:	1159      	asrs	r1, r3, #5
 80072c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80072cc:	f003 021f 	and.w	r2, r3, #31
 80072d0:	fa0a f202 	lsl.w	r2, sl, r2
 80072d4:	420a      	tst	r2, r1
 80072d6:	d009      	beq.n	80072ec <__gethex+0x1ec>
 80072d8:	4553      	cmp	r3, sl
 80072da:	dd05      	ble.n	80072e8 <__gethex+0x1e8>
 80072dc:	4620      	mov	r0, r4
 80072de:	1eb9      	subs	r1, r7, #2
 80072e0:	f000 fec3 	bl	800806a <__any_on>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d144      	bne.n	8007372 <__gethex+0x272>
 80072e8:	f04f 0a02 	mov.w	sl, #2
 80072ec:	4639      	mov	r1, r7
 80072ee:	4620      	mov	r0, r4
 80072f0:	f7ff fe9e 	bl	8007030 <rshift>
 80072f4:	443d      	add	r5, r7
 80072f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072fa:	42ab      	cmp	r3, r5
 80072fc:	da4a      	bge.n	8007394 <__gethex+0x294>
 80072fe:	4621      	mov	r1, r4
 8007300:	9802      	ldr	r0, [sp, #8]
 8007302:	f000 fa5b 	bl	80077bc <_Bfree>
 8007306:	2300      	movs	r3, #0
 8007308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800730a:	27a3      	movs	r7, #163	; 0xa3
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	e789      	b.n	8007224 <__gethex+0x124>
 8007310:	1e73      	subs	r3, r6, #1
 8007312:	9a06      	ldr	r2, [sp, #24]
 8007314:	9307      	str	r3, [sp, #28]
 8007316:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800731a:	4293      	cmp	r3, r2
 800731c:	d019      	beq.n	8007352 <__gethex+0x252>
 800731e:	f1bb 0f20 	cmp.w	fp, #32
 8007322:	d107      	bne.n	8007334 <__gethex+0x234>
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	9a01      	ldr	r2, [sp, #4]
 8007328:	f843 2b04 	str.w	r2, [r3], #4
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	2300      	movs	r3, #0
 8007330:	469b      	mov	fp, r3
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007338:	f7ff fecd 	bl	80070d6 <__hexdig_fun>
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	f000 000f 	and.w	r0, r0, #15
 8007342:	fa00 f00b 	lsl.w	r0, r0, fp
 8007346:	4303      	orrs	r3, r0
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	f10b 0b04 	add.w	fp, fp, #4
 800734e:	9b07      	ldr	r3, [sp, #28]
 8007350:	e00d      	b.n	800736e <__gethex+0x26e>
 8007352:	9a08      	ldr	r2, [sp, #32]
 8007354:	1e73      	subs	r3, r6, #1
 8007356:	4413      	add	r3, r2
 8007358:	42bb      	cmp	r3, r7
 800735a:	d3e0      	bcc.n	800731e <__gethex+0x21e>
 800735c:	4618      	mov	r0, r3
 800735e:	4652      	mov	r2, sl
 8007360:	9903      	ldr	r1, [sp, #12]
 8007362:	9309      	str	r3, [sp, #36]	; 0x24
 8007364:	f001 fa56 	bl	8008814 <strncmp>
 8007368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736a:	2800      	cmp	r0, #0
 800736c:	d1d7      	bne.n	800731e <__gethex+0x21e>
 800736e:	461e      	mov	r6, r3
 8007370:	e78c      	b.n	800728c <__gethex+0x18c>
 8007372:	f04f 0a03 	mov.w	sl, #3
 8007376:	e7b9      	b.n	80072ec <__gethex+0x1ec>
 8007378:	da09      	bge.n	800738e <__gethex+0x28e>
 800737a:	1bf7      	subs	r7, r6, r7
 800737c:	4621      	mov	r1, r4
 800737e:	463a      	mov	r2, r7
 8007380:	9802      	ldr	r0, [sp, #8]
 8007382:	f000 fc33 	bl	8007bec <__lshift>
 8007386:	4604      	mov	r4, r0
 8007388:	1bed      	subs	r5, r5, r7
 800738a:	f100 0914 	add.w	r9, r0, #20
 800738e:	f04f 0a00 	mov.w	sl, #0
 8007392:	e7b0      	b.n	80072f6 <__gethex+0x1f6>
 8007394:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007398:	42a8      	cmp	r0, r5
 800739a:	dd72      	ble.n	8007482 <__gethex+0x382>
 800739c:	1b45      	subs	r5, r0, r5
 800739e:	42ae      	cmp	r6, r5
 80073a0:	dc35      	bgt.n	800740e <__gethex+0x30e>
 80073a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d029      	beq.n	80073fe <__gethex+0x2fe>
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d02b      	beq.n	8007406 <__gethex+0x306>
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d11c      	bne.n	80073ec <__gethex+0x2ec>
 80073b2:	42ae      	cmp	r6, r5
 80073b4:	d11a      	bne.n	80073ec <__gethex+0x2ec>
 80073b6:	2e01      	cmp	r6, #1
 80073b8:	d112      	bne.n	80073e0 <__gethex+0x2e0>
 80073ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073be:	9a05      	ldr	r2, [sp, #20]
 80073c0:	2762      	movs	r7, #98	; 0x62
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	2301      	movs	r3, #1
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	f8c9 3000 	str.w	r3, [r9]
 80073cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073ce:	601c      	str	r4, [r3, #0]
 80073d0:	e728      	b.n	8007224 <__gethex+0x124>
 80073d2:	bf00      	nop
 80073d4:	08009890 	.word	0x08009890
 80073d8:	08009819 	.word	0x08009819
 80073dc:	0800982a 	.word	0x0800982a
 80073e0:	4620      	mov	r0, r4
 80073e2:	1e71      	subs	r1, r6, #1
 80073e4:	f000 fe41 	bl	800806a <__any_on>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d1e6      	bne.n	80073ba <__gethex+0x2ba>
 80073ec:	4621      	mov	r1, r4
 80073ee:	9802      	ldr	r0, [sp, #8]
 80073f0:	f000 f9e4 	bl	80077bc <_Bfree>
 80073f4:	2300      	movs	r3, #0
 80073f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073f8:	2750      	movs	r7, #80	; 0x50
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	e712      	b.n	8007224 <__gethex+0x124>
 80073fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f3      	bne.n	80073ec <__gethex+0x2ec>
 8007404:	e7d9      	b.n	80073ba <__gethex+0x2ba>
 8007406:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1d6      	bne.n	80073ba <__gethex+0x2ba>
 800740c:	e7ee      	b.n	80073ec <__gethex+0x2ec>
 800740e:	1e6f      	subs	r7, r5, #1
 8007410:	f1ba 0f00 	cmp.w	sl, #0
 8007414:	d132      	bne.n	800747c <__gethex+0x37c>
 8007416:	b127      	cbz	r7, 8007422 <__gethex+0x322>
 8007418:	4639      	mov	r1, r7
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fe25 	bl	800806a <__any_on>
 8007420:	4682      	mov	sl, r0
 8007422:	2101      	movs	r1, #1
 8007424:	117b      	asrs	r3, r7, #5
 8007426:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800742a:	f007 071f 	and.w	r7, r7, #31
 800742e:	fa01 f707 	lsl.w	r7, r1, r7
 8007432:	421f      	tst	r7, r3
 8007434:	f04f 0702 	mov.w	r7, #2
 8007438:	4629      	mov	r1, r5
 800743a:	4620      	mov	r0, r4
 800743c:	bf18      	it	ne
 800743e:	f04a 0a02 	orrne.w	sl, sl, #2
 8007442:	1b76      	subs	r6, r6, r5
 8007444:	f7ff fdf4 	bl	8007030 <rshift>
 8007448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800744c:	f1ba 0f00 	cmp.w	sl, #0
 8007450:	d048      	beq.n	80074e4 <__gethex+0x3e4>
 8007452:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d015      	beq.n	8007486 <__gethex+0x386>
 800745a:	2b03      	cmp	r3, #3
 800745c:	d017      	beq.n	800748e <__gethex+0x38e>
 800745e:	2b01      	cmp	r3, #1
 8007460:	d109      	bne.n	8007476 <__gethex+0x376>
 8007462:	f01a 0f02 	tst.w	sl, #2
 8007466:	d006      	beq.n	8007476 <__gethex+0x376>
 8007468:	f8d9 0000 	ldr.w	r0, [r9]
 800746c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007470:	f01a 0f01 	tst.w	sl, #1
 8007474:	d10e      	bne.n	8007494 <__gethex+0x394>
 8007476:	f047 0710 	orr.w	r7, r7, #16
 800747a:	e033      	b.n	80074e4 <__gethex+0x3e4>
 800747c:	f04f 0a01 	mov.w	sl, #1
 8007480:	e7cf      	b.n	8007422 <__gethex+0x322>
 8007482:	2701      	movs	r7, #1
 8007484:	e7e2      	b.n	800744c <__gethex+0x34c>
 8007486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007488:	f1c3 0301 	rsb	r3, r3, #1
 800748c:	9315      	str	r3, [sp, #84]	; 0x54
 800748e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <__gethex+0x376>
 8007494:	f04f 0c00 	mov.w	ip, #0
 8007498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800749c:	f104 0314 	add.w	r3, r4, #20
 80074a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80074a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80074b2:	d01c      	beq.n	80074ee <__gethex+0x3ee>
 80074b4:	3201      	adds	r2, #1
 80074b6:	6002      	str	r2, [r0, #0]
 80074b8:	2f02      	cmp	r7, #2
 80074ba:	f104 0314 	add.w	r3, r4, #20
 80074be:	d13d      	bne.n	800753c <__gethex+0x43c>
 80074c0:	f8d8 2000 	ldr.w	r2, [r8]
 80074c4:	3a01      	subs	r2, #1
 80074c6:	42b2      	cmp	r2, r6
 80074c8:	d10a      	bne.n	80074e0 <__gethex+0x3e0>
 80074ca:	2201      	movs	r2, #1
 80074cc:	1171      	asrs	r1, r6, #5
 80074ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074d2:	f006 061f 	and.w	r6, r6, #31
 80074d6:	fa02 f606 	lsl.w	r6, r2, r6
 80074da:	421e      	tst	r6, r3
 80074dc:	bf18      	it	ne
 80074de:	4617      	movne	r7, r2
 80074e0:	f047 0720 	orr.w	r7, r7, #32
 80074e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074e6:	601c      	str	r4, [r3, #0]
 80074e8:	9b05      	ldr	r3, [sp, #20]
 80074ea:	601d      	str	r5, [r3, #0]
 80074ec:	e69a      	b.n	8007224 <__gethex+0x124>
 80074ee:	4299      	cmp	r1, r3
 80074f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80074f4:	d8d8      	bhi.n	80074a8 <__gethex+0x3a8>
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	459b      	cmp	fp, r3
 80074fa:	db17      	blt.n	800752c <__gethex+0x42c>
 80074fc:	6861      	ldr	r1, [r4, #4]
 80074fe:	9802      	ldr	r0, [sp, #8]
 8007500:	3101      	adds	r1, #1
 8007502:	f000 f91b 	bl	800773c <_Balloc>
 8007506:	4681      	mov	r9, r0
 8007508:	b918      	cbnz	r0, 8007512 <__gethex+0x412>
 800750a:	4602      	mov	r2, r0
 800750c:	2184      	movs	r1, #132	; 0x84
 800750e:	4b19      	ldr	r3, [pc, #100]	; (8007574 <__gethex+0x474>)
 8007510:	e6ab      	b.n	800726a <__gethex+0x16a>
 8007512:	6922      	ldr	r2, [r4, #16]
 8007514:	f104 010c 	add.w	r1, r4, #12
 8007518:	3202      	adds	r2, #2
 800751a:	0092      	lsls	r2, r2, #2
 800751c:	300c      	adds	r0, #12
 800751e:	f000 f8ff 	bl	8007720 <memcpy>
 8007522:	4621      	mov	r1, r4
 8007524:	9802      	ldr	r0, [sp, #8]
 8007526:	f000 f949 	bl	80077bc <_Bfree>
 800752a:	464c      	mov	r4, r9
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	6122      	str	r2, [r4, #16]
 8007532:	2201      	movs	r2, #1
 8007534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007538:	615a      	str	r2, [r3, #20]
 800753a:	e7bd      	b.n	80074b8 <__gethex+0x3b8>
 800753c:	6922      	ldr	r2, [r4, #16]
 800753e:	455a      	cmp	r2, fp
 8007540:	dd0b      	ble.n	800755a <__gethex+0x45a>
 8007542:	2101      	movs	r1, #1
 8007544:	4620      	mov	r0, r4
 8007546:	f7ff fd73 	bl	8007030 <rshift>
 800754a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800754e:	3501      	adds	r5, #1
 8007550:	42ab      	cmp	r3, r5
 8007552:	f6ff aed4 	blt.w	80072fe <__gethex+0x1fe>
 8007556:	2701      	movs	r7, #1
 8007558:	e7c2      	b.n	80074e0 <__gethex+0x3e0>
 800755a:	f016 061f 	ands.w	r6, r6, #31
 800755e:	d0fa      	beq.n	8007556 <__gethex+0x456>
 8007560:	4453      	add	r3, sl
 8007562:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007566:	f000 f9db 	bl	8007920 <__hi0bits>
 800756a:	f1c6 0620 	rsb	r6, r6, #32
 800756e:	42b0      	cmp	r0, r6
 8007570:	dbe7      	blt.n	8007542 <__gethex+0x442>
 8007572:	e7f0      	b.n	8007556 <__gethex+0x456>
 8007574:	08009819 	.word	0x08009819

08007578 <L_shift>:
 8007578:	f1c2 0208 	rsb	r2, r2, #8
 800757c:	0092      	lsls	r2, r2, #2
 800757e:	b570      	push	{r4, r5, r6, lr}
 8007580:	f1c2 0620 	rsb	r6, r2, #32
 8007584:	6843      	ldr	r3, [r0, #4]
 8007586:	6804      	ldr	r4, [r0, #0]
 8007588:	fa03 f506 	lsl.w	r5, r3, r6
 800758c:	432c      	orrs	r4, r5
 800758e:	40d3      	lsrs	r3, r2
 8007590:	6004      	str	r4, [r0, #0]
 8007592:	f840 3f04 	str.w	r3, [r0, #4]!
 8007596:	4288      	cmp	r0, r1
 8007598:	d3f4      	bcc.n	8007584 <L_shift+0xc>
 800759a:	bd70      	pop	{r4, r5, r6, pc}

0800759c <__match>:
 800759c:	b530      	push	{r4, r5, lr}
 800759e:	6803      	ldr	r3, [r0, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a6:	b914      	cbnz	r4, 80075ae <__match+0x12>
 80075a8:	6003      	str	r3, [r0, #0]
 80075aa:	2001      	movs	r0, #1
 80075ac:	bd30      	pop	{r4, r5, pc}
 80075ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80075b6:	2d19      	cmp	r5, #25
 80075b8:	bf98      	it	ls
 80075ba:	3220      	addls	r2, #32
 80075bc:	42a2      	cmp	r2, r4
 80075be:	d0f0      	beq.n	80075a2 <__match+0x6>
 80075c0:	2000      	movs	r0, #0
 80075c2:	e7f3      	b.n	80075ac <__match+0x10>

080075c4 <__hexnan>:
 80075c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c8:	2500      	movs	r5, #0
 80075ca:	680b      	ldr	r3, [r1, #0]
 80075cc:	4682      	mov	sl, r0
 80075ce:	115e      	asrs	r6, r3, #5
 80075d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075d4:	f013 031f 	ands.w	r3, r3, #31
 80075d8:	bf18      	it	ne
 80075da:	3604      	addne	r6, #4
 80075dc:	1f37      	subs	r7, r6, #4
 80075de:	46b9      	mov	r9, r7
 80075e0:	463c      	mov	r4, r7
 80075e2:	46ab      	mov	fp, r5
 80075e4:	b087      	sub	sp, #28
 80075e6:	4690      	mov	r8, r2
 80075e8:	6802      	ldr	r2, [r0, #0]
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	f846 5c04 	str.w	r5, [r6, #-4]
 80075f0:	9502      	str	r5, [sp, #8]
 80075f2:	7851      	ldrb	r1, [r2, #1]
 80075f4:	1c53      	adds	r3, r2, #1
 80075f6:	9303      	str	r3, [sp, #12]
 80075f8:	b341      	cbz	r1, 800764c <__hexnan+0x88>
 80075fa:	4608      	mov	r0, r1
 80075fc:	9205      	str	r2, [sp, #20]
 80075fe:	9104      	str	r1, [sp, #16]
 8007600:	f7ff fd69 	bl	80070d6 <__hexdig_fun>
 8007604:	2800      	cmp	r0, #0
 8007606:	d14f      	bne.n	80076a8 <__hexnan+0xe4>
 8007608:	9904      	ldr	r1, [sp, #16]
 800760a:	9a05      	ldr	r2, [sp, #20]
 800760c:	2920      	cmp	r1, #32
 800760e:	d818      	bhi.n	8007642 <__hexnan+0x7e>
 8007610:	9b02      	ldr	r3, [sp, #8]
 8007612:	459b      	cmp	fp, r3
 8007614:	dd13      	ble.n	800763e <__hexnan+0x7a>
 8007616:	454c      	cmp	r4, r9
 8007618:	d206      	bcs.n	8007628 <__hexnan+0x64>
 800761a:	2d07      	cmp	r5, #7
 800761c:	dc04      	bgt.n	8007628 <__hexnan+0x64>
 800761e:	462a      	mov	r2, r5
 8007620:	4649      	mov	r1, r9
 8007622:	4620      	mov	r0, r4
 8007624:	f7ff ffa8 	bl	8007578 <L_shift>
 8007628:	4544      	cmp	r4, r8
 800762a:	d950      	bls.n	80076ce <__hexnan+0x10a>
 800762c:	2300      	movs	r3, #0
 800762e:	f1a4 0904 	sub.w	r9, r4, #4
 8007632:	f844 3c04 	str.w	r3, [r4, #-4]
 8007636:	461d      	mov	r5, r3
 8007638:	464c      	mov	r4, r9
 800763a:	f8cd b008 	str.w	fp, [sp, #8]
 800763e:	9a03      	ldr	r2, [sp, #12]
 8007640:	e7d7      	b.n	80075f2 <__hexnan+0x2e>
 8007642:	2929      	cmp	r1, #41	; 0x29
 8007644:	d156      	bne.n	80076f4 <__hexnan+0x130>
 8007646:	3202      	adds	r2, #2
 8007648:	f8ca 2000 	str.w	r2, [sl]
 800764c:	f1bb 0f00 	cmp.w	fp, #0
 8007650:	d050      	beq.n	80076f4 <__hexnan+0x130>
 8007652:	454c      	cmp	r4, r9
 8007654:	d206      	bcs.n	8007664 <__hexnan+0xa0>
 8007656:	2d07      	cmp	r5, #7
 8007658:	dc04      	bgt.n	8007664 <__hexnan+0xa0>
 800765a:	462a      	mov	r2, r5
 800765c:	4649      	mov	r1, r9
 800765e:	4620      	mov	r0, r4
 8007660:	f7ff ff8a 	bl	8007578 <L_shift>
 8007664:	4544      	cmp	r4, r8
 8007666:	d934      	bls.n	80076d2 <__hexnan+0x10e>
 8007668:	4623      	mov	r3, r4
 800766a:	f1a8 0204 	sub.w	r2, r8, #4
 800766e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007672:	429f      	cmp	r7, r3
 8007674:	f842 1f04 	str.w	r1, [r2, #4]!
 8007678:	d2f9      	bcs.n	800766e <__hexnan+0xaa>
 800767a:	1b3b      	subs	r3, r7, r4
 800767c:	f023 0303 	bic.w	r3, r3, #3
 8007680:	3304      	adds	r3, #4
 8007682:	3401      	adds	r4, #1
 8007684:	3e03      	subs	r6, #3
 8007686:	42b4      	cmp	r4, r6
 8007688:	bf88      	it	hi
 800768a:	2304      	movhi	r3, #4
 800768c:	2200      	movs	r2, #0
 800768e:	4443      	add	r3, r8
 8007690:	f843 2b04 	str.w	r2, [r3], #4
 8007694:	429f      	cmp	r7, r3
 8007696:	d2fb      	bcs.n	8007690 <__hexnan+0xcc>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	b91b      	cbnz	r3, 80076a4 <__hexnan+0xe0>
 800769c:	4547      	cmp	r7, r8
 800769e:	d127      	bne.n	80076f0 <__hexnan+0x12c>
 80076a0:	2301      	movs	r3, #1
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	2005      	movs	r0, #5
 80076a6:	e026      	b.n	80076f6 <__hexnan+0x132>
 80076a8:	3501      	adds	r5, #1
 80076aa:	2d08      	cmp	r5, #8
 80076ac:	f10b 0b01 	add.w	fp, fp, #1
 80076b0:	dd06      	ble.n	80076c0 <__hexnan+0xfc>
 80076b2:	4544      	cmp	r4, r8
 80076b4:	d9c3      	bls.n	800763e <__hexnan+0x7a>
 80076b6:	2300      	movs	r3, #0
 80076b8:	2501      	movs	r5, #1
 80076ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80076be:	3c04      	subs	r4, #4
 80076c0:	6822      	ldr	r2, [r4, #0]
 80076c2:	f000 000f 	and.w	r0, r0, #15
 80076c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80076ca:	6022      	str	r2, [r4, #0]
 80076cc:	e7b7      	b.n	800763e <__hexnan+0x7a>
 80076ce:	2508      	movs	r5, #8
 80076d0:	e7b5      	b.n	800763e <__hexnan+0x7a>
 80076d2:	9b01      	ldr	r3, [sp, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0df      	beq.n	8007698 <__hexnan+0xd4>
 80076d8:	f04f 32ff 	mov.w	r2, #4294967295
 80076dc:	f1c3 0320 	rsb	r3, r3, #32
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
 80076e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076e8:	401a      	ands	r2, r3
 80076ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80076ee:	e7d3      	b.n	8007698 <__hexnan+0xd4>
 80076f0:	3f04      	subs	r7, #4
 80076f2:	e7d1      	b.n	8007698 <__hexnan+0xd4>
 80076f4:	2004      	movs	r0, #4
 80076f6:	b007      	add	sp, #28
 80076f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076fc <__ascii_mbtowc>:
 80076fc:	b082      	sub	sp, #8
 80076fe:	b901      	cbnz	r1, 8007702 <__ascii_mbtowc+0x6>
 8007700:	a901      	add	r1, sp, #4
 8007702:	b142      	cbz	r2, 8007716 <__ascii_mbtowc+0x1a>
 8007704:	b14b      	cbz	r3, 800771a <__ascii_mbtowc+0x1e>
 8007706:	7813      	ldrb	r3, [r2, #0]
 8007708:	600b      	str	r3, [r1, #0]
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	1e10      	subs	r0, r2, #0
 800770e:	bf18      	it	ne
 8007710:	2001      	movne	r0, #1
 8007712:	b002      	add	sp, #8
 8007714:	4770      	bx	lr
 8007716:	4610      	mov	r0, r2
 8007718:	e7fb      	b.n	8007712 <__ascii_mbtowc+0x16>
 800771a:	f06f 0001 	mvn.w	r0, #1
 800771e:	e7f8      	b.n	8007712 <__ascii_mbtowc+0x16>

08007720 <memcpy>:
 8007720:	440a      	add	r2, r1
 8007722:	4291      	cmp	r1, r2
 8007724:	f100 33ff 	add.w	r3, r0, #4294967295
 8007728:	d100      	bne.n	800772c <memcpy+0xc>
 800772a:	4770      	bx	lr
 800772c:	b510      	push	{r4, lr}
 800772e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007732:	4291      	cmp	r1, r2
 8007734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007738:	d1f9      	bne.n	800772e <memcpy+0xe>
 800773a:	bd10      	pop	{r4, pc}

0800773c <_Balloc>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007740:	4604      	mov	r4, r0
 8007742:	460d      	mov	r5, r1
 8007744:	b976      	cbnz	r6, 8007764 <_Balloc+0x28>
 8007746:	2010      	movs	r0, #16
 8007748:	f001 f8b6 	bl	80088b8 <malloc>
 800774c:	4602      	mov	r2, r0
 800774e:	6260      	str	r0, [r4, #36]	; 0x24
 8007750:	b920      	cbnz	r0, 800775c <_Balloc+0x20>
 8007752:	2166      	movs	r1, #102	; 0x66
 8007754:	4b17      	ldr	r3, [pc, #92]	; (80077b4 <_Balloc+0x78>)
 8007756:	4818      	ldr	r0, [pc, #96]	; (80077b8 <_Balloc+0x7c>)
 8007758:	f001 f87e 	bl	8008858 <__assert_func>
 800775c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007760:	6006      	str	r6, [r0, #0]
 8007762:	60c6      	str	r6, [r0, #12]
 8007764:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007766:	68f3      	ldr	r3, [r6, #12]
 8007768:	b183      	cbz	r3, 800778c <_Balloc+0x50>
 800776a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007772:	b9b8      	cbnz	r0, 80077a4 <_Balloc+0x68>
 8007774:	2101      	movs	r1, #1
 8007776:	fa01 f605 	lsl.w	r6, r1, r5
 800777a:	1d72      	adds	r2, r6, #5
 800777c:	4620      	mov	r0, r4
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	f000 fc94 	bl	80080ac <_calloc_r>
 8007784:	b160      	cbz	r0, 80077a0 <_Balloc+0x64>
 8007786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800778a:	e00e      	b.n	80077aa <_Balloc+0x6e>
 800778c:	2221      	movs	r2, #33	; 0x21
 800778e:	2104      	movs	r1, #4
 8007790:	4620      	mov	r0, r4
 8007792:	f000 fc8b 	bl	80080ac <_calloc_r>
 8007796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007798:	60f0      	str	r0, [r6, #12]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e4      	bne.n	800776a <_Balloc+0x2e>
 80077a0:	2000      	movs	r0, #0
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	6802      	ldr	r2, [r0, #0]
 80077a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077aa:	2300      	movs	r3, #0
 80077ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077b0:	e7f7      	b.n	80077a2 <_Balloc+0x66>
 80077b2:	bf00      	nop
 80077b4:	080098a2 	.word	0x080098a2
 80077b8:	080098b9 	.word	0x080098b9

080077bc <_Bfree>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077c0:	4605      	mov	r5, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	b976      	cbnz	r6, 80077e4 <_Bfree+0x28>
 80077c6:	2010      	movs	r0, #16
 80077c8:	f001 f876 	bl	80088b8 <malloc>
 80077cc:	4602      	mov	r2, r0
 80077ce:	6268      	str	r0, [r5, #36]	; 0x24
 80077d0:	b920      	cbnz	r0, 80077dc <_Bfree+0x20>
 80077d2:	218a      	movs	r1, #138	; 0x8a
 80077d4:	4b08      	ldr	r3, [pc, #32]	; (80077f8 <_Bfree+0x3c>)
 80077d6:	4809      	ldr	r0, [pc, #36]	; (80077fc <_Bfree+0x40>)
 80077d8:	f001 f83e 	bl	8008858 <__assert_func>
 80077dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e0:	6006      	str	r6, [r0, #0]
 80077e2:	60c6      	str	r6, [r0, #12]
 80077e4:	b13c      	cbz	r4, 80077f6 <_Bfree+0x3a>
 80077e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077e8:	6862      	ldr	r2, [r4, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077f0:	6021      	str	r1, [r4, #0]
 80077f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	080098a2 	.word	0x080098a2
 80077fc:	080098b9 	.word	0x080098b9

08007800 <__multadd>:
 8007800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007804:	4607      	mov	r7, r0
 8007806:	460c      	mov	r4, r1
 8007808:	461e      	mov	r6, r3
 800780a:	2000      	movs	r0, #0
 800780c:	690d      	ldr	r5, [r1, #16]
 800780e:	f101 0c14 	add.w	ip, r1, #20
 8007812:	f8dc 3000 	ldr.w	r3, [ip]
 8007816:	3001      	adds	r0, #1
 8007818:	b299      	uxth	r1, r3
 800781a:	fb02 6101 	mla	r1, r2, r1, r6
 800781e:	0c1e      	lsrs	r6, r3, #16
 8007820:	0c0b      	lsrs	r3, r1, #16
 8007822:	fb02 3306 	mla	r3, r2, r6, r3
 8007826:	b289      	uxth	r1, r1
 8007828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800782c:	4285      	cmp	r5, r0
 800782e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007832:	f84c 1b04 	str.w	r1, [ip], #4
 8007836:	dcec      	bgt.n	8007812 <__multadd+0x12>
 8007838:	b30e      	cbz	r6, 800787e <__multadd+0x7e>
 800783a:	68a3      	ldr	r3, [r4, #8]
 800783c:	42ab      	cmp	r3, r5
 800783e:	dc19      	bgt.n	8007874 <__multadd+0x74>
 8007840:	6861      	ldr	r1, [r4, #4]
 8007842:	4638      	mov	r0, r7
 8007844:	3101      	adds	r1, #1
 8007846:	f7ff ff79 	bl	800773c <_Balloc>
 800784a:	4680      	mov	r8, r0
 800784c:	b928      	cbnz	r0, 800785a <__multadd+0x5a>
 800784e:	4602      	mov	r2, r0
 8007850:	21b5      	movs	r1, #181	; 0xb5
 8007852:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <__multadd+0x84>)
 8007854:	480c      	ldr	r0, [pc, #48]	; (8007888 <__multadd+0x88>)
 8007856:	f000 ffff 	bl	8008858 <__assert_func>
 800785a:	6922      	ldr	r2, [r4, #16]
 800785c:	f104 010c 	add.w	r1, r4, #12
 8007860:	3202      	adds	r2, #2
 8007862:	0092      	lsls	r2, r2, #2
 8007864:	300c      	adds	r0, #12
 8007866:	f7ff ff5b 	bl	8007720 <memcpy>
 800786a:	4621      	mov	r1, r4
 800786c:	4638      	mov	r0, r7
 800786e:	f7ff ffa5 	bl	80077bc <_Bfree>
 8007872:	4644      	mov	r4, r8
 8007874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007878:	3501      	adds	r5, #1
 800787a:	615e      	str	r6, [r3, #20]
 800787c:	6125      	str	r5, [r4, #16]
 800787e:	4620      	mov	r0, r4
 8007880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007884:	08009819 	.word	0x08009819
 8007888:	080098b9 	.word	0x080098b9

0800788c <__s2b>:
 800788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007890:	4615      	mov	r5, r2
 8007892:	2209      	movs	r2, #9
 8007894:	461f      	mov	r7, r3
 8007896:	3308      	adds	r3, #8
 8007898:	460c      	mov	r4, r1
 800789a:	fb93 f3f2 	sdiv	r3, r3, r2
 800789e:	4606      	mov	r6, r0
 80078a0:	2201      	movs	r2, #1
 80078a2:	2100      	movs	r1, #0
 80078a4:	429a      	cmp	r2, r3
 80078a6:	db09      	blt.n	80078bc <__s2b+0x30>
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7ff ff47 	bl	800773c <_Balloc>
 80078ae:	b940      	cbnz	r0, 80078c2 <__s2b+0x36>
 80078b0:	4602      	mov	r2, r0
 80078b2:	21ce      	movs	r1, #206	; 0xce
 80078b4:	4b18      	ldr	r3, [pc, #96]	; (8007918 <__s2b+0x8c>)
 80078b6:	4819      	ldr	r0, [pc, #100]	; (800791c <__s2b+0x90>)
 80078b8:	f000 ffce 	bl	8008858 <__assert_func>
 80078bc:	0052      	lsls	r2, r2, #1
 80078be:	3101      	adds	r1, #1
 80078c0:	e7f0      	b.n	80078a4 <__s2b+0x18>
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	2d09      	cmp	r5, #9
 80078c6:	6143      	str	r3, [r0, #20]
 80078c8:	f04f 0301 	mov.w	r3, #1
 80078cc:	6103      	str	r3, [r0, #16]
 80078ce:	dd16      	ble.n	80078fe <__s2b+0x72>
 80078d0:	f104 0909 	add.w	r9, r4, #9
 80078d4:	46c8      	mov	r8, r9
 80078d6:	442c      	add	r4, r5
 80078d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078dc:	4601      	mov	r1, r0
 80078de:	220a      	movs	r2, #10
 80078e0:	4630      	mov	r0, r6
 80078e2:	3b30      	subs	r3, #48	; 0x30
 80078e4:	f7ff ff8c 	bl	8007800 <__multadd>
 80078e8:	45a0      	cmp	r8, r4
 80078ea:	d1f5      	bne.n	80078d8 <__s2b+0x4c>
 80078ec:	f1a5 0408 	sub.w	r4, r5, #8
 80078f0:	444c      	add	r4, r9
 80078f2:	1b2d      	subs	r5, r5, r4
 80078f4:	1963      	adds	r3, r4, r5
 80078f6:	42bb      	cmp	r3, r7
 80078f8:	db04      	blt.n	8007904 <__s2b+0x78>
 80078fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fe:	2509      	movs	r5, #9
 8007900:	340a      	adds	r4, #10
 8007902:	e7f6      	b.n	80078f2 <__s2b+0x66>
 8007904:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007908:	4601      	mov	r1, r0
 800790a:	220a      	movs	r2, #10
 800790c:	4630      	mov	r0, r6
 800790e:	3b30      	subs	r3, #48	; 0x30
 8007910:	f7ff ff76 	bl	8007800 <__multadd>
 8007914:	e7ee      	b.n	80078f4 <__s2b+0x68>
 8007916:	bf00      	nop
 8007918:	08009819 	.word	0x08009819
 800791c:	080098b9 	.word	0x080098b9

08007920 <__hi0bits>:
 8007920:	0c02      	lsrs	r2, r0, #16
 8007922:	0412      	lsls	r2, r2, #16
 8007924:	4603      	mov	r3, r0
 8007926:	b9ca      	cbnz	r2, 800795c <__hi0bits+0x3c>
 8007928:	0403      	lsls	r3, r0, #16
 800792a:	2010      	movs	r0, #16
 800792c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007930:	bf04      	itt	eq
 8007932:	021b      	lsleq	r3, r3, #8
 8007934:	3008      	addeq	r0, #8
 8007936:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800793a:	bf04      	itt	eq
 800793c:	011b      	lsleq	r3, r3, #4
 800793e:	3004      	addeq	r0, #4
 8007940:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007944:	bf04      	itt	eq
 8007946:	009b      	lsleq	r3, r3, #2
 8007948:	3002      	addeq	r0, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	db05      	blt.n	800795a <__hi0bits+0x3a>
 800794e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007952:	f100 0001 	add.w	r0, r0, #1
 8007956:	bf08      	it	eq
 8007958:	2020      	moveq	r0, #32
 800795a:	4770      	bx	lr
 800795c:	2000      	movs	r0, #0
 800795e:	e7e5      	b.n	800792c <__hi0bits+0xc>

08007960 <__lo0bits>:
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	4602      	mov	r2, r0
 8007964:	f013 0007 	ands.w	r0, r3, #7
 8007968:	d00b      	beq.n	8007982 <__lo0bits+0x22>
 800796a:	07d9      	lsls	r1, r3, #31
 800796c:	d421      	bmi.n	80079b2 <__lo0bits+0x52>
 800796e:	0798      	lsls	r0, r3, #30
 8007970:	bf49      	itett	mi
 8007972:	085b      	lsrmi	r3, r3, #1
 8007974:	089b      	lsrpl	r3, r3, #2
 8007976:	2001      	movmi	r0, #1
 8007978:	6013      	strmi	r3, [r2, #0]
 800797a:	bf5c      	itt	pl
 800797c:	2002      	movpl	r0, #2
 800797e:	6013      	strpl	r3, [r2, #0]
 8007980:	4770      	bx	lr
 8007982:	b299      	uxth	r1, r3
 8007984:	b909      	cbnz	r1, 800798a <__lo0bits+0x2a>
 8007986:	2010      	movs	r0, #16
 8007988:	0c1b      	lsrs	r3, r3, #16
 800798a:	b2d9      	uxtb	r1, r3
 800798c:	b909      	cbnz	r1, 8007992 <__lo0bits+0x32>
 800798e:	3008      	adds	r0, #8
 8007990:	0a1b      	lsrs	r3, r3, #8
 8007992:	0719      	lsls	r1, r3, #28
 8007994:	bf04      	itt	eq
 8007996:	091b      	lsreq	r3, r3, #4
 8007998:	3004      	addeq	r0, #4
 800799a:	0799      	lsls	r1, r3, #30
 800799c:	bf04      	itt	eq
 800799e:	089b      	lsreq	r3, r3, #2
 80079a0:	3002      	addeq	r0, #2
 80079a2:	07d9      	lsls	r1, r3, #31
 80079a4:	d403      	bmi.n	80079ae <__lo0bits+0x4e>
 80079a6:	085b      	lsrs	r3, r3, #1
 80079a8:	f100 0001 	add.w	r0, r0, #1
 80079ac:	d003      	beq.n	80079b6 <__lo0bits+0x56>
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	4770      	bx	lr
 80079b2:	2000      	movs	r0, #0
 80079b4:	4770      	bx	lr
 80079b6:	2020      	movs	r0, #32
 80079b8:	4770      	bx	lr
	...

080079bc <__i2b>:
 80079bc:	b510      	push	{r4, lr}
 80079be:	460c      	mov	r4, r1
 80079c0:	2101      	movs	r1, #1
 80079c2:	f7ff febb 	bl	800773c <_Balloc>
 80079c6:	4602      	mov	r2, r0
 80079c8:	b928      	cbnz	r0, 80079d6 <__i2b+0x1a>
 80079ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <__i2b+0x24>)
 80079d0:	4804      	ldr	r0, [pc, #16]	; (80079e4 <__i2b+0x28>)
 80079d2:	f000 ff41 	bl	8008858 <__assert_func>
 80079d6:	2301      	movs	r3, #1
 80079d8:	6144      	str	r4, [r0, #20]
 80079da:	6103      	str	r3, [r0, #16]
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	bf00      	nop
 80079e0:	08009819 	.word	0x08009819
 80079e4:	080098b9 	.word	0x080098b9

080079e8 <__multiply>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	4691      	mov	r9, r2
 80079ee:	690a      	ldr	r2, [r1, #16]
 80079f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079f4:	460c      	mov	r4, r1
 80079f6:	429a      	cmp	r2, r3
 80079f8:	bfbe      	ittt	lt
 80079fa:	460b      	movlt	r3, r1
 80079fc:	464c      	movlt	r4, r9
 80079fe:	4699      	movlt	r9, r3
 8007a00:	6927      	ldr	r7, [r4, #16]
 8007a02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	6861      	ldr	r1, [r4, #4]
 8007a0a:	eb07 060a 	add.w	r6, r7, sl
 8007a0e:	42b3      	cmp	r3, r6
 8007a10:	b085      	sub	sp, #20
 8007a12:	bfb8      	it	lt
 8007a14:	3101      	addlt	r1, #1
 8007a16:	f7ff fe91 	bl	800773c <_Balloc>
 8007a1a:	b930      	cbnz	r0, 8007a2a <__multiply+0x42>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	f240 115d 	movw	r1, #349	; 0x15d
 8007a22:	4b43      	ldr	r3, [pc, #268]	; (8007b30 <__multiply+0x148>)
 8007a24:	4843      	ldr	r0, [pc, #268]	; (8007b34 <__multiply+0x14c>)
 8007a26:	f000 ff17 	bl	8008858 <__assert_func>
 8007a2a:	f100 0514 	add.w	r5, r0, #20
 8007a2e:	462b      	mov	r3, r5
 8007a30:	2200      	movs	r2, #0
 8007a32:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a36:	4543      	cmp	r3, r8
 8007a38:	d321      	bcc.n	8007a7e <__multiply+0x96>
 8007a3a:	f104 0314 	add.w	r3, r4, #20
 8007a3e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a42:	f109 0314 	add.w	r3, r9, #20
 8007a46:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a4a:	9202      	str	r2, [sp, #8]
 8007a4c:	1b3a      	subs	r2, r7, r4
 8007a4e:	3a15      	subs	r2, #21
 8007a50:	f022 0203 	bic.w	r2, r2, #3
 8007a54:	3204      	adds	r2, #4
 8007a56:	f104 0115 	add.w	r1, r4, #21
 8007a5a:	428f      	cmp	r7, r1
 8007a5c:	bf38      	it	cc
 8007a5e:	2204      	movcc	r2, #4
 8007a60:	9201      	str	r2, [sp, #4]
 8007a62:	9a02      	ldr	r2, [sp, #8]
 8007a64:	9303      	str	r3, [sp, #12]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d80c      	bhi.n	8007a84 <__multiply+0x9c>
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	dd03      	ble.n	8007a76 <__multiply+0x8e>
 8007a6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d059      	beq.n	8007b2a <__multiply+0x142>
 8007a76:	6106      	str	r6, [r0, #16]
 8007a78:	b005      	add	sp, #20
 8007a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7e:	f843 2b04 	str.w	r2, [r3], #4
 8007a82:	e7d8      	b.n	8007a36 <__multiply+0x4e>
 8007a84:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a88:	f1ba 0f00 	cmp.w	sl, #0
 8007a8c:	d023      	beq.n	8007ad6 <__multiply+0xee>
 8007a8e:	46a9      	mov	r9, r5
 8007a90:	f04f 0c00 	mov.w	ip, #0
 8007a94:	f104 0e14 	add.w	lr, r4, #20
 8007a98:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a9c:	f8d9 1000 	ldr.w	r1, [r9]
 8007aa0:	fa1f fb82 	uxth.w	fp, r2
 8007aa4:	b289      	uxth	r1, r1
 8007aa6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007aaa:	4461      	add	r1, ip
 8007aac:	f8d9 c000 	ldr.w	ip, [r9]
 8007ab0:	0c12      	lsrs	r2, r2, #16
 8007ab2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007ab6:	fb0a c202 	mla	r2, sl, r2, ip
 8007aba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007abe:	b289      	uxth	r1, r1
 8007ac0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ac4:	4577      	cmp	r7, lr
 8007ac6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007aca:	f849 1b04 	str.w	r1, [r9], #4
 8007ace:	d8e3      	bhi.n	8007a98 <__multiply+0xb0>
 8007ad0:	9a01      	ldr	r2, [sp, #4]
 8007ad2:	f845 c002 	str.w	ip, [r5, r2]
 8007ad6:	9a03      	ldr	r2, [sp, #12]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ade:	f1b9 0f00 	cmp.w	r9, #0
 8007ae2:	d020      	beq.n	8007b26 <__multiply+0x13e>
 8007ae4:	46ae      	mov	lr, r5
 8007ae6:	f04f 0a00 	mov.w	sl, #0
 8007aea:	6829      	ldr	r1, [r5, #0]
 8007aec:	f104 0c14 	add.w	ip, r4, #20
 8007af0:	f8bc b000 	ldrh.w	fp, [ip]
 8007af4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007af8:	b289      	uxth	r1, r1
 8007afa:	fb09 220b 	mla	r2, r9, fp, r2
 8007afe:	4492      	add	sl, r2
 8007b00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b04:	f84e 1b04 	str.w	r1, [lr], #4
 8007b08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b0c:	f8be 1000 	ldrh.w	r1, [lr]
 8007b10:	0c12      	lsrs	r2, r2, #16
 8007b12:	fb09 1102 	mla	r1, r9, r2, r1
 8007b16:	4567      	cmp	r7, ip
 8007b18:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007b1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b20:	d8e6      	bhi.n	8007af0 <__multiply+0x108>
 8007b22:	9a01      	ldr	r2, [sp, #4]
 8007b24:	50a9      	str	r1, [r5, r2]
 8007b26:	3504      	adds	r5, #4
 8007b28:	e79b      	b.n	8007a62 <__multiply+0x7a>
 8007b2a:	3e01      	subs	r6, #1
 8007b2c:	e79d      	b.n	8007a6a <__multiply+0x82>
 8007b2e:	bf00      	nop
 8007b30:	08009819 	.word	0x08009819
 8007b34:	080098b9 	.word	0x080098b9

08007b38 <__pow5mult>:
 8007b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b3c:	4615      	mov	r5, r2
 8007b3e:	f012 0203 	ands.w	r2, r2, #3
 8007b42:	4606      	mov	r6, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	d007      	beq.n	8007b58 <__pow5mult+0x20>
 8007b48:	4c25      	ldr	r4, [pc, #148]	; (8007be0 <__pow5mult+0xa8>)
 8007b4a:	3a01      	subs	r2, #1
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b52:	f7ff fe55 	bl	8007800 <__multadd>
 8007b56:	4607      	mov	r7, r0
 8007b58:	10ad      	asrs	r5, r5, #2
 8007b5a:	d03d      	beq.n	8007bd8 <__pow5mult+0xa0>
 8007b5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b5e:	b97c      	cbnz	r4, 8007b80 <__pow5mult+0x48>
 8007b60:	2010      	movs	r0, #16
 8007b62:	f000 fea9 	bl	80088b8 <malloc>
 8007b66:	4602      	mov	r2, r0
 8007b68:	6270      	str	r0, [r6, #36]	; 0x24
 8007b6a:	b928      	cbnz	r0, 8007b78 <__pow5mult+0x40>
 8007b6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b70:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <__pow5mult+0xac>)
 8007b72:	481d      	ldr	r0, [pc, #116]	; (8007be8 <__pow5mult+0xb0>)
 8007b74:	f000 fe70 	bl	8008858 <__assert_func>
 8007b78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b7c:	6004      	str	r4, [r0, #0]
 8007b7e:	60c4      	str	r4, [r0, #12]
 8007b80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b88:	b94c      	cbnz	r4, 8007b9e <__pow5mult+0x66>
 8007b8a:	f240 2171 	movw	r1, #625	; 0x271
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7ff ff14 	bl	80079bc <__i2b>
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b9c:	6003      	str	r3, [r0, #0]
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	07eb      	lsls	r3, r5, #31
 8007ba4:	d50a      	bpl.n	8007bbc <__pow5mult+0x84>
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	4622      	mov	r2, r4
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff ff1c 	bl	80079e8 <__multiply>
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7ff fe01 	bl	80077bc <_Bfree>
 8007bba:	4647      	mov	r7, r8
 8007bbc:	106d      	asrs	r5, r5, #1
 8007bbe:	d00b      	beq.n	8007bd8 <__pow5mult+0xa0>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	b938      	cbnz	r0, 8007bd4 <__pow5mult+0x9c>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f7ff ff0d 	bl	80079e8 <__multiply>
 8007bce:	6020      	str	r0, [r4, #0]
 8007bd0:	f8c0 9000 	str.w	r9, [r0]
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	e7e4      	b.n	8007ba2 <__pow5mult+0x6a>
 8007bd8:	4638      	mov	r0, r7
 8007bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bde:	bf00      	nop
 8007be0:	08009a08 	.word	0x08009a08
 8007be4:	080098a2 	.word	0x080098a2
 8007be8:	080098b9 	.word	0x080098b9

08007bec <__lshift>:
 8007bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	4691      	mov	r9, r2
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	6849      	ldr	r1, [r1, #4]
 8007bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bfe:	68a3      	ldr	r3, [r4, #8]
 8007c00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c04:	f108 0601 	add.w	r6, r8, #1
 8007c08:	42b3      	cmp	r3, r6
 8007c0a:	db0b      	blt.n	8007c24 <__lshift+0x38>
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f7ff fd95 	bl	800773c <_Balloc>
 8007c12:	4605      	mov	r5, r0
 8007c14:	b948      	cbnz	r0, 8007c2a <__lshift+0x3e>
 8007c16:	4602      	mov	r2, r0
 8007c18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c1c:	4b29      	ldr	r3, [pc, #164]	; (8007cc4 <__lshift+0xd8>)
 8007c1e:	482a      	ldr	r0, [pc, #168]	; (8007cc8 <__lshift+0xdc>)
 8007c20:	f000 fe1a 	bl	8008858 <__assert_func>
 8007c24:	3101      	adds	r1, #1
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	e7ee      	b.n	8007c08 <__lshift+0x1c>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f100 0114 	add.w	r1, r0, #20
 8007c30:	f100 0210 	add.w	r2, r0, #16
 8007c34:	4618      	mov	r0, r3
 8007c36:	4553      	cmp	r3, sl
 8007c38:	db37      	blt.n	8007caa <__lshift+0xbe>
 8007c3a:	6920      	ldr	r0, [r4, #16]
 8007c3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c40:	f104 0314 	add.w	r3, r4, #20
 8007c44:	f019 091f 	ands.w	r9, r9, #31
 8007c48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c50:	d02f      	beq.n	8007cb2 <__lshift+0xc6>
 8007c52:	468a      	mov	sl, r1
 8007c54:	f04f 0c00 	mov.w	ip, #0
 8007c58:	f1c9 0e20 	rsb	lr, r9, #32
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	fa02 f209 	lsl.w	r2, r2, r9
 8007c62:	ea42 020c 	orr.w	r2, r2, ip
 8007c66:	f84a 2b04 	str.w	r2, [sl], #4
 8007c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6e:	4298      	cmp	r0, r3
 8007c70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c74:	d8f2      	bhi.n	8007c5c <__lshift+0x70>
 8007c76:	1b03      	subs	r3, r0, r4
 8007c78:	3b15      	subs	r3, #21
 8007c7a:	f023 0303 	bic.w	r3, r3, #3
 8007c7e:	3304      	adds	r3, #4
 8007c80:	f104 0215 	add.w	r2, r4, #21
 8007c84:	4290      	cmp	r0, r2
 8007c86:	bf38      	it	cc
 8007c88:	2304      	movcc	r3, #4
 8007c8a:	f841 c003 	str.w	ip, [r1, r3]
 8007c8e:	f1bc 0f00 	cmp.w	ip, #0
 8007c92:	d001      	beq.n	8007c98 <__lshift+0xac>
 8007c94:	f108 0602 	add.w	r6, r8, #2
 8007c98:	3e01      	subs	r6, #1
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	612e      	str	r6, [r5, #16]
 8007ca0:	f7ff fd8c 	bl	80077bc <_Bfree>
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cae:	3301      	adds	r3, #1
 8007cb0:	e7c1      	b.n	8007c36 <__lshift+0x4a>
 8007cb2:	3904      	subs	r1, #4
 8007cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb8:	4298      	cmp	r0, r3
 8007cba:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cbe:	d8f9      	bhi.n	8007cb4 <__lshift+0xc8>
 8007cc0:	e7ea      	b.n	8007c98 <__lshift+0xac>
 8007cc2:	bf00      	nop
 8007cc4:	08009819 	.word	0x08009819
 8007cc8:	080098b9 	.word	0x080098b9

08007ccc <__mcmp>:
 8007ccc:	4603      	mov	r3, r0
 8007cce:	690a      	ldr	r2, [r1, #16]
 8007cd0:	6900      	ldr	r0, [r0, #16]
 8007cd2:	b530      	push	{r4, r5, lr}
 8007cd4:	1a80      	subs	r0, r0, r2
 8007cd6:	d10d      	bne.n	8007cf4 <__mcmp+0x28>
 8007cd8:	3314      	adds	r3, #20
 8007cda:	3114      	adds	r1, #20
 8007cdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ce0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cec:	4295      	cmp	r5, r2
 8007cee:	d002      	beq.n	8007cf6 <__mcmp+0x2a>
 8007cf0:	d304      	bcc.n	8007cfc <__mcmp+0x30>
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	bd30      	pop	{r4, r5, pc}
 8007cf6:	42a3      	cmp	r3, r4
 8007cf8:	d3f4      	bcc.n	8007ce4 <__mcmp+0x18>
 8007cfa:	e7fb      	b.n	8007cf4 <__mcmp+0x28>
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	e7f8      	b.n	8007cf4 <__mcmp+0x28>
	...

08007d04 <__mdiff>:
 8007d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	460d      	mov	r5, r1
 8007d0a:	4607      	mov	r7, r0
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4628      	mov	r0, r5
 8007d10:	4614      	mov	r4, r2
 8007d12:	f7ff ffdb 	bl	8007ccc <__mcmp>
 8007d16:	1e06      	subs	r6, r0, #0
 8007d18:	d111      	bne.n	8007d3e <__mdiff+0x3a>
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f7ff fd0d 	bl	800773c <_Balloc>
 8007d22:	4602      	mov	r2, r0
 8007d24:	b928      	cbnz	r0, 8007d32 <__mdiff+0x2e>
 8007d26:	f240 2132 	movw	r1, #562	; 0x232
 8007d2a:	4b3a      	ldr	r3, [pc, #232]	; (8007e14 <__mdiff+0x110>)
 8007d2c:	483a      	ldr	r0, [pc, #232]	; (8007e18 <__mdiff+0x114>)
 8007d2e:	f000 fd93 	bl	8008858 <__assert_func>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d38:	4610      	mov	r0, r2
 8007d3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3e:	bfa4      	itt	ge
 8007d40:	4623      	movge	r3, r4
 8007d42:	462c      	movge	r4, r5
 8007d44:	4638      	mov	r0, r7
 8007d46:	6861      	ldr	r1, [r4, #4]
 8007d48:	bfa6      	itte	ge
 8007d4a:	461d      	movge	r5, r3
 8007d4c:	2600      	movge	r6, #0
 8007d4e:	2601      	movlt	r6, #1
 8007d50:	f7ff fcf4 	bl	800773c <_Balloc>
 8007d54:	4602      	mov	r2, r0
 8007d56:	b918      	cbnz	r0, 8007d60 <__mdiff+0x5c>
 8007d58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	; (8007e14 <__mdiff+0x110>)
 8007d5e:	e7e5      	b.n	8007d2c <__mdiff+0x28>
 8007d60:	f102 0814 	add.w	r8, r2, #20
 8007d64:	46c2      	mov	sl, r8
 8007d66:	f04f 0c00 	mov.w	ip, #0
 8007d6a:	6927      	ldr	r7, [r4, #16]
 8007d6c:	60c6      	str	r6, [r0, #12]
 8007d6e:	692e      	ldr	r6, [r5, #16]
 8007d70:	f104 0014 	add.w	r0, r4, #20
 8007d74:	f105 0914 	add.w	r9, r5, #20
 8007d78:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d80:	3410      	adds	r4, #16
 8007d82:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d86:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d8a:	fa1f f18b 	uxth.w	r1, fp
 8007d8e:	448c      	add	ip, r1
 8007d90:	b299      	uxth	r1, r3
 8007d92:	0c1b      	lsrs	r3, r3, #16
 8007d94:	ebac 0101 	sub.w	r1, ip, r1
 8007d98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007da0:	b289      	uxth	r1, r1
 8007da2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007da6:	454e      	cmp	r6, r9
 8007da8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007dac:	f84a 3b04 	str.w	r3, [sl], #4
 8007db0:	d8e7      	bhi.n	8007d82 <__mdiff+0x7e>
 8007db2:	1b73      	subs	r3, r6, r5
 8007db4:	3b15      	subs	r3, #21
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	3515      	adds	r5, #21
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	42ae      	cmp	r6, r5
 8007dc0:	bf38      	it	cc
 8007dc2:	2304      	movcc	r3, #4
 8007dc4:	4418      	add	r0, r3
 8007dc6:	4443      	add	r3, r8
 8007dc8:	461e      	mov	r6, r3
 8007dca:	4605      	mov	r5, r0
 8007dcc:	4575      	cmp	r5, lr
 8007dce:	d30e      	bcc.n	8007dee <__mdiff+0xea>
 8007dd0:	f10e 0103 	add.w	r1, lr, #3
 8007dd4:	1a09      	subs	r1, r1, r0
 8007dd6:	f021 0103 	bic.w	r1, r1, #3
 8007dda:	3803      	subs	r0, #3
 8007ddc:	4586      	cmp	lr, r0
 8007dde:	bf38      	it	cc
 8007de0:	2100      	movcc	r1, #0
 8007de2:	4419      	add	r1, r3
 8007de4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007de8:	b18b      	cbz	r3, 8007e0e <__mdiff+0x10a>
 8007dea:	6117      	str	r7, [r2, #16]
 8007dec:	e7a4      	b.n	8007d38 <__mdiff+0x34>
 8007dee:	f855 8b04 	ldr.w	r8, [r5], #4
 8007df2:	fa1f f188 	uxth.w	r1, r8
 8007df6:	4461      	add	r1, ip
 8007df8:	140c      	asrs	r4, r1, #16
 8007dfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dfe:	b289      	uxth	r1, r1
 8007e00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e04:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e08:	f846 1b04 	str.w	r1, [r6], #4
 8007e0c:	e7de      	b.n	8007dcc <__mdiff+0xc8>
 8007e0e:	3f01      	subs	r7, #1
 8007e10:	e7e8      	b.n	8007de4 <__mdiff+0xe0>
 8007e12:	bf00      	nop
 8007e14:	08009819 	.word	0x08009819
 8007e18:	080098b9 	.word	0x080098b9

08007e1c <__ulp>:
 8007e1c:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <__ulp+0x48>)
 8007e1e:	400b      	ands	r3, r1
 8007e20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	dd02      	ble.n	8007e2e <__ulp+0x12>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4770      	bx	lr
 8007e2e:	425b      	negs	r3, r3
 8007e30:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007e34:	f04f 0000 	mov.w	r0, #0
 8007e38:	f04f 0100 	mov.w	r1, #0
 8007e3c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e40:	da04      	bge.n	8007e4c <__ulp+0x30>
 8007e42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e46:	fa43 f102 	asr.w	r1, r3, r2
 8007e4a:	4770      	bx	lr
 8007e4c:	f1a2 0314 	sub.w	r3, r2, #20
 8007e50:	2b1e      	cmp	r3, #30
 8007e52:	bfd6      	itet	le
 8007e54:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007e58:	2301      	movgt	r3, #1
 8007e5a:	fa22 f303 	lsrle.w	r3, r2, r3
 8007e5e:	4618      	mov	r0, r3
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	7ff00000 	.word	0x7ff00000

08007e68 <__b2d>:
 8007e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e6c:	6907      	ldr	r7, [r0, #16]
 8007e6e:	f100 0914 	add.w	r9, r0, #20
 8007e72:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007e76:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007e7a:	f1a7 0804 	sub.w	r8, r7, #4
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff fd4e 	bl	8007920 <__hi0bits>
 8007e84:	f1c0 0320 	rsb	r3, r0, #32
 8007e88:	280a      	cmp	r0, #10
 8007e8a:	600b      	str	r3, [r1, #0]
 8007e8c:	491f      	ldr	r1, [pc, #124]	; (8007f0c <__b2d+0xa4>)
 8007e8e:	dc17      	bgt.n	8007ec0 <__b2d+0x58>
 8007e90:	45c1      	cmp	r9, r8
 8007e92:	bf28      	it	cs
 8007e94:	2200      	movcs	r2, #0
 8007e96:	f1c0 0c0b 	rsb	ip, r0, #11
 8007e9a:	fa26 f30c 	lsr.w	r3, r6, ip
 8007e9e:	bf38      	it	cc
 8007ea0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ea4:	ea43 0501 	orr.w	r5, r3, r1
 8007ea8:	f100 0315 	add.w	r3, r0, #21
 8007eac:	fa06 f303 	lsl.w	r3, r6, r3
 8007eb0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007eb4:	ea43 0402 	orr.w	r4, r3, r2
 8007eb8:	4620      	mov	r0, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec0:	45c1      	cmp	r9, r8
 8007ec2:	bf2e      	itee	cs
 8007ec4:	2200      	movcs	r2, #0
 8007ec6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007eca:	f1a7 0808 	subcc.w	r8, r7, #8
 8007ece:	f1b0 030b 	subs.w	r3, r0, #11
 8007ed2:	d016      	beq.n	8007f02 <__b2d+0x9a>
 8007ed4:	f1c3 0720 	rsb	r7, r3, #32
 8007ed8:	fa22 f107 	lsr.w	r1, r2, r7
 8007edc:	45c8      	cmp	r8, r9
 8007ede:	fa06 f603 	lsl.w	r6, r6, r3
 8007ee2:	ea46 0601 	orr.w	r6, r6, r1
 8007ee6:	bf94      	ite	ls
 8007ee8:	2100      	movls	r1, #0
 8007eea:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007eee:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007ef2:	fa02 f003 	lsl.w	r0, r2, r3
 8007ef6:	40f9      	lsrs	r1, r7
 8007ef8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007efc:	ea40 0401 	orr.w	r4, r0, r1
 8007f00:	e7da      	b.n	8007eb8 <__b2d+0x50>
 8007f02:	4614      	mov	r4, r2
 8007f04:	ea46 0501 	orr.w	r5, r6, r1
 8007f08:	e7d6      	b.n	8007eb8 <__b2d+0x50>
 8007f0a:	bf00      	nop
 8007f0c:	3ff00000 	.word	0x3ff00000

08007f10 <__d2b>:
 8007f10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f14:	2101      	movs	r1, #1
 8007f16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007f1a:	4690      	mov	r8, r2
 8007f1c:	461d      	mov	r5, r3
 8007f1e:	f7ff fc0d 	bl	800773c <_Balloc>
 8007f22:	4604      	mov	r4, r0
 8007f24:	b930      	cbnz	r0, 8007f34 <__d2b+0x24>
 8007f26:	4602      	mov	r2, r0
 8007f28:	f240 310a 	movw	r1, #778	; 0x30a
 8007f2c:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <__d2b+0xb0>)
 8007f2e:	4825      	ldr	r0, [pc, #148]	; (8007fc4 <__d2b+0xb4>)
 8007f30:	f000 fc92 	bl	8008858 <__assert_func>
 8007f34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007f38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007f3c:	bb2d      	cbnz	r5, 8007f8a <__d2b+0x7a>
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	f1b8 0300 	subs.w	r3, r8, #0
 8007f44:	d026      	beq.n	8007f94 <__d2b+0x84>
 8007f46:	4668      	mov	r0, sp
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	f7ff fd09 	bl	8007960 <__lo0bits>
 8007f4e:	9900      	ldr	r1, [sp, #0]
 8007f50:	b1f0      	cbz	r0, 8007f90 <__d2b+0x80>
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	f1c0 0320 	rsb	r3, r0, #32
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	40c2      	lsrs	r2, r0
 8007f60:	6163      	str	r3, [r4, #20]
 8007f62:	9201      	str	r2, [sp, #4]
 8007f64:	9b01      	ldr	r3, [sp, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bf14      	ite	ne
 8007f6a:	2102      	movne	r1, #2
 8007f6c:	2101      	moveq	r1, #1
 8007f6e:	61a3      	str	r3, [r4, #24]
 8007f70:	6121      	str	r1, [r4, #16]
 8007f72:	b1c5      	cbz	r5, 8007fa6 <__d2b+0x96>
 8007f74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f78:	4405      	add	r5, r0
 8007f7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f7e:	603d      	str	r5, [r7, #0]
 8007f80:	6030      	str	r0, [r6, #0]
 8007f82:	4620      	mov	r0, r4
 8007f84:	b002      	add	sp, #8
 8007f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f8e:	e7d6      	b.n	8007f3e <__d2b+0x2e>
 8007f90:	6161      	str	r1, [r4, #20]
 8007f92:	e7e7      	b.n	8007f64 <__d2b+0x54>
 8007f94:	a801      	add	r0, sp, #4
 8007f96:	f7ff fce3 	bl	8007960 <__lo0bits>
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	9b01      	ldr	r3, [sp, #4]
 8007f9e:	6121      	str	r1, [r4, #16]
 8007fa0:	6163      	str	r3, [r4, #20]
 8007fa2:	3020      	adds	r0, #32
 8007fa4:	e7e5      	b.n	8007f72 <__d2b+0x62>
 8007fa6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007faa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fae:	6038      	str	r0, [r7, #0]
 8007fb0:	6918      	ldr	r0, [r3, #16]
 8007fb2:	f7ff fcb5 	bl	8007920 <__hi0bits>
 8007fb6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007fba:	6031      	str	r1, [r6, #0]
 8007fbc:	e7e1      	b.n	8007f82 <__d2b+0x72>
 8007fbe:	bf00      	nop
 8007fc0:	08009819 	.word	0x08009819
 8007fc4:	080098b9 	.word	0x080098b9

08007fc8 <__ratio>:
 8007fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	4688      	mov	r8, r1
 8007fce:	4669      	mov	r1, sp
 8007fd0:	4681      	mov	r9, r0
 8007fd2:	f7ff ff49 	bl	8007e68 <__b2d>
 8007fd6:	460f      	mov	r7, r1
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	4640      	mov	r0, r8
 8007fde:	a901      	add	r1, sp, #4
 8007fe0:	f7ff ff42 	bl	8007e68 <__b2d>
 8007fe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fe8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007fec:	468b      	mov	fp, r1
 8007fee:	eba3 0c02 	sub.w	ip, r3, r2
 8007ff2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bfd5      	itete	le
 8008000:	460a      	movle	r2, r1
 8008002:	462a      	movgt	r2, r5
 8008004:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008008:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800800c:	bfd8      	it	le
 800800e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008012:	465b      	mov	r3, fp
 8008014:	4602      	mov	r2, r0
 8008016:	4639      	mov	r1, r7
 8008018:	4620      	mov	r0, r4
 800801a:	f7f8 fb91 	bl	8000740 <__aeabi_ddiv>
 800801e:	b003      	add	sp, #12
 8008020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008024 <__copybits>:
 8008024:	3901      	subs	r1, #1
 8008026:	b570      	push	{r4, r5, r6, lr}
 8008028:	1149      	asrs	r1, r1, #5
 800802a:	6914      	ldr	r4, [r2, #16]
 800802c:	3101      	adds	r1, #1
 800802e:	f102 0314 	add.w	r3, r2, #20
 8008032:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800803a:	1f05      	subs	r5, r0, #4
 800803c:	42a3      	cmp	r3, r4
 800803e:	d30c      	bcc.n	800805a <__copybits+0x36>
 8008040:	1aa3      	subs	r3, r4, r2
 8008042:	3b11      	subs	r3, #17
 8008044:	f023 0303 	bic.w	r3, r3, #3
 8008048:	3211      	adds	r2, #17
 800804a:	42a2      	cmp	r2, r4
 800804c:	bf88      	it	hi
 800804e:	2300      	movhi	r3, #0
 8008050:	4418      	add	r0, r3
 8008052:	2300      	movs	r3, #0
 8008054:	4288      	cmp	r0, r1
 8008056:	d305      	bcc.n	8008064 <__copybits+0x40>
 8008058:	bd70      	pop	{r4, r5, r6, pc}
 800805a:	f853 6b04 	ldr.w	r6, [r3], #4
 800805e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008062:	e7eb      	b.n	800803c <__copybits+0x18>
 8008064:	f840 3b04 	str.w	r3, [r0], #4
 8008068:	e7f4      	b.n	8008054 <__copybits+0x30>

0800806a <__any_on>:
 800806a:	f100 0214 	add.w	r2, r0, #20
 800806e:	6900      	ldr	r0, [r0, #16]
 8008070:	114b      	asrs	r3, r1, #5
 8008072:	4298      	cmp	r0, r3
 8008074:	b510      	push	{r4, lr}
 8008076:	db11      	blt.n	800809c <__any_on+0x32>
 8008078:	dd0a      	ble.n	8008090 <__any_on+0x26>
 800807a:	f011 011f 	ands.w	r1, r1, #31
 800807e:	d007      	beq.n	8008090 <__any_on+0x26>
 8008080:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008084:	fa24 f001 	lsr.w	r0, r4, r1
 8008088:	fa00 f101 	lsl.w	r1, r0, r1
 800808c:	428c      	cmp	r4, r1
 800808e:	d10b      	bne.n	80080a8 <__any_on+0x3e>
 8008090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008094:	4293      	cmp	r3, r2
 8008096:	d803      	bhi.n	80080a0 <__any_on+0x36>
 8008098:	2000      	movs	r0, #0
 800809a:	bd10      	pop	{r4, pc}
 800809c:	4603      	mov	r3, r0
 800809e:	e7f7      	b.n	8008090 <__any_on+0x26>
 80080a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080a4:	2900      	cmp	r1, #0
 80080a6:	d0f5      	beq.n	8008094 <__any_on+0x2a>
 80080a8:	2001      	movs	r0, #1
 80080aa:	e7f6      	b.n	800809a <__any_on+0x30>

080080ac <_calloc_r>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	fba1 5402 	umull	r5, r4, r1, r2
 80080b2:	b934      	cbnz	r4, 80080c2 <_calloc_r+0x16>
 80080b4:	4629      	mov	r1, r5
 80080b6:	f000 f82d 	bl	8008114 <_malloc_r>
 80080ba:	4606      	mov	r6, r0
 80080bc:	b928      	cbnz	r0, 80080ca <_calloc_r+0x1e>
 80080be:	4630      	mov	r0, r6
 80080c0:	bd70      	pop	{r4, r5, r6, pc}
 80080c2:	220c      	movs	r2, #12
 80080c4:	2600      	movs	r6, #0
 80080c6:	6002      	str	r2, [r0, #0]
 80080c8:	e7f9      	b.n	80080be <_calloc_r+0x12>
 80080ca:	462a      	mov	r2, r5
 80080cc:	4621      	mov	r1, r4
 80080ce:	f7fe f85f 	bl	8006190 <memset>
 80080d2:	e7f4      	b.n	80080be <_calloc_r+0x12>

080080d4 <sbrk_aligned>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4e0e      	ldr	r6, [pc, #56]	; (8008110 <sbrk_aligned+0x3c>)
 80080d8:	460c      	mov	r4, r1
 80080da:	6831      	ldr	r1, [r6, #0]
 80080dc:	4605      	mov	r5, r0
 80080de:	b911      	cbnz	r1, 80080e6 <sbrk_aligned+0x12>
 80080e0:	f000 fb84 	bl	80087ec <_sbrk_r>
 80080e4:	6030      	str	r0, [r6, #0]
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 fb7f 	bl	80087ec <_sbrk_r>
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	d00a      	beq.n	8008108 <sbrk_aligned+0x34>
 80080f2:	1cc4      	adds	r4, r0, #3
 80080f4:	f024 0403 	bic.w	r4, r4, #3
 80080f8:	42a0      	cmp	r0, r4
 80080fa:	d007      	beq.n	800810c <sbrk_aligned+0x38>
 80080fc:	1a21      	subs	r1, r4, r0
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fb74 	bl	80087ec <_sbrk_r>
 8008104:	3001      	adds	r0, #1
 8008106:	d101      	bne.n	800810c <sbrk_aligned+0x38>
 8008108:	f04f 34ff 	mov.w	r4, #4294967295
 800810c:	4620      	mov	r0, r4
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	20001a08 	.word	0x20001a08

08008114 <_malloc_r>:
 8008114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	1ccd      	adds	r5, r1, #3
 800811a:	f025 0503 	bic.w	r5, r5, #3
 800811e:	3508      	adds	r5, #8
 8008120:	2d0c      	cmp	r5, #12
 8008122:	bf38      	it	cc
 8008124:	250c      	movcc	r5, #12
 8008126:	2d00      	cmp	r5, #0
 8008128:	4607      	mov	r7, r0
 800812a:	db01      	blt.n	8008130 <_malloc_r+0x1c>
 800812c:	42a9      	cmp	r1, r5
 800812e:	d905      	bls.n	800813c <_malloc_r+0x28>
 8008130:	230c      	movs	r3, #12
 8008132:	2600      	movs	r6, #0
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4630      	mov	r0, r6
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	4e2e      	ldr	r6, [pc, #184]	; (80081f8 <_malloc_r+0xe4>)
 800813e:	f000 fbd1 	bl	80088e4 <__malloc_lock>
 8008142:	6833      	ldr	r3, [r6, #0]
 8008144:	461c      	mov	r4, r3
 8008146:	bb34      	cbnz	r4, 8008196 <_malloc_r+0x82>
 8008148:	4629      	mov	r1, r5
 800814a:	4638      	mov	r0, r7
 800814c:	f7ff ffc2 	bl	80080d4 <sbrk_aligned>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	4604      	mov	r4, r0
 8008154:	d14d      	bne.n	80081f2 <_malloc_r+0xde>
 8008156:	6834      	ldr	r4, [r6, #0]
 8008158:	4626      	mov	r6, r4
 800815a:	2e00      	cmp	r6, #0
 800815c:	d140      	bne.n	80081e0 <_malloc_r+0xcc>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	4631      	mov	r1, r6
 8008162:	4638      	mov	r0, r7
 8008164:	eb04 0803 	add.w	r8, r4, r3
 8008168:	f000 fb40 	bl	80087ec <_sbrk_r>
 800816c:	4580      	cmp	r8, r0
 800816e:	d13a      	bne.n	80081e6 <_malloc_r+0xd2>
 8008170:	6821      	ldr	r1, [r4, #0]
 8008172:	3503      	adds	r5, #3
 8008174:	1a6d      	subs	r5, r5, r1
 8008176:	f025 0503 	bic.w	r5, r5, #3
 800817a:	3508      	adds	r5, #8
 800817c:	2d0c      	cmp	r5, #12
 800817e:	bf38      	it	cc
 8008180:	250c      	movcc	r5, #12
 8008182:	4638      	mov	r0, r7
 8008184:	4629      	mov	r1, r5
 8008186:	f7ff ffa5 	bl	80080d4 <sbrk_aligned>
 800818a:	3001      	adds	r0, #1
 800818c:	d02b      	beq.n	80081e6 <_malloc_r+0xd2>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	442b      	add	r3, r5
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	e00e      	b.n	80081b4 <_malloc_r+0xa0>
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	1b52      	subs	r2, r2, r5
 800819a:	d41e      	bmi.n	80081da <_malloc_r+0xc6>
 800819c:	2a0b      	cmp	r2, #11
 800819e:	d916      	bls.n	80081ce <_malloc_r+0xba>
 80081a0:	1961      	adds	r1, r4, r5
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	6025      	str	r5, [r4, #0]
 80081a6:	bf18      	it	ne
 80081a8:	6059      	strne	r1, [r3, #4]
 80081aa:	6863      	ldr	r3, [r4, #4]
 80081ac:	bf08      	it	eq
 80081ae:	6031      	streq	r1, [r6, #0]
 80081b0:	5162      	str	r2, [r4, r5]
 80081b2:	604b      	str	r3, [r1, #4]
 80081b4:	4638      	mov	r0, r7
 80081b6:	f104 060b 	add.w	r6, r4, #11
 80081ba:	f000 fb99 	bl	80088f0 <__malloc_unlock>
 80081be:	f026 0607 	bic.w	r6, r6, #7
 80081c2:	1d23      	adds	r3, r4, #4
 80081c4:	1af2      	subs	r2, r6, r3
 80081c6:	d0b6      	beq.n	8008136 <_malloc_r+0x22>
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	50a3      	str	r3, [r4, r2]
 80081cc:	e7b3      	b.n	8008136 <_malloc_r+0x22>
 80081ce:	6862      	ldr	r2, [r4, #4]
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	bf0c      	ite	eq
 80081d4:	6032      	streq	r2, [r6, #0]
 80081d6:	605a      	strne	r2, [r3, #4]
 80081d8:	e7ec      	b.n	80081b4 <_malloc_r+0xa0>
 80081da:	4623      	mov	r3, r4
 80081dc:	6864      	ldr	r4, [r4, #4]
 80081de:	e7b2      	b.n	8008146 <_malloc_r+0x32>
 80081e0:	4634      	mov	r4, r6
 80081e2:	6876      	ldr	r6, [r6, #4]
 80081e4:	e7b9      	b.n	800815a <_malloc_r+0x46>
 80081e6:	230c      	movs	r3, #12
 80081e8:	4638      	mov	r0, r7
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	f000 fb80 	bl	80088f0 <__malloc_unlock>
 80081f0:	e7a1      	b.n	8008136 <_malloc_r+0x22>
 80081f2:	6025      	str	r5, [r4, #0]
 80081f4:	e7de      	b.n	80081b4 <_malloc_r+0xa0>
 80081f6:	bf00      	nop
 80081f8:	20001a04 	.word	0x20001a04

080081fc <__ssputs_r>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	688e      	ldr	r6, [r1, #8]
 8008202:	4682      	mov	sl, r0
 8008204:	429e      	cmp	r6, r3
 8008206:	460c      	mov	r4, r1
 8008208:	4690      	mov	r8, r2
 800820a:	461f      	mov	r7, r3
 800820c:	d838      	bhi.n	8008280 <__ssputs_r+0x84>
 800820e:	898a      	ldrh	r2, [r1, #12]
 8008210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008214:	d032      	beq.n	800827c <__ssputs_r+0x80>
 8008216:	6825      	ldr	r5, [r4, #0]
 8008218:	6909      	ldr	r1, [r1, #16]
 800821a:	3301      	adds	r3, #1
 800821c:	eba5 0901 	sub.w	r9, r5, r1
 8008220:	6965      	ldr	r5, [r4, #20]
 8008222:	444b      	add	r3, r9
 8008224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800822c:	106d      	asrs	r5, r5, #1
 800822e:	429d      	cmp	r5, r3
 8008230:	bf38      	it	cc
 8008232:	461d      	movcc	r5, r3
 8008234:	0553      	lsls	r3, r2, #21
 8008236:	d531      	bpl.n	800829c <__ssputs_r+0xa0>
 8008238:	4629      	mov	r1, r5
 800823a:	f7ff ff6b 	bl	8008114 <_malloc_r>
 800823e:	4606      	mov	r6, r0
 8008240:	b950      	cbnz	r0, 8008258 <__ssputs_r+0x5c>
 8008242:	230c      	movs	r3, #12
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	f8ca 3000 	str.w	r3, [sl]
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008258:	464a      	mov	r2, r9
 800825a:	6921      	ldr	r1, [r4, #16]
 800825c:	f7ff fa60 	bl	8007720 <memcpy>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	6126      	str	r6, [r4, #16]
 800826e:	444e      	add	r6, r9
 8008270:	6026      	str	r6, [r4, #0]
 8008272:	463e      	mov	r6, r7
 8008274:	6165      	str	r5, [r4, #20]
 8008276:	eba5 0509 	sub.w	r5, r5, r9
 800827a:	60a5      	str	r5, [r4, #8]
 800827c:	42be      	cmp	r6, r7
 800827e:	d900      	bls.n	8008282 <__ssputs_r+0x86>
 8008280:	463e      	mov	r6, r7
 8008282:	4632      	mov	r2, r6
 8008284:	4641      	mov	r1, r8
 8008286:	6820      	ldr	r0, [r4, #0]
 8008288:	f7fd ff68 	bl	800615c <memmove>
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	2000      	movs	r0, #0
 8008290:	1b9b      	subs	r3, r3, r6
 8008292:	60a3      	str	r3, [r4, #8]
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	4433      	add	r3, r6
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	e7db      	b.n	8008254 <__ssputs_r+0x58>
 800829c:	462a      	mov	r2, r5
 800829e:	f000 fb75 	bl	800898c <_realloc_r>
 80082a2:	4606      	mov	r6, r0
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d1e1      	bne.n	800826c <__ssputs_r+0x70>
 80082a8:	4650      	mov	r0, sl
 80082aa:	6921      	ldr	r1, [r4, #16]
 80082ac:	f000 fb26 	bl	80088fc <_free_r>
 80082b0:	e7c7      	b.n	8008242 <__ssputs_r+0x46>
	...

080082b4 <_svfiprintf_r>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	4698      	mov	r8, r3
 80082ba:	898b      	ldrh	r3, [r1, #12]
 80082bc:	4607      	mov	r7, r0
 80082be:	061b      	lsls	r3, r3, #24
 80082c0:	460d      	mov	r5, r1
 80082c2:	4614      	mov	r4, r2
 80082c4:	b09d      	sub	sp, #116	; 0x74
 80082c6:	d50e      	bpl.n	80082e6 <_svfiprintf_r+0x32>
 80082c8:	690b      	ldr	r3, [r1, #16]
 80082ca:	b963      	cbnz	r3, 80082e6 <_svfiprintf_r+0x32>
 80082cc:	2140      	movs	r1, #64	; 0x40
 80082ce:	f7ff ff21 	bl	8008114 <_malloc_r>
 80082d2:	6028      	str	r0, [r5, #0]
 80082d4:	6128      	str	r0, [r5, #16]
 80082d6:	b920      	cbnz	r0, 80082e2 <_svfiprintf_r+0x2e>
 80082d8:	230c      	movs	r3, #12
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e0d1      	b.n	8008486 <_svfiprintf_r+0x1d2>
 80082e2:	2340      	movs	r3, #64	; 0x40
 80082e4:	616b      	str	r3, [r5, #20]
 80082e6:	2300      	movs	r3, #0
 80082e8:	9309      	str	r3, [sp, #36]	; 0x24
 80082ea:	2320      	movs	r3, #32
 80082ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082f0:	2330      	movs	r3, #48	; 0x30
 80082f2:	f04f 0901 	mov.w	r9, #1
 80082f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80084a0 <_svfiprintf_r+0x1ec>
 80082fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008302:	4623      	mov	r3, r4
 8008304:	469a      	mov	sl, r3
 8008306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800830a:	b10a      	cbz	r2, 8008310 <_svfiprintf_r+0x5c>
 800830c:	2a25      	cmp	r2, #37	; 0x25
 800830e:	d1f9      	bne.n	8008304 <_svfiprintf_r+0x50>
 8008310:	ebba 0b04 	subs.w	fp, sl, r4
 8008314:	d00b      	beq.n	800832e <_svfiprintf_r+0x7a>
 8008316:	465b      	mov	r3, fp
 8008318:	4622      	mov	r2, r4
 800831a:	4629      	mov	r1, r5
 800831c:	4638      	mov	r0, r7
 800831e:	f7ff ff6d 	bl	80081fc <__ssputs_r>
 8008322:	3001      	adds	r0, #1
 8008324:	f000 80aa 	beq.w	800847c <_svfiprintf_r+0x1c8>
 8008328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800832a:	445a      	add	r2, fp
 800832c:	9209      	str	r2, [sp, #36]	; 0x24
 800832e:	f89a 3000 	ldrb.w	r3, [sl]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 80a2 	beq.w	800847c <_svfiprintf_r+0x1c8>
 8008338:	2300      	movs	r3, #0
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008342:	f10a 0a01 	add.w	sl, sl, #1
 8008346:	9304      	str	r3, [sp, #16]
 8008348:	9307      	str	r3, [sp, #28]
 800834a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800834e:	931a      	str	r3, [sp, #104]	; 0x68
 8008350:	4654      	mov	r4, sl
 8008352:	2205      	movs	r2, #5
 8008354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008358:	4851      	ldr	r0, [pc, #324]	; (80084a0 <_svfiprintf_r+0x1ec>)
 800835a:	f000 fab5 	bl	80088c8 <memchr>
 800835e:	9a04      	ldr	r2, [sp, #16]
 8008360:	b9d8      	cbnz	r0, 800839a <_svfiprintf_r+0xe6>
 8008362:	06d0      	lsls	r0, r2, #27
 8008364:	bf44      	itt	mi
 8008366:	2320      	movmi	r3, #32
 8008368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800836c:	0711      	lsls	r1, r2, #28
 800836e:	bf44      	itt	mi
 8008370:	232b      	movmi	r3, #43	; 0x2b
 8008372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008376:	f89a 3000 	ldrb.w	r3, [sl]
 800837a:	2b2a      	cmp	r3, #42	; 0x2a
 800837c:	d015      	beq.n	80083aa <_svfiprintf_r+0xf6>
 800837e:	4654      	mov	r4, sl
 8008380:	2000      	movs	r0, #0
 8008382:	f04f 0c0a 	mov.w	ip, #10
 8008386:	9a07      	ldr	r2, [sp, #28]
 8008388:	4621      	mov	r1, r4
 800838a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800838e:	3b30      	subs	r3, #48	; 0x30
 8008390:	2b09      	cmp	r3, #9
 8008392:	d94e      	bls.n	8008432 <_svfiprintf_r+0x17e>
 8008394:	b1b0      	cbz	r0, 80083c4 <_svfiprintf_r+0x110>
 8008396:	9207      	str	r2, [sp, #28]
 8008398:	e014      	b.n	80083c4 <_svfiprintf_r+0x110>
 800839a:	eba0 0308 	sub.w	r3, r0, r8
 800839e:	fa09 f303 	lsl.w	r3, r9, r3
 80083a2:	4313      	orrs	r3, r2
 80083a4:	46a2      	mov	sl, r4
 80083a6:	9304      	str	r3, [sp, #16]
 80083a8:	e7d2      	b.n	8008350 <_svfiprintf_r+0x9c>
 80083aa:	9b03      	ldr	r3, [sp, #12]
 80083ac:	1d19      	adds	r1, r3, #4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	9103      	str	r1, [sp, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bfbb      	ittet	lt
 80083b6:	425b      	neglt	r3, r3
 80083b8:	f042 0202 	orrlt.w	r2, r2, #2
 80083bc:	9307      	strge	r3, [sp, #28]
 80083be:	9307      	strlt	r3, [sp, #28]
 80083c0:	bfb8      	it	lt
 80083c2:	9204      	strlt	r2, [sp, #16]
 80083c4:	7823      	ldrb	r3, [r4, #0]
 80083c6:	2b2e      	cmp	r3, #46	; 0x2e
 80083c8:	d10c      	bne.n	80083e4 <_svfiprintf_r+0x130>
 80083ca:	7863      	ldrb	r3, [r4, #1]
 80083cc:	2b2a      	cmp	r3, #42	; 0x2a
 80083ce:	d135      	bne.n	800843c <_svfiprintf_r+0x188>
 80083d0:	9b03      	ldr	r3, [sp, #12]
 80083d2:	3402      	adds	r4, #2
 80083d4:	1d1a      	adds	r2, r3, #4
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	9203      	str	r2, [sp, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bfb8      	it	lt
 80083de:	f04f 33ff 	movlt.w	r3, #4294967295
 80083e2:	9305      	str	r3, [sp, #20]
 80083e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80084a4 <_svfiprintf_r+0x1f0>
 80083e8:	2203      	movs	r2, #3
 80083ea:	4650      	mov	r0, sl
 80083ec:	7821      	ldrb	r1, [r4, #0]
 80083ee:	f000 fa6b 	bl	80088c8 <memchr>
 80083f2:	b140      	cbz	r0, 8008406 <_svfiprintf_r+0x152>
 80083f4:	2340      	movs	r3, #64	; 0x40
 80083f6:	eba0 000a 	sub.w	r0, r0, sl
 80083fa:	fa03 f000 	lsl.w	r0, r3, r0
 80083fe:	9b04      	ldr	r3, [sp, #16]
 8008400:	3401      	adds	r4, #1
 8008402:	4303      	orrs	r3, r0
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840a:	2206      	movs	r2, #6
 800840c:	4826      	ldr	r0, [pc, #152]	; (80084a8 <_svfiprintf_r+0x1f4>)
 800840e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008412:	f000 fa59 	bl	80088c8 <memchr>
 8008416:	2800      	cmp	r0, #0
 8008418:	d038      	beq.n	800848c <_svfiprintf_r+0x1d8>
 800841a:	4b24      	ldr	r3, [pc, #144]	; (80084ac <_svfiprintf_r+0x1f8>)
 800841c:	bb1b      	cbnz	r3, 8008466 <_svfiprintf_r+0x1b2>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	3307      	adds	r3, #7
 8008422:	f023 0307 	bic.w	r3, r3, #7
 8008426:	3308      	adds	r3, #8
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842c:	4433      	add	r3, r6
 800842e:	9309      	str	r3, [sp, #36]	; 0x24
 8008430:	e767      	b.n	8008302 <_svfiprintf_r+0x4e>
 8008432:	460c      	mov	r4, r1
 8008434:	2001      	movs	r0, #1
 8008436:	fb0c 3202 	mla	r2, ip, r2, r3
 800843a:	e7a5      	b.n	8008388 <_svfiprintf_r+0xd4>
 800843c:	2300      	movs	r3, #0
 800843e:	f04f 0c0a 	mov.w	ip, #10
 8008442:	4619      	mov	r1, r3
 8008444:	3401      	adds	r4, #1
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	4620      	mov	r0, r4
 800844a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800844e:	3a30      	subs	r2, #48	; 0x30
 8008450:	2a09      	cmp	r2, #9
 8008452:	d903      	bls.n	800845c <_svfiprintf_r+0x1a8>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0c5      	beq.n	80083e4 <_svfiprintf_r+0x130>
 8008458:	9105      	str	r1, [sp, #20]
 800845a:	e7c3      	b.n	80083e4 <_svfiprintf_r+0x130>
 800845c:	4604      	mov	r4, r0
 800845e:	2301      	movs	r3, #1
 8008460:	fb0c 2101 	mla	r1, ip, r1, r2
 8008464:	e7f0      	b.n	8008448 <_svfiprintf_r+0x194>
 8008466:	ab03      	add	r3, sp, #12
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	462a      	mov	r2, r5
 800846c:	4638      	mov	r0, r7
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <_svfiprintf_r+0x1fc>)
 8008470:	a904      	add	r1, sp, #16
 8008472:	f3af 8000 	nop.w
 8008476:	1c42      	adds	r2, r0, #1
 8008478:	4606      	mov	r6, r0
 800847a:	d1d6      	bne.n	800842a <_svfiprintf_r+0x176>
 800847c:	89ab      	ldrh	r3, [r5, #12]
 800847e:	065b      	lsls	r3, r3, #25
 8008480:	f53f af2c 	bmi.w	80082dc <_svfiprintf_r+0x28>
 8008484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008486:	b01d      	add	sp, #116	; 0x74
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	ab03      	add	r3, sp, #12
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	462a      	mov	r2, r5
 8008492:	4638      	mov	r0, r7
 8008494:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <_svfiprintf_r+0x1fc>)
 8008496:	a904      	add	r1, sp, #16
 8008498:	f000 f87c 	bl	8008594 <_printf_i>
 800849c:	e7eb      	b.n	8008476 <_svfiprintf_r+0x1c2>
 800849e:	bf00      	nop
 80084a0:	08009a14 	.word	0x08009a14
 80084a4:	08009a1a 	.word	0x08009a1a
 80084a8:	08009a1e 	.word	0x08009a1e
 80084ac:	00000000 	.word	0x00000000
 80084b0:	080081fd 	.word	0x080081fd

080084b4 <_printf_common>:
 80084b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b8:	4616      	mov	r6, r2
 80084ba:	4699      	mov	r9, r3
 80084bc:	688a      	ldr	r2, [r1, #8]
 80084be:	690b      	ldr	r3, [r1, #16]
 80084c0:	4607      	mov	r7, r0
 80084c2:	4293      	cmp	r3, r2
 80084c4:	bfb8      	it	lt
 80084c6:	4613      	movlt	r3, r2
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084ce:	460c      	mov	r4, r1
 80084d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084d4:	b10a      	cbz	r2, 80084da <_printf_common+0x26>
 80084d6:	3301      	adds	r3, #1
 80084d8:	6033      	str	r3, [r6, #0]
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	0699      	lsls	r1, r3, #26
 80084de:	bf42      	ittt	mi
 80084e0:	6833      	ldrmi	r3, [r6, #0]
 80084e2:	3302      	addmi	r3, #2
 80084e4:	6033      	strmi	r3, [r6, #0]
 80084e6:	6825      	ldr	r5, [r4, #0]
 80084e8:	f015 0506 	ands.w	r5, r5, #6
 80084ec:	d106      	bne.n	80084fc <_printf_common+0x48>
 80084ee:	f104 0a19 	add.w	sl, r4, #25
 80084f2:	68e3      	ldr	r3, [r4, #12]
 80084f4:	6832      	ldr	r2, [r6, #0]
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	42ab      	cmp	r3, r5
 80084fa:	dc28      	bgt.n	800854e <_printf_common+0x9a>
 80084fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008500:	1e13      	subs	r3, r2, #0
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	bf18      	it	ne
 8008506:	2301      	movne	r3, #1
 8008508:	0692      	lsls	r2, r2, #26
 800850a:	d42d      	bmi.n	8008568 <_printf_common+0xb4>
 800850c:	4649      	mov	r1, r9
 800850e:	4638      	mov	r0, r7
 8008510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008514:	47c0      	blx	r8
 8008516:	3001      	adds	r0, #1
 8008518:	d020      	beq.n	800855c <_printf_common+0xa8>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	68e5      	ldr	r5, [r4, #12]
 800851e:	f003 0306 	and.w	r3, r3, #6
 8008522:	2b04      	cmp	r3, #4
 8008524:	bf18      	it	ne
 8008526:	2500      	movne	r5, #0
 8008528:	6832      	ldr	r2, [r6, #0]
 800852a:	f04f 0600 	mov.w	r6, #0
 800852e:	68a3      	ldr	r3, [r4, #8]
 8008530:	bf08      	it	eq
 8008532:	1aad      	subeq	r5, r5, r2
 8008534:	6922      	ldr	r2, [r4, #16]
 8008536:	bf08      	it	eq
 8008538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800853c:	4293      	cmp	r3, r2
 800853e:	bfc4      	itt	gt
 8008540:	1a9b      	subgt	r3, r3, r2
 8008542:	18ed      	addgt	r5, r5, r3
 8008544:	341a      	adds	r4, #26
 8008546:	42b5      	cmp	r5, r6
 8008548:	d11a      	bne.n	8008580 <_printf_common+0xcc>
 800854a:	2000      	movs	r0, #0
 800854c:	e008      	b.n	8008560 <_printf_common+0xac>
 800854e:	2301      	movs	r3, #1
 8008550:	4652      	mov	r2, sl
 8008552:	4649      	mov	r1, r9
 8008554:	4638      	mov	r0, r7
 8008556:	47c0      	blx	r8
 8008558:	3001      	adds	r0, #1
 800855a:	d103      	bne.n	8008564 <_printf_common+0xb0>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008564:	3501      	adds	r5, #1
 8008566:	e7c4      	b.n	80084f2 <_printf_common+0x3e>
 8008568:	2030      	movs	r0, #48	; 0x30
 800856a:	18e1      	adds	r1, r4, r3
 800856c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008576:	4422      	add	r2, r4
 8008578:	3302      	adds	r3, #2
 800857a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800857e:	e7c5      	b.n	800850c <_printf_common+0x58>
 8008580:	2301      	movs	r3, #1
 8008582:	4622      	mov	r2, r4
 8008584:	4649      	mov	r1, r9
 8008586:	4638      	mov	r0, r7
 8008588:	47c0      	blx	r8
 800858a:	3001      	adds	r0, #1
 800858c:	d0e6      	beq.n	800855c <_printf_common+0xa8>
 800858e:	3601      	adds	r6, #1
 8008590:	e7d9      	b.n	8008546 <_printf_common+0x92>
	...

08008594 <_printf_i>:
 8008594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	7e0f      	ldrb	r7, [r1, #24]
 800859a:	4691      	mov	r9, r2
 800859c:	2f78      	cmp	r7, #120	; 0x78
 800859e:	4680      	mov	r8, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	469a      	mov	sl, r3
 80085a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085aa:	d807      	bhi.n	80085bc <_printf_i+0x28>
 80085ac:	2f62      	cmp	r7, #98	; 0x62
 80085ae:	d80a      	bhi.n	80085c6 <_printf_i+0x32>
 80085b0:	2f00      	cmp	r7, #0
 80085b2:	f000 80d9 	beq.w	8008768 <_printf_i+0x1d4>
 80085b6:	2f58      	cmp	r7, #88	; 0x58
 80085b8:	f000 80a4 	beq.w	8008704 <_printf_i+0x170>
 80085bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085c4:	e03a      	b.n	800863c <_printf_i+0xa8>
 80085c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085ca:	2b15      	cmp	r3, #21
 80085cc:	d8f6      	bhi.n	80085bc <_printf_i+0x28>
 80085ce:	a101      	add	r1, pc, #4	; (adr r1, 80085d4 <_printf_i+0x40>)
 80085d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	08008641 	.word	0x08008641
 80085dc:	080085bd 	.word	0x080085bd
 80085e0:	080085bd 	.word	0x080085bd
 80085e4:	080085bd 	.word	0x080085bd
 80085e8:	080085bd 	.word	0x080085bd
 80085ec:	08008641 	.word	0x08008641
 80085f0:	080085bd 	.word	0x080085bd
 80085f4:	080085bd 	.word	0x080085bd
 80085f8:	080085bd 	.word	0x080085bd
 80085fc:	080085bd 	.word	0x080085bd
 8008600:	0800874f 	.word	0x0800874f
 8008604:	08008671 	.word	0x08008671
 8008608:	08008731 	.word	0x08008731
 800860c:	080085bd 	.word	0x080085bd
 8008610:	080085bd 	.word	0x080085bd
 8008614:	08008771 	.word	0x08008771
 8008618:	080085bd 	.word	0x080085bd
 800861c:	08008671 	.word	0x08008671
 8008620:	080085bd 	.word	0x080085bd
 8008624:	080085bd 	.word	0x080085bd
 8008628:	08008739 	.word	0x08008739
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	602a      	str	r2, [r5, #0]
 8008634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800863c:	2301      	movs	r3, #1
 800863e:	e0a4      	b.n	800878a <_printf_i+0x1f6>
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	6829      	ldr	r1, [r5, #0]
 8008644:	0606      	lsls	r6, r0, #24
 8008646:	f101 0304 	add.w	r3, r1, #4
 800864a:	d50a      	bpl.n	8008662 <_printf_i+0xce>
 800864c:	680e      	ldr	r6, [r1, #0]
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	2e00      	cmp	r6, #0
 8008652:	da03      	bge.n	800865c <_printf_i+0xc8>
 8008654:	232d      	movs	r3, #45	; 0x2d
 8008656:	4276      	negs	r6, r6
 8008658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800865c:	230a      	movs	r3, #10
 800865e:	485e      	ldr	r0, [pc, #376]	; (80087d8 <_printf_i+0x244>)
 8008660:	e019      	b.n	8008696 <_printf_i+0x102>
 8008662:	680e      	ldr	r6, [r1, #0]
 8008664:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008668:	602b      	str	r3, [r5, #0]
 800866a:	bf18      	it	ne
 800866c:	b236      	sxthne	r6, r6
 800866e:	e7ef      	b.n	8008650 <_printf_i+0xbc>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	1d19      	adds	r1, r3, #4
 8008676:	6029      	str	r1, [r5, #0]
 8008678:	0601      	lsls	r1, r0, #24
 800867a:	d501      	bpl.n	8008680 <_printf_i+0xec>
 800867c:	681e      	ldr	r6, [r3, #0]
 800867e:	e002      	b.n	8008686 <_printf_i+0xf2>
 8008680:	0646      	lsls	r6, r0, #25
 8008682:	d5fb      	bpl.n	800867c <_printf_i+0xe8>
 8008684:	881e      	ldrh	r6, [r3, #0]
 8008686:	2f6f      	cmp	r7, #111	; 0x6f
 8008688:	bf0c      	ite	eq
 800868a:	2308      	moveq	r3, #8
 800868c:	230a      	movne	r3, #10
 800868e:	4852      	ldr	r0, [pc, #328]	; (80087d8 <_printf_i+0x244>)
 8008690:	2100      	movs	r1, #0
 8008692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008696:	6865      	ldr	r5, [r4, #4]
 8008698:	2d00      	cmp	r5, #0
 800869a:	bfa8      	it	ge
 800869c:	6821      	ldrge	r1, [r4, #0]
 800869e:	60a5      	str	r5, [r4, #8]
 80086a0:	bfa4      	itt	ge
 80086a2:	f021 0104 	bicge.w	r1, r1, #4
 80086a6:	6021      	strge	r1, [r4, #0]
 80086a8:	b90e      	cbnz	r6, 80086ae <_printf_i+0x11a>
 80086aa:	2d00      	cmp	r5, #0
 80086ac:	d04d      	beq.n	800874a <_printf_i+0x1b6>
 80086ae:	4615      	mov	r5, r2
 80086b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80086b4:	fb03 6711 	mls	r7, r3, r1, r6
 80086b8:	5dc7      	ldrb	r7, [r0, r7]
 80086ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086be:	4637      	mov	r7, r6
 80086c0:	42bb      	cmp	r3, r7
 80086c2:	460e      	mov	r6, r1
 80086c4:	d9f4      	bls.n	80086b0 <_printf_i+0x11c>
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d10b      	bne.n	80086e2 <_printf_i+0x14e>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	07de      	lsls	r6, r3, #31
 80086ce:	d508      	bpl.n	80086e2 <_printf_i+0x14e>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	6861      	ldr	r1, [r4, #4]
 80086d4:	4299      	cmp	r1, r3
 80086d6:	bfde      	ittt	le
 80086d8:	2330      	movle	r3, #48	; 0x30
 80086da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086e2:	1b52      	subs	r2, r2, r5
 80086e4:	6122      	str	r2, [r4, #16]
 80086e6:	464b      	mov	r3, r9
 80086e8:	4621      	mov	r1, r4
 80086ea:	4640      	mov	r0, r8
 80086ec:	f8cd a000 	str.w	sl, [sp]
 80086f0:	aa03      	add	r2, sp, #12
 80086f2:	f7ff fedf 	bl	80084b4 <_printf_common>
 80086f6:	3001      	adds	r0, #1
 80086f8:	d14c      	bne.n	8008794 <_printf_i+0x200>
 80086fa:	f04f 30ff 	mov.w	r0, #4294967295
 80086fe:	b004      	add	sp, #16
 8008700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008704:	4834      	ldr	r0, [pc, #208]	; (80087d8 <_printf_i+0x244>)
 8008706:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800870a:	6829      	ldr	r1, [r5, #0]
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008712:	6029      	str	r1, [r5, #0]
 8008714:	061d      	lsls	r5, r3, #24
 8008716:	d514      	bpl.n	8008742 <_printf_i+0x1ae>
 8008718:	07df      	lsls	r7, r3, #31
 800871a:	bf44      	itt	mi
 800871c:	f043 0320 	orrmi.w	r3, r3, #32
 8008720:	6023      	strmi	r3, [r4, #0]
 8008722:	b91e      	cbnz	r6, 800872c <_printf_i+0x198>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	f023 0320 	bic.w	r3, r3, #32
 800872a:	6023      	str	r3, [r4, #0]
 800872c:	2310      	movs	r3, #16
 800872e:	e7af      	b.n	8008690 <_printf_i+0xfc>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	f043 0320 	orr.w	r3, r3, #32
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	2378      	movs	r3, #120	; 0x78
 800873a:	4828      	ldr	r0, [pc, #160]	; (80087dc <_printf_i+0x248>)
 800873c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008740:	e7e3      	b.n	800870a <_printf_i+0x176>
 8008742:	0659      	lsls	r1, r3, #25
 8008744:	bf48      	it	mi
 8008746:	b2b6      	uxthmi	r6, r6
 8008748:	e7e6      	b.n	8008718 <_printf_i+0x184>
 800874a:	4615      	mov	r5, r2
 800874c:	e7bb      	b.n	80086c6 <_printf_i+0x132>
 800874e:	682b      	ldr	r3, [r5, #0]
 8008750:	6826      	ldr	r6, [r4, #0]
 8008752:	1d18      	adds	r0, r3, #4
 8008754:	6961      	ldr	r1, [r4, #20]
 8008756:	6028      	str	r0, [r5, #0]
 8008758:	0635      	lsls	r5, r6, #24
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	d501      	bpl.n	8008762 <_printf_i+0x1ce>
 800875e:	6019      	str	r1, [r3, #0]
 8008760:	e002      	b.n	8008768 <_printf_i+0x1d4>
 8008762:	0670      	lsls	r0, r6, #25
 8008764:	d5fb      	bpl.n	800875e <_printf_i+0x1ca>
 8008766:	8019      	strh	r1, [r3, #0]
 8008768:	2300      	movs	r3, #0
 800876a:	4615      	mov	r5, r2
 800876c:	6123      	str	r3, [r4, #16]
 800876e:	e7ba      	b.n	80086e6 <_printf_i+0x152>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	2100      	movs	r1, #0
 8008774:	1d1a      	adds	r2, r3, #4
 8008776:	602a      	str	r2, [r5, #0]
 8008778:	681d      	ldr	r5, [r3, #0]
 800877a:	6862      	ldr	r2, [r4, #4]
 800877c:	4628      	mov	r0, r5
 800877e:	f000 f8a3 	bl	80088c8 <memchr>
 8008782:	b108      	cbz	r0, 8008788 <_printf_i+0x1f4>
 8008784:	1b40      	subs	r0, r0, r5
 8008786:	6060      	str	r0, [r4, #4]
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	2300      	movs	r3, #0
 800878e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008792:	e7a8      	b.n	80086e6 <_printf_i+0x152>
 8008794:	462a      	mov	r2, r5
 8008796:	4649      	mov	r1, r9
 8008798:	4640      	mov	r0, r8
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	47d0      	blx	sl
 800879e:	3001      	adds	r0, #1
 80087a0:	d0ab      	beq.n	80086fa <_printf_i+0x166>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	079b      	lsls	r3, r3, #30
 80087a6:	d413      	bmi.n	80087d0 <_printf_i+0x23c>
 80087a8:	68e0      	ldr	r0, [r4, #12]
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	4298      	cmp	r0, r3
 80087ae:	bfb8      	it	lt
 80087b0:	4618      	movlt	r0, r3
 80087b2:	e7a4      	b.n	80086fe <_printf_i+0x16a>
 80087b4:	2301      	movs	r3, #1
 80087b6:	4632      	mov	r2, r6
 80087b8:	4649      	mov	r1, r9
 80087ba:	4640      	mov	r0, r8
 80087bc:	47d0      	blx	sl
 80087be:	3001      	adds	r0, #1
 80087c0:	d09b      	beq.n	80086fa <_printf_i+0x166>
 80087c2:	3501      	adds	r5, #1
 80087c4:	68e3      	ldr	r3, [r4, #12]
 80087c6:	9903      	ldr	r1, [sp, #12]
 80087c8:	1a5b      	subs	r3, r3, r1
 80087ca:	42ab      	cmp	r3, r5
 80087cc:	dcf2      	bgt.n	80087b4 <_printf_i+0x220>
 80087ce:	e7eb      	b.n	80087a8 <_printf_i+0x214>
 80087d0:	2500      	movs	r5, #0
 80087d2:	f104 0619 	add.w	r6, r4, #25
 80087d6:	e7f5      	b.n	80087c4 <_printf_i+0x230>
 80087d8:	08009a25 	.word	0x08009a25
 80087dc:	08009a36 	.word	0x08009a36

080087e0 <nan>:
 80087e0:	2000      	movs	r0, #0
 80087e2:	4901      	ldr	r1, [pc, #4]	; (80087e8 <nan+0x8>)
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	7ff80000 	.word	0x7ff80000

080087ec <_sbrk_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	2300      	movs	r3, #0
 80087f0:	4d05      	ldr	r5, [pc, #20]	; (8008808 <_sbrk_r+0x1c>)
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7f8 fbee 	bl	8000fd8 <_sbrk>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_sbrk_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_sbrk_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20001a0c 	.word	0x20001a0c

0800880c <nanf>:
 800880c:	4800      	ldr	r0, [pc, #0]	; (8008810 <nanf+0x4>)
 800880e:	4770      	bx	lr
 8008810:	7fc00000 	.word	0x7fc00000

08008814 <strncmp>:
 8008814:	4603      	mov	r3, r0
 8008816:	b510      	push	{r4, lr}
 8008818:	b172      	cbz	r2, 8008838 <strncmp+0x24>
 800881a:	3901      	subs	r1, #1
 800881c:	1884      	adds	r4, r0, r2
 800881e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008822:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008826:	4290      	cmp	r0, r2
 8008828:	d101      	bne.n	800882e <strncmp+0x1a>
 800882a:	42a3      	cmp	r3, r4
 800882c:	d101      	bne.n	8008832 <strncmp+0x1e>
 800882e:	1a80      	subs	r0, r0, r2
 8008830:	bd10      	pop	{r4, pc}
 8008832:	2800      	cmp	r0, #0
 8008834:	d1f3      	bne.n	800881e <strncmp+0xa>
 8008836:	e7fa      	b.n	800882e <strncmp+0x1a>
 8008838:	4610      	mov	r0, r2
 800883a:	e7f9      	b.n	8008830 <strncmp+0x1c>

0800883c <__ascii_wctomb>:
 800883c:	4603      	mov	r3, r0
 800883e:	4608      	mov	r0, r1
 8008840:	b141      	cbz	r1, 8008854 <__ascii_wctomb+0x18>
 8008842:	2aff      	cmp	r2, #255	; 0xff
 8008844:	d904      	bls.n	8008850 <__ascii_wctomb+0x14>
 8008846:	228a      	movs	r2, #138	; 0x8a
 8008848:	f04f 30ff 	mov.w	r0, #4294967295
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	4770      	bx	lr
 8008850:	2001      	movs	r0, #1
 8008852:	700a      	strb	r2, [r1, #0]
 8008854:	4770      	bx	lr
	...

08008858 <__assert_func>:
 8008858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800885a:	4614      	mov	r4, r2
 800885c:	461a      	mov	r2, r3
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <__assert_func+0x2c>)
 8008860:	4605      	mov	r5, r0
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68d8      	ldr	r0, [r3, #12]
 8008866:	b14c      	cbz	r4, 800887c <__assert_func+0x24>
 8008868:	4b07      	ldr	r3, [pc, #28]	; (8008888 <__assert_func+0x30>)
 800886a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800886e:	9100      	str	r1, [sp, #0]
 8008870:	462b      	mov	r3, r5
 8008872:	4906      	ldr	r1, [pc, #24]	; (800888c <__assert_func+0x34>)
 8008874:	f000 f80e 	bl	8008894 <fiprintf>
 8008878:	f000 face 	bl	8008e18 <abort>
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <__assert_func+0x38>)
 800887e:	461c      	mov	r4, r3
 8008880:	e7f3      	b.n	800886a <__assert_func+0x12>
 8008882:	bf00      	nop
 8008884:	200001d0 	.word	0x200001d0
 8008888:	08009a47 	.word	0x08009a47
 800888c:	08009a54 	.word	0x08009a54
 8008890:	0800951c 	.word	0x0800951c

08008894 <fiprintf>:
 8008894:	b40e      	push	{r1, r2, r3}
 8008896:	b503      	push	{r0, r1, lr}
 8008898:	4601      	mov	r1, r0
 800889a:	ab03      	add	r3, sp, #12
 800889c:	4805      	ldr	r0, [pc, #20]	; (80088b4 <fiprintf+0x20>)
 800889e:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a2:	6800      	ldr	r0, [r0, #0]
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	f000 f8c7 	bl	8008a38 <_vfiprintf_r>
 80088aa:	b002      	add	sp, #8
 80088ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b0:	b003      	add	sp, #12
 80088b2:	4770      	bx	lr
 80088b4:	200001d0 	.word	0x200001d0

080088b8 <malloc>:
 80088b8:	4b02      	ldr	r3, [pc, #8]	; (80088c4 <malloc+0xc>)
 80088ba:	4601      	mov	r1, r0
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	f7ff bc29 	b.w	8008114 <_malloc_r>
 80088c2:	bf00      	nop
 80088c4:	200001d0 	.word	0x200001d0

080088c8 <memchr>:
 80088c8:	4603      	mov	r3, r0
 80088ca:	b510      	push	{r4, lr}
 80088cc:	b2c9      	uxtb	r1, r1
 80088ce:	4402      	add	r2, r0
 80088d0:	4293      	cmp	r3, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	d101      	bne.n	80088da <memchr+0x12>
 80088d6:	2000      	movs	r0, #0
 80088d8:	e003      	b.n	80088e2 <memchr+0x1a>
 80088da:	7804      	ldrb	r4, [r0, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	428c      	cmp	r4, r1
 80088e0:	d1f6      	bne.n	80088d0 <memchr+0x8>
 80088e2:	bd10      	pop	{r4, pc}

080088e4 <__malloc_lock>:
 80088e4:	4801      	ldr	r0, [pc, #4]	; (80088ec <__malloc_lock+0x8>)
 80088e6:	f000 bc53 	b.w	8009190 <__retarget_lock_acquire_recursive>
 80088ea:	bf00      	nop
 80088ec:	20001a10 	.word	0x20001a10

080088f0 <__malloc_unlock>:
 80088f0:	4801      	ldr	r0, [pc, #4]	; (80088f8 <__malloc_unlock+0x8>)
 80088f2:	f000 bc4e 	b.w	8009192 <__retarget_lock_release_recursive>
 80088f6:	bf00      	nop
 80088f8:	20001a10 	.word	0x20001a10

080088fc <_free_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4605      	mov	r5, r0
 8008900:	2900      	cmp	r1, #0
 8008902:	d040      	beq.n	8008986 <_free_r+0x8a>
 8008904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008908:	1f0c      	subs	r4, r1, #4
 800890a:	2b00      	cmp	r3, #0
 800890c:	bfb8      	it	lt
 800890e:	18e4      	addlt	r4, r4, r3
 8008910:	f7ff ffe8 	bl	80088e4 <__malloc_lock>
 8008914:	4a1c      	ldr	r2, [pc, #112]	; (8008988 <_free_r+0x8c>)
 8008916:	6813      	ldr	r3, [r2, #0]
 8008918:	b933      	cbnz	r3, 8008928 <_free_r+0x2c>
 800891a:	6063      	str	r3, [r4, #4]
 800891c:	6014      	str	r4, [r2, #0]
 800891e:	4628      	mov	r0, r5
 8008920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008924:	f7ff bfe4 	b.w	80088f0 <__malloc_unlock>
 8008928:	42a3      	cmp	r3, r4
 800892a:	d908      	bls.n	800893e <_free_r+0x42>
 800892c:	6820      	ldr	r0, [r4, #0]
 800892e:	1821      	adds	r1, r4, r0
 8008930:	428b      	cmp	r3, r1
 8008932:	bf01      	itttt	eq
 8008934:	6819      	ldreq	r1, [r3, #0]
 8008936:	685b      	ldreq	r3, [r3, #4]
 8008938:	1809      	addeq	r1, r1, r0
 800893a:	6021      	streq	r1, [r4, #0]
 800893c:	e7ed      	b.n	800891a <_free_r+0x1e>
 800893e:	461a      	mov	r2, r3
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	b10b      	cbz	r3, 8008948 <_free_r+0x4c>
 8008944:	42a3      	cmp	r3, r4
 8008946:	d9fa      	bls.n	800893e <_free_r+0x42>
 8008948:	6811      	ldr	r1, [r2, #0]
 800894a:	1850      	adds	r0, r2, r1
 800894c:	42a0      	cmp	r0, r4
 800894e:	d10b      	bne.n	8008968 <_free_r+0x6c>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	4401      	add	r1, r0
 8008954:	1850      	adds	r0, r2, r1
 8008956:	4283      	cmp	r3, r0
 8008958:	6011      	str	r1, [r2, #0]
 800895a:	d1e0      	bne.n	800891e <_free_r+0x22>
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4401      	add	r1, r0
 8008962:	6011      	str	r1, [r2, #0]
 8008964:	6053      	str	r3, [r2, #4]
 8008966:	e7da      	b.n	800891e <_free_r+0x22>
 8008968:	d902      	bls.n	8008970 <_free_r+0x74>
 800896a:	230c      	movs	r3, #12
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	e7d6      	b.n	800891e <_free_r+0x22>
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	1821      	adds	r1, r4, r0
 8008974:	428b      	cmp	r3, r1
 8008976:	bf01      	itttt	eq
 8008978:	6819      	ldreq	r1, [r3, #0]
 800897a:	685b      	ldreq	r3, [r3, #4]
 800897c:	1809      	addeq	r1, r1, r0
 800897e:	6021      	streq	r1, [r4, #0]
 8008980:	6063      	str	r3, [r4, #4]
 8008982:	6054      	str	r4, [r2, #4]
 8008984:	e7cb      	b.n	800891e <_free_r+0x22>
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20001a04 	.word	0x20001a04

0800898c <_realloc_r>:
 800898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008990:	4680      	mov	r8, r0
 8008992:	4614      	mov	r4, r2
 8008994:	460e      	mov	r6, r1
 8008996:	b921      	cbnz	r1, 80089a2 <_realloc_r+0x16>
 8008998:	4611      	mov	r1, r2
 800899a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800899e:	f7ff bbb9 	b.w	8008114 <_malloc_r>
 80089a2:	b92a      	cbnz	r2, 80089b0 <_realloc_r+0x24>
 80089a4:	f7ff ffaa 	bl	80088fc <_free_r>
 80089a8:	4625      	mov	r5, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b0:	f000 fc56 	bl	8009260 <_malloc_usable_size_r>
 80089b4:	4284      	cmp	r4, r0
 80089b6:	4607      	mov	r7, r0
 80089b8:	d802      	bhi.n	80089c0 <_realloc_r+0x34>
 80089ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089be:	d812      	bhi.n	80089e6 <_realloc_r+0x5a>
 80089c0:	4621      	mov	r1, r4
 80089c2:	4640      	mov	r0, r8
 80089c4:	f7ff fba6 	bl	8008114 <_malloc_r>
 80089c8:	4605      	mov	r5, r0
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d0ed      	beq.n	80089aa <_realloc_r+0x1e>
 80089ce:	42bc      	cmp	r4, r7
 80089d0:	4622      	mov	r2, r4
 80089d2:	4631      	mov	r1, r6
 80089d4:	bf28      	it	cs
 80089d6:	463a      	movcs	r2, r7
 80089d8:	f7fe fea2 	bl	8007720 <memcpy>
 80089dc:	4631      	mov	r1, r6
 80089de:	4640      	mov	r0, r8
 80089e0:	f7ff ff8c 	bl	80088fc <_free_r>
 80089e4:	e7e1      	b.n	80089aa <_realloc_r+0x1e>
 80089e6:	4635      	mov	r5, r6
 80089e8:	e7df      	b.n	80089aa <_realloc_r+0x1e>

080089ea <__sfputc_r>:
 80089ea:	6893      	ldr	r3, [r2, #8]
 80089ec:	b410      	push	{r4}
 80089ee:	3b01      	subs	r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	6093      	str	r3, [r2, #8]
 80089f4:	da07      	bge.n	8008a06 <__sfputc_r+0x1c>
 80089f6:	6994      	ldr	r4, [r2, #24]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	db01      	blt.n	8008a00 <__sfputc_r+0x16>
 80089fc:	290a      	cmp	r1, #10
 80089fe:	d102      	bne.n	8008a06 <__sfputc_r+0x1c>
 8008a00:	bc10      	pop	{r4}
 8008a02:	f000 b949 	b.w	8008c98 <__swbuf_r>
 8008a06:	6813      	ldr	r3, [r2, #0]
 8008a08:	1c58      	adds	r0, r3, #1
 8008a0a:	6010      	str	r0, [r2, #0]
 8008a0c:	7019      	strb	r1, [r3, #0]
 8008a0e:	4608      	mov	r0, r1
 8008a10:	bc10      	pop	{r4}
 8008a12:	4770      	bx	lr

08008a14 <__sfputs_r>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	18d5      	adds	r5, r2, r3
 8008a1e:	42ac      	cmp	r4, r5
 8008a20:	d101      	bne.n	8008a26 <__sfputs_r+0x12>
 8008a22:	2000      	movs	r0, #0
 8008a24:	e007      	b.n	8008a36 <__sfputs_r+0x22>
 8008a26:	463a      	mov	r2, r7
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2e:	f7ff ffdc 	bl	80089ea <__sfputc_r>
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d1f3      	bne.n	8008a1e <__sfputs_r+0xa>
 8008a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a38 <_vfiprintf_r>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	460d      	mov	r5, r1
 8008a3e:	4614      	mov	r4, r2
 8008a40:	4698      	mov	r8, r3
 8008a42:	4606      	mov	r6, r0
 8008a44:	b09d      	sub	sp, #116	; 0x74
 8008a46:	b118      	cbz	r0, 8008a50 <_vfiprintf_r+0x18>
 8008a48:	6983      	ldr	r3, [r0, #24]
 8008a4a:	b90b      	cbnz	r3, 8008a50 <_vfiprintf_r+0x18>
 8008a4c:	f000 fb02 	bl	8009054 <__sinit>
 8008a50:	4b89      	ldr	r3, [pc, #548]	; (8008c78 <_vfiprintf_r+0x240>)
 8008a52:	429d      	cmp	r5, r3
 8008a54:	d11b      	bne.n	8008a8e <_vfiprintf_r+0x56>
 8008a56:	6875      	ldr	r5, [r6, #4]
 8008a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	d405      	bmi.n	8008a6a <_vfiprintf_r+0x32>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	059a      	lsls	r2, r3, #22
 8008a62:	d402      	bmi.n	8008a6a <_vfiprintf_r+0x32>
 8008a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a66:	f000 fb93 	bl	8009190 <__retarget_lock_acquire_recursive>
 8008a6a:	89ab      	ldrh	r3, [r5, #12]
 8008a6c:	071b      	lsls	r3, r3, #28
 8008a6e:	d501      	bpl.n	8008a74 <_vfiprintf_r+0x3c>
 8008a70:	692b      	ldr	r3, [r5, #16]
 8008a72:	b9eb      	cbnz	r3, 8008ab0 <_vfiprintf_r+0x78>
 8008a74:	4629      	mov	r1, r5
 8008a76:	4630      	mov	r0, r6
 8008a78:	f000 f960 	bl	8008d3c <__swsetup_r>
 8008a7c:	b1c0      	cbz	r0, 8008ab0 <_vfiprintf_r+0x78>
 8008a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a80:	07dc      	lsls	r4, r3, #31
 8008a82:	d50e      	bpl.n	8008aa2 <_vfiprintf_r+0x6a>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	b01d      	add	sp, #116	; 0x74
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8e:	4b7b      	ldr	r3, [pc, #492]	; (8008c7c <_vfiprintf_r+0x244>)
 8008a90:	429d      	cmp	r5, r3
 8008a92:	d101      	bne.n	8008a98 <_vfiprintf_r+0x60>
 8008a94:	68b5      	ldr	r5, [r6, #8]
 8008a96:	e7df      	b.n	8008a58 <_vfiprintf_r+0x20>
 8008a98:	4b79      	ldr	r3, [pc, #484]	; (8008c80 <_vfiprintf_r+0x248>)
 8008a9a:	429d      	cmp	r5, r3
 8008a9c:	bf08      	it	eq
 8008a9e:	68f5      	ldreq	r5, [r6, #12]
 8008aa0:	e7da      	b.n	8008a58 <_vfiprintf_r+0x20>
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	0598      	lsls	r0, r3, #22
 8008aa6:	d4ed      	bmi.n	8008a84 <_vfiprintf_r+0x4c>
 8008aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aaa:	f000 fb72 	bl	8009192 <__retarget_lock_release_recursive>
 8008aae:	e7e9      	b.n	8008a84 <_vfiprintf_r+0x4c>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aba:	2330      	movs	r3, #48	; 0x30
 8008abc:	f04f 0901 	mov.w	r9, #1
 8008ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ac4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008c84 <_vfiprintf_r+0x24c>
 8008ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008acc:	4623      	mov	r3, r4
 8008ace:	469a      	mov	sl, r3
 8008ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad4:	b10a      	cbz	r2, 8008ada <_vfiprintf_r+0xa2>
 8008ad6:	2a25      	cmp	r2, #37	; 0x25
 8008ad8:	d1f9      	bne.n	8008ace <_vfiprintf_r+0x96>
 8008ada:	ebba 0b04 	subs.w	fp, sl, r4
 8008ade:	d00b      	beq.n	8008af8 <_vfiprintf_r+0xc0>
 8008ae0:	465b      	mov	r3, fp
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7ff ff94 	bl	8008a14 <__sfputs_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	f000 80aa 	beq.w	8008c46 <_vfiprintf_r+0x20e>
 8008af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af4:	445a      	add	r2, fp
 8008af6:	9209      	str	r2, [sp, #36]	; 0x24
 8008af8:	f89a 3000 	ldrb.w	r3, [sl]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 80a2 	beq.w	8008c46 <_vfiprintf_r+0x20e>
 8008b02:	2300      	movs	r3, #0
 8008b04:	f04f 32ff 	mov.w	r2, #4294967295
 8008b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0c:	f10a 0a01 	add.w	sl, sl, #1
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	9307      	str	r3, [sp, #28]
 8008b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b18:	931a      	str	r3, [sp, #104]	; 0x68
 8008b1a:	4654      	mov	r4, sl
 8008b1c:	2205      	movs	r2, #5
 8008b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b22:	4858      	ldr	r0, [pc, #352]	; (8008c84 <_vfiprintf_r+0x24c>)
 8008b24:	f7ff fed0 	bl	80088c8 <memchr>
 8008b28:	9a04      	ldr	r2, [sp, #16]
 8008b2a:	b9d8      	cbnz	r0, 8008b64 <_vfiprintf_r+0x12c>
 8008b2c:	06d1      	lsls	r1, r2, #27
 8008b2e:	bf44      	itt	mi
 8008b30:	2320      	movmi	r3, #32
 8008b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b36:	0713      	lsls	r3, r2, #28
 8008b38:	bf44      	itt	mi
 8008b3a:	232b      	movmi	r3, #43	; 0x2b
 8008b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b40:	f89a 3000 	ldrb.w	r3, [sl]
 8008b44:	2b2a      	cmp	r3, #42	; 0x2a
 8008b46:	d015      	beq.n	8008b74 <_vfiprintf_r+0x13c>
 8008b48:	4654      	mov	r4, sl
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	f04f 0c0a 	mov.w	ip, #10
 8008b50:	9a07      	ldr	r2, [sp, #28]
 8008b52:	4621      	mov	r1, r4
 8008b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b58:	3b30      	subs	r3, #48	; 0x30
 8008b5a:	2b09      	cmp	r3, #9
 8008b5c:	d94e      	bls.n	8008bfc <_vfiprintf_r+0x1c4>
 8008b5e:	b1b0      	cbz	r0, 8008b8e <_vfiprintf_r+0x156>
 8008b60:	9207      	str	r2, [sp, #28]
 8008b62:	e014      	b.n	8008b8e <_vfiprintf_r+0x156>
 8008b64:	eba0 0308 	sub.w	r3, r0, r8
 8008b68:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	46a2      	mov	sl, r4
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	e7d2      	b.n	8008b1a <_vfiprintf_r+0xe2>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	1d19      	adds	r1, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	9103      	str	r1, [sp, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfbb      	ittet	lt
 8008b80:	425b      	neglt	r3, r3
 8008b82:	f042 0202 	orrlt.w	r2, r2, #2
 8008b86:	9307      	strge	r3, [sp, #28]
 8008b88:	9307      	strlt	r3, [sp, #28]
 8008b8a:	bfb8      	it	lt
 8008b8c:	9204      	strlt	r2, [sp, #16]
 8008b8e:	7823      	ldrb	r3, [r4, #0]
 8008b90:	2b2e      	cmp	r3, #46	; 0x2e
 8008b92:	d10c      	bne.n	8008bae <_vfiprintf_r+0x176>
 8008b94:	7863      	ldrb	r3, [r4, #1]
 8008b96:	2b2a      	cmp	r3, #42	; 0x2a
 8008b98:	d135      	bne.n	8008c06 <_vfiprintf_r+0x1ce>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	3402      	adds	r4, #2
 8008b9e:	1d1a      	adds	r2, r3, #4
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	9203      	str	r2, [sp, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	bfb8      	it	lt
 8008ba8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bac:	9305      	str	r3, [sp, #20]
 8008bae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008c88 <_vfiprintf_r+0x250>
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	4650      	mov	r0, sl
 8008bb6:	7821      	ldrb	r1, [r4, #0]
 8008bb8:	f7ff fe86 	bl	80088c8 <memchr>
 8008bbc:	b140      	cbz	r0, 8008bd0 <_vfiprintf_r+0x198>
 8008bbe:	2340      	movs	r3, #64	; 0x40
 8008bc0:	eba0 000a 	sub.w	r0, r0, sl
 8008bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	3401      	adds	r4, #1
 8008bcc:	4303      	orrs	r3, r0
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd4:	2206      	movs	r2, #6
 8008bd6:	482d      	ldr	r0, [pc, #180]	; (8008c8c <_vfiprintf_r+0x254>)
 8008bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bdc:	f7ff fe74 	bl	80088c8 <memchr>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d03f      	beq.n	8008c64 <_vfiprintf_r+0x22c>
 8008be4:	4b2a      	ldr	r3, [pc, #168]	; (8008c90 <_vfiprintf_r+0x258>)
 8008be6:	bb1b      	cbnz	r3, 8008c30 <_vfiprintf_r+0x1f8>
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	3307      	adds	r3, #7
 8008bec:	f023 0307 	bic.w	r3, r3, #7
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	9303      	str	r3, [sp, #12]
 8008bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf6:	443b      	add	r3, r7
 8008bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfa:	e767      	b.n	8008acc <_vfiprintf_r+0x94>
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	2001      	movs	r0, #1
 8008c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c04:	e7a5      	b.n	8008b52 <_vfiprintf_r+0x11a>
 8008c06:	2300      	movs	r3, #0
 8008c08:	f04f 0c0a 	mov.w	ip, #10
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	3401      	adds	r4, #1
 8008c10:	9305      	str	r3, [sp, #20]
 8008c12:	4620      	mov	r0, r4
 8008c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c18:	3a30      	subs	r2, #48	; 0x30
 8008c1a:	2a09      	cmp	r2, #9
 8008c1c:	d903      	bls.n	8008c26 <_vfiprintf_r+0x1ee>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0c5      	beq.n	8008bae <_vfiprintf_r+0x176>
 8008c22:	9105      	str	r1, [sp, #20]
 8008c24:	e7c3      	b.n	8008bae <_vfiprintf_r+0x176>
 8008c26:	4604      	mov	r4, r0
 8008c28:	2301      	movs	r3, #1
 8008c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c2e:	e7f0      	b.n	8008c12 <_vfiprintf_r+0x1da>
 8008c30:	ab03      	add	r3, sp, #12
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	462a      	mov	r2, r5
 8008c36:	4630      	mov	r0, r6
 8008c38:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <_vfiprintf_r+0x25c>)
 8008c3a:	a904      	add	r1, sp, #16
 8008c3c:	f3af 8000 	nop.w
 8008c40:	4607      	mov	r7, r0
 8008c42:	1c78      	adds	r0, r7, #1
 8008c44:	d1d6      	bne.n	8008bf4 <_vfiprintf_r+0x1bc>
 8008c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c48:	07d9      	lsls	r1, r3, #31
 8008c4a:	d405      	bmi.n	8008c58 <_vfiprintf_r+0x220>
 8008c4c:	89ab      	ldrh	r3, [r5, #12]
 8008c4e:	059a      	lsls	r2, r3, #22
 8008c50:	d402      	bmi.n	8008c58 <_vfiprintf_r+0x220>
 8008c52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c54:	f000 fa9d 	bl	8009192 <__retarget_lock_release_recursive>
 8008c58:	89ab      	ldrh	r3, [r5, #12]
 8008c5a:	065b      	lsls	r3, r3, #25
 8008c5c:	f53f af12 	bmi.w	8008a84 <_vfiprintf_r+0x4c>
 8008c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c62:	e711      	b.n	8008a88 <_vfiprintf_r+0x50>
 8008c64:	ab03      	add	r3, sp, #12
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	462a      	mov	r2, r5
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <_vfiprintf_r+0x25c>)
 8008c6e:	a904      	add	r1, sp, #16
 8008c70:	f7ff fc90 	bl	8008594 <_printf_i>
 8008c74:	e7e4      	b.n	8008c40 <_vfiprintf_r+0x208>
 8008c76:	bf00      	nop
 8008c78:	08009aa4 	.word	0x08009aa4
 8008c7c:	08009ac4 	.word	0x08009ac4
 8008c80:	08009a84 	.word	0x08009a84
 8008c84:	08009a14 	.word	0x08009a14
 8008c88:	08009a1a 	.word	0x08009a1a
 8008c8c:	08009a1e 	.word	0x08009a1e
 8008c90:	00000000 	.word	0x00000000
 8008c94:	08008a15 	.word	0x08008a15

08008c98 <__swbuf_r>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	460e      	mov	r6, r1
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	b118      	cbz	r0, 8008caa <__swbuf_r+0x12>
 8008ca2:	6983      	ldr	r3, [r0, #24]
 8008ca4:	b90b      	cbnz	r3, 8008caa <__swbuf_r+0x12>
 8008ca6:	f000 f9d5 	bl	8009054 <__sinit>
 8008caa:	4b21      	ldr	r3, [pc, #132]	; (8008d30 <__swbuf_r+0x98>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	d12b      	bne.n	8008d08 <__swbuf_r+0x70>
 8008cb0:	686c      	ldr	r4, [r5, #4]
 8008cb2:	69a3      	ldr	r3, [r4, #24]
 8008cb4:	60a3      	str	r3, [r4, #8]
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	071a      	lsls	r2, r3, #28
 8008cba:	d52f      	bpl.n	8008d1c <__swbuf_r+0x84>
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	b36b      	cbz	r3, 8008d1c <__swbuf_r+0x84>
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	6820      	ldr	r0, [r4, #0]
 8008cc4:	b2f6      	uxtb	r6, r6
 8008cc6:	1ac0      	subs	r0, r0, r3
 8008cc8:	6963      	ldr	r3, [r4, #20]
 8008cca:	4637      	mov	r7, r6
 8008ccc:	4283      	cmp	r3, r0
 8008cce:	dc04      	bgt.n	8008cda <__swbuf_r+0x42>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 f92a 	bl	8008f2c <_fflush_r>
 8008cd8:	bb30      	cbnz	r0, 8008d28 <__swbuf_r+0x90>
 8008cda:	68a3      	ldr	r3, [r4, #8]
 8008cdc:	3001      	adds	r0, #1
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	60a3      	str	r3, [r4, #8]
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	6022      	str	r2, [r4, #0]
 8008ce8:	701e      	strb	r6, [r3, #0]
 8008cea:	6963      	ldr	r3, [r4, #20]
 8008cec:	4283      	cmp	r3, r0
 8008cee:	d004      	beq.n	8008cfa <__swbuf_r+0x62>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	07db      	lsls	r3, r3, #31
 8008cf4:	d506      	bpl.n	8008d04 <__swbuf_r+0x6c>
 8008cf6:	2e0a      	cmp	r6, #10
 8008cf8:	d104      	bne.n	8008d04 <__swbuf_r+0x6c>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f000 f915 	bl	8008f2c <_fflush_r>
 8008d02:	b988      	cbnz	r0, 8008d28 <__swbuf_r+0x90>
 8008d04:	4638      	mov	r0, r7
 8008d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d08:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <__swbuf_r+0x9c>)
 8008d0a:	429c      	cmp	r4, r3
 8008d0c:	d101      	bne.n	8008d12 <__swbuf_r+0x7a>
 8008d0e:	68ac      	ldr	r4, [r5, #8]
 8008d10:	e7cf      	b.n	8008cb2 <__swbuf_r+0x1a>
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <__swbuf_r+0xa0>)
 8008d14:	429c      	cmp	r4, r3
 8008d16:	bf08      	it	eq
 8008d18:	68ec      	ldreq	r4, [r5, #12]
 8008d1a:	e7ca      	b.n	8008cb2 <__swbuf_r+0x1a>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 f80c 	bl	8008d3c <__swsetup_r>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d0cb      	beq.n	8008cc0 <__swbuf_r+0x28>
 8008d28:	f04f 37ff 	mov.w	r7, #4294967295
 8008d2c:	e7ea      	b.n	8008d04 <__swbuf_r+0x6c>
 8008d2e:	bf00      	nop
 8008d30:	08009aa4 	.word	0x08009aa4
 8008d34:	08009ac4 	.word	0x08009ac4
 8008d38:	08009a84 	.word	0x08009a84

08008d3c <__swsetup_r>:
 8008d3c:	4b32      	ldr	r3, [pc, #200]	; (8008e08 <__swsetup_r+0xcc>)
 8008d3e:	b570      	push	{r4, r5, r6, lr}
 8008d40:	681d      	ldr	r5, [r3, #0]
 8008d42:	4606      	mov	r6, r0
 8008d44:	460c      	mov	r4, r1
 8008d46:	b125      	cbz	r5, 8008d52 <__swsetup_r+0x16>
 8008d48:	69ab      	ldr	r3, [r5, #24]
 8008d4a:	b913      	cbnz	r3, 8008d52 <__swsetup_r+0x16>
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 f981 	bl	8009054 <__sinit>
 8008d52:	4b2e      	ldr	r3, [pc, #184]	; (8008e0c <__swsetup_r+0xd0>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	d10f      	bne.n	8008d78 <__swsetup_r+0x3c>
 8008d58:	686c      	ldr	r4, [r5, #4]
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d60:	0719      	lsls	r1, r3, #28
 8008d62:	d42c      	bmi.n	8008dbe <__swsetup_r+0x82>
 8008d64:	06dd      	lsls	r5, r3, #27
 8008d66:	d411      	bmi.n	8008d8c <__swsetup_r+0x50>
 8008d68:	2309      	movs	r3, #9
 8008d6a:	6033      	str	r3, [r6, #0]
 8008d6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	e03e      	b.n	8008df6 <__swsetup_r+0xba>
 8008d78:	4b25      	ldr	r3, [pc, #148]	; (8008e10 <__swsetup_r+0xd4>)
 8008d7a:	429c      	cmp	r4, r3
 8008d7c:	d101      	bne.n	8008d82 <__swsetup_r+0x46>
 8008d7e:	68ac      	ldr	r4, [r5, #8]
 8008d80:	e7eb      	b.n	8008d5a <__swsetup_r+0x1e>
 8008d82:	4b24      	ldr	r3, [pc, #144]	; (8008e14 <__swsetup_r+0xd8>)
 8008d84:	429c      	cmp	r4, r3
 8008d86:	bf08      	it	eq
 8008d88:	68ec      	ldreq	r4, [r5, #12]
 8008d8a:	e7e6      	b.n	8008d5a <__swsetup_r+0x1e>
 8008d8c:	0758      	lsls	r0, r3, #29
 8008d8e:	d512      	bpl.n	8008db6 <__swsetup_r+0x7a>
 8008d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d92:	b141      	cbz	r1, 8008da6 <__swsetup_r+0x6a>
 8008d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	d002      	beq.n	8008da2 <__swsetup_r+0x66>
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff fdad 	bl	80088fc <_free_r>
 8008da2:	2300      	movs	r3, #0
 8008da4:	6363      	str	r3, [r4, #52]	; 0x34
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dac:	81a3      	strh	r3, [r4, #12]
 8008dae:	2300      	movs	r3, #0
 8008db0:	6063      	str	r3, [r4, #4]
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	f043 0308 	orr.w	r3, r3, #8
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	b94b      	cbnz	r3, 8008dd6 <__swsetup_r+0x9a>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dcc:	d003      	beq.n	8008dd6 <__swsetup_r+0x9a>
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 fa05 	bl	80091e0 <__smakebuf_r>
 8008dd6:	89a0      	ldrh	r0, [r4, #12]
 8008dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ddc:	f010 0301 	ands.w	r3, r0, #1
 8008de0:	d00a      	beq.n	8008df8 <__swsetup_r+0xbc>
 8008de2:	2300      	movs	r3, #0
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	6963      	ldr	r3, [r4, #20]
 8008de8:	425b      	negs	r3, r3
 8008dea:	61a3      	str	r3, [r4, #24]
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	b943      	cbnz	r3, 8008e02 <__swsetup_r+0xc6>
 8008df0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008df4:	d1ba      	bne.n	8008d6c <__swsetup_r+0x30>
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	0781      	lsls	r1, r0, #30
 8008dfa:	bf58      	it	pl
 8008dfc:	6963      	ldrpl	r3, [r4, #20]
 8008dfe:	60a3      	str	r3, [r4, #8]
 8008e00:	e7f4      	b.n	8008dec <__swsetup_r+0xb0>
 8008e02:	2000      	movs	r0, #0
 8008e04:	e7f7      	b.n	8008df6 <__swsetup_r+0xba>
 8008e06:	bf00      	nop
 8008e08:	200001d0 	.word	0x200001d0
 8008e0c:	08009aa4 	.word	0x08009aa4
 8008e10:	08009ac4 	.word	0x08009ac4
 8008e14:	08009a84 	.word	0x08009a84

08008e18 <abort>:
 8008e18:	2006      	movs	r0, #6
 8008e1a:	b508      	push	{r3, lr}
 8008e1c:	f000 fa50 	bl	80092c0 <raise>
 8008e20:	2001      	movs	r0, #1
 8008e22:	f7f8 f8ab 	bl	8000f7c <_exit>
	...

08008e28 <__sflush_r>:
 8008e28:	898a      	ldrh	r2, [r1, #12]
 8008e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	0710      	lsls	r0, r2, #28
 8008e30:	460c      	mov	r4, r1
 8008e32:	d457      	bmi.n	8008ee4 <__sflush_r+0xbc>
 8008e34:	684b      	ldr	r3, [r1, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dc04      	bgt.n	8008e44 <__sflush_r+0x1c>
 8008e3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dc01      	bgt.n	8008e44 <__sflush_r+0x1c>
 8008e40:	2000      	movs	r0, #0
 8008e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	d0fa      	beq.n	8008e40 <__sflush_r+0x18>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e50:	682f      	ldr	r7, [r5, #0]
 8008e52:	602b      	str	r3, [r5, #0]
 8008e54:	d032      	beq.n	8008ebc <__sflush_r+0x94>
 8008e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	075a      	lsls	r2, r3, #29
 8008e5c:	d505      	bpl.n	8008e6a <__sflush_r+0x42>
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	1ac0      	subs	r0, r0, r3
 8008e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e64:	b10b      	cbz	r3, 8008e6a <__sflush_r+0x42>
 8008e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e68:	1ac0      	subs	r0, r0, r3
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e70:	4628      	mov	r0, r5
 8008e72:	6a21      	ldr	r1, [r4, #32]
 8008e74:	47b0      	blx	r6
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	d106      	bne.n	8008e8a <__sflush_r+0x62>
 8008e7c:	6829      	ldr	r1, [r5, #0]
 8008e7e:	291d      	cmp	r1, #29
 8008e80:	d82c      	bhi.n	8008edc <__sflush_r+0xb4>
 8008e82:	4a29      	ldr	r2, [pc, #164]	; (8008f28 <__sflush_r+0x100>)
 8008e84:	40ca      	lsrs	r2, r1
 8008e86:	07d6      	lsls	r6, r2, #31
 8008e88:	d528      	bpl.n	8008edc <__sflush_r+0xb4>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	6062      	str	r2, [r4, #4]
 8008e8e:	6922      	ldr	r2, [r4, #16]
 8008e90:	04d9      	lsls	r1, r3, #19
 8008e92:	6022      	str	r2, [r4, #0]
 8008e94:	d504      	bpl.n	8008ea0 <__sflush_r+0x78>
 8008e96:	1c42      	adds	r2, r0, #1
 8008e98:	d101      	bne.n	8008e9e <__sflush_r+0x76>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	b903      	cbnz	r3, 8008ea0 <__sflush_r+0x78>
 8008e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8008ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ea2:	602f      	str	r7, [r5, #0]
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d0cb      	beq.n	8008e40 <__sflush_r+0x18>
 8008ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eac:	4299      	cmp	r1, r3
 8008eae:	d002      	beq.n	8008eb6 <__sflush_r+0x8e>
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f7ff fd23 	bl	80088fc <_free_r>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8008eba:	e7c2      	b.n	8008e42 <__sflush_r+0x1a>
 8008ebc:	6a21      	ldr	r1, [r4, #32]
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	47b0      	blx	r6
 8008ec4:	1c41      	adds	r1, r0, #1
 8008ec6:	d1c7      	bne.n	8008e58 <__sflush_r+0x30>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0c4      	beq.n	8008e58 <__sflush_r+0x30>
 8008ece:	2b1d      	cmp	r3, #29
 8008ed0:	d001      	beq.n	8008ed6 <__sflush_r+0xae>
 8008ed2:	2b16      	cmp	r3, #22
 8008ed4:	d101      	bne.n	8008eda <__sflush_r+0xb2>
 8008ed6:	602f      	str	r7, [r5, #0]
 8008ed8:	e7b2      	b.n	8008e40 <__sflush_r+0x18>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee0:	81a3      	strh	r3, [r4, #12]
 8008ee2:	e7ae      	b.n	8008e42 <__sflush_r+0x1a>
 8008ee4:	690f      	ldr	r7, [r1, #16]
 8008ee6:	2f00      	cmp	r7, #0
 8008ee8:	d0aa      	beq.n	8008e40 <__sflush_r+0x18>
 8008eea:	0793      	lsls	r3, r2, #30
 8008eec:	bf18      	it	ne
 8008eee:	2300      	movne	r3, #0
 8008ef0:	680e      	ldr	r6, [r1, #0]
 8008ef2:	bf08      	it	eq
 8008ef4:	694b      	ldreq	r3, [r1, #20]
 8008ef6:	1bf6      	subs	r6, r6, r7
 8008ef8:	600f      	str	r7, [r1, #0]
 8008efa:	608b      	str	r3, [r1, #8]
 8008efc:	2e00      	cmp	r6, #0
 8008efe:	dd9f      	ble.n	8008e40 <__sflush_r+0x18>
 8008f00:	4633      	mov	r3, r6
 8008f02:	463a      	mov	r2, r7
 8008f04:	4628      	mov	r0, r5
 8008f06:	6a21      	ldr	r1, [r4, #32]
 8008f08:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008f0c:	47e0      	blx	ip
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	dc06      	bgt.n	8008f20 <__sflush_r+0xf8>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	e790      	b.n	8008e42 <__sflush_r+0x1a>
 8008f20:	4407      	add	r7, r0
 8008f22:	1a36      	subs	r6, r6, r0
 8008f24:	e7ea      	b.n	8008efc <__sflush_r+0xd4>
 8008f26:	bf00      	nop
 8008f28:	20400001 	.word	0x20400001

08008f2c <_fflush_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	690b      	ldr	r3, [r1, #16]
 8008f30:	4605      	mov	r5, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	b913      	cbnz	r3, 8008f3c <_fflush_r+0x10>
 8008f36:	2500      	movs	r5, #0
 8008f38:	4628      	mov	r0, r5
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	b118      	cbz	r0, 8008f46 <_fflush_r+0x1a>
 8008f3e:	6983      	ldr	r3, [r0, #24]
 8008f40:	b90b      	cbnz	r3, 8008f46 <_fflush_r+0x1a>
 8008f42:	f000 f887 	bl	8009054 <__sinit>
 8008f46:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <_fflush_r+0x6c>)
 8008f48:	429c      	cmp	r4, r3
 8008f4a:	d11b      	bne.n	8008f84 <_fflush_r+0x58>
 8008f4c:	686c      	ldr	r4, [r5, #4]
 8008f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0ef      	beq.n	8008f36 <_fflush_r+0xa>
 8008f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f58:	07d0      	lsls	r0, r2, #31
 8008f5a:	d404      	bmi.n	8008f66 <_fflush_r+0x3a>
 8008f5c:	0599      	lsls	r1, r3, #22
 8008f5e:	d402      	bmi.n	8008f66 <_fflush_r+0x3a>
 8008f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f62:	f000 f915 	bl	8009190 <__retarget_lock_acquire_recursive>
 8008f66:	4628      	mov	r0, r5
 8008f68:	4621      	mov	r1, r4
 8008f6a:	f7ff ff5d 	bl	8008e28 <__sflush_r>
 8008f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f70:	4605      	mov	r5, r0
 8008f72:	07da      	lsls	r2, r3, #31
 8008f74:	d4e0      	bmi.n	8008f38 <_fflush_r+0xc>
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	059b      	lsls	r3, r3, #22
 8008f7a:	d4dd      	bmi.n	8008f38 <_fflush_r+0xc>
 8008f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7e:	f000 f908 	bl	8009192 <__retarget_lock_release_recursive>
 8008f82:	e7d9      	b.n	8008f38 <_fflush_r+0xc>
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <_fflush_r+0x70>)
 8008f86:	429c      	cmp	r4, r3
 8008f88:	d101      	bne.n	8008f8e <_fflush_r+0x62>
 8008f8a:	68ac      	ldr	r4, [r5, #8]
 8008f8c:	e7df      	b.n	8008f4e <_fflush_r+0x22>
 8008f8e:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <_fflush_r+0x74>)
 8008f90:	429c      	cmp	r4, r3
 8008f92:	bf08      	it	eq
 8008f94:	68ec      	ldreq	r4, [r5, #12]
 8008f96:	e7da      	b.n	8008f4e <_fflush_r+0x22>
 8008f98:	08009aa4 	.word	0x08009aa4
 8008f9c:	08009ac4 	.word	0x08009ac4
 8008fa0:	08009a84 	.word	0x08009a84

08008fa4 <std>:
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	e9c0 3300 	strd	r3, r3, [r0]
 8008fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fb2:	6083      	str	r3, [r0, #8]
 8008fb4:	8181      	strh	r1, [r0, #12]
 8008fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8008fb8:	81c2      	strh	r2, [r0, #14]
 8008fba:	6183      	str	r3, [r0, #24]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	2208      	movs	r2, #8
 8008fc0:	305c      	adds	r0, #92	; 0x5c
 8008fc2:	f7fd f8e5 	bl	8006190 <memset>
 8008fc6:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <std+0x38>)
 8008fc8:	6224      	str	r4, [r4, #32]
 8008fca:	6263      	str	r3, [r4, #36]	; 0x24
 8008fcc:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <std+0x3c>)
 8008fce:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fd0:	4b04      	ldr	r3, [pc, #16]	; (8008fe4 <std+0x40>)
 8008fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fd4:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <std+0x44>)
 8008fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8008fd8:	bd10      	pop	{r4, pc}
 8008fda:	bf00      	nop
 8008fdc:	080092f9 	.word	0x080092f9
 8008fe0:	0800931b 	.word	0x0800931b
 8008fe4:	08009353 	.word	0x08009353
 8008fe8:	08009377 	.word	0x08009377

08008fec <_cleanup_r>:
 8008fec:	4901      	ldr	r1, [pc, #4]	; (8008ff4 <_cleanup_r+0x8>)
 8008fee:	f000 b8af 	b.w	8009150 <_fwalk_reent>
 8008ff2:	bf00      	nop
 8008ff4:	08008f2d 	.word	0x08008f2d

08008ff8 <__sfmoreglue>:
 8008ff8:	2268      	movs	r2, #104	; 0x68
 8008ffa:	b570      	push	{r4, r5, r6, lr}
 8008ffc:	1e4d      	subs	r5, r1, #1
 8008ffe:	4355      	muls	r5, r2
 8009000:	460e      	mov	r6, r1
 8009002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009006:	f7ff f885 	bl	8008114 <_malloc_r>
 800900a:	4604      	mov	r4, r0
 800900c:	b140      	cbz	r0, 8009020 <__sfmoreglue+0x28>
 800900e:	2100      	movs	r1, #0
 8009010:	e9c0 1600 	strd	r1, r6, [r0]
 8009014:	300c      	adds	r0, #12
 8009016:	60a0      	str	r0, [r4, #8]
 8009018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800901c:	f7fd f8b8 	bl	8006190 <memset>
 8009020:	4620      	mov	r0, r4
 8009022:	bd70      	pop	{r4, r5, r6, pc}

08009024 <__sfp_lock_acquire>:
 8009024:	4801      	ldr	r0, [pc, #4]	; (800902c <__sfp_lock_acquire+0x8>)
 8009026:	f000 b8b3 	b.w	8009190 <__retarget_lock_acquire_recursive>
 800902a:	bf00      	nop
 800902c:	20001a11 	.word	0x20001a11

08009030 <__sfp_lock_release>:
 8009030:	4801      	ldr	r0, [pc, #4]	; (8009038 <__sfp_lock_release+0x8>)
 8009032:	f000 b8ae 	b.w	8009192 <__retarget_lock_release_recursive>
 8009036:	bf00      	nop
 8009038:	20001a11 	.word	0x20001a11

0800903c <__sinit_lock_acquire>:
 800903c:	4801      	ldr	r0, [pc, #4]	; (8009044 <__sinit_lock_acquire+0x8>)
 800903e:	f000 b8a7 	b.w	8009190 <__retarget_lock_acquire_recursive>
 8009042:	bf00      	nop
 8009044:	20001a12 	.word	0x20001a12

08009048 <__sinit_lock_release>:
 8009048:	4801      	ldr	r0, [pc, #4]	; (8009050 <__sinit_lock_release+0x8>)
 800904a:	f000 b8a2 	b.w	8009192 <__retarget_lock_release_recursive>
 800904e:	bf00      	nop
 8009050:	20001a12 	.word	0x20001a12

08009054 <__sinit>:
 8009054:	b510      	push	{r4, lr}
 8009056:	4604      	mov	r4, r0
 8009058:	f7ff fff0 	bl	800903c <__sinit_lock_acquire>
 800905c:	69a3      	ldr	r3, [r4, #24]
 800905e:	b11b      	cbz	r3, 8009068 <__sinit+0x14>
 8009060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009064:	f7ff bff0 	b.w	8009048 <__sinit_lock_release>
 8009068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800906c:	6523      	str	r3, [r4, #80]	; 0x50
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <__sinit+0x68>)
 8009070:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <__sinit+0x6c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	62a2      	str	r2, [r4, #40]	; 0x28
 8009076:	42a3      	cmp	r3, r4
 8009078:	bf08      	it	eq
 800907a:	2301      	moveq	r3, #1
 800907c:	4620      	mov	r0, r4
 800907e:	bf08      	it	eq
 8009080:	61a3      	streq	r3, [r4, #24]
 8009082:	f000 f81f 	bl	80090c4 <__sfp>
 8009086:	6060      	str	r0, [r4, #4]
 8009088:	4620      	mov	r0, r4
 800908a:	f000 f81b 	bl	80090c4 <__sfp>
 800908e:	60a0      	str	r0, [r4, #8]
 8009090:	4620      	mov	r0, r4
 8009092:	f000 f817 	bl	80090c4 <__sfp>
 8009096:	2200      	movs	r2, #0
 8009098:	2104      	movs	r1, #4
 800909a:	60e0      	str	r0, [r4, #12]
 800909c:	6860      	ldr	r0, [r4, #4]
 800909e:	f7ff ff81 	bl	8008fa4 <std>
 80090a2:	2201      	movs	r2, #1
 80090a4:	2109      	movs	r1, #9
 80090a6:	68a0      	ldr	r0, [r4, #8]
 80090a8:	f7ff ff7c 	bl	8008fa4 <std>
 80090ac:	2202      	movs	r2, #2
 80090ae:	2112      	movs	r1, #18
 80090b0:	68e0      	ldr	r0, [r4, #12]
 80090b2:	f7ff ff77 	bl	8008fa4 <std>
 80090b6:	2301      	movs	r3, #1
 80090b8:	61a3      	str	r3, [r4, #24]
 80090ba:	e7d1      	b.n	8009060 <__sinit+0xc>
 80090bc:	080096b8 	.word	0x080096b8
 80090c0:	08008fed 	.word	0x08008fed

080090c4 <__sfp>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	4607      	mov	r7, r0
 80090c8:	f7ff ffac 	bl	8009024 <__sfp_lock_acquire>
 80090cc:	4b1e      	ldr	r3, [pc, #120]	; (8009148 <__sfp+0x84>)
 80090ce:	681e      	ldr	r6, [r3, #0]
 80090d0:	69b3      	ldr	r3, [r6, #24]
 80090d2:	b913      	cbnz	r3, 80090da <__sfp+0x16>
 80090d4:	4630      	mov	r0, r6
 80090d6:	f7ff ffbd 	bl	8009054 <__sinit>
 80090da:	3648      	adds	r6, #72	; 0x48
 80090dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	d503      	bpl.n	80090ec <__sfp+0x28>
 80090e4:	6833      	ldr	r3, [r6, #0]
 80090e6:	b30b      	cbz	r3, 800912c <__sfp+0x68>
 80090e8:	6836      	ldr	r6, [r6, #0]
 80090ea:	e7f7      	b.n	80090dc <__sfp+0x18>
 80090ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090f0:	b9d5      	cbnz	r5, 8009128 <__sfp+0x64>
 80090f2:	4b16      	ldr	r3, [pc, #88]	; (800914c <__sfp+0x88>)
 80090f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090f8:	60e3      	str	r3, [r4, #12]
 80090fa:	6665      	str	r5, [r4, #100]	; 0x64
 80090fc:	f000 f847 	bl	800918e <__retarget_lock_init_recursive>
 8009100:	f7ff ff96 	bl	8009030 <__sfp_lock_release>
 8009104:	2208      	movs	r2, #8
 8009106:	4629      	mov	r1, r5
 8009108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800910c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009110:	6025      	str	r5, [r4, #0]
 8009112:	61a5      	str	r5, [r4, #24]
 8009114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009118:	f7fd f83a 	bl	8006190 <memset>
 800911c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009124:	4620      	mov	r0, r4
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009128:	3468      	adds	r4, #104	; 0x68
 800912a:	e7d9      	b.n	80090e0 <__sfp+0x1c>
 800912c:	2104      	movs	r1, #4
 800912e:	4638      	mov	r0, r7
 8009130:	f7ff ff62 	bl	8008ff8 <__sfmoreglue>
 8009134:	4604      	mov	r4, r0
 8009136:	6030      	str	r0, [r6, #0]
 8009138:	2800      	cmp	r0, #0
 800913a:	d1d5      	bne.n	80090e8 <__sfp+0x24>
 800913c:	f7ff ff78 	bl	8009030 <__sfp_lock_release>
 8009140:	230c      	movs	r3, #12
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	e7ee      	b.n	8009124 <__sfp+0x60>
 8009146:	bf00      	nop
 8009148:	080096b8 	.word	0x080096b8
 800914c:	ffff0001 	.word	0xffff0001

08009150 <_fwalk_reent>:
 8009150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009154:	4606      	mov	r6, r0
 8009156:	4688      	mov	r8, r1
 8009158:	2700      	movs	r7, #0
 800915a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800915e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009162:	f1b9 0901 	subs.w	r9, r9, #1
 8009166:	d505      	bpl.n	8009174 <_fwalk_reent+0x24>
 8009168:	6824      	ldr	r4, [r4, #0]
 800916a:	2c00      	cmp	r4, #0
 800916c:	d1f7      	bne.n	800915e <_fwalk_reent+0xe>
 800916e:	4638      	mov	r0, r7
 8009170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009174:	89ab      	ldrh	r3, [r5, #12]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d907      	bls.n	800918a <_fwalk_reent+0x3a>
 800917a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800917e:	3301      	adds	r3, #1
 8009180:	d003      	beq.n	800918a <_fwalk_reent+0x3a>
 8009182:	4629      	mov	r1, r5
 8009184:	4630      	mov	r0, r6
 8009186:	47c0      	blx	r8
 8009188:	4307      	orrs	r7, r0
 800918a:	3568      	adds	r5, #104	; 0x68
 800918c:	e7e9      	b.n	8009162 <_fwalk_reent+0x12>

0800918e <__retarget_lock_init_recursive>:
 800918e:	4770      	bx	lr

08009190 <__retarget_lock_acquire_recursive>:
 8009190:	4770      	bx	lr

08009192 <__retarget_lock_release_recursive>:
 8009192:	4770      	bx	lr

08009194 <__swhatbuf_r>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	460e      	mov	r6, r1
 8009198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919c:	4614      	mov	r4, r2
 800919e:	2900      	cmp	r1, #0
 80091a0:	461d      	mov	r5, r3
 80091a2:	b096      	sub	sp, #88	; 0x58
 80091a4:	da08      	bge.n	80091b8 <__swhatbuf_r+0x24>
 80091a6:	2200      	movs	r2, #0
 80091a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091ac:	602a      	str	r2, [r5, #0]
 80091ae:	061a      	lsls	r2, r3, #24
 80091b0:	d410      	bmi.n	80091d4 <__swhatbuf_r+0x40>
 80091b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b6:	e00e      	b.n	80091d6 <__swhatbuf_r+0x42>
 80091b8:	466a      	mov	r2, sp
 80091ba:	f000 f903 	bl	80093c4 <_fstat_r>
 80091be:	2800      	cmp	r0, #0
 80091c0:	dbf1      	blt.n	80091a6 <__swhatbuf_r+0x12>
 80091c2:	9a01      	ldr	r2, [sp, #4]
 80091c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091cc:	425a      	negs	r2, r3
 80091ce:	415a      	adcs	r2, r3
 80091d0:	602a      	str	r2, [r5, #0]
 80091d2:	e7ee      	b.n	80091b2 <__swhatbuf_r+0x1e>
 80091d4:	2340      	movs	r3, #64	; 0x40
 80091d6:	2000      	movs	r0, #0
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	b016      	add	sp, #88	; 0x58
 80091dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080091e0 <__smakebuf_r>:
 80091e0:	898b      	ldrh	r3, [r1, #12]
 80091e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091e4:	079d      	lsls	r5, r3, #30
 80091e6:	4606      	mov	r6, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	d507      	bpl.n	80091fc <__smakebuf_r+0x1c>
 80091ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	6123      	str	r3, [r4, #16]
 80091f4:	2301      	movs	r3, #1
 80091f6:	6163      	str	r3, [r4, #20]
 80091f8:	b002      	add	sp, #8
 80091fa:	bd70      	pop	{r4, r5, r6, pc}
 80091fc:	466a      	mov	r2, sp
 80091fe:	ab01      	add	r3, sp, #4
 8009200:	f7ff ffc8 	bl	8009194 <__swhatbuf_r>
 8009204:	9900      	ldr	r1, [sp, #0]
 8009206:	4605      	mov	r5, r0
 8009208:	4630      	mov	r0, r6
 800920a:	f7fe ff83 	bl	8008114 <_malloc_r>
 800920e:	b948      	cbnz	r0, 8009224 <__smakebuf_r+0x44>
 8009210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009214:	059a      	lsls	r2, r3, #22
 8009216:	d4ef      	bmi.n	80091f8 <__smakebuf_r+0x18>
 8009218:	f023 0303 	bic.w	r3, r3, #3
 800921c:	f043 0302 	orr.w	r3, r3, #2
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	e7e3      	b.n	80091ec <__smakebuf_r+0xc>
 8009224:	4b0d      	ldr	r3, [pc, #52]	; (800925c <__smakebuf_r+0x7c>)
 8009226:	62b3      	str	r3, [r6, #40]	; 0x28
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	6020      	str	r0, [r4, #0]
 800922c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	9b00      	ldr	r3, [sp, #0]
 8009234:	6120      	str	r0, [r4, #16]
 8009236:	6163      	str	r3, [r4, #20]
 8009238:	9b01      	ldr	r3, [sp, #4]
 800923a:	b15b      	cbz	r3, 8009254 <__smakebuf_r+0x74>
 800923c:	4630      	mov	r0, r6
 800923e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009242:	f000 f8d1 	bl	80093e8 <_isatty_r>
 8009246:	b128      	cbz	r0, 8009254 <__smakebuf_r+0x74>
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	f023 0303 	bic.w	r3, r3, #3
 800924e:	f043 0301 	orr.w	r3, r3, #1
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	89a0      	ldrh	r0, [r4, #12]
 8009256:	4305      	orrs	r5, r0
 8009258:	81a5      	strh	r5, [r4, #12]
 800925a:	e7cd      	b.n	80091f8 <__smakebuf_r+0x18>
 800925c:	08008fed 	.word	0x08008fed

08009260 <_malloc_usable_size_r>:
 8009260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009264:	1f18      	subs	r0, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfbc      	itt	lt
 800926a:	580b      	ldrlt	r3, [r1, r0]
 800926c:	18c0      	addlt	r0, r0, r3
 800926e:	4770      	bx	lr

08009270 <_raise_r>:
 8009270:	291f      	cmp	r1, #31
 8009272:	b538      	push	{r3, r4, r5, lr}
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	d904      	bls.n	8009284 <_raise_r+0x14>
 800927a:	2316      	movs	r3, #22
 800927c:	6003      	str	r3, [r0, #0]
 800927e:	f04f 30ff 	mov.w	r0, #4294967295
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009286:	b112      	cbz	r2, 800928e <_raise_r+0x1e>
 8009288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800928c:	b94b      	cbnz	r3, 80092a2 <_raise_r+0x32>
 800928e:	4620      	mov	r0, r4
 8009290:	f000 f830 	bl	80092f4 <_getpid_r>
 8009294:	462a      	mov	r2, r5
 8009296:	4601      	mov	r1, r0
 8009298:	4620      	mov	r0, r4
 800929a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800929e:	f000 b817 	b.w	80092d0 <_kill_r>
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d00a      	beq.n	80092bc <_raise_r+0x4c>
 80092a6:	1c59      	adds	r1, r3, #1
 80092a8:	d103      	bne.n	80092b2 <_raise_r+0x42>
 80092aa:	2316      	movs	r3, #22
 80092ac:	6003      	str	r3, [r0, #0]
 80092ae:	2001      	movs	r0, #1
 80092b0:	e7e7      	b.n	8009282 <_raise_r+0x12>
 80092b2:	2400      	movs	r4, #0
 80092b4:	4628      	mov	r0, r5
 80092b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092ba:	4798      	blx	r3
 80092bc:	2000      	movs	r0, #0
 80092be:	e7e0      	b.n	8009282 <_raise_r+0x12>

080092c0 <raise>:
 80092c0:	4b02      	ldr	r3, [pc, #8]	; (80092cc <raise+0xc>)
 80092c2:	4601      	mov	r1, r0
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	f7ff bfd3 	b.w	8009270 <_raise_r>
 80092ca:	bf00      	nop
 80092cc:	200001d0 	.word	0x200001d0

080092d0 <_kill_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	2300      	movs	r3, #0
 80092d4:	4d06      	ldr	r5, [pc, #24]	; (80092f0 <_kill_r+0x20>)
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	4611      	mov	r1, r2
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	f7f7 fe45 	bl	8000f6c <_kill>
 80092e2:	1c43      	adds	r3, r0, #1
 80092e4:	d102      	bne.n	80092ec <_kill_r+0x1c>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	b103      	cbz	r3, 80092ec <_kill_r+0x1c>
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	bd38      	pop	{r3, r4, r5, pc}
 80092ee:	bf00      	nop
 80092f0:	20001a0c 	.word	0x20001a0c

080092f4 <_getpid_r>:
 80092f4:	f7f7 be38 	b.w	8000f68 <_getpid>

080092f8 <__sread>:
 80092f8:	b510      	push	{r4, lr}
 80092fa:	460c      	mov	r4, r1
 80092fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009300:	f000 f894 	bl	800942c <_read_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	bfab      	itete	ge
 8009308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800930a:	89a3      	ldrhlt	r3, [r4, #12]
 800930c:	181b      	addge	r3, r3, r0
 800930e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009312:	bfac      	ite	ge
 8009314:	6563      	strge	r3, [r4, #84]	; 0x54
 8009316:	81a3      	strhlt	r3, [r4, #12]
 8009318:	bd10      	pop	{r4, pc}

0800931a <__swrite>:
 800931a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	461f      	mov	r7, r3
 8009320:	898b      	ldrh	r3, [r1, #12]
 8009322:	4605      	mov	r5, r0
 8009324:	05db      	lsls	r3, r3, #23
 8009326:	460c      	mov	r4, r1
 8009328:	4616      	mov	r6, r2
 800932a:	d505      	bpl.n	8009338 <__swrite+0x1e>
 800932c:	2302      	movs	r3, #2
 800932e:	2200      	movs	r2, #0
 8009330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009334:	f000 f868 	bl	8009408 <_lseek_r>
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	4632      	mov	r2, r6
 800933c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	4628      	mov	r0, r5
 8009344:	463b      	mov	r3, r7
 8009346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800934e:	f000 b817 	b.w	8009380 <_write_r>

08009352 <__sseek>:
 8009352:	b510      	push	{r4, lr}
 8009354:	460c      	mov	r4, r1
 8009356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935a:	f000 f855 	bl	8009408 <_lseek_r>
 800935e:	1c43      	adds	r3, r0, #1
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	bf15      	itete	ne
 8009364:	6560      	strne	r0, [r4, #84]	; 0x54
 8009366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800936a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800936e:	81a3      	strheq	r3, [r4, #12]
 8009370:	bf18      	it	ne
 8009372:	81a3      	strhne	r3, [r4, #12]
 8009374:	bd10      	pop	{r4, pc}

08009376 <__sclose>:
 8009376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937a:	f000 b813 	b.w	80093a4 <_close_r>
	...

08009380 <_write_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	4611      	mov	r1, r2
 8009388:	2200      	movs	r2, #0
 800938a:	4d05      	ldr	r5, [pc, #20]	; (80093a0 <_write_r+0x20>)
 800938c:	602a      	str	r2, [r5, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	f7f7 fe08 	bl	8000fa4 <_write>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_write_r+0x1e>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b103      	cbz	r3, 800939e <_write_r+0x1e>
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	20001a0c 	.word	0x20001a0c

080093a4 <_close_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	2300      	movs	r3, #0
 80093a8:	4d05      	ldr	r5, [pc, #20]	; (80093c0 <_close_r+0x1c>)
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	f7f7 fe06 	bl	8000fc0 <_close>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_close_r+0x1a>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_close_r+0x1a>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20001a0c 	.word	0x20001a0c

080093c4 <_fstat_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	2300      	movs	r3, #0
 80093c8:	4d06      	ldr	r5, [pc, #24]	; (80093e4 <_fstat_r+0x20>)
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	f7f7 fdf8 	bl	8000fc6 <_fstat>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d102      	bne.n	80093e0 <_fstat_r+0x1c>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	b103      	cbz	r3, 80093e0 <_fstat_r+0x1c>
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	bf00      	nop
 80093e4:	20001a0c 	.word	0x20001a0c

080093e8 <_isatty_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	2300      	movs	r3, #0
 80093ec:	4d05      	ldr	r5, [pc, #20]	; (8009404 <_isatty_r+0x1c>)
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7f7 fdec 	bl	8000fd0 <_isatty>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_isatty_r+0x1a>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_isatty_r+0x1a>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20001a0c 	.word	0x20001a0c

08009408 <_lseek_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	4611      	mov	r1, r2
 8009410:	2200      	movs	r2, #0
 8009412:	4d05      	ldr	r5, [pc, #20]	; (8009428 <_lseek_r+0x20>)
 8009414:	602a      	str	r2, [r5, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	f7f7 fddc 	bl	8000fd4 <_lseek>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_lseek_r+0x1e>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_lseek_r+0x1e>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	20001a0c 	.word	0x20001a0c

0800942c <_read_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4604      	mov	r4, r0
 8009430:	4608      	mov	r0, r1
 8009432:	4611      	mov	r1, r2
 8009434:	2200      	movs	r2, #0
 8009436:	4d05      	ldr	r5, [pc, #20]	; (800944c <_read_r+0x20>)
 8009438:	602a      	str	r2, [r5, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f7f7 fda4 	bl	8000f88 <_read>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_read_r+0x1e>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_read_r+0x1e>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20001a0c 	.word	0x20001a0c

08009450 <_init>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	bf00      	nop
 8009454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009456:	bc08      	pop	{r3}
 8009458:	469e      	mov	lr, r3
 800945a:	4770      	bx	lr

0800945c <_fini>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	bf00      	nop
 8009460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009462:	bc08      	pop	{r3}
 8009464:	469e      	mov	lr, r3
 8009466:	4770      	bx	lr
