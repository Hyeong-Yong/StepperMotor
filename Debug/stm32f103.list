
stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  0800a8f8  0800a8f8  0001a8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800affc  0800affc  000203a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800affc  0800affc  000203a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800affc  0800affc  000203a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800affc  0800affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b000  0800b000  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  0800b004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  200003a4  0800b3a8  000203a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017fc  0800b3a8  000217fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e80f  00000000  00000000  000203cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005db0  00000000  00000000  0003ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000106e9  00000000  00000000  0004498c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00055078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ef8  00000000  00000000  00056280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9ed  00000000  00000000  00058178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025c57  00000000  00000000  00077b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098fcf  00000000  00000000  0009d7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013678b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046c8  00000000  00000000  001367dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003a4 	.word	0x200003a4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a8e0 	.word	0x0800a8e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003a8 	.word	0x200003a8
 800014c:	0800a8e0 	.word	0x0800a8e0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_fcmpun>:
 8000c68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	d102      	bne.n	8000c7c <__aeabi_fcmpun+0x14>
 8000c76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c7a:	d108      	bne.n	8000c8e <__aeabi_fcmpun+0x26>
 8000c7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c80:	d102      	bne.n	8000c88 <__aeabi_fcmpun+0x20>
 8000c82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c86:	d102      	bne.n	8000c8e <__aeabi_fcmpun+0x26>
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	f04f 0001 	mov.w	r0, #1
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_d2lz>:
 8000c94:	b538      	push	{r3, r4, r5, lr}
 8000c96:	4605      	mov	r5, r0
 8000c98:	460c      	mov	r4, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	f7ff fe95 	bl	80009d0 <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x20>
 8000ca8:	4628      	mov	r0, r5
 8000caa:	4621      	mov	r1, r4
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc0b 	bl	80004ec <__aeabi_dmul>
 8000cd6:	f7ff fee1 	bl	8000a9c <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fb8c 	bl	80003f8 <__aeabi_ui2d>
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce4:	f7ff fc02 	bl	80004ec <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fa44 	bl	800017c <__aeabi_dsub>
 8000cf4:	f7ff fed2 	bl	8000a9c <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <apInit>:

#include "ap.h"


void apInit(void)
{
 8000d04:	b508      	push	{r3, lr}
  uartOpen(_DEF_UART1, 57600); // USB_CDC
 8000d06:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f001 f8b4 	bl	8001e78 <uartOpen>
//  cliOpenLog(_DEF_UART2, 57600);


  //  spiBegin(_DEF_SPI1);
  //  spiBegin(_DEF_SPI2);
}
 8000d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  cliOpen(_DEF_UART1, 57600);
 8000d14:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 bb9b 	b.w	8001454 <cliOpen>
	...

08000d20 <apMain>:



void apMain(void)
{
 8000d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    {
      if (millis()-pre_time >=500)
        {
          pre_time=millis();
          //setVoltageDAC_Polling(voltage);   //setVoltageDAC_DMA(voltage);
          voltage+=0.2;
 8000d24:	a712      	add	r7, pc, #72	; (adr r7, 8000d70 <apMain+0x50>)
 8000d26:	e9d7 6700 	ldrd	r6, r7, [r7]
  pre_time=millis();
 8000d2a:	f000 f827 	bl	8000d7c <millis>
  float voltage=0;
 8000d2e:	2500      	movs	r5, #0
  pre_time=millis();
 8000d30:	4604      	mov	r4, r0
          if (voltage > 4)
 8000d32:	f04f 4881 	mov.w	r8, #1082130432	; 0x40800000
            {
              voltage= 0;
 8000d36:	46a9      	mov	r9, r5
      if (millis()-pre_time >=500)
 8000d38:	f000 f820 	bl	8000d7c <millis>
 8000d3c:	1b00      	subs	r0, r0, r4
 8000d3e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000d42:	d311      	bcc.n	8000d68 <apMain+0x48>
          pre_time=millis();
 8000d44:	f000 f81a 	bl	8000d7c <millis>
 8000d48:	4604      	mov	r4, r0
          voltage+=0.2;
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	f7ff fb76 	bl	800043c <__aeabi_f2d>
 8000d50:	4632      	mov	r2, r6
 8000d52:	463b      	mov	r3, r7
 8000d54:	f7ff fa14 	bl	8000180 <__adddf3>
 8000d58:	f7ff fec0 	bl	8000adc <__aeabi_d2f>
          if (voltage > 4)
 8000d5c:	4641      	mov	r1, r8
          voltage+=0.2;
 8000d5e:	4605      	mov	r5, r0
          if (voltage > 4)
 8000d60:	f7ff ff78 	bl	8000c54 <__aeabi_fcmpgt>
 8000d64:	b100      	cbz	r0, 8000d68 <apMain+0x48>
              voltage= 0;
 8000d66:	464d      	mov	r5, r9
            }
        }

      cliMain();
 8000d68:	f000 fc8a 	bl	8001680 <cliMain>
      if (millis()-pre_time >=500)
 8000d6c:	e7e4      	b.n	8000d38 <apMain+0x18>
 8000d6e:	bf00      	nop
 8000d70:	9999999a 	.word	0x9999999a
 8000d74:	3fc99999 	.word	0x3fc99999

08000d78 <delay>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
  HAL_Delay(ms);
 8000d78:	f001 ba2c 	b.w	80021d4 <HAL_Delay>

08000d7c <millis>:



uint32_t millis(void)
{
 return HAL_GetTick();
 8000d7c:	f001 ba24 	b.w	80021c8 <HAL_GetTick>

08000d80 <__io_putchar>:
}

int __io_putchar(int ch)
{
 8000d80:	b507      	push	{r0, r1, r2, lr}
  //USB로 printf 캐릭터 전송
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000d82:	2201      	movs	r2, #1
{
 8000d84:	9001      	str	r0, [sp, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000d86:	a901      	add	r1, sp, #4
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f001 f8fd 	bl	8001f88 <uartWrite>
  return 1;
}
 8000d8e:	2001      	movs	r0, #1
 8000d90:	b003      	add	sp, #12
 8000d92:	f85d fb04 	ldr.w	pc, [sp], #4

08000d96 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 8000d96:	b510      	push	{r4, lr}
 8000d98:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	2214      	movs	r2, #20
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	a80c      	add	r0, sp, #48	; 0x30
 8000da0:	f005 faf8 	bl	8006394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	2214      	movs	r2, #20
 8000da6:	2100      	movs	r1, #0
 8000da8:	eb0d 0002 	add.w	r0, sp, r2
 8000dac:	f005 faf2 	bl	8006394 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db0:	2210      	movs	r2, #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	a801      	add	r0, sp, #4
 8000db6:	f005 faed 	bl	8006394 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dba:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc0:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dc2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc4:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc8:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dcc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd2:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dd6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f002 fe60 	bl	8003a9c <HAL_RCC_OscConfig>
 8000ddc:	b108      	cbz	r0, 8000de2 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dde:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dee:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df2:	4621      	mov	r1, r4
 8000df4:	a805      	add	r0, sp, #20
 8000df6:	f003 f813 	bl	8003e20 <HAL_RCC_ClockConfig>
 8000dfa:	b108      	cbz	r0, 8000e00 <SystemClock_Config+0x6a>
 8000dfc:	b672      	cpsid	i
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e00:	2211      	movs	r2, #17
 8000e02:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e06:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e0a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0e:	f003 f8c3 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	b108      	cbz	r0, 8000e18 <SystemClock_Config+0x82>
 8000e14:	b672      	cpsid	i
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <SystemClock_Config+0x80>
}
 8000e18:	b014      	add	sp, #80	; 0x50
 8000e1a:	bd10      	pop	{r4, pc}

08000e1c <bspInit>:
{
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	b086      	sub	sp, #24
  HAL_Init();
 8000e20:	f001 f9b4 	bl	800218c <HAL_Init>
  SystemClock_Config();
 8000e24:	f7ff ffb7 	bl	8000d96 <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <bspInit+0x5c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e2a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	f042 0220 	orr.w	r2, r2, #32
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	4c10      	ldr	r4, [pc, #64]	; (8000e7c <bspInit+0x60>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	f002 0220 	and.w	r2, r2, #32
 8000e40:	9200      	str	r2, [sp, #0]
 8000e42:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	f042 0204 	orr.w	r2, r2, #4
 8000e4c:	619a      	str	r2, [r3, #24]
 8000e4e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e5a:	2311      	movs	r3, #17
 8000e5c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2302      	movs	r3, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f001 fe2b 	bl	8002ac0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e6a:	4632      	mov	r2, r6
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f001 ff74 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8000e74:	b006      	add	sp, #24
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800

08000e80 <Error_Handler>:
 8000e80:	b672      	cpsid	i
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <Error_Handler+0x2>

08000e84 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_MspInit+0x3c>)
{
 8000e86:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	f042 0201 	orr.w	r2, r2, #1
 8000e8e:	619a      	str	r2, [r3, #24]
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	f002 0201 	and.w	r2, r2, #1
 8000e96:	9200      	str	r2, [sp, #0]
 8000e98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	69da      	ldr	r2, [r3, #28]
 8000e9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ea0:	61da      	str	r2, [r3, #28]
 8000ea2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eae:	6853      	ldr	r3, [r2, #4]
 8000eb0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	b002      	add	sp, #8
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000

08000ec8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler>

08000eca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler>

08000ecc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler>

08000ece <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler>

08000ed0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler>

08000ed2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f001 b96a 	b.w	80021b0 <HAL_IncTick>

08000edc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000edc:	4801      	ldr	r0, [pc, #4]	; (8000ee4 <DMA1_Channel1_IRQHandler+0x8>)
 8000ede:	f001 bd5b 	b.w	8002998 <HAL_DMA_IRQHandler>
 8000ee2:	bf00      	nop
 8000ee4:	20000410 	.word	0x20000410

08000ee8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ee8:	4801      	ldr	r0, [pc, #4]	; (8000ef0 <DMA1_Channel3_IRQHandler+0x8>)
 8000eea:	f001 bd55 	b.w	8002998 <HAL_DMA_IRQHandler>
 8000eee:	bf00      	nop
 8000ef0:	20000738 	.word	0x20000738

08000ef4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <DMA1_Channel5_IRQHandler+0x8>)
 8000ef6:	f001 bd4f 	b.w	8002998 <HAL_DMA_IRQHandler>
 8000efa:	bf00      	nop
 8000efc:	200007d4 	.word	0x200007d4

08000f00 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f00:	4801      	ldr	r0, [pc, #4]	; (8000f08 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000f02:	f001 bfdf 	b.w	8002ec4 <HAL_PCD_IRQHandler>
 8000f06:	bf00      	nop
 8000f08:	200012dc 	.word	0x200012dc

08000f0c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f0c:	4801      	ldr	r0, [pc, #4]	; (8000f14 <SPI1_IRQHandler+0x8>)
 8000f0e:	f003 b8bf 	b.w	8004090 <HAL_SPI_IRQHandler>
 8000f12:	bf00      	nop
 8000f14:	2000077c 	.word	0x2000077c

08000f18 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f18:	4801      	ldr	r0, [pc, #4]	; (8000f20 <USART1_IRQHandler+0x8>)
 8000f1a:	f003 bb53 	b.w	80045c4 <HAL_UART_IRQHandler>
 8000f1e:	bf00      	nop
 8000f20:	20000818 	.word	0x20000818

08000f24 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000f24:	2001      	movs	r0, #1
 8000f26:	4770      	bx	lr

08000f28 <_kill>:

int _kill(int pid, int sig)
{
 8000f28:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f2a:	f005 f9ef 	bl	800630c <__errno>
 8000f2e:	2316      	movs	r3, #22
 8000f30:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000f32:	f04f 30ff 	mov.w	r0, #4294967295
 8000f36:	bd08      	pop	{r3, pc}

08000f38 <_exit>:

void _exit (int status)
{
 8000f38:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f3a:	f005 f9e7 	bl	800630c <__errno>
 8000f3e:	2316      	movs	r3, #22
 8000f40:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000f42:	e7fe      	b.n	8000f42 <_exit+0xa>

08000f44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	460d      	mov	r5, r1
 8000f48:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	460e      	mov	r6, r1
 8000f4c:	1b73      	subs	r3, r6, r5
 8000f4e:	429c      	cmp	r4, r3
 8000f50:	dc01      	bgt.n	8000f56 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000f52:	4620      	mov	r0, r4
 8000f54:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000f56:	f3af 8000 	nop.w
 8000f5a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	e7f5      	b.n	8000f4c <_read+0x8>

08000f60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	460d      	mov	r5, r1
 8000f64:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	460e      	mov	r6, r1
 8000f68:	1b73      	subs	r3, r6, r5
 8000f6a:	429c      	cmp	r4, r3
 8000f6c:	dc01      	bgt.n	8000f72 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000f6e:	4620      	mov	r0, r4
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000f72:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000f76:	f7ff ff03 	bl	8000d80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	e7f5      	b.n	8000f68 <_write+0x8>

08000f7c <_close>:

int _close(int file)
{
	return -1;
}
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	4770      	bx	lr

08000f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000f86:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000f88:	604b      	str	r3, [r1, #4]
}
 8000f8a:	4770      	bx	lr

08000f8c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4770      	bx	lr

08000f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000f90:	2000      	movs	r0, #0
 8000f92:	4770      	bx	lr

08000f94 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <_sbrk+0x30>)
{
 8000f96:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000f98:	6811      	ldr	r1, [r2, #0]
{
 8000f9a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000f9c:	b909      	cbnz	r1, 8000fa2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000f9e:	490a      	ldr	r1, [pc, #40]	; (8000fc8 <_sbrk+0x34>)
 8000fa0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	4909      	ldr	r1, [pc, #36]	; (8000fcc <_sbrk+0x38>)
 8000fa6:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <_sbrk+0x3c>)
 8000fa8:	4403      	add	r3, r0
 8000faa:	1b09      	subs	r1, r1, r4
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d906      	bls.n	8000fbe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000fb0:	f005 f9ac 	bl	800630c <__errno>
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000fbc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000fbe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000fc0:	e7fc      	b.n	8000fbc <_sbrk+0x28>
 8000fc2:	bf00      	nop
 8000fc4:	200003c0 	.word	0x200003c0
 8000fc8:	20001800 	.word	0x20001800
 8000fcc:	20005000 	.word	0x20005000
 8000fd0:	00000400 	.word	0x00000400

08000fd4 <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8000fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd8:	4b01      	ldr	r3, [pc, #4]	; (8000fe0 <SystemInit+0xc>)
 8000fda:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	; (8001028 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800100a:	f7ff ffe3 	bl	8000fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f005 f983 	bl	8006318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001012:	f005 f971 	bl	80062f8 <main>
  bx lr
 8001016:	4770      	bx	lr
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8001020:	0800b004 	.word	0x0800b004
  ldr r2, =_sbss
 8001024:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 8001028:	200017fc 	.word	0x200017fc

0800102c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_2_IRQHandler>

0800102e <qbufferCreate>:


  bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
  {
    bool ret= true;
    p_node->head=0;
 800102e:	2300      	movs	r3, #0
    p_node->tail=0;
    p_node->len=length;
    p_node->p_buf=p_buf;
 8001030:	e9c0 2102 	strd	r2, r1, [r0, #8]
    p_node->tail=0;
 8001034:	e9c0 3300 	strd	r3, r3, [r0]
    return ret;
  }
 8001038:	2001      	movs	r0, #1
 800103a:	4770      	bx	lr

0800103c <qbufferRead>:
    return ret;
  }


  bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
  {
 800103c:	b530      	push	{r4, r5, lr}
 800103e:	440a      	add	r2, r1
    bool ret= true;

    for (int i=0; i<length ; i++)
 8001040:	4291      	cmp	r1, r2
 8001042:	d101      	bne.n	8001048 <qbufferRead+0xc>
    bool ret= true;
 8001044:	2001      	movs	r0, #1
            ret=false;
            break;
          }
      }
    return ret;
  }
 8001046:	bd30      	pop	{r4, r5, pc}
        if (p_node->p_buf != NULL)
 8001048:	68c3      	ldr	r3, [r0, #12]
 800104a:	b113      	cbz	r3, 8001052 <qbufferRead+0x16>
            p_data[i]=p_node->p_buf[p_node->tail];
 800104c:	6844      	ldr	r4, [r0, #4]
 800104e:	5d1b      	ldrb	r3, [r3, r4]
 8001050:	700b      	strb	r3, [r1, #0]
        if (p_node->tail != p_node->head)
 8001052:	6843      	ldr	r3, [r0, #4]
 8001054:	6804      	ldr	r4, [r0, #0]
 8001056:	3101      	adds	r1, #1
 8001058:	42a3      	cmp	r3, r4
 800105a:	d007      	beq.n	800106c <qbufferRead+0x30>
            p_node->tail = (p_node->tail+1) % p_node->len;
 800105c:	6884      	ldr	r4, [r0, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	fbb3 f5f4 	udiv	r5, r3, r4
 8001064:	fb04 3315 	mls	r3, r4, r5, r3
 8001068:	6043      	str	r3, [r0, #4]
    for (int i=0; i<length ; i++)
 800106a:	e7e9      	b.n	8001040 <qbufferRead+0x4>
            ret=false;
 800106c:	2000      	movs	r0, #0
 800106e:	e7ea      	b.n	8001046 <qbufferRead+0xa>

08001070 <qbufferAvailable>:


  uint32_t qbufferAvailable(qbuffer_t *p_node)
  {
    uint32_t ret;
    ret= (p_node->head - p_node->tail) % p_node->len;
 8001070:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	6882      	ldr	r2, [r0, #8]
 8001078:	fbb3 f0f2 	udiv	r0, r3, r2
    return ret;
  }
 800107c:	fb02 3010 	mls	r0, r2, r0, r3
 8001080:	4770      	bx	lr
	...

08001084 <adcInit>:
{
 return (((V25 - (variable*VSENSE)) / Avg_Slope) + 25); // formula from datasheet
}

void adcInit()
{
 8001084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  for (int i = 0; i < ADC_MAX_CH; i++)
    {
      adc_tbl[i].is_init = false;
      adc_tbl[i].hADCx = &hadc1;
 8001086:	482d      	ldr	r0, [pc, #180]	; (800113c <adcInit+0xb8>)

      /* USER CODE END ADC1_Init 1 */

      /** Common config
      */
      hadc1.Instance = ADC1;
 8001088:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <adcInit+0xbc>)
      adc_tbl[i].is_init = false;
 800108a:	2300      	movs	r3, #0
      hadc1.Instance = ADC1;
 800108c:	6002      	str	r2, [r0, #0]
      hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800108e:	f44f 7280 	mov.w	r2, #256	; 0x100
      hadc1.Init.ContinuousConvMode = ENABLE;
 8001092:	2401      	movs	r4, #1
      hadc1.Init.DiscontinuousConvMode = DISABLE;
      hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
      hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
      hadc1.Init.NbrOfConversion = 5;
 8001094:	2605      	movs	r6, #5
      hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001096:	6082      	str	r2, [r0, #8]
      hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001098:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
      adc_tbl[i].is_init = false;
 800109c:	4d29      	ldr	r5, [pc, #164]	; (8001144 <adcInit+0xc0>)
      ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	e9cd 3301 	strd	r3, r3, [sp, #4]
      adc_tbl[i].is_init = false;
 80010a2:	702b      	strb	r3, [r5, #0]
      adc_tbl[i].hADCx = &hadc1;
 80010a4:	6068      	str	r0, [r5, #4]
      ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	9303      	str	r3, [sp, #12]
      hadc1.Init.ContinuousConvMode = ENABLE;
 80010a8:	7304      	strb	r4, [r0, #12]
      hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010aa:	7503      	strb	r3, [r0, #20]
      hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ac:	61c2      	str	r2, [r0, #28]
      hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	6043      	str	r3, [r0, #4]
      hadc1.Init.NbrOfConversion = 5;
 80010b0:	6106      	str	r6, [r0, #16]
      if (HAL_ADC_Init(&hadc1) == HAL_OK)
 80010b2:	f001 fa4b 	bl	800254c <HAL_ADC_Init>
 80010b6:	b900      	cbnz	r0, 80010ba <adcInit+0x36>
      {
          adc_tbl[i].is_init     = true;
 80010b8:	702c      	strb	r4, [r5, #0]
      }

      sConfig.Channel = ADC_CHANNEL_5;
      sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ba:	e9cd 6401 	strd	r6, r4, [sp, #4]
      sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010be:	2407      	movs	r4, #7
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	481e      	ldr	r0, [pc, #120]	; (800113c <adcInit+0xb8>)
 80010c2:	a901      	add	r1, sp, #4
      sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010c4:	9403      	str	r4, [sp, #12]
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	f001 f8d3 	bl	8002270 <HAL_ADC_ConfigChannel>
 80010ca:	b108      	cbz	r0, 80010d0 <adcInit+0x4c>
      {
        Error_Handler();
 80010cc:	f7ff fed8 	bl	8000e80 <Error_Handler>
      }

      /** Configure Regular Channel
      */
      sConfig.Channel = ADC_CHANNEL_7;
      sConfig.Rank = ADC_REGULAR_RANK_2;
 80010d0:	2302      	movs	r3, #2
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	481a      	ldr	r0, [pc, #104]	; (800113c <adcInit+0xb8>)
 80010d4:	a901      	add	r1, sp, #4
      sConfig.Channel = ADC_CHANNEL_7;
 80010d6:	9401      	str	r4, [sp, #4]
      sConfig.Rank = ADC_REGULAR_RANK_2;
 80010d8:	9302      	str	r3, [sp, #8]
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	f001 f8c9 	bl	8002270 <HAL_ADC_ConfigChannel>
 80010de:	b108      	cbz	r0, 80010e4 <adcInit+0x60>
      {
        Error_Handler();
 80010e0:	f7ff fece 	bl	8000e80 <Error_Handler>
      }

      /** Configure Regular Channel
      */
      sConfig.Channel = ADC_CHANNEL_8;
      sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e4:	2008      	movs	r0, #8
 80010e6:	2303      	movs	r3, #3
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e8:	a901      	add	r1, sp, #4
      sConfig.Rank = ADC_REGULAR_RANK_3;
 80010ea:	e9cd 0301 	strd	r0, r3, [sp, #4]
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	4813      	ldr	r0, [pc, #76]	; (800113c <adcInit+0xb8>)
 80010f0:	f001 f8be 	bl	8002270 <HAL_ADC_ConfigChannel>
 80010f4:	b108      	cbz	r0, 80010fa <adcInit+0x76>
      {
        Error_Handler();
 80010f6:	f7ff fec3 	bl	8000e80 <Error_Handler>
      }

      /** Configure Regular Channel
      */
      sConfig.Channel = ADC_CHANNEL_9;
      sConfig.Rank = ADC_REGULAR_RANK_4;
 80010fa:	2109      	movs	r1, #9
 80010fc:	2304      	movs	r3, #4
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	480f      	ldr	r0, [pc, #60]	; (800113c <adcInit+0xb8>)
      sConfig.Rank = ADC_REGULAR_RANK_4;
 8001100:	e9cd 1301 	strd	r1, r3, [sp, #4]
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	eb0d 0103 	add.w	r1, sp, r3
 8001108:	f001 f8b2 	bl	8002270 <HAL_ADC_ConfigChannel>
 800110c:	b108      	cbz	r0, 8001112 <adcInit+0x8e>
      {
        Error_Handler();
 800110e:	f7ff feb7 	bl	8000e80 <Error_Handler>
      }

      /** Configure Regular Channel
      */
      sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
      sConfig.Rank = ADC_REGULAR_RANK_5;
 8001112:	2305      	movs	r3, #5
 8001114:	2210      	movs	r2, #16
 8001116:	e9cd 2301 	strd	r2, r3, [sp, #4]
      sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800111a:	2307      	movs	r3, #7
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <adcInit+0xb8>)
 800111e:	a901      	add	r1, sp, #4
      sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001120:	9303      	str	r3, [sp, #12]
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	f001 f8a5 	bl	8002270 <HAL_ADC_ConfigChannel>
 8001126:	b108      	cbz	r0, 800112c <adcInit+0xa8>
      {
        Error_Handler();
 8001128:	f7ff feaa 	bl	8000e80 <Error_Handler>

    }


#ifdef _USE_HW_CLI
	cliAdd("adc", cliADC);
 800112c:	4906      	ldr	r1, [pc, #24]	; (8001148 <adcInit+0xc4>)
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <adcInit+0xc8>)
#endif
}
 8001130:	b004      	add	sp, #16
 8001132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cliAdd("adc", cliADC);
 8001136:	f000 bc99 	b.w	8001a6c <cliAdd>
 800113a:	bf00      	nop
 800113c:	200003e0 	.word	0x200003e0
 8001140:	40012400 	.word	0x40012400
 8001144:	200003d8 	.word	0x200003d8
 8001148:	08001275 	.word	0x08001275
 800114c:	0800a910 	.word	0x0800a910

08001150 <ADCstart_DMA>:

void ADCstart_DMA(uint8_t ch)
{
  HAL_ADC_Start_DMA(adc_tbl[ch].hADCx, (uint32_t*)&adc_buf, ADC_BUF_SIZE);
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <ADCstart_DMA+0x10>)
 8001152:	2205      	movs	r2, #5
 8001154:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001158:	4902      	ldr	r1, [pc, #8]	; (8001164 <ADCstart_DMA+0x14>)
 800115a:	6840      	ldr	r0, [r0, #4]
 800115c:	f001 b942 	b.w	80023e4 <HAL_ADC_Start_DMA>
 8001160:	200003d8 	.word	0x200003d8
 8001164:	200003c4 	.word	0x200003c4

08001168 <ADCstop_DMA>:
}


void ADCstop_DMA(uint8_t ch)
{
  HAL_ADC_Stop_DMA(adc_tbl[ch].hADCx);
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <ADCstop_DMA+0xc>)
 800116a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800116e:	6858      	ldr	r0, [r3, #4]
 8001170:	f001 ba6a 	b.w	8002648 <HAL_ADC_Stop_DMA>
 8001174:	200003d8 	.word	0x200003d8

08001178 <HAL_ADC_ConvCpltCallback>:
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{

}
 8001178:	4770      	bx	lr
	...

0800117c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	2210      	movs	r2, #16
{
 800117e:	b530      	push	{r4, r5, lr}
 8001180:	4605      	mov	r5, r0
 8001182:	b089      	sub	sp, #36	; 0x24
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	eb0d 0002 	add.w	r0, sp, r2
 8001188:	2100      	movs	r1, #0
 800118a:	f005 f903 	bl	8006394 <memset>
	  if(adcHandle->Instance==ADC1)
 800118e:	682a      	ldr	r2, [r5, #0]
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <HAL_ADC_MspInit+0xc8>)
 8001192:	429a      	cmp	r2, r3
 8001194:	d154      	bne.n	8001240 <HAL_ADC_MspInit+0xc4>
	  /* USER CODE BEGIN ADC1_MspInit 0 */

	  /* USER CODE END ADC1_MspInit 0 */

		    /* DMA controller clock enable */
		    __HAL_RCC_DMA1_CLK_ENABLE();
 8001196:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800119a:	695a      	ldr	r2, [r3, #20]
	    PA7     ------> ADC1_IN7
	    PB0     ------> ADC1_IN8
	    PB1     ------> ADC1_IN9
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2403      	movs	r4, #3
		    __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	695a      	ldr	r2, [r3, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	4828      	ldr	r0, [pc, #160]	; (8001248 <HAL_ADC_MspInit+0xcc>)
		    __HAL_RCC_DMA1_CLK_ENABLE();
 80011a8:	f002 0201 	and.w	r2, r2, #1
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	9a00      	ldr	r2, [sp, #0]
	    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b0:	699a      	ldr	r2, [r3, #24]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	a904      	add	r1, sp, #16
	    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011b8:	619a      	str	r2, [r3, #24]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80011c0:	9201      	str	r2, [sp, #4]
 80011c2:	9a01      	ldr	r2, [sp, #4]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	699a      	ldr	r2, [r3, #24]
 80011c6:	f042 0204 	orr.w	r2, r2, #4
 80011ca:	619a      	str	r2, [r3, #24]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	f002 0204 	and.w	r2, r2, #4
 80011d2:	9202      	str	r2, [sp, #8]
 80011d4:	9a02      	ldr	r2, [sp, #8]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	699a      	ldr	r2, [r3, #24]
 80011d8:	f042 0208 	orr.w	r2, r2, #8
 80011dc:	619a      	str	r2, [r3, #24]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	9303      	str	r3, [sp, #12]
 80011e6:	9b03      	ldr	r3, [sp, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e8:	23a0      	movs	r3, #160	; 0xa0
 80011ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f001 fc67 	bl	8002ac0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	4816      	ldr	r0, [pc, #88]	; (800124c <HAL_ADC_MspInit+0xd0>)
 80011f4:	a904      	add	r1, sp, #16
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f6:	e9cd 4404 	strd	r4, r4, [sp, #16]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f001 fc61 	bl	8002ac0 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA1_Channel1;
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fe:	2300      	movs	r3, #0
	    hdma_adc1.Instance = DMA1_Channel1;
 8001200:	4c13      	ldr	r4, [pc, #76]	; (8001250 <HAL_ADC_MspInit+0xd4>)
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_ADC_MspInit+0xd8>)
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001204:	2180      	movs	r1, #128	; 0x80
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001206:	e9c4 2300 	strd	r2, r3, [r4]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800120a:	f44f 7200 	mov.w	r2, #512	; 0x200
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800120e:	f44f 6000 	mov.w	r0, #2048	; 0x800
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001212:	e9c4 1203 	strd	r1, r2, [r4, #12]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001216:	2220      	movs	r2, #32
 8001218:	e9c4 0205 	strd	r0, r2, [r4, #20]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800121c:	4620      	mov	r0, r4
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800121e:	60a3      	str	r3, [r4, #8]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001220:	61e3      	str	r3, [r4, #28]
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001222:	f001 fab7 	bl	8002794 <HAL_DMA_Init>
 8001226:	b108      	cbz	r0, 800122c <HAL_ADC_MspInit+0xb0>
	    {
	      Error_Handler();
 8001228:	f7ff fe2a 	bl	8000e80 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,  hdma_adc1);

	    /* DMA1_Channel1_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	200b      	movs	r0, #11
	    __HAL_LINKDMA(adcHandle,DMA_Handle,  hdma_adc1);
 8001230:	622c      	str	r4, [r5, #32]
	    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001232:	4611      	mov	r1, r2
	    __HAL_LINKDMA(adcHandle,DMA_Handle,  hdma_adc1);
 8001234:	6265      	str	r5, [r4, #36]	; 0x24
	    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001236:	f001 fa45 	bl	80026c4 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800123a:	200b      	movs	r0, #11
 800123c:	f001 fa74 	bl	8002728 <HAL_NVIC_EnableIRQ>

	  /* USER CODE BEGIN ADC1_MspInit 1 */

	  /* USER CODE END ADC1_MspInit 1 */
	  }
}
 8001240:	b009      	add	sp, #36	; 0x24
 8001242:	bd30      	pop	{r4, r5, pc}
 8001244:	40012400 	.word	0x40012400
 8001248:	40010800 	.word	0x40010800
 800124c:	40010c00 	.word	0x40010c00
 8001250:	20000410 	.word	0x20000410
 8001254:	40020008 	.word	0x40020008

08001258 <checksumPacket>:

uint8_t checksumPacket(uint8_t* packet, uint32_t packet_length)
{
  bool ret = false;
  uint32_t sum = 0;
  for (int i = 0; i < packet_length-1; i++)
 8001258:	2200      	movs	r2, #0
  uint32_t sum = 0;
 800125a:	4613      	mov	r3, r2
{
 800125c:	b510      	push	{r4, lr}
  for (int i = 0; i < packet_length-1; i++)
 800125e:	3901      	subs	r1, #1
 8001260:	4291      	cmp	r1, r2
 8001262:	d802      	bhi.n	800126a <checksumPacket+0x12>
    }

  sum = sum & 0xFF;
  sum = (~sum + 1) & 0xFF;

  return (uint8_t)sum;
 8001264:	4258      	negs	r0, r3
}
 8001266:	b2c0      	uxtb	r0, r0
 8001268:	bd10      	pop	{r4, pc}
      sum += packet[i];
 800126a:	5c84      	ldrb	r4, [r0, r2]
  for (int i = 0; i < packet_length-1; i++)
 800126c:	3201      	adds	r2, #1
      sum += packet[i];
 800126e:	4423      	add	r3, r4
  for (int i = 0; i < packet_length-1; i++)
 8001270:	e7f6      	b.n	8001260 <checksumPacket+0x8>
	...

08001274 <cliADC>:



static void cliADC(cli_args_t* args){
	  bool ret = false;
	  if (args->argc == 1 && args->isStr(0, "start") == true)
 8001274:	8803      	ldrh	r3, [r0, #0]
static void cliADC(cli_args_t* args){
 8001276:	b573      	push	{r0, r1, r4, r5, r6, lr}
	  if (args->argc == 1 && args->isStr(0, "start") == true)
 8001278:	2b01      	cmp	r3, #1
 800127a:	d109      	bne.n	8001290 <cliADC+0x1c>
 800127c:	6943      	ldr	r3, [r0, #20]
 800127e:	491c      	ldr	r1, [pc, #112]	; (80012f0 <cliADC+0x7c>)
 8001280:	2000      	movs	r0, #0
 8001282:	4798      	blx	r3
 8001284:	b120      	cbz	r0, 8001290 <cliADC+0x1c>

		  while(cliKeepLoop()){
			  ADCstart_DMA(_DEF_ADC1);
			  // packet Header, Type, Data(upp_value, lower value) CheckSum

			  packet[0]= Header;
 8001286:	2610      	movs	r6, #16
			  for (int i=0 ; i<4;i++){
				  packet[1] = type1+i;
				  packet[2] = adc_buf[i];
 8001288:	4d1a      	ldr	r5, [pc, #104]	; (80012f4 <cliADC+0x80>)
		  while(cliKeepLoop()){
 800128a:	f000 fbe3 	bl	8001a54 <cliKeepLoop>
 800128e:	b928      	cbnz	r0, 800129c <cliADC+0x28>
	    }


	  if (ret != true)
	    {
	      cliPrintf("adc start\n");
 8001290:	4819      	ldr	r0, [pc, #100]	; (80012f8 <cliADC+0x84>)
	    }
}
 8001292:	b002      	add	sp, #8
 8001294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	      cliPrintf("adc start\n");
 8001298:	f000 b942 	b.w	8001520 <cliPrintf>
			  for (int i=0 ; i<4;i++){
 800129c:	2400      	movs	r4, #0
			  ADCstart_DMA(_DEF_ADC1);
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff56 	bl	8001150 <ADCstart_DMA>
			  packet[0]= Header;
 80012a4:	f88d 6000 	strb.w	r6, [sp]
				  packet[1] = type1+i;
 80012a8:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80012ac:	f88d 3001 	strb.w	r3, [sp, #1]
				  packet[2] = adc_buf[i];
 80012b0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
				  packet[4] = checksumPacket(packet, 5);
 80012b4:	2105      	movs	r1, #5
				  packet[2] = adc_buf[i];
 80012b6:	f88d 3002 	strb.w	r3, [sp, #2]
				  packet[3] = adc_buf[i]>>8;
 80012ba:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
				  packet[4] = checksumPacket(packet, 5);
 80012be:	4668      	mov	r0, sp
				  packet[3] = adc_buf[i]>>8;
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f88d 3003 	strb.w	r3, [sp, #3]
				  packet[4] = checksumPacket(packet, 5);
 80012c6:	f7ff ffc7 	bl	8001258 <checksumPacket>
			  for (int i=0 ; i<4;i++){
 80012ca:	3401      	adds	r4, #1
				  packet[4] = checksumPacket(packet, 5);
 80012cc:	f88d 0004 	strb.w	r0, [sp, #4]
				  uartWrite(_DEF_UART1, packet, 5);
 80012d0:	2205      	movs	r2, #5
 80012d2:	4669      	mov	r1, sp
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 fe57 	bl	8001f88 <uartWrite>
			  for (int i=0 ; i<4;i++){
 80012da:	2c04      	cmp	r4, #4
 80012dc:	d1e4      	bne.n	80012a8 <cliADC+0x34>
			  delay(1000);
 80012de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e2:	f7ff fd49 	bl	8000d78 <delay>
			  ADCstop_DMA(_DEF_ADC1);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff ff3e 	bl	8001168 <ADCstop_DMA>
 80012ec:	e7cd      	b.n	800128a <cliADC+0x16>
 80012ee:	bf00      	nop
 80012f0:	0800a914 	.word	0x0800a914
 80012f4:	200003c4 	.word	0x200003c4
 80012f8:	0800a91a 	.word	0x0800a91a

080012fc <cliToUpper>:

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
}

void cliToUpper(char *str)
{
 80012fc:	b510      	push	{r4, lr}
 80012fe:	1e42      	subs	r2, r0, #1
 8001300:	f100 010f 	add.w	r1, r0, #15
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
  {
    str_ch = str[i];
 8001304:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 8001308:	b153      	cbz	r3, 8001320 <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800130a:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 800130e:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 8001310:	bf9c      	itt	ls
 8001312:	3b20      	subls	r3, #32
 8001314:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001316:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 8001318:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800131a:	d1f3      	bne.n	8001304 <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73c3      	strb	r3, [r0, #15]
  }
}
 8001320:	bd10      	pop	{r4, pc}
	...

08001324 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <cliArgsGetStr+0x18>)
 8001326:	f8b3 22cc 	ldrh.w	r2, [r3, #716]	; 0x2cc
 800132a:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 800132c:	bf86      	itte	hi
 800132e:	f8d3 32d0 	ldrhi.w	r3, [r3, #720]	; 0x2d0
 8001332:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 8001336:	2000      	movls	r0, #0

  return ret;
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000454 	.word	0x20000454

08001340 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001340:	b508      	push	{r3, lr}
 8001342:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8001344:	4a08      	ldr	r2, [pc, #32]	; (8001368 <cliArgsIsStr+0x28>)
{
 8001346:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 8001348:	f8b2 12cc 	ldrh.w	r1, [r2, #716]	; 0x2cc
 800134c:	4299      	cmp	r1, r3
 800134e:	d909      	bls.n	8001364 <cliArgsIsStr+0x24>
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001350:	f8d2 22d0 	ldr.w	r2, [r2, #720]	; 0x2d0
 8001354:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001358:	f7fe fefa 	bl	8000150 <strcmp>
 800135c:	fab0 f080 	clz	r0, r0
 8001360:	0940      	lsrs	r0, r0, #5
  {
    ret = true;
  }

  return ret;
}
 8001362:	bd08      	pop	{r3, pc}
    return 0;
 8001364:	2000      	movs	r0, #0
 8001366:	e7fc      	b.n	8001362 <cliArgsIsStr+0x22>
 8001368:	20000454 	.word	0x20000454

0800136c <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <cliArgsGetFloat+0x1c>)
 800136e:	f8b3 22cc 	ldrh.w	r2, [r3, #716]	; 0x2cc
 8001372:	4282      	cmp	r2, r0
 8001374:	d906      	bls.n	8001384 <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001376:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800137a:	2100      	movs	r1, #0
 800137c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001380:	f006 ba82 	b.w	8007888 <strtof>
}
 8001384:	2000      	movs	r0, #0
 8001386:	4770      	bx	lr
 8001388:	20000454 	.word	0x20000454

0800138c <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <cliArgsGetData+0x20>)
 800138e:	f8b3 22cc 	ldrh.w	r2, [r3, #716]	; 0x2cc
 8001392:	4282      	cmp	r2, r0
 8001394:	d907      	bls.n	80013a6 <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001396:	2200      	movs	r2, #0
 8001398:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800139c:	4611      	mov	r1, r2
 800139e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80013a2:	f006 bb61 	b.w	8007a68 <strtoul>
}
 80013a6:	2000      	movs	r0, #0
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000454 	.word	0x20000454

080013b0 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80013b0:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->hist_line_count == 0)
 80013b2:	4c24      	ldr	r4, [pc, #144]	; (8001444 <cliLineChange.constprop.0+0x94>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80013b4:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 80013b6:	f894 30d7 	ldrb.w	r3, [r4, #215]	; 0xd7
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d03d      	beq.n	800143a <cliLineChange.constprop.0+0x8a>
  if (p_cli->line.cursor > 0)
 80013be:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
 80013c2:	b11a      	cbz	r2, 80013cc <cliLineChange.constprop.0+0x1c>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80013c4:	4920      	ldr	r1, [pc, #128]	; (8001448 <cliLineChange.constprop.0+0x98>)
 80013c6:	7820      	ldrb	r0, [r4, #0]
 80013c8:	f000 fdfc 	bl	8001fc4 <uartPrintf>
  if (p_cli->line.count > 0)
 80013cc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
 80013d0:	b11a      	cbz	r2, 80013da <cliLineChange.constprop.0+0x2a>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80013d2:	491e      	ldr	r1, [pc, #120]	; (800144c <cliLineChange.constprop.0+0x9c>)
 80013d4:	7820      	ldrb	r0, [r4, #0]
 80013d6:	f000 fdf5 	bl	8001fc4 <uartPrintf>
  if (key_up == true)
 80013da:	2d01      	cmp	r5, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80013dc:	f894 20d7 	ldrb.w	r2, [r4, #215]	; 0xd7
  if (key_up == true)
 80013e0:	d12c      	bne.n	800143c <cliLineChange.constprop.0+0x8c>
    if (p_cli->hist_line_new == true)
 80013e2:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80013e6:	b11b      	cbz	r3, 80013f0 <cliLineChange.constprop.0+0x40>
      p_cli->hist_line_i = p_cli->hist_line_last;
 80013e8:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
 80013ec:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80013f0:	f994 30d5 	ldrsb.w	r3, [r4, #213]	; 0xd5
 80013f4:	4413      	add	r3, r2
 80013f6:	3b01      	subs	r3, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80013f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80013fc:	fb02 3311 	mls	r3, r2, r1, r3
  p_cli->line = p_cli->line_buf[change_i];
 8001400:	2223      	movs	r2, #35	; 0x23
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001402:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
    change_i = p_cli->hist_line_i;
 8001406:	b2db      	uxtb	r3, r3
  p_cli->line = p_cli->line_buf[change_i];
 8001408:	fb02 4303 	mla	r3, r2, r3, r4
 800140c:	4d10      	ldr	r5, [pc, #64]	; (8001450 <cliLineChange.constprop.0+0xa0>)
 800140e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8001412:	33f8      	adds	r3, #248	; 0xf8
 8001414:	462e      	mov	r6, r5
 8001416:	6810      	ldr	r0, [r2, #0]
 8001418:	6851      	ldr	r1, [r2, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	c603      	stmia	r6!, {r0, r1}
 800141e:	429a      	cmp	r2, r3
 8001420:	4635      	mov	r5, r6
 8001422:	d1f7      	bne.n	8001414 <cliLineChange.constprop.0+0x64>
 8001424:	7893      	ldrb	r3, [r2, #2]
 8001426:	8811      	ldrh	r1, [r2, #0]
 8001428:	70b3      	strb	r3, [r6, #2]
 800142a:	8031      	strh	r1, [r6, #0]
  p_cli->line.cursor = p_cli->line.count;
 800142c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
 8001430:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
  p_cli->hist_line_new = false;
 8001434:	2300      	movs	r3, #0
 8001436:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
}
 800143a:	bd70      	pop	{r4, r5, r6, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800143c:	f994 30d5 	ldrsb.w	r3, [r4, #213]	; 0xd5
 8001440:	3301      	adds	r3, #1
 8001442:	e7d9      	b.n	80013f8 <cliLineChange.constprop.0+0x48>
 8001444:	20000454 	.word	0x20000454
 8001448:	0800a925 	.word	0x0800a925
 800144c:	0800a92b 	.word	0x0800a92b
 8001450:	200005b8 	.word	0x200005b8

08001454 <cliOpen>:
{
 8001454:	b510      	push	{r4, lr}
  cli_node.ch = ch;
 8001456:	4c03      	ldr	r4, [pc, #12]	; (8001464 <cliOpen+0x10>)
 8001458:	7020      	strb	r0, [r4, #0]
  cli_node.baud = baud;
 800145a:	6061      	str	r1, [r4, #4]
  cli_node.is_open = uartOpen(ch, baud);
 800145c:	f000 fd0c 	bl	8001e78 <uartOpen>
 8001460:	7220      	strb	r0, [r4, #8]
}
 8001462:	bd10      	pop	{r4, pc}
 8001464:	20000454 	.word	0x20000454

08001468 <cliShowLog>:
{
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_node.is_log == true)
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <cliShowLog+0x90>)
{
 800146c:	4604      	mov	r4, r0
  if (cli_node.is_log == true)
 800146e:	7a5b      	ldrb	r3, [r3, #9]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d03f      	beq.n	80014f4 <cliShowLog+0x8c>
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001474:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
 8001478:	4920      	ldr	r1, [pc, #128]	; (80014fc <cliShowLog+0x94>)
 800147a:	7a80      	ldrb	r0, [r0, #10]
 800147c:	f000 fda2 	bl	8001fc4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001480:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
 8001484:	491e      	ldr	r1, [pc, #120]	; (8001500 <cliShowLog+0x98>)
 8001486:	7aa0      	ldrb	r0, [r4, #10]
 8001488:	f000 fd9c 	bl	8001fc4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800148c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
 8001490:	491c      	ldr	r1, [pc, #112]	; (8001504 <cliShowLog+0x9c>)
 8001492:	7aa0      	ldrb	r0, [r4, #10]
 8001494:	f000 fd96 	bl	8001fc4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001498:	491b      	ldr	r1, [pc, #108]	; (8001508 <cliShowLog+0xa0>)
 800149a:	f504 72b2 	add.w	r2, r4, #356	; 0x164
 800149e:	7aa0      	ldrb	r0, [r4, #10]
 80014a0:	f000 fd90 	bl	8001fc4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80014a4:	f994 20d5 	ldrsb.w	r2, [r4, #213]	; 0xd5
 80014a8:	4918      	ldr	r1, [pc, #96]	; (800150c <cliShowLog+0xa4>)
 80014aa:	7aa0      	ldrb	r0, [r4, #10]
 80014ac:	f000 fd8a 	bl	8001fc4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80014b0:	f894 20d6 	ldrb.w	r2, [r4, #214]	; 0xd6
 80014b4:	4916      	ldr	r1, [pc, #88]	; (8001510 <cliShowLog+0xa8>)
 80014b6:	7aa0      	ldrb	r0, [r4, #10]
 80014b8:	f000 fd84 	bl	8001fc4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80014bc:	f894 20d7 	ldrb.w	r2, [r4, #215]	; 0xd7
 80014c0:	4914      	ldr	r1, [pc, #80]	; (8001514 <cliShowLog+0xac>)
 80014c2:	7aa0      	ldrb	r0, [r4, #10]
 80014c4:	f000 fd7e 	bl	8001fc4 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80014c8:	2500      	movs	r5, #0
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80014ca:	4f13      	ldr	r7, [pc, #76]	; (8001518 <cliShowLog+0xb0>)
 80014cc:	f104 06d8 	add.w	r6, r4, #216	; 0xd8
    for (int i=0; i<p_cli->hist_line_count; i++)
 80014d0:	f894 30d7 	ldrb.w	r3, [r4, #215]	; 0xd7
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80014d4:	7aa0      	ldrb	r0, [r4, #10]
    for (int i=0; i<p_cli->hist_line_count; i++)
 80014d6:	429d      	cmp	r5, r3
 80014d8:	db04      	blt.n	80014e4 <cliShowLog+0x7c>
}
 80014da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uartPrintf(p_cli->log_ch, "\n");
 80014de:	490f      	ldr	r1, [pc, #60]	; (800151c <cliShowLog+0xb4>)
 80014e0:	f000 bd70 	b.w	8001fc4 <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80014e4:	4633      	mov	r3, r6
 80014e6:	462a      	mov	r2, r5
 80014e8:	4639      	mov	r1, r7
 80014ea:	f000 fd6b 	bl	8001fc4 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80014ee:	3501      	adds	r5, #1
 80014f0:	3623      	adds	r6, #35	; 0x23
 80014f2:	e7ed      	b.n	80014d0 <cliShowLog+0x68>
}
 80014f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000454 	.word	0x20000454
 80014fc:	0800a931 	.word	0x0800a931
 8001500:	0800a93f 	.word	0x0800a93f
 8001504:	0800a94d 	.word	0x0800a94d
 8001508:	0800a95b 	.word	0x0800a95b
 800150c:	0800a969 	.word	0x0800a969
 8001510:	0800a977 	.word	0x0800a977
 8001514:	0800a985 	.word	0x0800a985
 8001518:	0800a993 	.word	0x0800a993
 800151c:	0800a9c0 	.word	0x0800a9c0

08001520 <cliPrintf>:
{
 8001520:	b40f      	push	{r0, r1, r2, r3}
 8001522:	b537      	push	{r0, r1, r2, r4, r5, lr}
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001524:	4c0a      	ldr	r4, [pc, #40]	; (8001550 <cliPrintf+0x30>)
{
 8001526:	ab06      	add	r3, sp, #24
 8001528:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800152c:	f104 0511 	add.w	r5, r4, #17
 8001530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001534:	4628      	mov	r0, r5
  va_start (arg, fmt);
 8001536:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001538:	f006 facc 	bl	8007ad4 <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800153c:	4629      	mov	r1, r5
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800153e:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001540:	7820      	ldrb	r0, [r4, #0]
 8001542:	f000 fd21 	bl	8001f88 <uartWrite>
}
 8001546:	b003      	add	sp, #12
 8001548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800154c:	b004      	add	sp, #16
 800154e:	4770      	bx	lr
 8001550:	20000454 	.word	0x20000454

08001554 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 8001556:	480e      	ldr	r0, [pc, #56]	; (8001590 <cliShowList+0x3c>)
 8001558:	f7ff ffe2 	bl	8001520 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <cliShowList+0x40>)
 800155e:	f7ff ffdf 	bl	8001520 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8001562:	2500      	movs	r5, #0
 8001564:	4c0c      	ldr	r4, [pc, #48]	; (8001598 <cliShowList+0x44>)
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
    cliPrintf("\r\n");
 8001566:	4f0a      	ldr	r7, [pc, #40]	; (8001590 <cliShowList+0x3c>)
  for (int i=0; i<p_cli->cmd_count; i++)
 8001568:	f5a4 76c6 	sub.w	r6, r4, #396	; 0x18c
 800156c:	f8b6 3188 	ldrh.w	r3, [r6, #392]	; 0x188
 8001570:	42ab      	cmp	r3, r5
 8001572:	dc04      	bgt.n	800157e <cliShowList+0x2a>
  }

  cliPrintf("-----------------------------\r\n");
}
 8001574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cliPrintf("-----------------------------\r\n");
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <cliShowList+0x48>)
 800157a:	f7ff bfd1 	b.w	8001520 <cliPrintf>
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ffce 	bl	8001520 <cliPrintf>
    cliPrintf("\r\n");
 8001584:	4638      	mov	r0, r7
 8001586:	f7ff ffcb 	bl	8001520 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800158a:	3501      	adds	r5, #1
 800158c:	3414      	adds	r4, #20
 800158e:	e7ed      	b.n	800156c <cliShowList+0x18>
 8001590:	0800a9bf 	.word	0x0800a9bf
 8001594:	0800a9a2 	.word	0x0800a9a2
 8001598:	200005e0 	.word	0x200005e0
 800159c:	0800a9c2 	.word	0x0800a9c2

080015a0 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80015a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80015a4:	8803      	ldrh	r3, [r0, #0]
{
 80015a6:	b085      	sub	sp, #20
  char **argv = args->argv;


  if(args->argc < 1)
 80015a8:	b92b      	cbnz	r3, 80015b6 <cliMemoryDump+0x16>
  {
    cliPrintf(">> md addr [size] \n");
 80015aa:	482d      	ldr	r0, [pc, #180]	; (8001660 <cliMemoryDump+0xc0>)
      }
      cliPrintf("|\n   ");
    }
    addr++;
  }
}
 80015ac:	b005      	add	sp, #20
 80015ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 80015b2:	f7ff bfb5 	b.w	8001520 <cliPrintf>
  if(argc > 1)
 80015b6:	2b01      	cmp	r3, #1
  char **argv = args->argv;
 80015b8:	6844      	ldr	r4, [r0, #4]
  if(argc > 1)
 80015ba:	d015      	beq.n	80015e8 <cliMemoryDump+0x48>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	6860      	ldr	r0, [r4, #4]
 80015c0:	4611      	mov	r1, r2
 80015c2:	f006 fa51 	bl	8007a68 <strtoul>
 80015c6:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6820      	ldr	r0, [r4, #0]
 80015cc:	4611      	mov	r1, r2
 80015ce:	f006 fa4b 	bl	8007a68 <strtoul>
 80015d2:	4604      	mov	r4, r0
  cliPrintf("\n   ");
 80015d4:	4823      	ldr	r0, [pc, #140]	; (8001664 <cliMemoryDump+0xc4>)
 80015d6:	f7ff ffa3 	bl	8001520 <cliPrintf>
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80015da:	4627      	mov	r7, r4
  for (idx = 0; idx<size; idx++)
 80015dc:	2500      	movs	r5, #0
 80015de:	42b5      	cmp	r5, r6
 80015e0:	db04      	blt.n	80015ec <cliMemoryDump+0x4c>
}
 80015e2:	b005      	add	sp, #20
 80015e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 80015e8:	2610      	movs	r6, #16
 80015ea:	e7ed      	b.n	80015c8 <cliMemoryDump+0x28>
    if((idx%4) == 0)
 80015ec:	f015 0803 	ands.w	r8, r5, #3
 80015f0:	d103      	bne.n	80015fa <cliMemoryDump+0x5a>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80015f2:	4639      	mov	r1, r7
 80015f4:	481c      	ldr	r0, [pc, #112]	; (8001668 <cliMemoryDump+0xc8>)
 80015f6:	f7ff ff93 	bl	8001520 <cliPrintf>
    cliPrintf(" 0x%08X", *(addr));
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	481b      	ldr	r0, [pc, #108]	; (800166c <cliMemoryDump+0xcc>)
 80015fe:	f7ff ff8f 	bl	8001520 <cliPrintf>
    if ((idx%4) == 3)
 8001602:	f1b8 0f03 	cmp.w	r8, #3
 8001606:	d124      	bne.n	8001652 <cliMemoryDump+0xb2>
      cliPrintf ("  |");
 8001608:	4819      	ldr	r0, [pc, #100]	; (8001670 <cliMemoryDump+0xd0>)
 800160a:	f7ff ff89 	bl	8001520 <cliPrintf>
            cliPrintf(".");
 800160e:	f8df a064 	ldr.w	sl, [pc, #100]	; 8001674 <cliMemoryDump+0xd4>
 8001612:	f104 0310 	add.w	r3, r4, #16
            cliPrintf("%c", asc[i]);
 8001616:	f8df b060 	ldr.w	fp, [pc, #96]	; 8001678 <cliMemoryDump+0xd8>
 800161a:	9301      	str	r3, [sp, #4]
        for (i=0;i<4;i++)
 800161c:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	f10d 080c 	add.w	r8, sp, #12
 8001626:	9303      	str	r3, [sp, #12]
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8001628:	f818 1b01 	ldrb.w	r1, [r8], #1
 800162c:	f1a1 0220 	sub.w	r2, r1, #32
 8001630:	2a5e      	cmp	r2, #94	; 0x5e
 8001632:	d811      	bhi.n	8001658 <cliMemoryDump+0xb8>
            cliPrintf("%c", asc[i]);
 8001634:	4658      	mov	r0, fp
 8001636:	f7ff ff73 	bl	8001520 <cliPrintf>
        for (i=0;i<4;i++)
 800163a:	f109 0901 	add.w	r9, r9, #1
 800163e:	f1b9 0f04 	cmp.w	r9, #4
 8001642:	d1f1      	bne.n	8001628 <cliMemoryDump+0x88>
      for (idx1= 0; idx1< 4; idx1++)
 8001644:	9b01      	ldr	r3, [sp, #4]
        ascptr+=1;
 8001646:	3404      	adds	r4, #4
      for (idx1= 0; idx1< 4; idx1++)
 8001648:	429c      	cmp	r4, r3
 800164a:	d1e7      	bne.n	800161c <cliMemoryDump+0x7c>
      cliPrintf("|\n   ");
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <cliMemoryDump+0xdc>)
 800164e:	f7ff ff67 	bl	8001520 <cliPrintf>
    addr++;
 8001652:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 8001654:	3501      	adds	r5, #1
 8001656:	e7c2      	b.n	80015de <cliMemoryDump+0x3e>
            cliPrintf(".");
 8001658:	4650      	mov	r0, sl
 800165a:	f7ff ff61 	bl	8001520 <cliPrintf>
 800165e:	e7ec      	b.n	800163a <cliMemoryDump+0x9a>
 8001660:	0800a9e2 	.word	0x0800a9e2
 8001664:	0800aa12 	.word	0x0800aa12
 8001668:	0800a9f6 	.word	0x0800a9f6
 800166c:	0800aa00 	.word	0x0800aa00
 8001670:	0800aa08 	.word	0x0800aa08
 8001674:	0800aa0f 	.word	0x0800aa0f
 8001678:	0800aa0c 	.word	0x0800aa0c
 800167c:	0800aa11 	.word	0x0800aa11

08001680 <cliMain>:
{
 8001680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 8001684:	4ca6      	ldr	r4, [pc, #664]	; (8001920 <cliMain+0x2a0>)
{
 8001686:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 8001688:	7a27      	ldrb	r7, [r4, #8]
 800168a:	2f00      	cmp	r7, #0
 800168c:	f000 8142 	beq.w	8001914 <cliMain+0x294>
  if (uartAvailable(cli_node.ch) > 0)
 8001690:	7820      	ldrb	r0, [r4, #0]
 8001692:	f000 fc49 	bl	8001f28 <uartAvailable>
 8001696:	2800      	cmp	r0, #0
 8001698:	f000 813c 	beq.w	8001914 <cliMain+0x294>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800169c:	7820      	ldrb	r0, [r4, #0]
 800169e:	f000 fc59 	bl	8001f54 <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 80016a2:	f894 8010 	ldrb.w	r8, [r4, #16]
 80016a6:	f88d 0007 	strb.w	r0, [sp, #7]
 80016aa:	f1b8 0f00 	cmp.w	r8, #0
 80016ae:	f040 80e9 	bne.w	8001884 <cliMain+0x204>
    switch(rx_data)
 80016b2:	281b      	cmp	r0, #27
 80016b4:	f000 8129 	beq.w	800190a <cliMain+0x28a>
 80016b8:	d852      	bhi.n	8001760 <cliMain+0xe0>
 80016ba:	2808      	cmp	r0, #8
 80016bc:	f000 80f9 	beq.w	80018b2 <cliMain+0x232>
 80016c0:	280d      	cmp	r0, #13
 80016c2:	d06a      	beq.n	800179a <cliMain+0x11a>
        if ((line->count + 1) < line->buf_len)
 80016c4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
 80016c8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	4291      	cmp	r1, r2
 80016d0:	f280 811d 	bge.w	800190e <cliMain+0x28e>
          if (line->cursor == line->count)
 80016d4:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
 80016d8:	429a      	cmp	r2, r3
 80016da:	d119      	bne.n	8001710 <cliMain+0x90>
            uartWrite(p_cli->ch, &rx_data, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	f10d 0107 	add.w	r1, sp, #7
 80016e2:	7820      	ldrb	r0, [r4, #0]
 80016e4:	f000 fc50 	bl	8001f88 <uartWrite>
            line->buf[line->cursor] = rx_data;
 80016e8:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
 80016ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80016f0:	18a3      	adds	r3, r4, r2
            line->cursor++;
 80016f2:	3201      	adds	r2, #1
 80016f4:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
            line->buf[line->count] = 0;
 80016f8:	2200      	movs	r2, #0
            line->buf[line->cursor] = rx_data;
 80016fa:	f883 1164 	strb.w	r1, [r3, #356]	; 0x164
            line->count++;
 80016fe:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
 8001702:	3301      	adds	r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
            line->buf[line->count] = 0;
 800170a:	4423      	add	r3, r4
 800170c:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
          if (line->cursor < line->count)
 8001710:	f894 6185 	ldrb.w	r6, [r4, #389]	; 0x185
 8001714:	f894 5186 	ldrb.w	r5, [r4, #390]	; 0x186
 8001718:	42ae      	cmp	r6, r5
 800171a:	f080 80b3 	bcs.w	8001884 <cliMain+0x204>
            mov_len = line->count - line->cursor;
 800171e:	1baa      	subs	r2, r5, r6
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	f505 71b2 	add.w	r1, r5, #356	; 0x164
 8001726:	f205 1065 	addw	r0, r5, #357	; 0x165
 800172a:	1a89      	subs	r1, r1, r2
 800172c:	1a80      	subs	r0, r0, r2
 800172e:	4421      	add	r1, r4
 8001730:	4420      	add	r0, r4
 8001732:	f004 fe15 	bl	8006360 <memmove>
            line->buf[line->count] = 0;
 8001736:	2100      	movs	r1, #0
            line->buf[line->cursor] = rx_data;
 8001738:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800173c:	19a3      	adds	r3, r4, r6
 800173e:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
            line->count++;
 8001742:	1c6b      	adds	r3, r5, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
            line->buf[line->count] = 0;
 800174a:	4423      	add	r3, r4
            line->cursor++;
 800174c:	3601      	adds	r6, #1
            line->buf[line->count] = 0;
 800174e:	f883 1164 	strb.w	r1, [r3, #356]	; 0x164
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001752:	7820      	ldrb	r0, [r4, #0]
 8001754:	4973      	ldr	r1, [pc, #460]	; (8001924 <cliMain+0x2a4>)
            line->cursor++;
 8001756:	f884 6185 	strb.w	r6, [r4, #389]	; 0x185
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800175a:	f000 fc33 	bl	8001fc4 <uartPrintf>
 800175e:	e091      	b.n	8001884 <cliMain+0x204>
    switch(rx_data)
 8001760:	287f      	cmp	r0, #127	; 0x7f
 8001762:	d1af      	bne.n	80016c4 <cliMain+0x44>
        if (line->cursor < line->count)
 8001764:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
 8001768:	f894 5186 	ldrb.w	r5, [r4, #390]	; 0x186
 800176c:	42a8      	cmp	r0, r5
 800176e:	f080 80ce 	bcs.w	800190e <cliMain+0x28e>
          mov_len = line->count - line->cursor;
 8001772:	1a2a      	subs	r2, r5, r0
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001774:	f200 1165 	addw	r1, r0, #357	; 0x165
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f500 70b2 	add.w	r0, r0, #356	; 0x164
          line->count--;
 800177e:	3d01      	subs	r5, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001780:	4421      	add	r1, r4
          line->count--;
 8001782:	b2ed      	uxtb	r5, r5
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001784:	3a01      	subs	r2, #1
 8001786:	4420      	add	r0, r4
 8001788:	f004 fdea 	bl	8006360 <memmove>
          line->count--;
 800178c:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
          line->buf[line->count] = 0; // 마지막 버퍼에 Null 문자 넣기
 8001790:	4425      	add	r5, r4
          uartPrintf(p_cli->ch, "\x1B[1P"); //teraterm에서 오른쪽 문자하나를 삭제해줌
 8001792:	4965      	ldr	r1, [pc, #404]	; (8001928 <cliMain+0x2a8>)
          line->buf[line->count] = 0; // 마지막 버퍼에 Null 문자 넣기
 8001794:	f885 8164 	strb.w	r8, [r5, #356]	; 0x164
          uartPrintf(p_cli->ch, "\x1B[1P"); //teraterm에서 오른쪽 문자하나를 삭제해줌
 8001798:	e071      	b.n	800187e <cliMain+0x1fe>
        if (line->count > 0)
 800179a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d061      	beq.n	8001866 <cliMain+0x1e6>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80017a2:	2323      	movs	r3, #35	; 0x23
 80017a4:	f894 20d6 	ldrb.w	r2, [r4, #214]	; 0xd6
 80017a8:	f504 75b2 	add.w	r5, r4, #356	; 0x164
 80017ac:	fb03 4302 	mla	r3, r3, r2, r4
 80017b0:	f504 7cc2 	add.w	ip, r4, #388	; 0x184
 80017b4:	33d8      	adds	r3, #216	; 0xd8
 80017b6:	462e      	mov	r6, r5
 80017b8:	ce03      	ldmia	r6!, {r0, r1}
 80017ba:	4566      	cmp	r6, ip
 80017bc:	6018      	str	r0, [r3, #0]
 80017be:	6059      	str	r1, [r3, #4]
 80017c0:	4635      	mov	r5, r6
 80017c2:	f103 0308 	add.w	r3, r3, #8
 80017c6:	d1f6      	bne.n	80017b6 <cliMain+0x136>
 80017c8:	8830      	ldrh	r0, [r6, #0]
 80017ca:	78b1      	ldrb	r1, [r6, #2]
 80017cc:	8018      	strh	r0, [r3, #0]
 80017ce:	7099      	strb	r1, [r3, #2]
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80017d0:	f894 30d7 	ldrb.w	r3, [r4, #215]	; 0xd7
  p_cli->argc = 0;
 80017d4:	2600      	movs	r6, #0
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80017d6:	2b03      	cmp	r3, #3
    p_cli->hist_line_count++;
 80017d8:	bf9c      	itt	ls
 80017da:	3301      	addls	r3, #1
 80017dc:	f884 30d7 	strbls.w	r3, [r4, #215]	; 0xd7
  p_cli->hist_line_new  = true;
 80017e0:	2301      	movs	r3, #1
  p_cli->hist_line_i    = p_cli->hist_line_last;
 80017e2:	f884 20d5 	strb.w	r2, [r4, #213]	; 0xd5
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80017e6:	3201      	adds	r2, #1
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	f884 20d6 	strb.w	r2, [r4, #214]	; 0xd6
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80017f0:	494e      	ldr	r1, [pc, #312]	; (800192c <cliMain+0x2ac>)
 80017f2:	484f      	ldr	r0, [pc, #316]	; (8001930 <cliMain+0x2b0>)
 80017f4:	aa02      	add	r2, sp, #8
  p_cli->hist_line_new  = true;
 80017f6:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
  p_cli->argc = 0;
 80017fa:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
  argv[argc] = NULL;
 80017fe:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001802:	f006 f8bb 	bl	800797c <strtok_r>
 8001806:	4633      	mov	r3, r6
 8001808:	4605      	mov	r5, r0
 800180a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800192c <cliMain+0x2ac>
 800180e:	b29a      	uxth	r2, r3
 8001810:	1c5e      	adds	r6, r3, #1
 8001812:	2d00      	cmp	r5, #0
 8001814:	d13e      	bne.n	8001894 <cliMain+0x214>
  p_cli->argc = argc;
 8001816:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
  if (argc > 0)
 800181a:	b322      	cbz	r2, 8001866 <cliMain+0x1e6>
    cliPrintf("\r\n");
 800181c:	4845      	ldr	r0, [pc, #276]	; (8001934 <cliMain+0x2b4>)
 800181e:	f7ff fe7f 	bl	8001520 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 8001822:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8001826:	f7ff fd69 	bl	80012fc <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 800182a:	4e43      	ldr	r6, [pc, #268]	; (8001938 <cliMain+0x2b8>)
 800182c:	f8b4 8188 	ldrh.w	r8, [r4, #392]	; 0x188
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001830:	f8d4 9094 	ldr.w	r9, [r4, #148]	; 0x94
    for (int i=0; i<p_cli->cmd_count; i++)
 8001834:	4545      	cmp	r5, r8
 8001836:	da16      	bge.n	8001866 <cliMain+0x1e6>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001838:	4631      	mov	r1, r6
 800183a:	4648      	mov	r0, r9
 800183c:	f7fe fc88 	bl	8000150 <strcmp>
 8001840:	3614      	adds	r6, #20
 8001842:	2800      	cmp	r0, #0
 8001844:	d133      	bne.n	80018ae <cliMain+0x22e>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001846:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800184a:	483c      	ldr	r0, [pc, #240]	; (800193c <cliMain+0x2bc>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800184c:	3b01      	subs	r3, #1
 800184e:	f8a4 32cc 	strh.w	r3, [r4, #716]	; 0x2cc
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001852:	2314      	movs	r3, #20
 8001854:	fb03 4505 	mla	r5, r3, r5, r4
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001858:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800185c:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
 8001860:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8001864:	4798      	blx	r3
        line->count = 0;
 8001866:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 8001868:	4935      	ldr	r1, [pc, #212]	; (8001940 <cliMain+0x2c0>)
 800186a:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 800186c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
        line->cursor = 0;
 8001870:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
        line->buf[0] = 0;
 8001874:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
  uartPrintf(p_cli->ch, "\n\r");
 8001878:	f000 fba4 	bl	8001fc4 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800187c:	4931      	ldr	r1, [pc, #196]	; (8001944 <cliMain+0x2c4>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800187e:	7820      	ldrb	r0, [r4, #0]
 8001880:	f000 fba0 	bl	8001fc4 <uartPrintf>
  switch(p_cli->state)
 8001884:	7c23      	ldrb	r3, [r4, #16]
 8001886:	3b01      	subs	r3, #1
 8001888:	2b03      	cmp	r3, #3
 800188a:	d840      	bhi.n	800190e <cliMain+0x28e>
 800188c:	e8df f003 	tbb	[pc, r3]
 8001890:	d95e463d 	.word	0xd95e463d
    argv[argc++] = tok;
 8001894:	b29b      	uxth	r3, r3
 8001896:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800189a:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800189e:	4641      	mov	r1, r8
 80018a0:	2000      	movs	r0, #0
 80018a2:	aa02      	add	r2, sp, #8
 80018a4:	f006 f86a 	bl	800797c <strtok_r>
 80018a8:	4633      	mov	r3, r6
 80018aa:	4605      	mov	r5, r0
 80018ac:	e7af      	b.n	800180e <cliMain+0x18e>
    for (int i=0; i<p_cli->cmd_count; i++)
 80018ae:	3501      	adds	r5, #1
 80018b0:	e7c0      	b.n	8001834 <cliMain+0x1b4>
        if (line->count > 0 && line->cursor > 0)
 80018b2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
        if (line->cursor < line->count)
 80018b6:	f894 6185 	ldrb.w	r6, [r4, #389]	; 0x185
        if (line->count > 0 && line->cursor > 0)
 80018ba:	b92b      	cbnz	r3, 80018c8 <cliMain+0x248>
        if (line->cursor > 0)
 80018bc:	b33e      	cbz	r6, 800190e <cliMain+0x28e>
          line->cursor--;
 80018be:	1e73      	subs	r3, r6, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80018c0:	4921      	ldr	r1, [pc, #132]	; (8001948 <cliMain+0x2c8>)
          line->cursor--;
 80018c2:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80018c6:	e7da      	b.n	800187e <cliMain+0x1fe>
        if (line->count > 0 && line->cursor > 0)
 80018c8:	b30e      	cbz	r6, 800190e <cliMain+0x28e>
          if (line->cursor == line->count)
 80018ca:	42b3      	cmp	r3, r6
 80018cc:	d106      	bne.n	80018dc <cliMain+0x25c>
            line->count--;
 80018ce:	1e73      	subs	r3, r6, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
            line->buf[line->count] = 0;
 80018d6:	4423      	add	r3, r4
 80018d8:	f883 8164 	strb.w	r8, [r3, #356]	; 0x164
          if (line->cursor < line->count)
 80018dc:	f894 5186 	ldrb.w	r5, [r4, #390]	; 0x186
 80018e0:	42b5      	cmp	r5, r6
 80018e2:	d9ec      	bls.n	80018be <cliMain+0x23e>
            mov_len = line->count - line->cursor;
 80018e4:	1baa      	subs	r2, r5, r6
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80018e6:	f506 71b2 	add.w	r1, r6, #356	; 0x164
 80018ea:	f206 1063 	addw	r0, r6, #355	; 0x163
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	4421      	add	r1, r4
 80018f2:	4420      	add	r0, r4
 80018f4:	f004 fd34 	bl	8006360 <memmove>
            line->buf[line->count] = 0;
 80018f8:	2300      	movs	r3, #0
            line->count--;
 80018fa:	3d01      	subs	r5, #1
 80018fc:	b2ed      	uxtb	r5, r5
 80018fe:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
            line->buf[line->count] = 0;
 8001902:	4425      	add	r5, r4
 8001904:	f885 3164 	strb.w	r3, [r5, #356]	; 0x164
        if (line->cursor > 0)
 8001908:	e7d9      	b.n	80018be <cliMain+0x23e>
      p_cli->state = CLI_RX_SP2;
 800190a:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 800190c:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 800190e:	4804      	ldr	r0, [pc, #16]	; (8001920 <cliMain+0x2a0>)
 8001910:	f7ff fdaa 	bl	8001468 <cliShowLog>
}
 8001914:	4638      	mov	r0, r7
 8001916:	b005      	add	sp, #20
 8001918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_cli->state = CLI_RX_SP3;
 800191c:	2303      	movs	r3, #3
 800191e:	e7f5      	b.n	800190c <cliMain+0x28c>
 8001920:	20000454 	.word	0x20000454
 8001924:	0800aa2f 	.word	0x0800aa2f
 8001928:	0800aa2a 	.word	0x0800aa2a
 800192c:	0800aa17 	.word	0x0800aa17
 8001930:	200005b8 	.word	0x200005b8
 8001934:	0800a9bf 	.word	0x0800a9bf
 8001938:	200005e0 	.word	0x200005e0
 800193c:	200004ec 	.word	0x200004ec
 8001940:	0800aa1e 	.word	0x0800aa1e
 8001944:	0800aa21 	.word	0x0800aa21
 8001948:	0800aa27 	.word	0x0800aa27
      p_cli->state = CLI_RX_IDLE;
 800194c:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 800194e:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 8001952:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8001954:	2a44      	cmp	r2, #68	; 0x44
 8001956:	d112      	bne.n	800197e <cliMain+0x2fe>
        if (line->cursor > 0)
 8001958:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
 800195c:	b3ab      	cbz	r3, 80019ca <cliMain+0x34a>
          line->cursor--;
 800195e:	3b01      	subs	r3, #1
 8001960:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
          tx_buf[0] = 0x1B;
 8001964:	231b      	movs	r3, #27
 8001966:	f88d 3008 	strb.w	r3, [sp, #8]
          tx_buf[1] = 0x5B;
 800196a:	235b      	movs	r3, #91	; 0x5b
          tx_buf[2] = rx_data;
 800196c:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001970:	7820      	ldrb	r0, [r4, #0]
 8001972:	2203      	movs	r2, #3
 8001974:	a902      	add	r1, sp, #8
          tx_buf[1] = 0x5B;
 8001976:	f88d 3009 	strb.w	r3, [sp, #9]
          uartWrite(p_cli->ch, tx_buf, 3);
 800197a:	f000 fb05 	bl	8001f88 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 800197e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001982:	2b43      	cmp	r3, #67	; 0x43
 8001984:	d116      	bne.n	80019b4 <cliMain+0x334>
        if (line->cursor < line->buf_len)
 8001986:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
 800198a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        uartWrite(p_cli->ch, tx_buf, 3);
 800198e:	7820      	ldrb	r0, [r4, #0]
        if (line->cursor < line->buf_len)
 8001990:	429a      	cmp	r2, r3
          line->cursor++;
 8001992:	bf84      	itt	hi
 8001994:	3301      	addhi	r3, #1
 8001996:	f884 3185 	strbhi.w	r3, [r4, #389]	; 0x185
        tx_buf[0] = 0x1B;
 800199a:	231b      	movs	r3, #27
 800199c:	f88d 3008 	strb.w	r3, [sp, #8]
        tx_buf[1] = 0x5B;
 80019a0:	235b      	movs	r3, #91	; 0x5b
 80019a2:	f88d 3009 	strb.w	r3, [sp, #9]
        tx_buf[2] = rx_data;
 80019a6:	2343      	movs	r3, #67	; 0x43
        uartWrite(p_cli->ch, tx_buf, 3);
 80019a8:	2203      	movs	r2, #3
 80019aa:	a902      	add	r1, sp, #8
        tx_buf[2] = rx_data;
 80019ac:	f88d 300a 	strb.w	r3, [sp, #10]
        uartWrite(p_cli->ch, tx_buf, 3);
 80019b0:	f000 faea 	bl	8001f88 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 80019b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019b8:	2b41      	cmp	r3, #65	; 0x41
 80019ba:	d106      	bne.n	80019ca <cliMain+0x34a>
        cliLineChange(p_cli, true);
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff fcf7 	bl	80013b0 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80019c2:	4921      	ldr	r1, [pc, #132]	; (8001a48 <cliMain+0x3c8>)
 80019c4:	7820      	ldrb	r0, [r4, #0]
 80019c6:	f000 fafd 	bl	8001fc4 <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 80019ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019ce:	2b42      	cmp	r3, #66	; 0x42
 80019d0:	d106      	bne.n	80019e0 <cliMain+0x360>
        cliLineChange(p_cli, false);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff fcec 	bl	80013b0 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80019d8:	491b      	ldr	r1, [pc, #108]	; (8001a48 <cliMain+0x3c8>)
 80019da:	7820      	ldrb	r0, [r4, #0]
 80019dc:	f000 faf2 	bl	8001fc4 <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 80019e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019e4:	2b31      	cmp	r3, #49	; 0x31
 80019e6:	d10a      	bne.n	80019fe <cliMain+0x37e>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80019e8:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
 80019ec:	4917      	ldr	r1, [pc, #92]	; (8001a4c <cliMain+0x3cc>)
 80019ee:	7820      	ldrb	r0, [r4, #0]
 80019f0:	f000 fae8 	bl	8001fc4 <uartPrintf>
        line->cursor = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
        p_cli->state = CLI_RX_SP4;
 80019fa:	2304      	movs	r3, #4
 80019fc:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 80019fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a02:	2b34      	cmp	r3, #52	; 0x34
 8001a04:	d183      	bne.n	800190e <cliMain+0x28e>
        if (line->cursor < line->count)
 8001a06:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
 8001a0a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d205      	bcs.n	8001a1e <cliMain+0x39e>
          mov_len = line->count - line->cursor;
 8001a12:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <cliMain+0x3d0>)
 8001a16:	7820      	ldrb	r0, [r4, #0]
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f000 fad3 	bl	8001fc4 <uartPrintf>
        if (line->cursor > line->count)
 8001a1e:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
 8001a22:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d905      	bls.n	8001a36 <cliMain+0x3b6>
          mov_len = line->cursor - line->count;
 8001a2a:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <cliMain+0x3cc>)
 8001a2e:	7820      	ldrb	r0, [r4, #0]
 8001a30:	b292      	uxth	r2, r2
 8001a32:	f000 fac7 	bl	8001fc4 <uartPrintf>
        line->cursor = line->count;
 8001a36:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
 8001a3a:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
        p_cli->state = CLI_RX_SP4;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e764      	b.n	800190c <cliMain+0x28c>
      p_cli->state = CLI_RX_IDLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e762      	b.n	800190c <cliMain+0x28c>
 8001a46:	bf00      	nop
 8001a48:	200005b8 	.word	0x200005b8
 8001a4c:	0800a925 	.word	0x0800a925
 8001a50:	0800aa3a 	.word	0x0800aa3a

08001a54 <cliKeepLoop>:
{
 8001a54:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <cliKeepLoop+0x14>)
 8001a58:	7818      	ldrb	r0, [r3, #0]
 8001a5a:	f000 fa65 	bl	8001f28 <uartAvailable>
}
 8001a5e:	fab0 f080 	clz	r0, r0
 8001a62:	0940      	lsrs	r0, r0, #5
 8001a64:	bd08      	pop	{r3, pc}
 8001a66:	bf00      	nop
 8001a68:	20000454 	.word	0x20000454

08001a6c <cliAdd>:
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001a6e:	4d0e      	ldr	r5, [pc, #56]	; (8001aa8 <cliAdd+0x3c>)
{
 8001a70:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001a72:	f8b5 4188 	ldrh.w	r4, [r5, #392]	; 0x188
 8001a76:	2c0f      	cmp	r4, #15
 8001a78:	d814      	bhi.n	8001aa4 <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001a7a:	2314      	movs	r3, #20
 8001a7c:	435c      	muls	r4, r3
 8001a7e:	f504 73c6 	add.w	r3, r4, #396	; 0x18c
 8001a82:	442b      	add	r3, r5
 8001a84:	4601      	mov	r1, r0
  p_cli->cmd_list[index].cmd_func = p_func;
 8001a86:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f005 f8eb 	bl	8006c64 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001a8e:	f8c4 619c 	str.w	r6, [r4, #412]	; 0x19c
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001a92:	f7ff fc33 	bl	80012fc <cliToUpper>
  return ret;
 8001a96:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 8001a98:	f8b5 3188 	ldrh.w	r3, [r5, #392]	; 0x188
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f8a5 3188 	strh.w	r3, [r5, #392]	; 0x188
}
 8001aa2:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	e7fc      	b.n	8001aa2 <cliAdd+0x36>
 8001aa8:	20000454 	.word	0x20000454

08001aac <cliInit>:
{
 8001aac:	b508      	push	{r3, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001aae:	4911      	ldr	r1, [pc, #68]	; (8001af4 <cliInit+0x48>)
  cli_node.is_open = false;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <cliInit+0x4c>)
 8001ab2:	2200      	movs	r2, #0
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001ab4:	f8c3 12d4 	str.w	r1, [r3, #724]	; 0x2d4
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001ab8:	4910      	ldr	r1, [pc, #64]	; (8001afc <cliInit+0x50>)
  cli_node.is_open = false;
 8001aba:	811a      	strh	r2, [r3, #8]
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001abc:	f8c3 12d8 	str.w	r1, [r3, #728]	; 0x2d8
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001ac0:	490f      	ldr	r1, [pc, #60]	; (8001b00 <cliInit+0x54>)
  cli_node.hist_line_new   = false;
 8001ac2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001ac6:	f8c3 12dc 	str.w	r1, [r3, #732]	; 0x2dc
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <cliInit+0x58>)
  p_cli->line.buf[0]  = 0;
 8001acc:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001ad0:	f8c3 12e0 	str.w	r1, [r3, #736]	; 0x2e0
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001ad4:	211f      	movs	r1, #31
  cliAdd("help", cliShowList);
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <cliInit+0x5c>)
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001ad8:	f8a3 1184 	strh.w	r1, [r3, #388]	; 0x184
  cliAdd("help", cliShowList);
 8001adc:	490b      	ldr	r1, [pc, #44]	; (8001b0c <cliInit+0x60>)
  cli_node.state   = CLI_RX_IDLE;
 8001ade:	741a      	strb	r2, [r3, #16]
  p_cli->line.count   = 0;
 8001ae0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
  cliAdd("help", cliShowList);
 8001ae4:	f7ff ffc2 	bl	8001a6c <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001ae8:	4909      	ldr	r1, [pc, #36]	; (8001b10 <cliInit+0x64>)
 8001aea:	480a      	ldr	r0, [pc, #40]	; (8001b14 <cliInit+0x68>)
 8001aec:	f7ff ffbe 	bl	8001a6c <cliAdd>
}
 8001af0:	2001      	movs	r0, #1
 8001af2:	bd08      	pop	{r3, pc}
 8001af4:	0800138d 	.word	0x0800138d
 8001af8:	20000454 	.word	0x20000454
 8001afc:	0800136d 	.word	0x0800136d
 8001b00:	08001325 	.word	0x08001325
 8001b04:	08001341 	.word	0x08001341
 8001b08:	0800aa40 	.word	0x0800aa40
 8001b0c:	08001555 	.word	0x08001555
 8001b10:	080015a1 	.word	0x080015a1
 8001b14:	0800aa45 	.word	0x0800aa45

08001b18 <gpioPinMode>:
  return ret;
}


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8001b18:	b530      	push	{r4, r5, lr}
 8001b1a:	460d      	mov	r5, r1
 8001b1c:	b085      	sub	sp, #20
bool ret= true;

GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	2100      	movs	r1, #0
{
 8001b20:	4604      	mov	r4, r0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	2210      	movs	r2, #16
 8001b24:	4668      	mov	r0, sp
 8001b26:	f004 fc35 	bl	8006394 <memset>

switch (mode)
 8001b2a:	1e69      	subs	r1, r5, #1
 8001b2c:	2904      	cmp	r1, #4
 8001b2e:	d809      	bhi.n	8001b44 <gpioPinMode+0x2c>
 8001b30:	e8df f001 	tbb	[pc, r1]
 8001b34:	15061a03 	.word	0x15061a03
 8001b38:	18          	.byte	0x18
 8001b39:	00          	.byte	0x00
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    break;
  case _DEF_INPUT_PULLUP:
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_PULLUP;

    break;
  case _DEF_OUTPUT_PULLDOWN:
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b3c:	9302      	str	r3, [sp, #8]
    break;
 8001b3e:	e001      	b.n	8001b44 <gpioPinMode+0x2c>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	9301      	str	r3, [sp, #4]
}

GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
GPIO_InitStruct.Pin = gpio_tbl[ch].speed;
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <gpioPinMode+0x54>)
 8001b46:	0122      	lsls	r2, r4, #4
 8001b48:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8001b4c:	7a61      	ldrb	r1, [r4, #9]
HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8001b4e:	5898      	ldr	r0, [r3, r2]
GPIO_InitStruct.Pin = gpio_tbl[ch].speed;
 8001b50:	9100      	str	r1, [sp, #0]
HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8001b52:	4669      	mov	r1, sp
 8001b54:	f000 ffb4 	bl	8002ac0 <HAL_GPIO_Init>

return ret;
}
 8001b58:	2001      	movs	r0, #1
 8001b5a:	b005      	add	sp, #20
 8001b5c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b62:	e7eb      	b.n	8001b3c <gpioPinMode+0x24>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e7e7      	b.n	8001b3c <gpioPinMode+0x24>
 8001b6c:	20000004 	.word	0x20000004

08001b70 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
  if (ch >= GPIO_MAX_CH)
 8001b70:	2803      	cmp	r0, #3
{
 8001b72:	460a      	mov	r2, r1
 8001b74:	b410      	push	{r4}
  if (ch >= GPIO_MAX_CH)
 8001b76:	d80c      	bhi.n	8001b92 <gpioPinWrite+0x22>
      return;
    }

  if (value == true)
    {
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <gpioPinWrite+0x28>)
 8001b7a:	0104      	lsls	r4, r0, #4
 8001b7c:	eb01 1300 	add.w	r3, r1, r0, lsl #4
 8001b80:	5908      	ldr	r0, [r1, r4]
 8001b82:	8899      	ldrh	r1, [r3, #4]
  if (value == true)
 8001b84:	b11a      	cbz	r2, 8001b8e <gpioPinWrite+0x1e>
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001b86:	7a9a      	ldrb	r2, [r3, #10]
    }
  else
    {
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
    }
}
 8001b88:	bc10      	pop	{r4}
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8001b8a:	f001 b8e7 	b.w	8002d5c <HAL_GPIO_WritePin>
 8001b8e:	7ada      	ldrb	r2, [r3, #11]
 8001b90:	e7fa      	b.n	8001b88 <gpioPinWrite+0x18>
}
 8001b92:	bc10      	pop	{r4}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000004 	.word	0x20000004

08001b9c <gpioInit>:
{
 8001b9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  for (int i =0; i<GPIO_MAX_CH; i++)
 8001b9e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <gpioInit+0x58>)
 8001ba2:	4d15      	ldr	r5, [pc, #84]	; (8001bf8 <gpioInit+0x5c>)
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	f042 0204 	orr.w	r2, r2, #4
 8001baa:	619a      	str	r2, [r3, #24]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	f002 0204 	and.w	r2, r2, #4
 8001bb2:	9200      	str	r2, [sp, #0]
 8001bb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	f042 0208 	orr.w	r2, r2, #8
 8001bbc:	619a      	str	r2, [r3, #24]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	9b01      	ldr	r3, [sp, #4]
      gpioPinMode(i, gpio_tbl[i].mode);
 8001bc8:	b2e6      	uxtb	r6, r4
 8001bca:	7a29      	ldrb	r1, [r5, #8]
 8001bcc:	4630      	mov	r0, r6
 8001bce:	f7ff ffa3 	bl	8001b18 <gpioPinMode>
  for (int i =0; i<GPIO_MAX_CH; i++)
 8001bd2:	3401      	adds	r4, #1
      gpioPinWrite(i, gpio_tbl[i].init_value);
 8001bd4:	7b29      	ldrb	r1, [r5, #12]
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	f7ff ffca 	bl	8001b70 <gpioPinWrite>
  for (int i =0; i<GPIO_MAX_CH; i++)
 8001bdc:	2c04      	cmp	r4, #4
 8001bde:	f105 0510 	add.w	r5, r5, #16
 8001be2:	d1f1      	bne.n	8001bc8 <gpioInit+0x2c>
  cliAdd("gpio", cliGpio);
 8001be4:	4905      	ldr	r1, [pc, #20]	; (8001bfc <gpioInit+0x60>)
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <gpioInit+0x64>)
 8001be8:	f7ff ff40 	bl	8001a6c <cliAdd>
}
 8001bec:	2001      	movs	r0, #1
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	08001c2d 	.word	0x08001c2d
 8001c00:	0800aa48 	.word	0x0800aa48

08001c04 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
bool ret =false;

if (ch >= GPIO_MAX_CH)
 8001c04:	2803      	cmp	r0, #3
{
 8001c06:	b510      	push	{r4, lr}
if (ch >= GPIO_MAX_CH)
 8001c08:	d80c      	bhi.n	8001c24 <gpioPinRead+0x20>
  {
    return ret;
  }

if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin)== gpio_tbl[ch].on_state)
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <gpioPinRead+0x24>)
 8001c0c:	0102      	lsls	r2, r0, #4
 8001c0e:	eb03 1400 	add.w	r4, r3, r0, lsl #4
 8001c12:	88a1      	ldrh	r1, [r4, #4]
 8001c14:	5898      	ldr	r0, [r3, r2]
 8001c16:	f001 f89b 	bl	8002d50 <HAL_GPIO_ReadPin>
 8001c1a:	7aa3      	ldrb	r3, [r4, #10]
 8001c1c:	1a1b      	subs	r3, r3, r0
 8001c1e:	4258      	negs	r0, r3
 8001c20:	4158      	adcs	r0, r3
  {
    ret= true;
  }

return ret;
}
 8001c22:	bd10      	pop	{r4, pc}
    return ret;
 8001c24:	2000      	movs	r0, #0
 8001c26:	e7fc      	b.n	8001c22 <gpioPinRead+0x1e>
 8001c28:	20000004 	.word	0x20000004

08001c2c <cliGpio>:
#ifdef _USE_HW_CLI
void cliGpio(cli_args_t* args)
{
  bool ret =false;

  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001c2c:	8803      	ldrh	r3, [r0, #0]
{
 8001c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001c32:	2b01      	cmp	r3, #1
{
 8001c34:	4604      	mov	r4, r0
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001c36:	d034      	beq.n	8001ca2 <cliGpio+0x76>
  bool ret =false;
 8001c38:	2500      	movs	r5, #0
	  delay(100);
	}
      ret = true;
    }

  if (args->argc == 2 && args->isStr (0, "read") == true)
 8001c3a:	8823      	ldrh	r3, [r4, #0]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d10f      	bne.n	8001c60 <cliGpio+0x34>
 8001c40:	2000      	movs	r0, #0
 8001c42:	6963      	ldr	r3, [r4, #20]
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <cliGpio+0xf0>)
 8001c46:	4798      	blx	r3
 8001c48:	4606      	mov	r6, r0
 8001c4a:	b148      	cbz	r0, 8001c60 <cliGpio+0x34>
    {
      uint8_t ch;

      ch = (uint8_t)args->getData(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	68a3      	ldr	r3, [r4, #8]
 8001c50:	4798      	blx	r3
      while (cliKeepLoop())
	{
	  cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8001c52:	4f33      	ldr	r7, [pc, #204]	; (8001d20 <cliGpio+0xf4>)
      ch = (uint8_t)args->getData(1);
 8001c54:	b2c5      	uxtb	r5, r0
      while (cliKeepLoop())
 8001c56:	f7ff fefd 	bl	8001a54 <cliKeepLoop>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d141      	bne.n	8001ce2 <cliGpio+0xb6>
	  delay(100);
	}
      ret =true;
 8001c5e:	4635      	mov	r5, r6
    }

  if (args->argc == 3 && args->isStr (0, "write") == true)
 8001c60:	8823      	ldrh	r3, [r4, #0]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d149      	bne.n	8001cfa <cliGpio+0xce>
 8001c66:	2000      	movs	r0, #0
 8001c68:	6963      	ldr	r3, [r4, #20]
 8001c6a:	492e      	ldr	r1, [pc, #184]	; (8001d24 <cliGpio+0xf8>)
 8001c6c:	4798      	blx	r3
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	d043      	beq.n	8001cfa <cliGpio+0xce>
    {
      uint8_t ch;
      uint8_t value;
      ch = (uint8_t)args->getData(1);
 8001c72:	68a3      	ldr	r3, [r4, #8]
 8001c74:	2001      	movs	r0, #1
 8001c76:	4798      	blx	r3
      value = (uint8_t)args->getData(2);
 8001c78:	68a3      	ldr	r3, [r4, #8]
      ch = (uint8_t)args->getData(1);
 8001c7a:	4605      	mov	r5, r0
      value = (uint8_t)args->getData(2);
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	4798      	blx	r3
      gpioPinWrite(ch, value);
 8001c80:	b2ed      	uxtb	r5, r5
 8001c82:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8001c86:	bf18      	it	ne
 8001c88:	2101      	movne	r1, #1
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	bf08      	it	eq
 8001c8e:	2100      	moveq	r1, #0
 8001c90:	f7ff ff6e 	bl	8001b70 <gpioPinWrite>
      cliPrintf("gpio write %d : %d\n", ch, value);
 8001c94:	4632      	mov	r2, r6
 8001c96:	4629      	mov	r1, r5
    {
      cliPrintf("gpio show\n");
      cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
      cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
    }
}
 8001c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      cliPrintf("gpio write %d : %d\n", ch, value);
 8001c9c:	4822      	ldr	r0, [pc, #136]	; (8001d28 <cliGpio+0xfc>)
 8001c9e:	f7ff bc3f 	b.w	8001520 <cliPrintf>
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001ca2:	6943      	ldr	r3, [r0, #20]
 8001ca4:	4921      	ldr	r1, [pc, #132]	; (8001d2c <cliGpio+0x100>)
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	4798      	blx	r3
 8001caa:	4605      	mov	r5, r0
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d0c3      	beq.n	8001c38 <cliGpio+0xc>
	      cliPrintf("%d", gpioPinRead(i));
 8001cb0:	4f1f      	ldr	r7, [pc, #124]	; (8001d30 <cliGpio+0x104>)
	  cliPrintf("\n");
 8001cb2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001d34 <cliGpio+0x108>
      while(cliKeepLoop())
 8001cb6:	f7ff fecd 	bl	8001a54 <cliKeepLoop>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d0bd      	beq.n	8001c3a <cliGpio+0xe>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001cbe:	2600      	movs	r6, #0
	      cliPrintf("%d", gpioPinRead(i));
 8001cc0:	b2f0      	uxtb	r0, r6
 8001cc2:	f7ff ff9f 	bl	8001c04 <gpioPinRead>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001cc6:	3601      	adds	r6, #1
	      cliPrintf("%d", gpioPinRead(i));
 8001cc8:	4601      	mov	r1, r0
 8001cca:	4638      	mov	r0, r7
 8001ccc:	f7ff fc28 	bl	8001520 <cliPrintf>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001cd0:	2e04      	cmp	r6, #4
 8001cd2:	d1f5      	bne.n	8001cc0 <cliGpio+0x94>
	  cliPrintf("\n");
 8001cd4:	4640      	mov	r0, r8
 8001cd6:	f7ff fc23 	bl	8001520 <cliPrintf>
	  delay(100);
 8001cda:	2064      	movs	r0, #100	; 0x64
 8001cdc:	f7ff f84c 	bl	8000d78 <delay>
 8001ce0:	e7e9      	b.n	8001cb6 <cliGpio+0x8a>
	  cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f7ff ff8e 	bl	8001c04 <gpioPinRead>
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4602      	mov	r2, r0
 8001cec:	4638      	mov	r0, r7
 8001cee:	f7ff fc17 	bl	8001520 <cliPrintf>
	  delay(100);
 8001cf2:	2064      	movs	r0, #100	; 0x64
 8001cf4:	f7ff f840 	bl	8000d78 <delay>
 8001cf8:	e7ad      	b.n	8001c56 <cliGpio+0x2a>
  if (ret !=true)
 8001cfa:	b965      	cbnz	r5, 8001d16 <cliGpio+0xea>
      cliPrintf("gpio show\n");
 8001cfc:	480e      	ldr	r0, [pc, #56]	; (8001d38 <cliGpio+0x10c>)
 8001cfe:	f7ff fc0f 	bl	8001520 <cliPrintf>
      cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8001d02:	2103      	movs	r1, #3
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <cliGpio+0x110>)
 8001d06:	f7ff fc0b 	bl	8001520 <cliPrintf>
}
 8001d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8001d0e:	2103      	movs	r1, #3
 8001d10:	480b      	ldr	r0, [pc, #44]	; (8001d40 <cliGpio+0x114>)
 8001d12:	f7ff bc05 	b.w	8001520 <cliPrintf>
}
 8001d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0800aa55 	.word	0x0800aa55
 8001d20:	0800aa5a 	.word	0x0800aa5a
 8001d24:	0800aa6d 	.word	0x0800aa6d
 8001d28:	0800aa73 	.word	0x0800aa73
 8001d2c:	0800aa4d 	.word	0x0800aa4d
 8001d30:	0800aa52 	.word	0x0800aa52
 8001d34:	0800a9c0 	.word	0x0800a9c0
 8001d38:	0800aa87 	.word	0x0800aa87
 8001d3c:	0800aa92 	.word	0x0800aa92
 8001d40:	0800aaa6 	.word	0x0800aaa6

08001d44 <ledOff.part.0>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
  }
void ledOff(uint8_t ch)
{
  if (ch >=LED_MAX_CH ) return;
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <ledOff.part.0+0xc>)
 8001d46:	79da      	ldrb	r2, [r3, #7]
 8001d48:	8899      	ldrh	r1, [r3, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	f001 b806 	b.w	8002d5c <HAL_GPIO_WritePin>
 8001d50:	20000044 	.word	0x20000044

08001d54 <ledInit>:
{
 8001d54:	b510      	push	{r4, lr}
 8001d56:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	2210      	movs	r2, #16
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	a802      	add	r0, sp, #8
 8001d5e:	f004 fb19 	bl	8006394 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <ledInit+0x5c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d6a:	4812      	ldr	r0, [pc, #72]	; (8001db4 <ledInit+0x60>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	f042 0208 	orr.w	r2, r2, #8
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d80:	f000 ffec 	bl	8002d5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e9cd 4303 	strd	r4, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	9305      	str	r3, [sp, #20]
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <ledInit+0x64>)
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001d90:	a902      	add	r1, sp, #8
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001d92:	889a      	ldrh	r2, [r3, #4]
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001d94:	6818      	ldr	r0, [r3, #0]
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001d96:	9202      	str	r2, [sp, #8]
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001d98:	f000 fe92 	bl	8002ac0 <HAL_GPIO_Init>
  if (ch >=LED_MAX_CH ) return;
 8001d9c:	f7ff ffd2 	bl	8001d44 <ledOff.part.0>
  cliAdd("led", cliLED);
 8001da0:	4906      	ldr	r1, [pc, #24]	; (8001dbc <ledInit+0x68>)
 8001da2:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <ledInit+0x6c>)
 8001da4:	f7ff fe62 	bl	8001a6c <cliAdd>
}
 8001da8:	4620      	mov	r0, r4
 8001daa:	b006      	add	sp, #24
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	20000044 	.word	0x20000044
 8001dbc:	08001dd9 	.word	0x08001dd9
 8001dc0:	0800aabf 	.word	0x0800aabf

08001dc4 <ledToggle>:
  }
void ledToggle(uint8_t ch)
{
  if (ch >=LED_MAX_CH ) return;
 8001dc4:	b920      	cbnz	r0, 8001dd0 <ledToggle+0xc>
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <ledToggle+0x10>)
 8001dc8:	8899      	ldrh	r1, [r3, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	f000 bfcb 	b.w	8002d66 <HAL_GPIO_TogglePin>
  }
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000044 	.word	0x20000044

08001dd8 <cliLED>:

#ifdef _USE_HW_CLI
void cliLED(cli_args_t *args)
{
 8001dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool ret = false;

  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001dda:	8803      	ldrh	r3, [r0, #0]
{
 8001ddc:	4604      	mov	r4, r0
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d01c      	beq.n	8001e1c <cliLED+0x44>
            }
        }
    }


  if (args->argc == 2 && args->isStr(0, "switch") == true) // led toggle ch on
 8001de2:	8823      	ldrh	r3, [r4, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d10f      	bne.n	8001e08 <cliLED+0x30>
 8001de8:	2000      	movs	r0, #0
 8001dea:	6963      	ldr	r3, [r4, #20]
 8001dec:	491d      	ldr	r1, [pc, #116]	; (8001e64 <cliLED+0x8c>)
 8001dee:	4798      	blx	r3
 8001df0:	b150      	cbz	r0, 8001e08 <cliLED+0x30>
    {
      uint8_t led_ch;

      led_ch = (uint8_t)args->getData(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	68a3      	ldr	r3, [r4, #8]
 8001df6:	4798      	blx	r3

      if (led_ch >0)
 8001df8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        {
          led_ch--;
 8001dfc:	bf1c      	itt	ne
 8001dfe:	f100 30ff 	addne.w	r0, r0, #4294967295
 8001e02:	b2c0      	uxtbne	r0, r0
        }
      ledToggle(led_ch);
 8001e04:	f7ff ffde 	bl	8001dc4 <ledToggle>
    }


  if (ret != true)
    {
      cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4817      	ldr	r0, [pc, #92]	; (8001e68 <cliLED+0x90>)
 8001e0c:	f7ff fb88 	bl	8001520 <cliPrintf>
      cliPrintf("led switch ch[1~%d] \n", LED_MAX_CH);
    }
}
 8001e10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cliPrintf("led switch ch[1~%d] \n", LED_MAX_CH);
 8001e14:	2101      	movs	r1, #1
 8001e16:	4815      	ldr	r0, [pc, #84]	; (8001e6c <cliLED+0x94>)
 8001e18:	f7ff bb82 	b.w	8001520 <cliPrintf>
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001e1c:	6943      	ldr	r3, [r0, #20]
 8001e1e:	4914      	ldr	r1, [pc, #80]	; (8001e70 <cliLED+0x98>)
 8001e20:	2000      	movs	r0, #0
 8001e22:	4798      	blx	r3
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d0dc      	beq.n	8001de2 <cliLED+0xa>
      led_ch = (uint8_t)args->getData(1);
 8001e28:	68a3      	ldr	r3, [r4, #8]
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	4798      	blx	r3
      toggle_time = (uint32_t)args->getData(2);
 8001e2e:	68a3      	ldr	r3, [r4, #8]
      led_ch = (uint8_t)args->getData(1);
 8001e30:	b2c5      	uxtb	r5, r0
      toggle_time = (uint32_t)args->getData(2);
 8001e32:	2002      	movs	r0, #2
 8001e34:	4798      	blx	r3
 8001e36:	4607      	mov	r7, r0
      if (led_ch >0)
 8001e38:	b10d      	cbz	r5, 8001e3e <cliLED+0x66>
          led_ch--;
 8001e3a:	3d01      	subs	r5, #1
 8001e3c:	b2ed      	uxtb	r5, r5
      pre_time=millis();
 8001e3e:	f7fe ff9d 	bl	8000d7c <millis>
 8001e42:	4606      	mov	r6, r0
      while (cliKeepLoop())
 8001e44:	f7ff fe06 	bl	8001a54 <cliKeepLoop>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d0ca      	beq.n	8001de2 <cliLED+0xa>
          if (millis()-pre_time >= toggle_time)
 8001e4c:	f7fe ff96 	bl	8000d7c <millis>
 8001e50:	1b80      	subs	r0, r0, r6
 8001e52:	42b8      	cmp	r0, r7
 8001e54:	d3f6      	bcc.n	8001e44 <cliLED+0x6c>
              pre_time = millis();
 8001e56:	f7fe ff91 	bl	8000d7c <millis>
 8001e5a:	4606      	mov	r6, r0
              ledToggle(led_ch);
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f7ff ffb1 	bl	8001dc4 <ledToggle>
 8001e62:	e7ef      	b.n	8001e44 <cliLED+0x6c>
 8001e64:	0800aaca 	.word	0x0800aaca
 8001e68:	0800aad1 	.word	0x0800aad1
 8001e6c:	0800aaee 	.word	0x0800aaee
 8001e70:	0800aac3 	.word	0x0800aac3

08001e74 <uartInit>:
  for (int i=0; i<UART_MAX_CH;i++)
    {
      is_open[i] = false;
    }
  return true;
}
 8001e74:	2001      	movs	r0, #1
 8001e76:	4770      	bx	lr

08001e78 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;

  switch(ch)
 8001e78:	2801      	cmp	r0, #1
{
 8001e7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001e7e:	4605      	mov	r5, r0
  switch(ch)
 8001e80:	d903      	bls.n	8001e8a <uartOpen+0x12>
  bool ret = false;
 8001e82:	2000      	movs	r0, #0
          qbuffer[ch].tail = qbuffer[ch].head; //Flash
        }
    break;
  }
  return ret;
}
 8001e84:	b002      	add	sp, #8
 8001e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart1.Instance          = USART1;
 8001e8a:	4c21      	ldr	r4, [pc, #132]	; (8001f10 <uartOpen+0x98>)
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <uartOpen+0x9c>)
      huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8001e8e:	2600      	movs	r6, #0
      huart1.Init.BaudRate     = baud;
 8001e90:	e9c4 3100 	strd	r3, r1, [r4]
      huart1.Init.Mode         = UART_MODE_TX_RX;
 8001e94:	230c      	movs	r3, #12
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001e96:	4f20      	ldr	r7, [pc, #128]	; (8001f18 <uartOpen+0xa0>)
      HAL_UART_DeInit(&huart1);
 8001e98:	4620      	mov	r0, r4
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001e9a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001e9e:	eb07 1505 	add.w	r5, r7, r5, lsl #4
      huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001ea2:	e9c4 3605 	strd	r3, r6, [r4, #20]
      huart1.Init.StopBits     = UART_STOPBITS_1;
 8001ea6:	e9c4 6602 	strd	r6, r6, [r4, #8]
      huart1.Init.Parity       = UART_PARITY_NONE;
 8001eaa:	6126      	str	r6, [r4, #16]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eac:	61e6      	str	r6, [r4, #28]
      HAL_UART_DeInit(&huart1);
 8001eae:	f002 fa3a 	bl	8004326 <HAL_UART_DeInit>
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb6:	4919      	ldr	r1, [pc, #100]	; (8001f1c <uartOpen+0xa4>)
 8001eb8:	4628      	mov	r0, r5
 8001eba:	f7ff f8b8 	bl	800102e <qbufferCreate>
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <uartOpen+0xa8>)
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ec0:	4631      	mov	r1, r6
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec2:	695a      	ldr	r2, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ec4:	200f      	movs	r0, #15
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	695b      	ldr	r3, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ece:	4632      	mov	r2, r6
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ed8:	f000 fbf4 	bl	80026c4 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001edc:	200f      	movs	r0, #15
 8001ede:	f000 fc23 	bl	8002728 <HAL_NVIC_EnableIRQ>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f002 f9f0 	bl	80042c8 <HAL_UART_Init>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d1ca      	bne.n	8001e82 <uartOpen+0xa>
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	490a      	ldr	r1, [pc, #40]	; (8001f1c <uartOpen+0xa4>)
 8001ef4:	f002 fd04 	bl	8004900 <HAL_UART_Receive_DMA>
 8001ef8:	fab0 f080 	clz	r0, r0
          qbuffer[ch].head = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR; //256-256= 0, 256-255= 1, ...
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <uartOpen+0xac>)
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001efe:	0940      	lsrs	r0, r0, #5
          qbuffer[ch].head = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR; //256-256= 0, 256-255= 1, ...
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	68ab      	ldr	r3, [r5, #8]
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	f847 3008 	str.w	r3, [r7, r8]
          qbuffer[ch].tail = qbuffer[ch].head; //Flash
 8001f0c:	606b      	str	r3, [r5, #4]
 8001f0e:	e7b9      	b.n	8001e84 <uartOpen+0xc>
 8001f10:	20000818 	.word	0x20000818
 8001f14:	40013800 	.word	0x40013800
 8001f18:	20000860 	.word	0x20000860
 8001f1c:	20000880 	.word	0x20000880
 8001f20:	40021000 	.word	0x40021000
 8001f24:	200007d4 	.word	0x200007d4

08001f28 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8001f28:	b118      	cbz	r0, 8001f32 <uartAvailable+0xa>
 8001f2a:	2801      	cmp	r0, #1
 8001f2c:	d003      	beq.n	8001f36 <uartAvailable+0xe>
      qbuffer[ch].head=qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
      ret = qbufferAvailable(&qbuffer[ch]);
      break;
  }
  return ret;
}
 8001f2e:	2000      	movs	r0, #0
 8001f30:	4770      	bx	lr
      ret= cdcAvailable();
 8001f32:	f003 bfb9 	b.w	8005ea8 <cdcAvailable>
      qbuffer[ch].head=qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <uartAvailable+0x24>)
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <uartAvailable+0x28>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	6983      	ldr	r3, [r0, #24]
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	f840 3f10 	str.w	r3, [r0, #16]!
      ret = qbufferAvailable(&qbuffer[ch]);
 8001f46:	f7ff b893 	b.w	8001070 <qbufferAvailable>
 8001f4a:	bf00      	nop
 8001f4c:	200007d4 	.word	0x200007d4
 8001f50:	20000860 	.word	0x20000860

08001f54 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret=0;
 8001f54:	2300      	movs	r3, #0
{
 8001f56:	b507      	push	{r0, r1, r2, lr}
  switch(ch)
 8001f58:	4602      	mov	r2, r0
  uint8_t ret=0;
 8001f5a:	f88d 3007 	strb.w	r3, [sp, #7]
  switch(ch)
 8001f5e:	b130      	cbz	r0, 8001f6e <uartRead+0x1a>
 8001f60:	2801      	cmp	r0, #1
 8001f62:	d009      	beq.n	8001f78 <uartRead+0x24>
      qbufferRead(&qbuffer[ch], &ret ,1);
      break;

  }
  return ret;
}
 8001f64:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001f68:	b003      	add	sp, #12
 8001f6a:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = cdcRead();
 8001f6e:	f003 ffef 	bl	8005f50 <cdcRead>
 8001f72:	f88d 0007 	strb.w	r0, [sp, #7]
      break;
 8001f76:	e7f5      	b.n	8001f64 <uartRead+0x10>
      qbufferRead(&qbuffer[ch], &ret ,1);
 8001f78:	f10d 0107 	add.w	r1, sp, #7
 8001f7c:	4801      	ldr	r0, [pc, #4]	; (8001f84 <uartRead+0x30>)
 8001f7e:	f7ff f85d 	bl	800103c <qbufferRead>
      break;
 8001f82:	e7ef      	b.n	8001f64 <uartRead+0x10>
 8001f84:	20000870 	.word	0x20000870

08001f88 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001f88:	4603      	mov	r3, r0
 8001f8a:	b510      	push	{r4, lr}
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4614      	mov	r4, r2
  uint32_t ret= 0;

  switch(ch)
 8001f90:	b123      	cbz	r3, 8001f9c <uartWrite+0x14>
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d007      	beq.n	8001fa6 <uartWrite+0x1e>
 8001f96:	2400      	movs	r4, #0
          ret= length;
        }
      break;
  }
  return ret;
}
 8001f98:	4620      	mov	r0, r4
 8001f9a:	bd10      	pop	{r4, pc}
      ret =cdcWrite(p_data, length);
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	f004 f807 	bl	8005fb0 <cdcWrite>
 8001fa2:	4604      	mov	r4, r0
      break;
 8001fa4:	e7f8      	b.n	8001f98 <uartWrite+0x10>
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <uartWrite+0x34>)
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f002 f9d5 	bl	800435a <HAL_UART_Transmit>
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <uartWrite+0x38>)
  uint32_t ret= 0;
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	bf18      	it	ne
 8001fb6:	2400      	movne	r4, #0
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001fb8:	7018      	strb	r0, [r3, #0]
      if (status==HAL_OK)
 8001fba:	e7ed      	b.n	8001f98 <uartWrite+0x10>
 8001fbc:	20000818 	.word	0x20000818
 8001fc0:	20000900 	.word	0x20000900

08001fc4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char*fmt, ...)
{
 8001fc4:	b40e      	push	{r1, r2, r3}
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	b0c3      	sub	sp, #268	; 0x10c
 8001fca:	ab45      	add	r3, sp, #276	; 0x114
 8001fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fd0:	4604      	mov	r4, r0
  int len;
  uint32_t ret;
  va_start(args, fmt);


  len = vsnprintf(buf, 256, fmt, args);
 8001fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd6:	a802      	add	r0, sp, #8
  va_start(args, fmt);
 8001fd8:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8001fda:	f005 fd7b 	bl	8007ad4 <vsniprintf>
  ret=uartWrite(ch, (uint8_t *)buf, len);
 8001fde:	a902      	add	r1, sp, #8
  len = vsnprintf(buf, 256, fmt, args);
 8001fe0:	4602      	mov	r2, r0
  ret=uartWrite(ch, (uint8_t *)buf, len);
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff ffd0 	bl	8001f88 <uartWrite>


  va_end(args);
  return ret;
}
 8001fe8:	b043      	add	sp, #268	; 0x10c
 8001fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fee:	b003      	add	sp, #12
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_UART_ErrorCallback>:
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_UART_RxCpltCallback>:

      HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
    }
#endif

}
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	4606      	mov	r6, r0
 8001ffc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffe:	2210      	movs	r2, #16
 8002000:	2100      	movs	r1, #0
 8002002:	a802      	add	r0, sp, #8
 8002004:	f004 f9c6 	bl	8006394 <memset>
  if(uartHandle->Instance==USART1)
 8002008:	6832      	ldr	r2, [r6, #0]
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_UART_MspInit+0xa8>)
 800200c:	429a      	cmp	r2, r3
 800200e:	d144      	bne.n	800209a <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002010:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002014:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	4823      	ldr	r0, [pc, #140]	; (80020a4 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002018:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800201c:	619a      	str	r2, [r3, #24]
 800201e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002022:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202c:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	f042 0204 	orr.w	r2, r2, #4
 8002032:	619a      	str	r2, [r3, #24]
 8002034:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f000 fd38 	bl	8002ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	4813      	ldr	r0, [pc, #76]	; (80020a4 <HAL_UART_MspInit+0xac>)
 8002056:	a902      	add	r1, sp, #8

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002058:	4c13      	ldr	r4, [pc, #76]	; (80020a8 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205a:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f000 fd2e 	bl	8002ac0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_UART_MspInit+0xb4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002066:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002068:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800206c:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800206e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002072:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002074:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002076:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800207a:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800207c:	f000 fb8a 	bl	8002794 <HAL_DMA_Init>
 8002080:	b108      	cbz	r0, 8002086 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8002082:	f7fe fefd 	bl	8000e80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2025      	movs	r0, #37	; 0x25
 800208a:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800208c:	63f4      	str	r4, [r6, #60]	; 0x3c
 800208e:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002090:	f000 fb18 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002094:	2025      	movs	r0, #37	; 0x25
 8002096:	f000 fb47 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800209a:	b006      	add	sp, #24
 800209c:	bd70      	pop	{r4, r5, r6, pc}
 800209e:	bf00      	nop
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40010800 	.word	0x40010800
 80020a8:	200007d4 	.word	0x200007d4
 80020ac:	40020058 	.word	0x40020058

080020b0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 80020b0:	6802      	ldr	r2, [r0, #0]
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_UART_MspDeInit+0x34>)
{
 80020b4:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 80020b6:	429a      	cmp	r2, r3
{
 80020b8:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 80020ba:	d111      	bne.n	80020e0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_UART_MspDeInit+0x38>)

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80020be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 80020c2:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80020c4:	4809      	ldr	r0, [pc, #36]	; (80020ec <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART1_CLK_DISABLE();
 80020c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ca:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80020cc:	f000 fdd2 	bl	8002c74 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80020d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80020d2:	f000 fb91 	bl	80027f8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80020d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80020da:	2025      	movs	r0, #37	; 0x25
 80020dc:	f000 bb32 	b.w	8002744 <HAL_NVIC_DisableIRQ>
}
 80020e0:	bd10      	pop	{r4, pc}
 80020e2:	bf00      	nop
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010800 	.word	0x40010800

080020f0 <usbInit>:
#include "usb_device.h"

#ifdef _USB_HW_USB

bool usbInit(void)
{
 80020f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool ret = true;

  GPIO_InitTypeDef GPIO_InitStruct;
  delay(200);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020f2:	4c0a      	ldr	r4, [pc, #40]	; (800211c <usbInit+0x2c>)
  delay(200);
 80020f4:	20c8      	movs	r0, #200	; 0xc8
 80020f6:	f7fe fe3f 	bl	8000d78 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	4620      	mov	r0, r4
 80020fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002102:	f000 fe2b 	bl	8002d5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	4620      	mov	r0, r4
 800210a:	4669      	mov	r1, sp
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210c:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f000 fcd7 	bl	8002ac0 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8002112:	f003 fe5b 	bl	8005dcc <MX_USB_DEVICE_Init>

  return ret;
}
 8002116:	2001      	movs	r0, #1
 8002118:	b004      	add	sp, #16
 800211a:	bd10      	pop	{r4, pc}
 800211c:	40010800 	.word	0x40010800

08002120 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 8002120:	b508      	push	{r3, lr}
  bspInit();
 8002122:	f7fe fe7b 	bl	8000e1c <bspInit>
  cliInit();
 8002126:	f7ff fcc1 	bl	8001aac <cliInit>
//  resetInit();
  usbInit();
 800212a:	f7ff ffe1 	bl	80020f0 <usbInit>
//  rtcInit();
//  tim1Init();

  gpioInit();
 800212e:	f7ff fd35 	bl	8001b9c <gpioInit>
  ledInit();
 8002132:	f7ff fe0f 	bl	8001d54 <ledInit>
//  motorInit();
//  spiInit();
  uartInit();
 8002136:	f7ff fe9d 	bl	8001e74 <uartInit>
//  flashInit();
  adcInit();

}
 800213a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  adcInit();
 800213e:	f7fe bfa1 	b.w	8001084 <adcInit>
	...

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_InitTick+0x3c>)
{
 8002148:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800214a:	7818      	ldrb	r0, [r3, #0]
 800214c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002150:	fbb3 f3f0 	udiv	r3, r3, r0
 8002154:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_InitTick+0x40>)
 8002156:	6810      	ldr	r0, [r2, #0]
 8002158:	fbb0 f0f3 	udiv	r0, r0, r3
 800215c:	f000 fb06 	bl	800276c <HAL_SYSTICK_Config>
 8002160:	4604      	mov	r4, r0
 8002162:	b958      	cbnz	r0, 800217c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002164:	2d0f      	cmp	r5, #15
 8002166:	d809      	bhi.n	800217c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002168:	4602      	mov	r2, r0
 800216a:	4629      	mov	r1, r5
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f000 faa8 	bl	80026c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002174:	4620      	mov	r0, r4
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_InitTick+0x44>)
 8002178:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800217a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800217c:	2001      	movs	r0, #1
 800217e:	e7fc      	b.n	800217a <HAL_InitTick+0x36>
 8002180:	2000004c 	.word	0x2000004c
 8002184:	20000000 	.word	0x20000000
 8002188:	20000050 	.word	0x20000050

0800218c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_Init+0x20>)
{
 800218e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002192:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219a:	f000 fa81 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	200f      	movs	r0, #15
 80021a0:	f7ff ffd0 	bl	8002144 <HAL_InitTick>
  HAL_MspInit();
 80021a4:	f7fe fe6e 	bl	8000e84 <HAL_MspInit>
}
 80021a8:	2000      	movs	r0, #0
 80021aa:	bd08      	pop	{r3, pc}
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021b0:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <HAL_IncTick+0x10>)
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_IncTick+0x14>)
 80021b4:	6811      	ldr	r1, [r2, #0]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	440b      	add	r3, r1
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000904 	.word	0x20000904
 80021c4:	2000004c 	.word	0x2000004c

080021c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021c8:	4b01      	ldr	r3, [pc, #4]	; (80021d0 <HAL_GetTick+0x8>)
 80021ca:	6818      	ldr	r0, [r3, #0]
}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000904 	.word	0x20000904

080021d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff fff6 	bl	80021c8 <HAL_GetTick>
 80021dc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80021e0:	bf1e      	ittt	ne
 80021e2:	4b04      	ldrne	r3, [pc, #16]	; (80021f4 <HAL_Delay+0x20>)
 80021e4:	781b      	ldrbne	r3, [r3, #0]
 80021e6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021e8:	f7ff ffee 	bl	80021c8 <HAL_GetTick>
 80021ec:	1b43      	subs	r3, r0, r5
 80021ee:	42a3      	cmp	r3, r4
 80021f0:	d3fa      	bcc.n	80021e8 <HAL_Delay+0x14>
  {
  }
}
 80021f2:	bd38      	pop	{r3, r4, r5, pc}
 80021f4:	2000004c 	.word	0x2000004c

080021f8 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80021fa:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021fe:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002202:	d11b      	bne.n	800223c <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	6892      	ldr	r2, [r2, #8]
 8002210:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002214:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002218:	d10c      	bne.n	8002234 <ADC_DMAConvCplt+0x3c>
 800221a:	7b1a      	ldrb	r2, [r3, #12]
 800221c:	b952      	cbnz	r2, 8002234 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800221e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002224:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002228:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222a:	bf5e      	ittt	pl
 800222c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800222e:	f042 0201 	orrpl.w	r2, r2, #1
 8002232:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe ff9f 	bl	8001178 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800223a:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800223c:	6a1b      	ldr	r3, [r3, #32]
}
 800223e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	4718      	bx	r3

08002246 <HAL_ADC_ConvHalfCpltCallback>:
 8002246:	4770      	bx	lr

08002248 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002248:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800224a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800224c:	f7ff fffb 	bl	8002246 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002250:	bd08      	pop	{r3, pc}

08002252 <HAL_ADC_ErrorCallback>:
 8002252:	4770      	bx	lr

08002254 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002254:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002256:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002258:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800225a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225e:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002260:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002268:	f7ff fff3 	bl	8002252 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800226c:	bd08      	pop	{r3, pc}
	...

08002270 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002270:	2300      	movs	r3, #0
{ 
 8002272:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002274:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002276:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800227a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800227c:	2b01      	cmp	r3, #1
 800227e:	d06c      	beq.n	800235a <HAL_ADC_ConfigChannel+0xea>
 8002280:	2301      	movs	r3, #1
 8002282:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002286:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002288:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800228a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800228c:	6808      	ldr	r0, [r1, #0]
 800228e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8002292:	d822      	bhi.n	80022da <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002294:	261f      	movs	r6, #31
 8002296:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002298:	3b05      	subs	r3, #5
 800229a:	409e      	lsls	r6, r3
 800229c:	ea25 0506 	bic.w	r5, r5, r6
 80022a0:	fa00 f303 	lsl.w	r3, r0, r3
 80022a4:	432b      	orrs	r3, r5
 80022a6:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022a8:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022aa:	688b      	ldr	r3, [r1, #8]
 80022ac:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80022b0:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022b4:	d929      	bls.n	800230a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022b6:	68d6      	ldr	r6, [r2, #12]
 80022b8:	3d1e      	subs	r5, #30
 80022ba:	40a9      	lsls	r1, r5
 80022bc:	ea26 0101 	bic.w	r1, r6, r1
 80022c0:	40ab      	lsls	r3, r5
 80022c2:	430b      	orrs	r3, r1
 80022c4:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022c6:	f1a0 0310 	sub.w	r3, r0, #16
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d925      	bls.n	800231a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ce:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80022d0:	2300      	movs	r3, #0
 80022d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80022d6:	b002      	add	sp, #8
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80022da:	2d0c      	cmp	r5, #12
 80022dc:	f04f 051f 	mov.w	r5, #31
 80022e0:	d809      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022e2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80022e4:	3b23      	subs	r3, #35	; 0x23
 80022e6:	409d      	lsls	r5, r3
 80022e8:	ea26 0505 	bic.w	r5, r6, r5
 80022ec:	fa00 f303 	lsl.w	r3, r0, r3
 80022f0:	432b      	orrs	r3, r5
 80022f2:	6313      	str	r3, [r2, #48]	; 0x30
 80022f4:	e7d8      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022f6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80022f8:	3b41      	subs	r3, #65	; 0x41
 80022fa:	409d      	lsls	r5, r3
 80022fc:	ea26 0505 	bic.w	r5, r6, r5
 8002300:	fa00 f303 	lsl.w	r3, r0, r3
 8002304:	432b      	orrs	r3, r5
 8002306:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002308:	e7ce      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800230a:	6910      	ldr	r0, [r2, #16]
 800230c:	40a9      	lsls	r1, r5
 800230e:	ea20 0101 	bic.w	r1, r0, r1
 8002312:	40ab      	lsls	r3, r5
 8002314:	430b      	orrs	r3, r1
 8002316:	6113      	str	r3, [r2, #16]
 8002318:	e7d9      	b.n	80022ce <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_ADC_ConfigChannel+0xf0>)
 800231c:	429a      	cmp	r2, r3
 800231e:	d116      	bne.n	800234e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002320:	6893      	ldr	r3, [r2, #8]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	d4d3      	bmi.n	80022ce <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002326:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002328:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800232a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800232e:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002330:	d1cd      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_ADC_ConfigChannel+0xf4>)
 8002334:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <HAL_ADC_ConfigChannel+0xf8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fbb3 f3f2 	udiv	r3, r3, r2
 800233c:	220a      	movs	r2, #10
 800233e:	4353      	muls	r3, r2
            wait_loop_index--;
 8002340:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002342:	9b01      	ldr	r3, [sp, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0c2      	beq.n	80022ce <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002348:	9b01      	ldr	r3, [sp, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	e7f8      	b.n	8002340 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002350:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002352:	f043 0320 	orr.w	r3, r3, #32
 8002356:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002358:	e7ba      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800235a:	2002      	movs	r0, #2
 800235c:	e7bb      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x66>
 800235e:	bf00      	nop
 8002360:	40012400 	.word	0x40012400
 8002364:	20000000 	.word	0x20000000
 8002368:	000f4240 	.word	0x000f4240

0800236c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800236c:	2300      	movs	r3, #0
{
 800236e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002370:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002372:	6803      	ldr	r3, [r0, #0]
{
 8002374:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	07d2      	lsls	r2, r2, #31
 800237a:	d502      	bpl.n	8002382 <ADC_Enable+0x16>
  return HAL_OK;
 800237c:	2000      	movs	r0, #0
}
 800237e:	b003      	add	sp, #12
 8002380:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <ADC_Enable+0x70>)
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <ADC_Enable+0x74>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002394:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002396:	9b01      	ldr	r3, [sp, #4]
 8002398:	b9e3      	cbnz	r3, 80023d4 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800239a:	f7ff ff15 	bl	80021c8 <HAL_GetTick>
 800239e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	07db      	lsls	r3, r3, #31
 80023a6:	d4e9      	bmi.n	800237c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023a8:	f7ff ff0e 	bl	80021c8 <HAL_GetTick>
 80023ac:	1b40      	subs	r0, r0, r5
 80023ae:	2802      	cmp	r0, #2
 80023b0:	d9f6      	bls.n	80023a0 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f013 0301 	ands.w	r3, r3, #1
 80023ba:	d1f1      	bne.n	80023a0 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c0:	f042 0210 	orr.w	r2, r2, #16
 80023c4:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80023c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80023d2:	e7d4      	b.n	800237e <ADC_Enable+0x12>
      wait_loop_index--;
 80023d4:	9b01      	ldr	r3, [sp, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	e7dc      	b.n	8002394 <ADC_Enable+0x28>
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000
 80023e0:	000f4240 	.word	0x000f4240

080023e4 <HAL_ADC_Start_DMA>:
{
 80023e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80023e8:	4b40      	ldr	r3, [pc, #256]	; (80024ec <HAL_ADC_Start_DMA+0x108>)
{
 80023ea:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80023ec:	6802      	ldr	r2, [r0, #0]
{
 80023ee:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80023f0:	429a      	cmp	r2, r3
{
 80023f2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80023f4:	d002      	beq.n	80023fc <HAL_ADC_Start_DMA+0x18>
 80023f6:	493e      	ldr	r1, [pc, #248]	; (80024f0 <HAL_ADC_Start_DMA+0x10c>)
 80023f8:	428a      	cmp	r2, r1
 80023fa:	d103      	bne.n	8002404 <HAL_ADC_Start_DMA+0x20>
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002402:	d16e      	bne.n	80024e2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002404:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002408:	2b01      	cmp	r3, #1
 800240a:	d06c      	beq.n	80024e6 <HAL_ADC_Start_DMA+0x102>
 800240c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800240e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8002410:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002414:	f7ff ffaa 	bl	800236c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002418:	4606      	mov	r6, r0
 800241a:	2800      	cmp	r0, #0
 800241c:	d15d      	bne.n	80024da <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800241e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002420:	6821      	ldr	r1, [r4, #0]
 8002422:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8002424:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8002428:	f025 0501 	bic.w	r5, r5, #1
 800242c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002430:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8002432:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002434:	d104      	bne.n	8002440 <HAL_ADC_Start_DMA+0x5c>
 8002436:	4a2d      	ldr	r2, [pc, #180]	; (80024ec <HAL_ADC_Start_DMA+0x108>)
 8002438:	6853      	ldr	r3, [r2, #4]
 800243a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800243e:	d13e      	bne.n	80024be <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002440:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002446:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002448:	684b      	ldr	r3, [r1, #4]
 800244a:	055a      	lsls	r2, r3, #21
 800244c:	d505      	bpl.n	800245a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800244e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002450:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002454:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002458:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800245c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002462:	bf18      	it	ne
 8002464:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002466:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002468:	bf18      	it	ne
 800246a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800246e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002470:	2300      	movs	r3, #0
 8002472:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002478:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800247a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_ADC_Start_DMA+0x114>)
 800247e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_ADC_Start_DMA+0x118>)
 8002482:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002484:	f06f 0302 	mvn.w	r3, #2
 8002488:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800248c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002498:	4643      	mov	r3, r8
 800249a:	f000 f9d7 	bl	800284c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80024a6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	bf0c      	ite	eq
 80024ae:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024b2:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	4630      	mov	r0, r6
 80024ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024c6:	6853      	ldr	r3, [r2, #4]
 80024c8:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ca:	bf41      	itttt	mi
 80024cc:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80024ce:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80024d2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80024d6:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80024d8:	e7bf      	b.n	800245a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80024da:	2300      	movs	r3, #0
 80024dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80024e0:	e7ea      	b.n	80024b8 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80024e2:	2601      	movs	r6, #1
 80024e4:	e7e8      	b.n	80024b8 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80024e6:	2602      	movs	r6, #2
 80024e8:	e7e6      	b.n	80024b8 <HAL_ADC_Start_DMA+0xd4>
 80024ea:	bf00      	nop
 80024ec:	40012400 	.word	0x40012400
 80024f0:	40012800 	.word	0x40012800
 80024f4:	080021f9 	.word	0x080021f9
 80024f8:	08002249 	.word	0x08002249
 80024fc:	08002255 	.word	0x08002255

08002500 <ADC_ConversionStop_Disable>:
{
 8002500:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002502:	6803      	ldr	r3, [r0, #0]
{
 8002504:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	07d1      	lsls	r1, r2, #31
 800250a:	d401      	bmi.n	8002510 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800250c:	2000      	movs	r0, #0
}
 800250e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002518:	f7ff fe56 	bl	80021c8 <HAL_GetTick>
 800251c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	07db      	lsls	r3, r3, #31
 8002524:	d5f2      	bpl.n	800250c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002526:	f7ff fe4f 	bl	80021c8 <HAL_GetTick>
 800252a:	1b40      	subs	r0, r0, r5
 800252c:	2802      	cmp	r0, #2
 800252e:	d9f6      	bls.n	800251e <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	07da      	lsls	r2, r3, #31
 8002536:	d5f2      	bpl.n	800251e <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 800253a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253c:	f043 0310 	orr.w	r3, r3, #16
 8002540:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800254a:	e7e0      	b.n	800250e <ADC_ConversionStop_Disable+0xe>

0800254c <HAL_ADC_Init>:
{
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800254e:	4604      	mov	r4, r0
 8002550:	2800      	cmp	r0, #0
 8002552:	d06e      	beq.n	8002632 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002554:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002556:	b923      	cbnz	r3, 8002562 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002558:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800255a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800255e:	f7fe fe0d 	bl	800117c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ffcc 	bl	8002500 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002568:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800256a:	f013 0310 	ands.w	r3, r3, #16
 800256e:	d162      	bne.n	8002636 <HAL_ADC_Init+0xea>
 8002570:	2800      	cmp	r0, #0
 8002572:	d160      	bne.n	8002636 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8002574:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002576:	69e5      	ldr	r5, [r4, #28]
 8002578:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800257a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800257e:	f022 0202 	bic.w	r2, r2, #2
 8002582:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002586:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002588:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800258a:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800258c:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800258e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002592:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002596:	d037      	beq.n	8002608 <HAL_ADC_Init+0xbc>
 8002598:	2d01      	cmp	r5, #1
 800259a:	bf14      	ite	ne
 800259c:	2700      	movne	r7, #0
 800259e:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025a2:	7d26      	ldrb	r6, [r4, #20]
 80025a4:	2e01      	cmp	r6, #1
 80025a6:	d106      	bne.n	80025b6 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025a8:	bb82      	cbnz	r2, 800260c <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025aa:	69a2      	ldr	r2, [r4, #24]
 80025ac:	3a01      	subs	r2, #1
 80025ae:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 80025b2:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80025b6:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025b8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80025bc:	6856      	ldr	r6, [r2, #4]
 80025be:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80025c2:	ea46 0607 	orr.w	r6, r6, r7
 80025c6:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80025c8:	6897      	ldr	r7, [r2, #8]
 80025ca:	4e1d      	ldr	r6, [pc, #116]	; (8002640 <HAL_ADC_Init+0xf4>)
 80025cc:	ea06 0607 	and.w	r6, r6, r7
 80025d0:	ea46 0601 	orr.w	r6, r6, r1
 80025d4:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025d6:	d001      	beq.n	80025dc <HAL_ADC_Init+0x90>
 80025d8:	2d01      	cmp	r5, #1
 80025da:	d102      	bne.n	80025e2 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025dc:	6923      	ldr	r3, [r4, #16]
 80025de:	3b01      	subs	r3, #1
 80025e0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80025e2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80025e4:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80025e8:	432b      	orrs	r3, r5
 80025ea:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025ec:	6892      	ldr	r2, [r2, #8]
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_ADC_Init+0xf8>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	4299      	cmp	r1, r3
 80025f4:	d113      	bne.n	800261e <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	2300      	movs	r3, #0
 80025f8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80025fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025fc:	f023 0303 	bic.w	r3, r3, #3
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002608:	462f      	mov	r7, r5
 800260a:	e7ca      	b.n	80025a2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800260e:	f042 0220 	orr.w	r2, r2, #32
 8002612:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002614:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800261c:	e7cb      	b.n	80025b6 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 800261e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002620:	f023 0312 	bic.w	r3, r3, #18
 8002624:	f043 0310 	orr.w	r3, r3, #16
 8002628:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8002632:	2001      	movs	r0, #1
 8002634:	e7e7      	b.n	8002606 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002638:	f043 0310 	orr.w	r3, r3, #16
 800263c:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800263e:	e7f8      	b.n	8002632 <HAL_ADC_Init+0xe6>
 8002640:	ffe1f7fd 	.word	0xffe1f7fd
 8002644:	ff1f0efe 	.word	0xff1f0efe

08002648 <HAL_ADC_Stop_DMA>:
{
 8002648:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800264a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800264e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002650:	2b01      	cmp	r3, #1
 8002652:	d022      	beq.n	800269a <HAL_ADC_Stop_DMA+0x52>
 8002654:	2301      	movs	r3, #1
 8002656:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800265a:	f7ff ff51 	bl	8002500 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800265e:	b9a8      	cbnz	r0, 800268c <HAL_ADC_Stop_DMA+0x44>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	6893      	ldr	r3, [r2, #8]
 8002664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002668:	6093      	str	r3, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800266a:	6a23      	ldr	r3, [r4, #32]
 800266c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002670:	2a02      	cmp	r2, #2
 8002672:	d10b      	bne.n	800268c <HAL_ADC_Stop_DMA+0x44>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f925 	bl	80028c4 <HAL_DMA_Abort>
        ADC_STATE_CLR_SET(hadc->State,
 800267a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (tmp_hal_status == HAL_OK)
 800267c:	b950      	cbnz	r0, 8002694 <HAL_ADC_Stop_DMA+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 800267e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f043 0301 	orr.w	r3, r3, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800268a:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002692:	bd10      	pop	{r4, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002698:	e7f7      	b.n	800268a <HAL_ADC_Stop_DMA+0x42>
  __HAL_LOCK(hadc);
 800269a:	2002      	movs	r0, #2
 800269c:	e7f9      	b.n	8002692 <HAL_ADC_Stop_DMA+0x4a>
	...

080026a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026a2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026ae:	0412      	lsls	r2, r2, #16
 80026b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80026bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c6:	b530      	push	{r4, r5, lr}
 80026c8:	68dc      	ldr	r4, [r3, #12]
 80026ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	bf28      	it	cs
 80026d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e0:	bf98      	it	ls
 80026e2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e8:	bf88      	it	hi
 80026ea:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	ea21 0303 	bic.w	r3, r1, r3
 80026f0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f2:	fa05 f404 	lsl.w	r4, r5, r4
 80026f6:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80026fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	bfac      	ite	ge
 8002702:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	4a07      	ldrlt	r2, [pc, #28]	; (8002724 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800270c:	b2db      	uxtb	r3, r3
 800270e:	bfab      	itete	ge
 8002710:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800271e:	bd30      	pop	{r4, r5, pc}
 8002720:	e000ed00 	.word	0xe000ed00
 8002724:	e000ed14 	.word	0xe000ed14

08002728 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002728:	2800      	cmp	r0, #0
 800272a:	db08      	blt.n	800273e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272c:	2301      	movs	r3, #1
 800272e:	0942      	lsrs	r2, r0, #5
 8002730:	f000 001f 	and.w	r0, r0, #31
 8002734:	fa03 f000 	lsl.w	r0, r3, r0
 8002738:	4b01      	ldr	r3, [pc, #4]	; (8002740 <HAL_NVIC_EnableIRQ+0x18>)
 800273a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100

08002744 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002744:	2800      	cmp	r0, #0
 8002746:	db0d      	blt.n	8002764 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002748:	2201      	movs	r2, #1
 800274a:	0943      	lsrs	r3, r0, #5
 800274c:	f000 001f 	and.w	r0, r0, #31
 8002750:	fa02 f000 	lsl.w	r0, r2, r0
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_NVIC_DisableIRQ+0x24>)
 8002756:	3320      	adds	r3, #32
 8002758:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800275c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002760:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100

0800276c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	3801      	subs	r0, #1
 800276e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002772:	d20b      	bcs.n	800278c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002774:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	21f0      	movs	r1, #240	; 0xf0
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002782:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002784:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002786:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002788:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800278c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002794:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002796:	b348      	cbz	r0, 80027ec <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002798:	2214      	movs	r2, #20
 800279a:	6801      	ldr	r1, [r0, #0]
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_DMA_Init+0x5c>)
 800279e:	440b      	add	r3, r1
 80027a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_DMA_Init+0x60>)
 80027aa:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027ac:	2302      	movs	r3, #2
 80027ae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027b2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80027b6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b8:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80027ba:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027bc:	4323      	orrs	r3, r4
 80027be:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027c0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c6:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027c8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	4323      	orrs	r3, r4
 80027ce:	6984      	ldr	r4, [r0, #24]
 80027d0:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d2:	69c4      	ldr	r4, [r0, #28]
 80027d4:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80027d6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027d8:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027da:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027dc:	2300      	movs	r3, #0
 80027de:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027e0:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80027e4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 80027e8:	4618      	mov	r0, r3
}
 80027ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
 80027ee:	e7fc      	b.n	80027ea <HAL_DMA_Init+0x56>
 80027f0:	bffdfff8 	.word	0xbffdfff8
 80027f4:	40020000 	.word	0x40020000

080027f8 <HAL_DMA_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027f8:	4603      	mov	r3, r0
{
 80027fa:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80027fc:	b300      	cbz	r0, 8002840 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80027fe:	6801      	ldr	r1, [r0, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002800:	2000      	movs	r0, #0
  __HAL_DMA_DISABLE(hdma);
 8002802:	680a      	ldr	r2, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
 8002804:	4c0f      	ldr	r4, [pc, #60]	; (8002844 <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	600a      	str	r2, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <HAL_DMA_DeInit+0x50>)
  hdma->Instance->CCR  = 0U;
 800280e:	6008      	str	r0, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002810:	440a      	add	r2, r1
  hdma->Instance->CNDTR = 0U;
 8002812:	6048      	str	r0, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8002814:	6088      	str	r0, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8002816:	60c8      	str	r0, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002818:	2114      	movs	r1, #20
 800281a:	fbb2 f2f1 	udiv	r2, r2, r1
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800281e:	2101      	movs	r1, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8002828:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800282a:	6062      	str	r2, [r4, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
  hdma->XferHalfCpltCallback = NULL;
 800282c:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;
 8002830:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002834:	6398      	str	r0, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002836:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 800283a:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

  return HAL_OK;
}
 800283e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002840:	2001      	movs	r0, #1
 8002842:	e7fc      	b.n	800283e <HAL_DMA_DeInit+0x46>
 8002844:	40020000 	.word	0x40020000
 8002848:	bffdfff8 	.word	0xbffdfff8

0800284c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800284e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002852:	2c01      	cmp	r4, #1
 8002854:	d034      	beq.n	80028c0 <HAL_DMA_Start_IT+0x74>
 8002856:	2401      	movs	r4, #1
 8002858:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800285c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8002860:	2600      	movs	r6, #0
 8002862:	2c01      	cmp	r4, #1
 8002864:	b2e5      	uxtb	r5, r4
 8002866:	f04f 0402 	mov.w	r4, #2
 800286a:	d127      	bne.n	80028bc <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002870:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002872:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002874:	6826      	ldr	r6, [r4, #0]
 8002876:	f026 0601 	bic.w	r6, r6, #1
 800287a:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800287c:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8002880:	40bd      	lsls	r5, r7
 8002882:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002884:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002886:	6843      	ldr	r3, [r0, #4]
 8002888:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800288a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800288c:	bf0b      	itete	eq
 800288e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002890:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002892:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002894:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002896:	b14b      	cbz	r3, 80028ac <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028a0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6023      	str	r3, [r4, #0]
}
 80028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	f043 030a 	orr.w	r3, r3, #10
 80028ba:	e7f0      	b.n	800289e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80028bc:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80028c0:	2002      	movs	r0, #2
 80028c2:	e7f2      	b.n	80028aa <HAL_DMA_Start_IT+0x5e>

080028c4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d006      	beq.n	80028da <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028cc:	2304      	movs	r3, #4
 80028ce:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80028d0:	2300      	movs	r3, #0
 80028d2:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
 80028d8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028da:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028dc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	f022 020e 	bic.w	r2, r2, #14
 80028e4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028ee:	2201      	movs	r2, #1
 80028f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hdma);      
 80028f8:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80028fa:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80028fe:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8002902:	4618      	mov	r0, r3
}
 8002904:	4770      	bx	lr
	...

08002908 <HAL_DMA_Abort_IT>:
{  
 8002908:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800290a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800290e:	2b02      	cmp	r3, #2
 8002910:	d003      	beq.n	800291a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002912:	2304      	movs	r3, #4
 8002914:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002916:	2001      	movs	r0, #1
}
 8002918:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800291a:	6803      	ldr	r3, [r0, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	f022 020e 	bic.w	r2, r2, #14
 8002922:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_DMA_Abort_IT+0x88>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <HAL_DMA_Abort_IT+0x6a>
 8002932:	3214      	adds	r2, #20
 8002934:	4293      	cmp	r3, r2
 8002936:	d01e      	beq.n	8002976 <HAL_DMA_Abort_IT+0x6e>
 8002938:	3214      	adds	r2, #20
 800293a:	4293      	cmp	r3, r2
 800293c:	d01d      	beq.n	800297a <HAL_DMA_Abort_IT+0x72>
 800293e:	3214      	adds	r2, #20
 8002940:	4293      	cmp	r3, r2
 8002942:	d01d      	beq.n	8002980 <HAL_DMA_Abort_IT+0x78>
 8002944:	3214      	adds	r2, #20
 8002946:	4293      	cmp	r3, r2
 8002948:	d01d      	beq.n	8002986 <HAL_DMA_Abort_IT+0x7e>
 800294a:	3214      	adds	r2, #20
 800294c:	4293      	cmp	r3, r2
 800294e:	bf0c      	ite	eq
 8002950:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002954:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800295a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800295c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800295e:	2301      	movs	r3, #1
 8002960:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002964:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002966:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800296a:	b17b      	cbz	r3, 800298c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 800296c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	4620      	mov	r0, r4
 8002970:	e7d2      	b.n	8002918 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002972:	2301      	movs	r3, #1
 8002974:	e7f0      	b.n	8002958 <HAL_DMA_Abort_IT+0x50>
 8002976:	2310      	movs	r3, #16
 8002978:	e7ee      	b.n	8002958 <HAL_DMA_Abort_IT+0x50>
 800297a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297e:	e7eb      	b.n	8002958 <HAL_DMA_Abort_IT+0x50>
 8002980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002984:	e7e8      	b.n	8002958 <HAL_DMA_Abort_IT+0x50>
 8002986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800298a:	e7e5      	b.n	8002958 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800298c:	4618      	mov	r0, r3
 800298e:	e7c3      	b.n	8002918 <HAL_DMA_Abort_IT+0x10>
 8002990:	40020008 	.word	0x40020008
 8002994:	40020000 	.word	0x40020000

08002998 <HAL_DMA_IRQHandler>:
{
 8002998:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800299a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800299c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800299e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029a0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029a2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029a4:	4095      	lsls	r5, r2
 80029a6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80029a8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029aa:	d032      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x7a>
 80029ac:	074d      	lsls	r5, r1, #29
 80029ae:	d530      	bpl.n	8002a12 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b4:	bf5e      	ittt	pl
 80029b6:	681a      	ldrpl	r2, [r3, #0]
 80029b8:	f022 0204 	bicpl.w	r2, r2, #4
 80029bc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029be:	4a3e      	ldr	r2, [pc, #248]	; (8002ab8 <HAL_DMA_IRQHandler+0x120>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d019      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x60>
 80029c4:	3214      	adds	r2, #20
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d018      	beq.n	80029fc <HAL_DMA_IRQHandler+0x64>
 80029ca:	3214      	adds	r2, #20
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d017      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x68>
 80029d0:	3214      	adds	r2, #20
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d017      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x6e>
 80029d6:	3214      	adds	r2, #20
 80029d8:	4293      	cmp	r3, r2
 80029da:	d017      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x74>
 80029dc:	3214      	adds	r2, #20
 80029de:	4293      	cmp	r3, r2
 80029e0:	bf0c      	ite	eq
 80029e2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80029e6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80029ea:	4a34      	ldr	r2, [pc, #208]	; (8002abc <HAL_DMA_IRQHandler+0x124>)
 80029ec:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80029ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05e      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x11a>
}
 80029f4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80029f6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029f8:	2304      	movs	r3, #4
 80029fa:	e7f6      	b.n	80029ea <HAL_DMA_IRQHandler+0x52>
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	e7f4      	b.n	80029ea <HAL_DMA_IRQHandler+0x52>
 8002a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a04:	e7f1      	b.n	80029ea <HAL_DMA_IRQHandler+0x52>
 8002a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a0a:	e7ee      	b.n	80029ea <HAL_DMA_IRQHandler+0x52>
 8002a0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a10:	e7eb      	b.n	80029ea <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a12:	2502      	movs	r5, #2
 8002a14:	4095      	lsls	r5, r2
 8002a16:	4225      	tst	r5, r4
 8002a18:	d035      	beq.n	8002a86 <HAL_DMA_IRQHandler+0xee>
 8002a1a:	078d      	lsls	r5, r1, #30
 8002a1c:	d533      	bpl.n	8002a86 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	0694      	lsls	r4, r2, #26
 8002a22:	d406      	bmi.n	8002a32 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f022 020a 	bic.w	r2, r2, #10
 8002a2a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a32:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <HAL_DMA_IRQHandler+0x120>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d019      	beq.n	8002a6c <HAL_DMA_IRQHandler+0xd4>
 8002a38:	3214      	adds	r2, #20
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d018      	beq.n	8002a70 <HAL_DMA_IRQHandler+0xd8>
 8002a3e:	3214      	adds	r2, #20
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d017      	beq.n	8002a74 <HAL_DMA_IRQHandler+0xdc>
 8002a44:	3214      	adds	r2, #20
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d017      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xe2>
 8002a4a:	3214      	adds	r2, #20
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d017      	beq.n	8002a80 <HAL_DMA_IRQHandler+0xe8>
 8002a50:	3214      	adds	r2, #20
 8002a52:	4293      	cmp	r3, r2
 8002a54:	bf0c      	ite	eq
 8002a56:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002a5a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_DMA_IRQHandler+0x124>)
 8002a60:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002a62:	2300      	movs	r3, #0
 8002a64:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002a68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a6a:	e7c1      	b.n	80029f0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e7f6      	b.n	8002a5e <HAL_DMA_IRQHandler+0xc6>
 8002a70:	2320      	movs	r3, #32
 8002a72:	e7f4      	b.n	8002a5e <HAL_DMA_IRQHandler+0xc6>
 8002a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a78:	e7f1      	b.n	8002a5e <HAL_DMA_IRQHandler+0xc6>
 8002a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7e:	e7ee      	b.n	8002a5e <HAL_DMA_IRQHandler+0xc6>
 8002a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a84:	e7eb      	b.n	8002a5e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a86:	2508      	movs	r5, #8
 8002a88:	4095      	lsls	r5, r2
 8002a8a:	4225      	tst	r5, r4
 8002a8c:	d011      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x11a>
 8002a8e:	0709      	lsls	r1, r1, #28
 8002a90:	d50f      	bpl.n	8002ab2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	f021 010e 	bic.w	r1, r1, #14
 8002a98:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	fa03 f202 	lsl.w	r2, r3, r2
 8002aa0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aa2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002aa4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002aae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ab0:	e79e      	b.n	80029f0 <HAL_DMA_IRQHandler+0x58>
}
 8002ab2:	bc70      	pop	{r4, r5, r6}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40020008 	.word	0x40020008
 8002abc:	40020000 	.word	0x40020000

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ac4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002ac6:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac8:	4f64      	ldr	r7, [pc, #400]	; (8002c5c <HAL_GPIO_Init+0x19c>)
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002acc:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002c64 <HAL_GPIO_Init+0x1a4>
 8002ad0:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002c68 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad4:	680d      	ldr	r5, [r1, #0]
 8002ad6:	fa35 f406 	lsrs.w	r4, r5, r6
 8002ada:	d102      	bne.n	8002ae2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002adc:	b003      	add	sp, #12
 8002ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002ae2:	f04f 0801 	mov.w	r8, #1
 8002ae6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aea:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002aee:	ea38 0505 	bics.w	r5, r8, r5
 8002af2:	d17b      	bne.n	8002bec <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002af4:	684d      	ldr	r5, [r1, #4]
 8002af6:	2d03      	cmp	r5, #3
 8002af8:	d807      	bhi.n	8002b0a <HAL_GPIO_Init+0x4a>
 8002afa:	3d01      	subs	r5, #1
 8002afc:	2d02      	cmp	r5, #2
 8002afe:	f200 8088 	bhi.w	8002c12 <HAL_GPIO_Init+0x152>
 8002b02:	e8df f005 	tbb	[pc, r5]
 8002b06:	9b96      	.short	0x9b96
 8002b08:	a1          	.byte	0xa1
 8002b09:	00          	.byte	0x00
 8002b0a:	2d12      	cmp	r5, #18
 8002b0c:	f000 8099 	beq.w	8002c42 <HAL_GPIO_Init+0x182>
 8002b10:	d86e      	bhi.n	8002bf0 <HAL_GPIO_Init+0x130>
 8002b12:	2d11      	cmp	r5, #17
 8002b14:	f000 808f 	beq.w	8002c36 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b18:	2cff      	cmp	r4, #255	; 0xff
 8002b1a:	bf98      	it	ls
 8002b1c:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b1e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b22:	bf88      	it	hi
 8002b24:	f100 0a04 	addhi.w	sl, r0, #4
 8002b28:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b2c:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b30:	bf88      	it	hi
 8002b32:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b34:	fa09 fb05 	lsl.w	fp, r9, r5
 8002b38:	ea28 080b 	bic.w	r8, r8, fp
 8002b3c:	fa02 f505 	lsl.w	r5, r2, r5
 8002b40:	ea48 0505 	orr.w	r5, r8, r5
 8002b44:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b48:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002b4c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002b50:	d04c      	beq.n	8002bec <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b52:	69bd      	ldr	r5, [r7, #24]
 8002b54:	f026 0803 	bic.w	r8, r6, #3
 8002b58:	f045 0501 	orr.w	r5, r5, #1
 8002b5c:	61bd      	str	r5, [r7, #24]
 8002b5e:	69bd      	ldr	r5, [r7, #24]
 8002b60:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002b64:	f005 0501 	and.w	r5, r5, #1
 8002b68:	9501      	str	r5, [sp, #4]
 8002b6a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b6e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b72:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b74:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002b78:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b7c:	fa09 f90b 	lsl.w	r9, r9, fp
 8002b80:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b84:	4d39      	ldr	r5, [pc, #228]	; (8002c6c <HAL_GPIO_Init+0x1ac>)
 8002b86:	42a8      	cmp	r0, r5
 8002b88:	d062      	beq.n	8002c50 <HAL_GPIO_Init+0x190>
 8002b8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b8e:	42a8      	cmp	r0, r5
 8002b90:	d060      	beq.n	8002c54 <HAL_GPIO_Init+0x194>
 8002b92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b96:	42a8      	cmp	r0, r5
 8002b98:	d05e      	beq.n	8002c58 <HAL_GPIO_Init+0x198>
 8002b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b9e:	42a8      	cmp	r0, r5
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2503      	moveq	r5, #3
 8002ba4:	2504      	movne	r5, #4
 8002ba6:	fa05 f50b 	lsl.w	r5, r5, fp
 8002baa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002bae:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bb2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bb8:	bf14      	ite	ne
 8002bba:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bbc:	43a5      	biceq	r5, r4
 8002bbe:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bc0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bc6:	bf14      	ite	ne
 8002bc8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bca:	43a5      	biceq	r5, r4
 8002bcc:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002bce:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bd0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002bd4:	bf14      	ite	ne
 8002bd6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bd8:	43a5      	biceq	r5, r4
 8002bda:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002bdc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bde:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002be2:	bf14      	ite	ne
 8002be4:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be6:	ea25 0404 	biceq.w	r4, r5, r4
 8002bea:	601c      	str	r4, [r3, #0]
	position++;
 8002bec:	3601      	adds	r6, #1
 8002bee:	e771      	b.n	8002ad4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002bf0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002c70 <HAL_GPIO_Init+0x1b0>
 8002bf4:	454d      	cmp	r5, r9
 8002bf6:	d00c      	beq.n	8002c12 <HAL_GPIO_Init+0x152>
 8002bf8:	d817      	bhi.n	8002c2a <HAL_GPIO_Init+0x16a>
 8002bfa:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002bfe:	454d      	cmp	r5, r9
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x152>
 8002c02:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002c06:	454d      	cmp	r5, r9
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x152>
 8002c0a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002c0e:	454d      	cmp	r5, r9
 8002c10:	d182      	bne.n	8002b18 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c12:	688a      	ldr	r2, [r1, #8]
 8002c14:	b1d2      	cbz	r2, 8002c4c <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c16:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002c18:	bf08      	it	eq
 8002c1a:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1e:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002c22:	bf18      	it	ne
 8002c24:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002c28:	e776      	b.n	8002b18 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002c2a:	4565      	cmp	r5, ip
 8002c2c:	d0f1      	beq.n	8002c12 <HAL_GPIO_Init+0x152>
 8002c2e:	4575      	cmp	r5, lr
 8002c30:	e7ee      	b.n	8002c10 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c32:	68ca      	ldr	r2, [r1, #12]
          break;
 8002c34:	e770      	b.n	8002b18 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c36:	68ca      	ldr	r2, [r1, #12]
 8002c38:	3204      	adds	r2, #4
          break;
 8002c3a:	e76d      	b.n	8002b18 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c3c:	68ca      	ldr	r2, [r1, #12]
 8002c3e:	3208      	adds	r2, #8
          break;
 8002c40:	e76a      	b.n	8002b18 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c42:	68ca      	ldr	r2, [r1, #12]
 8002c44:	320c      	adds	r2, #12
          break;
 8002c46:	e767      	b.n	8002b18 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	e765      	b.n	8002b18 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	e763      	b.n	8002b18 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c50:	2500      	movs	r5, #0
 8002c52:	e7a8      	b.n	8002ba6 <HAL_GPIO_Init+0xe6>
 8002c54:	2501      	movs	r5, #1
 8002c56:	e7a6      	b.n	8002ba6 <HAL_GPIO_Init+0xe6>
 8002c58:	2502      	movs	r5, #2
 8002c5a:	e7a4      	b.n	8002ba6 <HAL_GPIO_Init+0xe6>
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40010400 	.word	0x40010400
 8002c64:	10310000 	.word	0x10310000
 8002c68:	10320000 	.word	0x10320000
 8002c6c:	40010800 	.word	0x40010800
 8002c70:	10220000 	.word	0x10220000

08002c74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002c78:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8002c7c:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c7e:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002c82:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c86:	eb00 030b 	add.w	r3, r0, fp
 8002c8a:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8002c8e:	fa31 f402 	lsrs.w	r4, r1, r2
 8002c92:	d102      	bne.n	8002c9a <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8002c94:	b003      	add	sp, #12
 8002c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c9a:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8002c9e:	400f      	ands	r7, r1
 8002ca0:	d049      	beq.n	8002d36 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8002ca2:	f022 0403 	bic.w	r4, r2, #3
 8002ca6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002caa:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002cae:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8002cb2:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002cb4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002cb8:	fa08 f90c 	lsl.w	r9, r8, ip
 8002cbc:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002cc0:	4d22      	ldr	r5, [pc, #136]	; (8002d4c <HAL_GPIO_DeInit+0xd8>)
 8002cc2:	42a8      	cmp	r0, r5
 8002cc4:	d039      	beq.n	8002d3a <HAL_GPIO_DeInit+0xc6>
 8002cc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cca:	42a8      	cmp	r0, r5
 8002ccc:	d037      	beq.n	8002d3e <HAL_GPIO_DeInit+0xca>
 8002cce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cd2:	42a8      	cmp	r0, r5
 8002cd4:	d035      	beq.n	8002d42 <HAL_GPIO_DeInit+0xce>
 8002cd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cda:	42a8      	cmp	r0, r5
 8002cdc:	bf0c      	ite	eq
 8002cde:	2503      	moveq	r5, #3
 8002ce0:	2504      	movne	r5, #4
 8002ce2:	fa05 f50c 	lsl.w	r5, r5, ip
 8002ce6:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002ce8:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002cec:	d10f      	bne.n	8002d0e <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002cee:	681d      	ldr	r5, [r3, #0]
 8002cf0:	4035      	ands	r5, r6
 8002cf2:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002cf4:	685d      	ldr	r5, [r3, #4]
 8002cf6:	4035      	ands	r5, r6
 8002cf8:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002cfa:	68dd      	ldr	r5, [r3, #12]
 8002cfc:	4035      	ands	r5, r6
 8002cfe:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002d00:	689d      	ldr	r5, [r3, #8]
 8002d02:	4035      	ands	r5, r6
 8002d04:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002d06:	68a5      	ldr	r5, [r4, #8]
 8002d08:	ea25 0509 	bic.w	r5, r5, r9
 8002d0c:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d0e:	2fff      	cmp	r7, #255	; 0xff
 8002d10:	bf94      	ite	ls
 8002d12:	4607      	movls	r7, r0
 8002d14:	9f01      	ldrhi	r7, [sp, #4]
 8002d16:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002d1a:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d1c:	bf88      	it	hi
 8002d1e:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002d20:	fa08 fc04 	lsl.w	ip, r8, r4
 8002d24:	ea25 050c 	bic.w	r5, r5, ip
 8002d28:	fa0b f404 	lsl.w	r4, fp, r4
 8002d2c:	4325      	orrs	r5, r4
 8002d2e:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002d30:	68c4      	ldr	r4, [r0, #12]
 8002d32:	4026      	ands	r6, r4
 8002d34:	60c6      	str	r6, [r0, #12]
    position++;
 8002d36:	3201      	adds	r2, #1
 8002d38:	e7a9      	b.n	8002c8e <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d3a:	2500      	movs	r5, #0
 8002d3c:	e7d1      	b.n	8002ce2 <HAL_GPIO_DeInit+0x6e>
 8002d3e:	2501      	movs	r5, #1
 8002d40:	e7cf      	b.n	8002ce2 <HAL_GPIO_DeInit+0x6e>
 8002d42:	2502      	movs	r5, #2
 8002d44:	e7cd      	b.n	8002ce2 <HAL_GPIO_DeInit+0x6e>
 8002d46:	bf00      	nop
 8002d48:	40010400 	.word	0x40010400
 8002d4c:	40010800 	.word	0x40010800

08002d50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d50:	6883      	ldr	r3, [r0, #8]
 8002d52:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002d54:	bf14      	ite	ne
 8002d56:	2001      	movne	r0, #1
 8002d58:	2000      	moveq	r0, #0
 8002d5a:	4770      	bx	lr

08002d5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d5c:	b10a      	cbz	r2, 8002d62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d5e:	6101      	str	r1, [r0, #16]
  }
}
 8002d60:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d62:	0409      	lsls	r1, r1, #16
 8002d64:	e7fb      	b.n	8002d5e <HAL_GPIO_WritePin+0x2>

08002d66 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d66:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d68:	ea01 0203 	and.w	r2, r1, r3
 8002d6c:	ea21 0103 	bic.w	r1, r1, r3
 8002d70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002d74:	6101      	str	r1, [r0, #16]
}
 8002d76:	4770      	bx	lr

08002d78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d7a:	4604      	mov	r4, r0
{
 8002d7c:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8002d7e:	b310      	cbz	r0, 8002dc6 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d80:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002d84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d88:	b91b      	cbnz	r3, 8002d92 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d8a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d8e:	f003 f9a7 	bl	80060e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d92:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d94:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d96:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d98:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002d9c:	f855 0b10 	ldr.w	r0, [r5], #16
 8002da0:	f001 fdcf 	bl	8004942 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	1d27      	adds	r7, r4, #4
 8002dac:	6033      	str	r3, [r6, #0]
 8002dae:	4626      	mov	r6, r4
 8002db0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002db4:	f856 0b10 	ldr.w	r0, [r6], #16
 8002db8:	f001 fdb3 	bl	8004922 <USB_CoreInit>
 8002dbc:	4605      	mov	r5, r0
 8002dbe:	b120      	cbz	r0, 8002dca <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002dc6:	2501      	movs	r5, #1
 8002dc8:	e04b      	b.n	8002e62 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dca:	4601      	mov	r1, r0
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	f001 fdc2 	bl	8004956 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd2:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dd4:	f04f 0e01 	mov.w	lr, #1
 8002dd8:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dda:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ddc:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8002de0:	b2c8      	uxtb	r0, r1
 8002de2:	4584      	cmp	ip, r0
 8002de4:	f101 0101 	add.w	r1, r1, #1
 8002de8:	d81b      	bhi.n	8002e22 <HAL_PCD_Init+0xaa>
 8002dea:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dec:	2528      	movs	r5, #40	; 0x28
 8002dee:	4619      	mov	r1, r3
 8002df0:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df2:	4584      	cmp	ip, r0
 8002df4:	f103 0301 	add.w	r3, r3, #1
 8002df8:	d81f      	bhi.n	8002e3a <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dfa:	46ec      	mov	ip, sp
 8002dfc:	4635      	mov	r5, r6
 8002dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	f8cc 3000 	str.w	r3, [ip]
 8002e0a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002e0e:	6820      	ldr	r0, [r4, #0]
 8002e10:	f001 fda3 	bl	800495a <USB_DevInit>
 8002e14:	2301      	movs	r3, #1
 8002e16:	4605      	mov	r5, r0
 8002e18:	b1e0      	cbz	r0, 8002e54 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002e20:	e7d1      	b.n	8002dc6 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8002e22:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e26:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8002e2a:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8002e2e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e32:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e38:	e7d2      	b.n	8002de0 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8002e3a:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e3e:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8002e42:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8002e46:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e4a:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e4e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e52:	e7cd      	b.n	8002df0 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8002e54:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e58:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e5a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e5e:	f002 f835 	bl	8004ecc <USB_DevDisconnect>

  return HAL_OK;
}
 8002e62:	4628      	mov	r0, r5
 8002e64:	b007      	add	sp, #28
 8002e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e68:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002e6a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8002e6e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d010      	beq.n	8002e96 <HAL_PCD_Start+0x2e>
 8002e74:	2501      	movs	r5, #1
 8002e76:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e7a:	6800      	ldr	r0, [r0, #0]
 8002e7c:	f001 fd58 	bl	8004930 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e80:	4629      	mov	r1, r5
 8002e82:	4620      	mov	r0, r4
 8002e84:	f003 fa37 	bl	80062f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	f002 f81d 	bl	8004ec8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002e94:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002e96:	2002      	movs	r0, #2
 8002e98:	e7fc      	b.n	8002e94 <HAL_PCD_Start+0x2c>

08002e9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e9a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002e9c:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8002ea0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002ea2:	2a01      	cmp	r2, #1
 8002ea4:	d00b      	beq.n	8002ebe <HAL_PCD_SetAddress+0x24>
 8002ea6:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8002ea8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8002eac:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eb0:	6800      	ldr	r0, [r0, #0]
 8002eb2:	f002 f803 	bl	8004ebc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002ebc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002ebe:	2002      	movs	r0, #2
 8002ec0:	e7fc      	b.n	8002ebc <HAL_PCD_SetAddress+0x22>
	...

08002ec4 <HAL_PCD_IRQHandler>:
{
 8002ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec8:	4604      	mov	r4, r0
 8002eca:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002ecc:	6800      	ldr	r0, [r0, #0]
 8002ece:	f001 ffff 	bl	8004ed0 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ed2:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 8002ed6:	f000 8428 	beq.w	800372a <HAL_PCD_IRQHandler+0x866>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002eda:	f8df 9320 	ldr.w	r9, [pc, #800]	; 80031fc <HAL_PCD_IRQHandler+0x338>
 8002ede:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8003200 <HAL_PCD_IRQHandler+0x33c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002ee8:	041f      	lsls	r7, r3, #16
 8002eea:	d402      	bmi.n	8002ef2 <HAL_PCD_IRQHandler+0x2e>
}
 8002eec:	b005      	add	sp, #20
 8002eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8002ef2:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8002ef6:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8002ef8:	f016 060f 	ands.w	r6, r6, #15
 8002efc:	f040 80c6 	bne.w	800308c <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f00:	f011 0110 	ands.w	r1, r1, #16
 8002f04:	d12b      	bne.n	8002f5e <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f06:	8803      	ldrh	r3, [r0, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	ea03 0309 	and.w	r3, r3, r9
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f18:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f22:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002f26:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8002f2a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f30:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002f32:	4413      	add	r3, r2
 8002f34:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f36:	4620      	mov	r0, r4
 8002f38:	f003 f901 	bl	800613e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f3c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ce      	beq.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>
 8002f44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f46:	2a00      	cmp	r2, #0
 8002f48:	d1cb      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f4a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002f4e:	6821      	ldr	r1, [r4, #0]
 8002f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f54:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f58:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002f5c:	e7c1      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f5e:	8805      	ldrh	r5, [r0, #0]
 8002f60:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f62:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8002f66:	d021      	beq.n	8002fac <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f68:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f6c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f7a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f7e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f86:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f8a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002f8e:	f002 f9ed 	bl	800536c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f92:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002f94:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f96:	8813      	ldrh	r3, [r2, #0]
 8002f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9c:	051b      	lsls	r3, r3, #20
 8002f9e:	0d1b      	lsrs	r3, r3, #20
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002fa6:	f003 f8bb 	bl	8006120 <HAL_PCD_SetupStageCallback>
 8002faa:	e79a      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fac:	0419      	lsls	r1, r3, #16
 8002fae:	d598      	bpl.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fb0:	8803      	ldrh	r3, [r0, #0]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	051b      	lsls	r3, r3, #20
 8002fb8:	0d1b      	lsrs	r3, r3, #20
 8002fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbe:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fc0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002fc4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002fce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002fd2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fda:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fde:	b18b      	cbz	r3, 8003004 <HAL_PCD_IRQHandler+0x140>
 8002fe0:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002fe4:	b171      	cbz	r1, 8003004 <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fe6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002fea:	f002 f9bf 	bl	800536c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002ff2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ff6:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002ff8:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ffa:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8002ffc:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003000:	f003 f894 	bl	800612c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003004:	6821      	ldr	r1, [r4, #0]
 8003006:	880a      	ldrh	r2, [r1, #0]
 8003008:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800300a:	0512      	lsls	r2, r2, #20
 800300c:	f53f af69 	bmi.w	8002ee2 <HAL_PCD_IRQHandler+0x1e>
 8003010:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003018:	f43f af63 	beq.w	8002ee2 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800301c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003020:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8003024:	b29b      	uxth	r3, r3
 8003026:	5ac2      	ldrh	r2, [r0, r3]
 8003028:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800302c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003030:	2d3e      	cmp	r5, #62	; 0x3e
 8003032:	52c2      	strh	r2, [r0, r3]
 8003034:	d90c      	bls.n	8003050 <HAL_PCD_IRQHandler+0x18c>
 8003036:	5ac2      	ldrh	r2, [r0, r3]
 8003038:	096e      	lsrs	r6, r5, #5
 800303a:	06ef      	lsls	r7, r5, #27
 800303c:	bf08      	it	eq
 800303e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003042:	b292      	uxth	r2, r2
 8003044:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003048:	ea42 0208 	orr.w	r2, r2, r8
 800304c:	b292      	uxth	r2, r2
 800304e:	e004      	b.n	800305a <HAL_PCD_IRQHandler+0x196>
 8003050:	b99d      	cbnz	r5, 800307a <HAL_PCD_IRQHandler+0x1b6>
 8003052:	5ac2      	ldrh	r2, [r0, r3]
 8003054:	b292      	uxth	r2, r2
 8003056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305a:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800305c:	880b      	ldrh	r3, [r1, #0]
 800305e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800306e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	800b      	strh	r3, [r1, #0]
 8003078:	e733      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800307a:	5ac2      	ldrh	r2, [r0, r3]
 800307c:	086e      	lsrs	r6, r5, #1
 800307e:	07ed      	lsls	r5, r5, #31
 8003080:	bf48      	it	mi
 8003082:	3601      	addmi	r6, #1
 8003084:	b292      	uxth	r2, r2
 8003086:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800308a:	e7df      	b.n	800304c <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800308c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003090:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003092:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003094:	f140 80f4 	bpl.w	8003280 <HAL_PCD_IRQHandler+0x3bc>
        if (ep->doublebuffer == 0U)
 8003098:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800309a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800309e:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	051b      	lsls	r3, r3, #20
 80030a8:	0d1b      	lsrs	r3, r3, #20
 80030aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ae:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80030b2:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80030b6:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80030ba:	b9b3      	cbnz	r3, 80030ea <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030bc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80030c0:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3306      	adds	r3, #6
 80030c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030cc:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80030d0:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80030d4:	2d00      	cmp	r5, #0
 80030d6:	f000 80b7 	beq.w	8003248 <HAL_PCD_IRQHandler+0x384>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030da:	462b      	mov	r3, r5
 80030dc:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030e0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80030e4:	f002 f942 	bl	800536c <USB_ReadPMA>
 80030e8:	e0ae      	b.n	8003248 <HAL_PCD_IRQHandler+0x384>
          if (ep->type == EP_TYPE_BULK)
 80030ea:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030ee:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 80030f2:	2a02      	cmp	r2, #2
 80030f4:	f040 8086 	bne.w	8003204 <HAL_PCD_IRQHandler+0x340>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030f8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030fc:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8003100:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003104:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003108:	b2ad      	uxth	r5, r5
 800310a:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800310e:	d03b      	beq.n	8003188 <HAL_PCD_IRQHandler+0x2c4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003110:	44ab      	add	fp, r5
 8003112:	f10b 0b02 	add.w	fp, fp, #2
 8003116:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 800311a:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 800311e:	4295      	cmp	r5, r2
 8003120:	d913      	bls.n	800314a <HAL_PCD_IRQHandler+0x286>
 8003122:	2200      	movs	r2, #0
 8003124:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003128:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800312c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003130:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003134:	0412      	lsls	r2, r2, #16
 8003136:	0c12      	lsrs	r2, r2, #16
 8003138:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800313c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003140:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003144:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8003148:	e004      	b.n	8003154 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 800314a:	1b52      	subs	r2, r2, r5
 800314c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8003150:	2a00      	cmp	r2, #0
 8003152:	d0e9      	beq.n	8003128 <HAL_PCD_IRQHandler+0x264>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003154:	f1be 0f00 	cmp.w	lr, #0
 8003158:	d00d      	beq.n	8003176 <HAL_PCD_IRQHandler+0x2b2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800315a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800315e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003162:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003166:	0412      	lsls	r2, r2, #16
 8003168:	0c12      	lsrs	r2, r2, #16
 800316a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003172:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8003176:	2d00      	cmp	r5, #0
 8003178:	d066      	beq.n	8003248 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800317a:	2128      	movs	r1, #40	; 0x28
 800317c:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003180:	462b      	mov	r3, r5
 8003182:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003186:	e7ab      	b.n	80030e0 <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003188:	445d      	add	r5, fp
 800318a:	3506      	adds	r5, #6
 800318c:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8003190:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8003194:	4295      	cmp	r5, r2
 8003196:	d912      	bls.n	80031be <HAL_PCD_IRQHandler+0x2fa>
 8003198:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800319c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80031a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031a8:	0412      	lsls	r2, r2, #16
 80031aa:	0c12      	lsrs	r2, r2, #16
 80031ac:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80031b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80031bc:	e004      	b.n	80031c8 <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 80031be:	1b52      	subs	r2, r2, r5
 80031c0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80031c4:	2a00      	cmp	r2, #0
 80031c6:	d0e9      	beq.n	800319c <HAL_PCD_IRQHandler+0x2d8>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031c8:	f1be 0f00 	cmp.w	lr, #0
 80031cc:	d10d      	bne.n	80031ea <HAL_PCD_IRQHandler+0x326>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031ce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80031d2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80031d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031da:	0412      	lsls	r2, r2, #16
 80031dc:	0c12      	lsrs	r2, r2, #16
 80031de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80031e6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80031ea:	b36d      	cbz	r5, 8003248 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031ec:	2128      	movs	r1, #40	; 0x28
 80031ee:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031f2:	462b      	mov	r3, r5
 80031f4:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80031f8:	e772      	b.n	80030e0 <HAL_PCD_IRQHandler+0x21c>
 80031fa:	bf00      	nop
 80031fc:	ffff8f0f 	.word	0xffff8f0f
 8003200:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003204:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003208:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800320c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003210:	0412      	lsls	r2, r2, #16
 8003212:	0c12      	lsrs	r2, r2, #16
 8003214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003218:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800321c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003220:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8003224:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003228:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800322c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003230:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003234:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003236:	d056      	beq.n	80032e6 <HAL_PCD_IRQHandler+0x422>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003238:	3302      	adds	r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8003240:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8003244:	2d00      	cmp	r5, #0
 8003246:	d19b      	bne.n	8003180 <HAL_PCD_IRQHandler+0x2bc>
        ep->xfer_count += count;
 8003248:	2128      	movs	r1, #40	; 0x28
 800324a:	4371      	muls	r1, r6
 800324c:	1863      	adds	r3, r4, r1
 800324e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003252:	442a      	add	r2, r5
 8003254:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8003258:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800325c:	442a      	add	r2, r5
 800325e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003262:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003266:	b11a      	cbz	r2, 8003270 <HAL_PCD_IRQHandler+0x3ac>
 8003268:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800326c:	429d      	cmp	r5, r3
 800326e:	d243      	bcs.n	80032f8 <HAL_PCD_IRQHandler+0x434>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003270:	2328      	movs	r3, #40	; 0x28
 8003272:	fb03 4306 	mla	r3, r3, r6, r4
 8003276:	4620      	mov	r0, r4
 8003278:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800327c:	f002 ff56 	bl	800612c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003280:	063b      	lsls	r3, r7, #24
 8003282:	f57f ae2e 	bpl.w	8002ee2 <HAL_PCD_IRQHandler+0x1e>
 8003286:	f04f 0c28 	mov.w	ip, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800328a:	6820      	ldr	r0, [r4, #0]
 800328c:	fb0c 4506 	mla	r5, ip, r6, r4
 8003290:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8003294:	b29b      	uxth	r3, r3
 8003296:	ea03 0309 	and.w	r3, r3, r9
 800329a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80032a2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d150      	bne.n	800334c <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 80032aa:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 80032ac:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 80032b0:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 80032b2:	b393      	cbz	r3, 800331a <HAL_PCD_IRQHandler+0x456>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032b4:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 80032b8:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80032bc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80032c0:	d031      	beq.n	8003326 <HAL_PCD_IRQHandler+0x462>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032c2:	bb02      	cbnz	r2, 8003306 <HAL_PCD_IRQHandler+0x442>
 80032c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	b292      	uxth	r2, r2
 80032cc:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032d0:	4410      	add	r0, r2
 80032d2:	5a1a      	ldrh	r2, [r3, r0]
 80032d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80032d8:	521a      	strh	r2, [r3, r0]
 80032da:	5a1a      	ldrh	r2, [r3, r0]
 80032dc:	b292      	uxth	r2, r2
 80032de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e2:	521a      	strh	r2, [r3, r0]
 80032e4:	e019      	b.n	800331a <HAL_PCD_IRQHandler+0x456>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032e6:	3306      	adds	r3, #6
 80032e8:	4413      	add	r3, r2
 80032ea:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80032ee:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80032f2:	2d00      	cmp	r5, #0
 80032f4:	d0a8      	beq.n	8003248 <HAL_PCD_IRQHandler+0x384>
 80032f6:	e77c      	b.n	80031f2 <HAL_PCD_IRQHandler+0x32e>
        ep = &hpcd->OUT_ep[epindex];
 80032f8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032fc:	6820      	ldr	r0, [r4, #0]
 80032fe:	4421      	add	r1, r4
 8003300:	f001 fdfc 	bl	8004efc <USB_EPStartXfer>
 8003304:	e7bc      	b.n	8003280 <HAL_PCD_IRQHandler+0x3bc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003306:	2a01      	cmp	r2, #1
 8003308:	d107      	bne.n	800331a <HAL_PCD_IRQHandler+0x456>
 800330a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800330e:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8003312:	b292      	uxth	r2, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	4410      	add	r0, r2
 8003318:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800331a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800331e:	4620      	mov	r0, r4
 8003320:	f002 ff0d 	bl	800613e <HAL_PCD_DataInStageCallback>
 8003324:	e5dd      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003326:	b932      	cbnz	r2, 8003336 <HAL_PCD_IRQHandler+0x472>
 8003328:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	b292      	uxth	r2, r2
 8003330:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003334:	e7cc      	b.n	80032d0 <HAL_PCD_IRQHandler+0x40c>
 8003336:	2a01      	cmp	r2, #1
 8003338:	d1ef      	bne.n	800331a <HAL_PCD_IRQHandler+0x456>
 800333a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800333e:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003342:	b292      	uxth	r2, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	4410      	add	r0, r2
 8003348:	521f      	strh	r7, [r3, r0]
 800334a:	e7e6      	b.n	800331a <HAL_PCD_IRQHandler+0x456>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800334c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003350:	f417 7280 	ands.w	r2, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8003354:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003356:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800335a:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 800335e:	d11c      	bne.n	800339a <HAL_PCD_IRQHandler+0x4d6>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003360:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003364:	b2bf      	uxth	r7, r7
 8003366:	44ba      	add	sl, r7
 8003368:	f10a 0a02 	add.w	sl, sl, #2
 800336c:	f83e 701a 	ldrh.w	r7, [lr, sl, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8003370:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003374:	429f      	cmp	r7, r3
 8003376:	d301      	bcc.n	800337c <HAL_PCD_IRQHandler+0x4b8>
 8003378:	642a      	str	r2, [r5, #64]	; 0x40
 800337a:	e7d0      	b.n	800331e <HAL_PCD_IRQHandler+0x45a>
              ep->xfer_len -= TxPctSize;
 800337c:	1bdb      	subs	r3, r3, r7
 800337e:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8003380:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8003382:	fb06 cc0c 	mla	ip, r6, ip, ip
              ep->xfer_buff += TxPctSize;
 8003386:	443b      	add	r3, r7
 8003388:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 800338a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800338c:	eb04 010c 	add.w	r1, r4, ip
              ep->xfer_count += TxPctSize;
 8003390:	443b      	add	r3, r7
 8003392:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003394:	f001 fdb2 	bl	8004efc <USB_EPStartXfer>
 8003398:	e5a3      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800339a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800339e:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033a2:	b292      	uxth	r2, r2
 80033a4:	4452      	add	r2, sl
 80033a6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033aa:	f000 80dc 	beq.w	8003566 <HAL_PCD_IRQHandler+0x6a2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033ae:	3202      	adds	r2, #2
 80033b0:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 80033b4:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 80033b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80033bc:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80033be:	bf28      	it	cs
 80033c0:	2300      	movcs	r3, #0
 80033c2:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 80033c6:	bf38      	it	cc
 80033c8:	1a9b      	subcc	r3, r3, r2
 80033ca:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033ce:	b2bf      	uxth	r7, r7
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d14d      	bne.n	8003470 <HAL_PCD_IRQHandler+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d4:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80033d8:	2a00      	cmp	r2, #0
 80033da:	d136      	bne.n	800344a <HAL_PCD_IRQHandler+0x586>
 80033dc:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80033e0:	010b      	lsls	r3, r1, #4
 80033e2:	b2b2      	uxth	r2, r6
 80033e4:	f200 4604 	addw	r6, r0, #1028	; 0x404
 80033e8:	4416      	add	r6, r2
 80033ea:	5af2      	ldrh	r2, [r6, r3]
 80033ec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80033f0:	52f2      	strh	r2, [r6, r3]
 80033f2:	5af2      	ldrh	r2, [r6, r3]
 80033f4:	b292      	uxth	r2, r2
 80033f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033fa:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033fc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003400:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003404:	b292      	uxth	r2, r2
 8003406:	4410      	add	r0, r2
 8003408:	5ac2      	ldrh	r2, [r0, r3]
 800340a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800340e:	52c2      	strh	r2, [r0, r3]
 8003410:	5ac2      	ldrh	r2, [r0, r3]
 8003412:	b292      	uxth	r2, r2
 8003414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003418:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800341a:	4620      	mov	r0, r4
 800341c:	f002 fe8f 	bl	800613e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003420:	2f00      	cmp	r7, #0
 8003422:	f000 80dc 	beq.w	80035de <HAL_PCD_IRQHandler+0x71a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003426:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003444:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003448:	e0c9      	b.n	80035de <HAL_PCD_IRQHandler+0x71a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800344a:	2a01      	cmp	r2, #1
 800344c:	d1e5      	bne.n	800341a <HAL_PCD_IRQHandler+0x556>
 800344e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003452:	010a      	lsls	r2, r1, #4
 8003454:	fa1f fc86 	uxth.w	ip, r6
 8003458:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800345c:	4466      	add	r6, ip
 800345e:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003460:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003464:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003468:	b2b6      	uxth	r6, r6
 800346a:	4430      	add	r0, r6
 800346c:	5283      	strh	r3, [r0, r2]
 800346e:	e7d4      	b.n	800341a <HAL_PCD_IRQHandler+0x556>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003470:	b16f      	cbz	r7, 800348e <HAL_PCD_IRQHandler+0x5ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003472:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800348e:	2728      	movs	r7, #40	; 0x28
 8003490:	fb07 4706 	mla	r7, r7, r6, r4
 8003494:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003498:	2b01      	cmp	r3, #1
 800349a:	f040 80a0 	bne.w	80035de <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_buff += TxPctSize;
 800349e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80034a0:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 80034a4:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 80034a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 80034aa:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 80034ae:	4413      	add	r3, r2
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	459e      	cmp	lr, r3
 80034b6:	d32c      	bcc.n	8003512 <HAL_PCD_IRQHandler+0x64e>
          ep->xfer_len_db -= len;
 80034b8:	ebae 0203 	sub.w	r2, lr, r3
 80034bc:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034be:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80034c2:	fa1f fe83 	uxth.w	lr, r3
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	d141      	bne.n	800354e <HAL_PCD_IRQHandler+0x68a>
 80034ca:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80034ce:	f200 4704 	addw	r7, r0, #1028	; 0x404
 80034d2:	b292      	uxth	r2, r2
 80034d4:	443a      	add	r2, r7
 80034d6:	0109      	lsls	r1, r1, #4
 80034d8:	5a57      	ldrh	r7, [r2, r1]
 80034da:	2b3e      	cmp	r3, #62	; 0x3e
 80034dc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80034e0:	5257      	strh	r7, [r2, r1]
 80034e2:	d923      	bls.n	800352c <HAL_PCD_IRQHandler+0x668>
 80034e4:	06df      	lsls	r7, r3, #27
 80034e6:	5a57      	ldrh	r7, [r2, r1]
 80034e8:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 80034ec:	bf08      	it	eq
 80034ee:	f10a 3aff 	addeq.w	sl, sl, #4294967295
 80034f2:	b2bf      	uxth	r7, r7
 80034f4:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 80034f8:	ea47 0708 	orr.w	r7, r7, r8
 80034fc:	b2bf      	uxth	r7, r7
 80034fe:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003500:	2128      	movs	r1, #40	; 0x28
 8003502:	4673      	mov	r3, lr
 8003504:	fb01 4606 	mla	r6, r1, r6, r4
 8003508:	4661      	mov	r1, ip
 800350a:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800350c:	f001 fce6 	bl	8004edc <USB_WritePMA>
 8003510:	e065      	b.n	80035de <HAL_PCD_IRQHandler+0x71a>
        else if (ep->xfer_len_db == 0U)
 8003512:	f1be 0f00 	cmp.w	lr, #0
 8003516:	d103      	bne.n	8003520 <HAL_PCD_IRQHandler+0x65c>
    if (ep->xfer_len > TxPctSize)
 8003518:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 800351a:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 800351e:	e7ce      	b.n	80034be <HAL_PCD_IRQHandler+0x5fa>
          ep->xfer_fill_db = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
 8003528:	4673      	mov	r3, lr
 800352a:	e7c8      	b.n	80034be <HAL_PCD_IRQHandler+0x5fa>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800352c:	b92b      	cbnz	r3, 800353a <HAL_PCD_IRQHandler+0x676>
 800352e:	5a53      	ldrh	r3, [r2, r1]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	5253      	strh	r3, [r2, r1]
 8003538:	e7e2      	b.n	8003500 <HAL_PCD_IRQHandler+0x63c>
 800353a:	085f      	lsrs	r7, r3, #1
 800353c:	07db      	lsls	r3, r3, #31
 800353e:	5a53      	ldrh	r3, [r2, r1]
 8003540:	bf48      	it	mi
 8003542:	3701      	addmi	r7, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 800354a:	b29b      	uxth	r3, r3
 800354c:	e7f3      	b.n	8003536 <HAL_PCD_IRQHandler+0x672>
 800354e:	2a01      	cmp	r2, #1
 8003550:	d1d6      	bne.n	8003500 <HAL_PCD_IRQHandler+0x63c>
 8003552:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003556:	0109      	lsls	r1, r1, #4
 8003558:	b29a      	uxth	r2, r3
 800355a:	f200 4304 	addw	r3, r0, #1028	; 0x404
 800355e:	4413      	add	r3, r2
 8003560:	f823 e001 	strh.w	lr, [r3, r1]
 8003564:	e7cc      	b.n	8003500 <HAL_PCD_IRQHandler+0x63c>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003566:	3206      	adds	r2, #6
 8003568:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 800356c:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 800356e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003572:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003574:	bf88      	it	hi
 8003576:	4663      	movhi	r3, ip
 8003578:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800357c:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8003580:	bf98      	it	ls
 8003582:	1a9b      	subls	r3, r3, r2
 8003584:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003588:	2b00      	cmp	r3, #0
 800358a:	d14e      	bne.n	800362a <HAL_PCD_IRQHandler+0x766>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800358c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003590:	2a00      	cmp	r2, #0
 8003592:	d137      	bne.n	8003604 <HAL_PCD_IRQHandler+0x740>
 8003594:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003598:	010b      	lsls	r3, r1, #4
 800359a:	b2b2      	uxth	r2, r6
 800359c:	f200 4604 	addw	r6, r0, #1028	; 0x404
 80035a0:	4416      	add	r6, r2
 80035a2:	5af2      	ldrh	r2, [r6, r3]
 80035a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80035a8:	52f2      	strh	r2, [r6, r3]
 80035aa:	5af2      	ldrh	r2, [r6, r3]
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b2:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035b4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80035b8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80035bc:	b292      	uxth	r2, r2
 80035be:	4410      	add	r0, r2
 80035c0:	5ac2      	ldrh	r2, [r0, r3]
 80035c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80035c6:	52c2      	strh	r2, [r0, r3]
 80035c8:	5ac2      	ldrh	r2, [r0, r3]
 80035ca:	b292      	uxth	r2, r2
 80035cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d0:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035d2:	4620      	mov	r0, r4
 80035d4:	f002 fdb3 	bl	800613e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035d8:	2f00      	cmp	r7, #0
 80035da:	f43f af24 	beq.w	8003426 <HAL_PCD_IRQHandler+0x562>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035de:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80035f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003602:	e46e      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003604:	2a01      	cmp	r2, #1
 8003606:	d1e4      	bne.n	80035d2 <HAL_PCD_IRQHandler+0x70e>
 8003608:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800360c:	010a      	lsls	r2, r1, #4
 800360e:	fa1f fc86 	uxth.w	ip, r6
 8003612:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003616:	4466      	add	r6, ip
 8003618:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800361a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800361e:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003622:	b2b6      	uxth	r6, r6
 8003624:	4430      	add	r0, r6
 8003626:	5283      	strh	r3, [r0, r2]
 8003628:	e7d3      	b.n	80035d2 <HAL_PCD_IRQHandler+0x70e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800362a:	b96f      	cbnz	r7, 8003648 <HAL_PCD_IRQHandler+0x784>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800362c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	0c1b      	lsrs	r3, r3, #16
 800363c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003644:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003648:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800364c:	fb0c 4c06 	mla	ip, ip, r6, r4
 8003650:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d1c2      	bne.n	80035de <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_count += TxPctSize;
 8003658:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 800365c:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8003660:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8003662:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8003666:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800366a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 800366e:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8003670:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 8003672:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003676:	d326      	bcc.n	80036c6 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 8003678:	ebae 0203 	sub.w	r2, lr, r3
 800367c:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003680:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003684:	fa1f fc83 	uxth.w	ip, r3
 8003688:	2a00      	cmp	r2, #0
 800368a:	d142      	bne.n	8003712 <HAL_PCD_IRQHandler+0x84e>
 800368c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003690:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8003694:	b292      	uxth	r2, r2
 8003696:	4472      	add	r2, lr
 8003698:	0109      	lsls	r1, r1, #4
 800369a:	f832 e001 	ldrh.w	lr, [r2, r1]
 800369e:	2b3e      	cmp	r3, #62	; 0x3e
 80036a0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80036a4:	f822 e001 	strh.w	lr, [r2, r1]
 80036a8:	d91b      	bls.n	80036e2 <HAL_PCD_IRQHandler+0x81e>
 80036aa:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 80036ae:	06db      	lsls	r3, r3, #27
 80036b0:	5a53      	ldrh	r3, [r2, r1]
 80036b2:	bf08      	it	eq
 80036b4:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 80036be:	ea43 0308 	orr.w	r3, r3, r8
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	e012      	b.n	80036ec <HAL_PCD_IRQHandler+0x828>
        else if (ep->xfer_len_db == 0U)
 80036c6:	f1be 0f00 	cmp.w	lr, #0
 80036ca:	d103      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x810>
    if (ep->xfer_len >= TxPctSize)
 80036cc:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 80036ce:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 80036d2:	e7d5      	b.n	8003680 <HAL_PCD_IRQHandler+0x7bc>
          ep->xfer_len_db = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80036da:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 80036de:	4673      	mov	r3, lr
 80036e0:	e7ce      	b.n	8003680 <HAL_PCD_IRQHandler+0x7bc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036e2:	b95b      	cbnz	r3, 80036fc <HAL_PCD_IRQHandler+0x838>
 80036e4:	5a53      	ldrh	r3, [r2, r1]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ec:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036ee:	2128      	movs	r1, #40	; 0x28
 80036f0:	fb01 4606 	mla	r6, r1, r6, r4
 80036f4:	4663      	mov	r3, ip
 80036f6:	4639      	mov	r1, r7
 80036f8:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80036fa:	e707      	b.n	800350c <HAL_PCD_IRQHandler+0x648>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036fc:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8003700:	07db      	lsls	r3, r3, #31
 8003702:	5a53      	ldrh	r3, [r2, r1]
 8003704:	bf48      	it	mi
 8003706:	f10e 0e01 	addmi.w	lr, lr, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8003710:	e7d7      	b.n	80036c2 <HAL_PCD_IRQHandler+0x7fe>
 8003712:	2a01      	cmp	r2, #1
 8003714:	d1eb      	bne.n	80036ee <HAL_PCD_IRQHandler+0x82a>
 8003716:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800371a:	b29a      	uxth	r2, r3
 800371c:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8003720:	4413      	add	r3, r2
 8003722:	010a      	lsls	r2, r1, #4
 8003724:	f823 c002 	strh.w	ip, [r3, r2]
 8003728:	e7e1      	b.n	80036ee <HAL_PCD_IRQHandler+0x82a>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800372a:	0546      	lsls	r6, r0, #21
 800372c:	d512      	bpl.n	8003754 <HAL_PCD_IRQHandler+0x890>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800372e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8003730:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003732:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003742:	f002 fd08 	bl	8006156 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003746:	4629      	mov	r1, r5
 8003748:	4620      	mov	r0, r4
}
 800374a:	b005      	add	sp, #20
 800374c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003750:	f7ff bba3 	b.w	8002e9a <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003754:	0441      	lsls	r1, r0, #17
 8003756:	d50a      	bpl.n	800376e <HAL_PCD_IRQHandler+0x8aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800375e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 800376a:	f7ff bbbf 	b.w	8002eec <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800376e:	0482      	lsls	r2, r0, #18
 8003770:	d505      	bpl.n	800377e <HAL_PCD_IRQHandler+0x8ba>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800377c:	e7f1      	b.n	8003762 <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800377e:	04c3      	lsls	r3, r0, #19
 8003780:	d519      	bpl.n	80037b6 <HAL_PCD_IRQHandler+0x8f2>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003782:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8003784:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003786:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003796:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800379a:	f023 0308 	bic.w	r3, r3, #8
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80037a6:	f002 fcf9 	bl	800619c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037aa:	6822      	ldr	r2, [r4, #0]
 80037ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80037b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b4:	e7d5      	b.n	8003762 <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80037b6:	0507      	lsls	r7, r0, #20
 80037b8:	d548      	bpl.n	800384c <HAL_PCD_IRQHandler+0x988>
 80037ba:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	4606      	mov	r6, r0
 80037c0:	4611      	mov	r1, r2
 80037c2:	4613      	mov	r3, r2
 80037c4:	f102 0520 	add.w	r5, r2, #32
 80037c8:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 80037cc:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80037ce:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80037d2:	d1f9      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x904>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037d4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037e2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037f2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80037f6:	055e      	lsls	r6, r3, #21
 80037f8:	d5fb      	bpl.n	80037f2 <HAL_PCD_IRQHandler+0x92e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037fa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80037fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800380a:	f830 3b02 	ldrh.w	r3, [r0], #2
 800380e:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 8003812:	428d      	cmp	r5, r1
 8003814:	d1f9      	bne.n	800380a <HAL_PCD_IRQHandler+0x946>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003816:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800381a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800381c:	b29b      	uxth	r3, r3
 800381e:	f043 0308 	orr.w	r3, r3, #8
 8003822:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003826:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800382a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800382e:	041b      	lsls	r3, r3, #16
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003836:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800383a:	b29b      	uxth	r3, r3
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003844:	f002 fc9a 	bl	800617c <HAL_PCD_SuspendCallback>
    return;
 8003848:	f7ff bb50 	b.w	8002eec <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800384c:	0582      	lsls	r2, r0, #22
 800384e:	d50d      	bpl.n	800386c <HAL_PCD_IRQHandler+0x9a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003850:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8003852:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003854:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003864:	f002 fc73 	bl	800614e <HAL_PCD_SOFCallback>
    return;
 8003868:	f7ff bb40 	b.w	8002eec <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800386c:	05c3      	lsls	r3, r0, #23
 800386e:	f57f ab3d 	bpl.w	8002eec <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800387c:	e771      	b.n	8003762 <HAL_PCD_IRQHandler+0x89e>
 800387e:	bf00      	nop

08003880 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003880:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4605      	mov	r5, r0
 8003888:	f04f 0428 	mov.w	r4, #40	; 0x28
 800388c:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8003890:	d01a      	beq.n	80038c8 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8003892:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003894:	fb00 4104 	mla	r1, r0, r4, r4
 8003898:	4429      	add	r1, r5
    ep->is_in = 1U;
 800389a:	704e      	strb	r6, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 800389c:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800389e:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 80038a0:	bf08      	it	eq
 80038a2:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a4:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 80038a6:	bf08      	it	eq
 80038a8:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 80038aa:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80038ac:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d012      	beq.n	80038da <HAL_PCD_EP_Open+0x5a>
 80038b4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038b6:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80038b8:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038bc:	f001 f862 	bl	8004984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80038c8:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ca:	4344      	muls	r4, r0
 80038cc:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 80038d0:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d2:	4429      	add	r1, r5
    ep->is_in = 0U;
 80038d4:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 80038d8:	e7e0      	b.n	800389c <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80038da:	2002      	movs	r0, #2
 80038dc:	e7f3      	b.n	80038c6 <HAL_PCD_EP_Open+0x46>

080038de <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80038de:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80038e2:	b510      	push	{r4, lr}
 80038e4:	f04f 0328 	mov.w	r3, #40	; 0x28
 80038e8:	4604      	mov	r4, r0
 80038ea:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80038ee:	d013      	beq.n	8003918 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	fb02 3103 	mla	r1, r2, r3, r3
 80038f4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80038f6:	2001      	movs	r0, #1
 80038f8:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038fa:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80038fc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003900:	2b01      	cmp	r3, #1
 8003902:	d012      	beq.n	800392a <HAL_PCD_EP_Close+0x4c>
 8003904:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003906:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003908:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800390c:	f001 f99c 	bl	8004c48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003910:	2000      	movs	r0, #0
 8003912:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003916:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003918:	4353      	muls	r3, r2
 800391a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800391e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003920:	4403      	add	r3, r0
 8003922:	2000      	movs	r0, #0
 8003924:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8003928:	e7e7      	b.n	80038fa <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 800392a:	2002      	movs	r0, #2
 800392c:	e7f3      	b.n	8003916 <HAL_PCD_EP_Close+0x38>

0800392e <HAL_PCD_EP_Receive>:
{
 800392e:	b570      	push	{r4, r5, r6, lr}
 8003930:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8003934:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 8003936:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8003938:	4369      	muls	r1, r5
 800393a:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800393c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003940:	4401      	add	r1, r0
  ep->xfer_len = len;
 8003942:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8003946:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 800394a:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800394e:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003952:	6800      	ldr	r0, [r0, #0]
 8003954:	f001 fad2 	bl	8004efc <USB_EPStartXfer>
}
 8003958:	4630      	mov	r0, r6
 800395a:	bd70      	pop	{r4, r5, r6, pc}

0800395c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800395c:	2328      	movs	r3, #40	; 0x28
 800395e:	f001 0107 	and.w	r1, r1, #7
 8003962:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003966:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 800396a:	4770      	bx	lr

0800396c <HAL_PCD_EP_Transmit>:
{
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8003972:	2128      	movs	r1, #40	; 0x28
 8003974:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8003978:	2600      	movs	r6, #0
  ep->xfer_len = len;
 800397a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 800397e:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003980:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8003984:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003988:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 800398a:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 800398c:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800398e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8003992:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003996:	6800      	ldr	r0, [r0, #0]
 8003998:	f001 fab0 	bl	8004efc <USB_EPStartXfer>
}
 800399c:	4630      	mov	r0, r6
 800399e:	bd70      	pop	{r4, r5, r6, pc}

080039a0 <HAL_PCD_EP_SetStall>:
{
 80039a0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039a2:	6843      	ldr	r3, [r0, #4]
 80039a4:	f001 0507 	and.w	r5, r1, #7
 80039a8:	429d      	cmp	r5, r3
{
 80039aa:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039ac:	d828      	bhi.n	8003a00 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80039ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80039b2:	f04f 0328 	mov.w	r3, #40	; 0x28
 80039b6:	d01a      	beq.n	80039ee <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80039b8:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ba:	fb05 3103 	mla	r1, r5, r3, r3
 80039be:	4401      	add	r1, r0
    ep->is_in = 1U;
 80039c0:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 80039c2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80039c6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80039c8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d019      	beq.n	8003a04 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039d0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80039d2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039d6:	f001 fa08 	bl	8004dea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039da:	b925      	cbnz	r5, 80039e6 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80039e2:	f001 fa79 	bl	8004ed8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80039e6:	2000      	movs	r0, #0
 80039e8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80039ec:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80039ee:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80039f0:	434b      	muls	r3, r1
 80039f2:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80039f6:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80039f8:	4401      	add	r1, r0
    ep->is_in = 0U;
 80039fa:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80039fe:	e7e0      	b.n	80039c2 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8003a00:	2001      	movs	r0, #1
 8003a02:	e7f3      	b.n	80039ec <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8003a04:	2002      	movs	r0, #2
 8003a06:	e7f1      	b.n	80039ec <HAL_PCD_EP_SetStall+0x4c>

08003a08 <HAL_PCD_EP_ClrStall>:
{
 8003a08:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a0a:	6843      	ldr	r3, [r0, #4]
 8003a0c:	f001 020f 	and.w	r2, r1, #15
 8003a10:	429a      	cmp	r2, r3
{
 8003a12:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a14:	d825      	bhi.n	8003a62 <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 8003a16:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a1a:	f04f 0328 	mov.w	r3, #40	; 0x28
 8003a1e:	f001 0207 	and.w	r2, r1, #7
 8003a22:	d015      	beq.n	8003a50 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	fb02 3103 	mla	r1, r2, r3, r3
 8003a28:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 8003a2e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a30:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8003a32:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003a34:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d014      	beq.n	8003a66 <HAL_PCD_EP_ClrStall+0x5e>
 8003a3c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a3e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003a40:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a44:	f001 f9f1 	bl	8004e2a <USB_EPClearStall>
  return HAL_OK;
 8003a48:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8003a4a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	4353      	muls	r3, r2
 8003a52:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8003a56:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003a58:	4403      	add	r3, r0
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8003a60:	e7e5      	b.n	8003a2e <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8003a62:	2001      	movs	r0, #1
 8003a64:	e7f3      	b.n	8003a4e <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8003a66:	2002      	movs	r0, #2
 8003a68:	e7f1      	b.n	8003a4e <HAL_PCD_EP_ClrStall+0x46>

08003a6a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a6e:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a72:	bf1b      	ittet	ne
 8003a74:	f001 0107 	andne.w	r1, r1, #7
 8003a78:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a7c:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a80:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8003a82:	bf08      	it	eq
 8003a84:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a88:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8003a8a:	b91a      	cbnz	r2, 8003a94 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8003a8c:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8003a8e:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003a90:	2000      	movs	r0, #0
 8003a92:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8003a94:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a96:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8003a98:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a9a:	e7f9      	b.n	8003a90 <HAL_PCDEx_PMAConfig+0x26>

08003a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	b338      	cbz	r0, 8003af4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa4:	6803      	ldr	r3, [r0, #0]
 8003aa6:	07db      	lsls	r3, r3, #31
 8003aa8:	d410      	bmi.n	8003acc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	682b      	ldr	r3, [r5, #0]
 8003aac:	079f      	lsls	r7, r3, #30
 8003aae:	d45e      	bmi.n	8003b6e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	0719      	lsls	r1, r3, #28
 8003ab4:	f100 8095 	bmi.w	8003be2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	075a      	lsls	r2, r3, #29
 8003abc:	f100 80c1 	bmi.w	8003c42 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	69e8      	ldr	r0, [r5, #28]
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f040 812c 	bne.w	8003d20 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e029      	b.n	8003b20 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003acc:	4c90      	ldr	r4, [pc, #576]	; (8003d10 <HAL_RCC_OscConfig+0x274>)
 8003ace:	6863      	ldr	r3, [r4, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d007      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ad8:	6863      	ldr	r3, [r4, #4]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d10a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x5c>
 8003ae2:	6863      	ldr	r3, [r4, #4]
 8003ae4:	03de      	lsls	r6, r3, #15
 8003ae6:	d507      	bpl.n	8003af8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	039c      	lsls	r4, r3, #14
 8003aec:	d5dd      	bpl.n	8003aaa <HAL_RCC_OscConfig+0xe>
 8003aee:	686b      	ldr	r3, [r5, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1da      	bne.n	8003aaa <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003af4:	2001      	movs	r0, #1
 8003af6:	e013      	b.n	8003b20 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af8:	686b      	ldr	r3, [r5, #4]
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afe:	d112      	bne.n	8003b26 <HAL_RCC_OscConfig+0x8a>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003b08:	f7fe fb5e 	bl	80021c8 <HAL_GetTick>
 8003b0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0398      	lsls	r0, r3, #14
 8003b12:	d4ca      	bmi.n	8003aaa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe fb58 	bl	80021c8 <HAL_GetTick>
 8003b18:	1b80      	subs	r0, r0, r6
 8003b1a:	2864      	cmp	r0, #100	; 0x64
 8003b1c:	d9f7      	bls.n	8003b0e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8003b1e:	2003      	movs	r0, #3
}
 8003b20:	b002      	add	sp, #8
 8003b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b26:	b99b      	cbnz	r3, 8003b50 <HAL_RCC_OscConfig+0xb4>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003b38:	f7fe fb46 	bl	80021c8 <HAL_GetTick>
 8003b3c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	0399      	lsls	r1, r3, #14
 8003b42:	d5b2      	bpl.n	8003aaa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fe fb40 	bl	80021c8 <HAL_GetTick>
 8003b48:	1b80      	subs	r0, r0, r6
 8003b4a:	2864      	cmp	r0, #100	; 0x64
 8003b4c:	d9f7      	bls.n	8003b3e <HAL_RCC_OscConfig+0xa2>
 8003b4e:	e7e6      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	d103      	bne.n	8003b60 <HAL_RCC_OscConfig+0xc4>
 8003b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	e7cf      	b.n	8003b00 <HAL_RCC_OscConfig+0x64>
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6c:	e7cb      	b.n	8003b06 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b6e:	4c68      	ldr	r4, [pc, #416]	; (8003d10 <HAL_RCC_OscConfig+0x274>)
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	f013 0f0c 	tst.w	r3, #12
 8003b76:	d007      	beq.n	8003b88 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d110      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x108>
 8003b82:	6863      	ldr	r3, [r4, #4]
 8003b84:	03da      	lsls	r2, r3, #15
 8003b86:	d40d      	bmi.n	8003ba4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	079b      	lsls	r3, r3, #30
 8003b8c:	d502      	bpl.n	8003b94 <HAL_RCC_OscConfig+0xf8>
 8003b8e:	692b      	ldr	r3, [r5, #16]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d1af      	bne.n	8003af4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	696a      	ldr	r2, [r5, #20]
 8003b98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003b9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ba0:	6023      	str	r3, [r4, #0]
 8003ba2:	e785      	b.n	8003ab0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba4:	692a      	ldr	r2, [r5, #16]
 8003ba6:	4b5b      	ldr	r3, [pc, #364]	; (8003d14 <HAL_RCC_OscConfig+0x278>)
 8003ba8:	b16a      	cbz	r2, 8003bc6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003bae:	f7fe fb0b 	bl	80021c8 <HAL_GetTick>
 8003bb2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	079f      	lsls	r7, r3, #30
 8003bb8:	d4ec      	bmi.n	8003b94 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fe fb05 	bl	80021c8 <HAL_GetTick>
 8003bbe:	1b80      	subs	r0, r0, r6
 8003bc0:	2802      	cmp	r0, #2
 8003bc2:	d9f7      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x118>
 8003bc4:	e7ab      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003bc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fafe 	bl	80021c8 <HAL_GetTick>
 8003bcc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	0798      	lsls	r0, r3, #30
 8003bd2:	f57f af6d 	bpl.w	8003ab0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fe faf7 	bl	80021c8 <HAL_GetTick>
 8003bda:	1b80      	subs	r0, r0, r6
 8003bdc:	2802      	cmp	r0, #2
 8003bde:	d9f6      	bls.n	8003bce <HAL_RCC_OscConfig+0x132>
 8003be0:	e79d      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003be2:	69aa      	ldr	r2, [r5, #24]
 8003be4:	4e4a      	ldr	r6, [pc, #296]	; (8003d10 <HAL_RCC_OscConfig+0x274>)
 8003be6:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <HAL_RCC_OscConfig+0x278>)
 8003be8:	b1e2      	cbz	r2, 8003c24 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003bf0:	f7fe faea 	bl	80021c8 <HAL_GetTick>
 8003bf4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003bf8:	079b      	lsls	r3, r3, #30
 8003bfa:	d50d      	bpl.n	8003c18 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bfc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003c00:	4b45      	ldr	r3, [pc, #276]	; (8003d18 <HAL_RCC_OscConfig+0x27c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c08:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003c0a:	bf00      	nop
  }
  while (Delay --);
 8003c0c:	9b01      	ldr	r3, [sp, #4]
 8003c0e:	1e5a      	subs	r2, r3, #1
 8003c10:	9201      	str	r2, [sp, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f9      	bne.n	8003c0a <HAL_RCC_OscConfig+0x16e>
 8003c16:	e74f      	b.n	8003ab8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fe fad6 	bl	80021c8 <HAL_GetTick>
 8003c1c:	1b00      	subs	r0, r0, r4
 8003c1e:	2802      	cmp	r0, #2
 8003c20:	d9e9      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x15a>
 8003c22:	e77c      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003c24:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003c28:	f7fe face 	bl	80021c8 <HAL_GetTick>
 8003c2c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003c30:	079f      	lsls	r7, r3, #30
 8003c32:	f57f af41 	bpl.w	8003ab8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c36:	f7fe fac7 	bl	80021c8 <HAL_GetTick>
 8003c3a:	1b00      	subs	r0, r0, r4
 8003c3c:	2802      	cmp	r0, #2
 8003c3e:	d9f6      	bls.n	8003c2e <HAL_RCC_OscConfig+0x192>
 8003c40:	e76d      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c42:	4c33      	ldr	r4, [pc, #204]	; (8003d10 <HAL_RCC_OscConfig+0x274>)
 8003c44:	69e3      	ldr	r3, [r4, #28]
 8003c46:	00d8      	lsls	r0, r3, #3
 8003c48:	d424      	bmi.n	8003c94 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8003c4a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4c:	69e3      	ldr	r3, [r4, #28]
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	61e3      	str	r3, [r4, #28]
 8003c54:	69e3      	ldr	r3, [r4, #28]
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	4e2f      	ldr	r6, [pc, #188]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c60:	6833      	ldr	r3, [r6, #0]
 8003c62:	05d9      	lsls	r1, r3, #23
 8003c64:	d518      	bpl.n	8003c98 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c66:	68eb      	ldr	r3, [r5, #12]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d126      	bne.n	8003cba <HAL_RCC_OscConfig+0x21e>
 8003c6c:	6a23      	ldr	r3, [r4, #32]
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003c74:	f7fe faa8 	bl	80021c8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003c7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	6a23      	ldr	r3, [r4, #32]
 8003c80:	079b      	lsls	r3, r3, #30
 8003c82:	d53f      	bpl.n	8003d04 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003c84:	2f00      	cmp	r7, #0
 8003c86:	f43f af1b 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8a:	69e3      	ldr	r3, [r4, #28]
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c90:	61e3      	str	r3, [r4, #28]
 8003c92:	e715      	b.n	8003ac0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003c94:	2700      	movs	r7, #0
 8003c96:	e7e2      	b.n	8003c5e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c98:	6833      	ldr	r3, [r6, #0]
 8003c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003ca0:	f7fe fa92 	bl	80021c8 <HAL_GetTick>
 8003ca4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	6833      	ldr	r3, [r6, #0]
 8003ca8:	05da      	lsls	r2, r3, #23
 8003caa:	d4dc      	bmi.n	8003c66 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fe fa8c 	bl	80021c8 <HAL_GetTick>
 8003cb0:	eba0 0008 	sub.w	r0, r0, r8
 8003cb4:	2864      	cmp	r0, #100	; 0x64
 8003cb6:	d9f6      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x20a>
 8003cb8:	e731      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cba:	b9ab      	cbnz	r3, 8003ce8 <HAL_RCC_OscConfig+0x24c>
 8003cbc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6223      	str	r3, [r4, #32]
 8003cc8:	6a23      	ldr	r3, [r4, #32]
 8003cca:	f023 0304 	bic.w	r3, r3, #4
 8003cce:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003cd0:	f7fe fa7a 	bl	80021c8 <HAL_GetTick>
 8003cd4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	6a23      	ldr	r3, [r4, #32]
 8003cd8:	0798      	lsls	r0, r3, #30
 8003cda:	d5d3      	bpl.n	8003c84 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fa74 	bl	80021c8 <HAL_GetTick>
 8003ce0:	1b80      	subs	r0, r0, r6
 8003ce2:	4540      	cmp	r0, r8
 8003ce4:	d9f7      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x23a>
 8003ce6:	e71a      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	6a23      	ldr	r3, [r4, #32]
 8003cec:	d103      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x25a>
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	6223      	str	r3, [r4, #32]
 8003cf4:	e7ba      	b.n	8003c6c <HAL_RCC_OscConfig+0x1d0>
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	6223      	str	r3, [r4, #32]
 8003cfc:	6a23      	ldr	r3, [r4, #32]
 8003cfe:	f023 0304 	bic.w	r3, r3, #4
 8003d02:	e7b6      	b.n	8003c72 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d04:	f7fe fa60 	bl	80021c8 <HAL_GetTick>
 8003d08:	1b80      	subs	r0, r0, r6
 8003d0a:	4540      	cmp	r0, r8
 8003d0c:	d9b7      	bls.n	8003c7e <HAL_RCC_OscConfig+0x1e2>
 8003d0e:	e706      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	42420000 	.word	0x42420000
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d20:	4c2a      	ldr	r4, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x330>)
 8003d22:	6863      	ldr	r3, [r4, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d03e      	beq.n	8003daa <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x334>)
 8003d30:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003d32:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d34:	d12c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8003d36:	f7fe fa47 	bl	80021c8 <HAL_GetTick>
 8003d3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	0199      	lsls	r1, r3, #6
 8003d40:	d420      	bmi.n	8003d84 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d42:	6a2b      	ldr	r3, [r5, #32]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d105      	bne.n	8003d56 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d4a:	6862      	ldr	r2, [r4, #4]
 8003d4c:	68a9      	ldr	r1, [r5, #8]
 8003d4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003d52:	430a      	orrs	r2, r1
 8003d54:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d56:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003d58:	6862      	ldr	r2, [r4, #4]
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003d60:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8003d62:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d64:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCC_OscConfig+0x334>)
 8003d68:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003d6a:	f7fe fa2d 	bl	80021c8 <HAL_GetTick>
 8003d6e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	019a      	lsls	r2, r3, #6
 8003d74:	f53f aea8 	bmi.w	8003ac8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe fa26 	bl	80021c8 <HAL_GetTick>
 8003d7c:	1b40      	subs	r0, r0, r5
 8003d7e:	2802      	cmp	r0, #2
 8003d80:	d9f6      	bls.n	8003d70 <HAL_RCC_OscConfig+0x2d4>
 8003d82:	e6cc      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fe fa20 	bl	80021c8 <HAL_GetTick>
 8003d88:	1b80      	subs	r0, r0, r6
 8003d8a:	2802      	cmp	r0, #2
 8003d8c:	d9d6      	bls.n	8003d3c <HAL_RCC_OscConfig+0x2a0>
 8003d8e:	e6c6      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003d90:	f7fe fa1a 	bl	80021c8 <HAL_GetTick>
 8003d94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	019b      	lsls	r3, r3, #6
 8003d9a:	f57f ae95 	bpl.w	8003ac8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe fa13 	bl	80021c8 <HAL_GetTick>
 8003da2:	1b40      	subs	r0, r0, r5
 8003da4:	2802      	cmp	r0, #2
 8003da6:	d9f6      	bls.n	8003d96 <HAL_RCC_OscConfig+0x2fa>
 8003da8:	e6b9      	b.n	8003b1e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003daa:	2801      	cmp	r0, #1
 8003dac:	f43f aeb8 	beq.w	8003b20 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003db0:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	6a2a      	ldr	r2, [r5, #32]
 8003db4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003db8:	4291      	cmp	r1, r2
 8003dba:	f47f ae9b 	bne.w	8003af4 <HAL_RCC_OscConfig+0x58>
 8003dbe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f43f ae7f 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x2c>
 8003dca:	e693      	b.n	8003af4 <HAL_RCC_OscConfig+0x58>
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	42420000 	.word	0x42420000

08003dd4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x38>)
 8003dd6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd8:	f003 010c 	and.w	r1, r3, #12
 8003ddc:	2908      	cmp	r1, #8
 8003dde:	d112      	bne.n	8003e06 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003de0:	480b      	ldr	r0, [pc, #44]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003de2:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003de6:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003de8:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dea:	d509      	bpl.n	8003e00 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dec:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003df0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003df4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003df6:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x44>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dfa:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dfe:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x48>)
 8003e02:	4358      	muls	r0, r3
 8003e04:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003e06:	4803      	ldr	r0, [pc, #12]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	0800ab04 	.word	0x0800ab04
 8003e14:	007a1200 	.word	0x007a1200
 8003e18:	0800ab14 	.word	0x0800ab14
 8003e1c:	003d0900 	.word	0x003d0900

08003e20 <HAL_RCC_ClockConfig>:
{
 8003e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e24:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003e26:	4604      	mov	r4, r0
 8003e28:	b910      	cbnz	r0, 8003e30 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003e2a:	2001      	movs	r0, #1
}
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4a44      	ldr	r2, [pc, #272]	; (8003f44 <HAL_RCC_ClockConfig+0x124>)
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	d328      	bcc.n	8003e8e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	6821      	ldr	r1, [r4, #0]
 8003e3e:	078e      	lsls	r6, r1, #30
 8003e40:	d430      	bmi.n	8003ea4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	07ca      	lsls	r2, r1, #31
 8003e44:	d443      	bmi.n	8003ece <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e46:	4a3f      	ldr	r2, [pc, #252]	; (8003f44 <HAL_RCC_ClockConfig+0x124>)
 8003e48:	6813      	ldr	r3, [r2, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	42ab      	cmp	r3, r5
 8003e50:	d865      	bhi.n	8003f1e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	4d3c      	ldr	r5, [pc, #240]	; (8003f48 <HAL_RCC_ClockConfig+0x128>)
 8003e56:	f012 0f04 	tst.w	r2, #4
 8003e5a:	d16c      	bne.n	8003f36 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	0713      	lsls	r3, r2, #28
 8003e5e:	d506      	bpl.n	8003e6e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e60:	686b      	ldr	r3, [r5, #4]
 8003e62:	6922      	ldr	r2, [r4, #16]
 8003e64:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003e68:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e6c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e6e:	f7ff ffb1 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003e72:	686b      	ldr	r3, [r5, #4]
 8003e74:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <HAL_RCC_ClockConfig+0x12c>)
 8003e76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e7a:	5cd3      	ldrb	r3, [r2, r3]
 8003e7c:	40d8      	lsrs	r0, r3
 8003e7e:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <HAL_RCC_ClockConfig+0x130>)
 8003e80:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_RCC_ClockConfig+0x134>)
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	f7fe f95d 	bl	8002144 <HAL_InitTick>
  return HAL_OK;
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	e7ce      	b.n	8003e2c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	6813      	ldr	r3, [r2, #0]
 8003e90:	f023 0307 	bic.w	r3, r3, #7
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e98:	6813      	ldr	r3, [r2, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	428b      	cmp	r3, r1
 8003ea0:	d1c3      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xa>
 8003ea2:	e7cb      	b.n	8003e3c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_RCC_ClockConfig+0x128>)
 8003ea6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eaa:	bf1e      	ittt	ne
 8003eac:	685a      	ldrne	r2, [r3, #4]
 8003eae:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003eb2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb6:	bf42      	ittt	mi
 8003eb8:	685a      	ldrmi	r2, [r3, #4]
 8003eba:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003ebe:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68a0      	ldr	r0, [r4, #8]
 8003ec4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ec8:	4302      	orrs	r2, r0
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e7b9      	b.n	8003e42 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ece:	6862      	ldr	r2, [r4, #4]
 8003ed0:	4e1d      	ldr	r6, [pc, #116]	; (8003f48 <HAL_RCC_ClockConfig+0x128>)
 8003ed2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed6:	d11a      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003edc:	d0a5      	beq.n	8003e2a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee4:	f023 0303 	bic.w	r3, r3, #3
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003eec:	f7fe f96c 	bl	80021c8 <HAL_GetTick>
 8003ef0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	6873      	ldr	r3, [r6, #4]
 8003ef4:	6862      	ldr	r2, [r4, #4]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003efe:	d0a2      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fe f962 	bl	80021c8 <HAL_GetTick>
 8003f04:	1bc0      	subs	r0, r0, r7
 8003f06:	4540      	cmp	r0, r8
 8003f08:	d9f3      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003f0a:	2003      	movs	r0, #3
 8003f0c:	e78e      	b.n	8003e2c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0e:	2a02      	cmp	r2, #2
 8003f10:	d102      	bne.n	8003f18 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f16:	e7e1      	b.n	8003edc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	f013 0f02 	tst.w	r3, #2
 8003f1c:	e7de      	b.n	8003edc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	f023 0307 	bic.w	r3, r3, #7
 8003f24:	432b      	orrs	r3, r5
 8003f26:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f28:	6813      	ldr	r3, [r2, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	42ab      	cmp	r3, r5
 8003f30:	f47f af7b 	bne.w	8003e2a <HAL_RCC_ClockConfig+0xa>
 8003f34:	e78d      	b.n	8003e52 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f36:	686b      	ldr	r3, [r5, #4]
 8003f38:	68e1      	ldr	r1, [r4, #12]
 8003f3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	606b      	str	r3, [r5, #4]
 8003f42:	e78b      	b.n	8003e5c <HAL_RCC_ClockConfig+0x3c>
 8003f44:	40022000 	.word	0x40022000
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	0800a8f8 	.word	0x0800a8f8
 8003f50:	20000000 	.word	0x20000000
 8003f54:	20000050 	.word	0x20000050

08003f58 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	4a03      	ldr	r2, [pc, #12]	; (8003f74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003f66:	6810      	ldr	r0, [r2, #0]
}
 8003f68:	40d8      	lsrs	r0, r3
 8003f6a:	4770      	bx	lr
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	0800a908 	.word	0x0800a908
 8003f74:	20000000 	.word	0x20000000

08003f78 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003f82:	5cd3      	ldrb	r3, [r2, r3]
 8003f84:	4a03      	ldr	r2, [pc, #12]	; (8003f94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003f86:	6810      	ldr	r0, [r2, #0]
}
 8003f88:	40d8      	lsrs	r0, r3
 8003f8a:	4770      	bx	lr
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	0800a908 	.word	0x0800a908
 8003f94:	20000000 	.word	0x20000000

08003f98 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f98:	6803      	ldr	r3, [r0, #0]
{
 8003f9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f9e:	07d9      	lsls	r1, r3, #31
{
 8003fa0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fa2:	d520      	bpl.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa4:	4c36      	ldr	r4, [pc, #216]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003fa6:	69e3      	ldr	r3, [r4, #28]
 8003fa8:	00da      	lsls	r2, r3, #3
 8003faa:	d432      	bmi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003fac:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	69e3      	ldr	r3, [r4, #28]
 8003fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	61e3      	str	r3, [r4, #28]
 8003fb6:	69e3      	ldr	r3, [r4, #28]
 8003fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	4f30      	ldr	r7, [pc, #192]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	05db      	lsls	r3, r3, #23
 8003fc6:	d526      	bpl.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fc8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003fce:	d136      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd0:	6a23      	ldr	r3, [r4, #32]
 8003fd2:	686a      	ldr	r2, [r5, #4]
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fdc:	b11e      	cbz	r6, 8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fde:	69e3      	ldr	r3, [r4, #28]
 8003fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fe6:	6828      	ldr	r0, [r5, #0]
 8003fe8:	0783      	lsls	r3, r0, #30
 8003fea:	d506      	bpl.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fec:	4924      	ldr	r1, [pc, #144]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003fee:	68ab      	ldr	r3, [r5, #8]
 8003ff0:	684a      	ldr	r2, [r1, #4]
 8003ff2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ffa:	f010 0010 	ands.w	r0, r0, #16
 8003ffe:	d01b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004000:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004002:	68e9      	ldr	r1, [r5, #12]
 8004004:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004006:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004008:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800400c:	430b      	orrs	r3, r1
 800400e:	6053      	str	r3, [r2, #4]
 8004010:	e012      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8004012:	2600      	movs	r6, #0
 8004014:	e7d4      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800401e:	f7fe f8d3 	bl	80021c8 <HAL_GetTick>
 8004022:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	05d8      	lsls	r0, r3, #23
 8004028:	d4ce      	bmi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402a:	f7fe f8cd 	bl	80021c8 <HAL_GetTick>
 800402e:	eba0 0008 	sub.w	r0, r0, r8
 8004032:	2864      	cmp	r0, #100	; 0x64
 8004034:	d9f6      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8004036:	2003      	movs	r0, #3
}
 8004038:	b002      	add	sp, #8
 800403a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800403e:	686a      	ldr	r2, [r5, #4]
 8004040:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004044:	429a      	cmp	r2, r3
 8004046:	d0c3      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004048:	2001      	movs	r0, #1
 800404a:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800404c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800404e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004052:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004054:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004058:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 800405c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800405e:	07d9      	lsls	r1, r3, #31
 8004060:	d5b6      	bpl.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8004062:	f7fe f8b1 	bl	80021c8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800406a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	6a23      	ldr	r3, [r4, #32]
 800406e:	079a      	lsls	r2, r3, #30
 8004070:	d4ae      	bmi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe f8a9 	bl	80021c8 <HAL_GetTick>
 8004076:	1bc0      	subs	r0, r0, r7
 8004078:	4540      	cmp	r0, r8
 800407a:	d9f7      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800407c:	e7db      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	40007000 	.word	0x40007000
 8004088:	42420000 	.word	0x42420000

0800408c <HAL_SPI_ErrorCallback>:
 800408c:	4770      	bx	lr
	...

08004090 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004090:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8004092:	6803      	ldr	r3, [r0, #0]
{
 8004094:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8004096:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004098:	689a      	ldr	r2, [r3, #8]
{
 800409a:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800409c:	0656      	lsls	r6, r2, #25
 800409e:	ea4f 1592 	mov.w	r5, r2, lsr #6
 80040a2:	f3c2 1780 	ubfx	r7, r2, #6, #1
 80040a6:	d408      	bmi.n	80040ba <HAL_SPI_IRQHandler+0x2a>
 80040a8:	07d6      	lsls	r6, r2, #31
 80040aa:	d506      	bpl.n	80040ba <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040ac:	064e      	lsls	r6, r1, #25
 80040ae:	d504      	bpl.n	80040ba <HAL_SPI_IRQHandler+0x2a>
  {
    hspi->RxISR(hspi);
 80040b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 80040b2:	b005      	add	sp, #20
 80040b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 80040b8:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80040ba:	0796      	lsls	r6, r2, #30
 80040bc:	d504      	bpl.n	80040c8 <HAL_SPI_IRQHandler+0x38>
 80040be:	0608      	lsls	r0, r1, #24
 80040c0:	d502      	bpl.n	80040c8 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 80040c2:	4620      	mov	r0, r4
 80040c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040c6:	e7f4      	b.n	80040b2 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80040c8:	0956      	lsrs	r6, r2, #5
 80040ca:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 80040ce:	07d2      	lsls	r2, r2, #31
 80040d0:	d54c      	bpl.n	800416c <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80040d2:	068d      	lsls	r5, r1, #26
 80040d4:	d54a      	bpl.n	800416c <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040d6:	b177      	cbz	r7, 80040f6 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040d8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 80040dc:	2000      	movs	r0, #0
 80040de:	2a03      	cmp	r2, #3
 80040e0:	d03e      	beq.n	8004160 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80040e4:	f042 0204 	orr.w	r2, r2, #4
 80040e8:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ea:	9001      	str	r0, [sp, #4]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	9201      	str	r2, [sp, #4]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	9201      	str	r2, [sp, #4]
 80040f4:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80040f6:	07f0      	lsls	r0, r6, #31
 80040f8:	d50c      	bpl.n	8004114 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004102:	2200      	movs	r2, #0
 8004104:	9203      	str	r2, [sp, #12]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	9203      	str	r2, [sp, #12]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004114:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004116:	b34a      	cbz	r2, 800416c <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800411e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004120:	2201      	movs	r2, #1
 8004122:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004126:	078a      	lsls	r2, r1, #30
 8004128:	d022      	beq.n	8004170 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800412a:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800412c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800412e:	f022 0203 	bic.w	r2, r2, #3
 8004132:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8004134:	b140      	cbz	r0, 8004148 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_SPI_IRQHandler+0xe8>)
 8004138:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800413a:	f7fe fbe5 	bl	8002908 <HAL_DMA_Abort_IT>
 800413e:	b118      	cbz	r0, 8004148 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004140:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004146:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004148:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800414a:	b178      	cbz	r0, 800416c <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_SPI_IRQHandler+0xe8>)
 800414e:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004150:	f7fe fbda 	bl	8002908 <HAL_DMA_Abort_IT>
 8004154:	b150      	cbz	r0, 800416c <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004156:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415c:	6563      	str	r3, [r4, #84]	; 0x54
 800415e:	e005      	b.n	800416c <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004160:	9002      	str	r0, [sp, #8]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	9202      	str	r2, [sp, #8]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	9302      	str	r3, [sp, #8]
 800416a:	9b02      	ldr	r3, [sp, #8]
}
 800416c:	b005      	add	sp, #20
 800416e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8004170:	4620      	mov	r0, r4
 8004172:	f7ff ff8b 	bl	800408c <HAL_SPI_ErrorCallback>
 8004176:	e7f9      	b.n	800416c <HAL_SPI_IRQHandler+0xdc>
 8004178:	0800417d 	.word	0x0800417d

0800417c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800417c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 800417e:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004180:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8004182:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004184:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004186:	f7ff ff81 	bl	800408c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800418a:	bd08      	pop	{r3, pc}

0800418c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	f102 030c 	add.w	r3, r2, #12
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	320c      	adds	r2, #12
 800419c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80041a0:	6802      	ldr	r2, [r0, #0]
 80041a2:	2900      	cmp	r1, #0
 80041a4:	d1f2      	bne.n	800418c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	f102 0314 	add.w	r3, r2, #20
 80041aa:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	f102 0c14 	add.w	ip, r2, #20
 80041b6:	e84c 3100 	strex	r1, r3, [ip]
 80041ba:	2900      	cmp	r1, #0
 80041bc:	d1f3      	bne.n	80041a6 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d10b      	bne.n	80041dc <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	f102 030c 	add.w	r3, r2, #12
 80041c8:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	f102 0c0c 	add.w	ip, r2, #12
 80041d4:	e84c 3100 	strex	r1, r3, [ip]
 80041d8:	2900      	cmp	r1, #0
 80041da:	d1f3      	bne.n	80041c4 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041dc:	2320      	movs	r3, #32
 80041de:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	2300      	movs	r3, #0
 80041e4:	6303      	str	r3, [r0, #48]	; 0x30
}
 80041e6:	4770      	bx	lr

080041e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e8:	b510      	push	{r4, lr}
 80041ea:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ec:	6803      	ldr	r3, [r0, #0]
 80041ee:	68c1      	ldr	r1, [r0, #12]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80041f6:	430a      	orrs	r2, r1
 80041f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041fa:	6882      	ldr	r2, [r0, #8]
 80041fc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80041fe:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004200:	4302      	orrs	r2, r0
 8004202:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004204:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004208:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800420c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800420e:	430a      	orrs	r2, r1
 8004210:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	69a1      	ldr	r1, [r4, #24]
 8004216:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800421a:	430a      	orrs	r2, r1
 800421c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800421e:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <UART_SetConfig+0x70>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d115      	bne.n	8004250 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004224:	f7ff fea8 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004228:	2319      	movs	r3, #25
 800422a:	4343      	muls	r3, r0
 800422c:	6862      	ldr	r2, [r4, #4]
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	0092      	lsls	r2, r2, #2
 8004232:	fbb3 f3f2 	udiv	r3, r3, r2
 8004236:	2264      	movs	r2, #100	; 0x64
 8004238:	fbb3 f1f2 	udiv	r1, r3, r2
 800423c:	fb02 3311 	mls	r3, r2, r1, r3
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	3332      	adds	r3, #50	; 0x32
 8004244:	fbb3 f3f2 	udiv	r3, r3, r2
 8004248:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800424c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800424e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7ff fe82 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8004254:	e7e8      	b.n	8004228 <UART_SetConfig+0x40>
 8004256:	bf00      	nop
 8004258:	40013800 	.word	0x40013800

0800425c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	4604      	mov	r4, r0
 8004260:	460e      	mov	r6, r1
 8004262:	4617      	mov	r7, r2
 8004264:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	ea36 0303 	bics.w	r3, r6, r3
 800426e:	d101      	bne.n	8004274 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8004270:	2000      	movs	r0, #0
 8004272:	e028      	b.n	80042c6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8004274:	1c6b      	adds	r3, r5, #1
 8004276:	d0f7      	beq.n	8004268 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004278:	b125      	cbz	r5, 8004284 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800427a:	f7fd ffa5 	bl	80021c8 <HAL_GetTick>
 800427e:	1bc0      	subs	r0, r0, r7
 8004280:	4285      	cmp	r5, r0
 8004282:	d2f0      	bcs.n	8004266 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004284:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	f102 030c 	add.w	r3, r2, #12
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	320c      	adds	r2, #12
 8004294:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8004298:	6821      	ldr	r1, [r4, #0]
 800429a:	2800      	cmp	r0, #0
 800429c:	d1f2      	bne.n	8004284 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	f101 0314 	add.w	r3, r1, #20
 80042a2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	f101 0014 	add.w	r0, r1, #20
 80042ae:	e840 3200 	strex	r2, r3, [r0]
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d1f3      	bne.n	800429e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80042b6:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80042b8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80042ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80042be:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80042c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80042c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042c8 <HAL_UART_Init>:
{
 80042c8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80042ca:	4604      	mov	r4, r0
 80042cc:	b348      	cbz	r0, 8004322 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80042ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80042d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042d6:	b91b      	cbnz	r3, 80042e0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80042d8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80042dc:	f7fd fe8c 	bl	8001ff8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80042e0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80042e2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80042e8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80042ea:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80042ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80042f2:	f7ff ff79 	bl	80041e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004308:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004310:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004312:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004316:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800431a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8004320:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004322:	2001      	movs	r0, #1
 8004324:	e7fc      	b.n	8004320 <HAL_UART_Init+0x58>

08004326 <HAL_UART_DeInit>:
{
 8004326:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004328:	4604      	mov	r4, r0
 800432a:	b1a0      	cbz	r0, 8004356 <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 800432c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800432e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8004334:	68d3      	ldr	r3, [r2, #12]
 8004336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433a:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 800433c:	f7fd feb8 	bl	80020b0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	2000      	movs	r0, #0
 8004342:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 8004344:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004348:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800434c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004350:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004352:	6360      	str	r0, [r4, #52]	; 0x34
}
 8004354:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004356:	2001      	movs	r0, #1
 8004358:	e7fc      	b.n	8004354 <HAL_UART_DeInit+0x2e>

0800435a <HAL_UART_Transmit>:
{
 800435a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800435e:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004360:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004364:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004366:	2b20      	cmp	r3, #32
{
 8004368:	460e      	mov	r6, r1
 800436a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800436c:	d13c      	bne.n	80043e8 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 800436e:	2900      	cmp	r1, #0
 8004370:	d03c      	beq.n	80043ec <HAL_UART_Transmit+0x92>
 8004372:	2a00      	cmp	r2, #0
 8004374:	d03a      	beq.n	80043ec <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004376:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	2500      	movs	r5, #0
 800437a:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8004380:	f7fd ff22 	bl	80021c8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004384:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004386:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 800438c:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800438e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	d103      	bne.n	800439a <HAL_UART_Transmit+0x40>
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	b90b      	cbnz	r3, 800439a <HAL_UART_Transmit+0x40>
 8004396:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004398:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800439a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800439c:	b29b      	uxth	r3, r3
 800439e:	b953      	cbnz	r3, 80043b6 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a0:	464b      	mov	r3, r9
 80043a2:	4642      	mov	r2, r8
 80043a4:	2140      	movs	r1, #64	; 0x40
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7ff ff58 	bl	800425c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80043ac:	b950      	cbnz	r0, 80043c4 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80043ae:	2320      	movs	r3, #32
 80043b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80043b4:	e007      	b.n	80043c6 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	464b      	mov	r3, r9
 80043b8:	4642      	mov	r2, r8
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	4620      	mov	r0, r4
 80043be:	f7ff ff4d 	bl	800425c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80043c2:	b110      	cbz	r0, 80043ca <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 80043c4:	2003      	movs	r0, #3
}
 80043c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ca:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80043cc:	b94e      	cbnz	r6, 80043e2 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ce:	f835 3b02 	ldrh.w	r3, [r5], #2
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80043d8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80043da:	3901      	subs	r1, #1
 80043dc:	b289      	uxth	r1, r1
 80043de:	84e1      	strh	r1, [r4, #38]	; 0x26
 80043e0:	e7db      	b.n	800439a <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043e2:	f816 3b01 	ldrb.w	r3, [r6], #1
 80043e6:	e7f6      	b.n	80043d6 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 80043e8:	2002      	movs	r0, #2
 80043ea:	e7ec      	b.n	80043c6 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 80043ec:	2001      	movs	r0, #1
 80043ee:	e7ea      	b.n	80043c6 <HAL_UART_Transmit+0x6c>

080043f0 <HAL_UART_TxCpltCallback>:
 80043f0:	4770      	bx	lr

080043f2 <HAL_UART_RxHalfCpltCallback>:
 80043f2:	4770      	bx	lr

080043f4 <UART_DMAError>:
{
 80043f4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043f8:	6803      	ldr	r3, [r0, #0]
 80043fa:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043fc:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004400:	2921      	cmp	r1, #33	; 0x21
 8004402:	d112      	bne.n	800442a <UART_DMAError+0x36>
 8004404:	0612      	lsls	r2, r2, #24
 8004406:	d510      	bpl.n	800442a <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8004408:	2200      	movs	r2, #0
 800440a:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	f103 020c 	add.w	r2, r3, #12
 8004410:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004414:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	f103 0c0c 	add.w	ip, r3, #12
 800441c:	e84c 2100 	strex	r1, r2, [ip]
 8004420:	2900      	cmp	r1, #0
 8004422:	d1f3      	bne.n	800440c <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8004424:	2220      	movs	r2, #32
 8004426:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800442c:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8004430:	2a22      	cmp	r2, #34	; 0x22
 8004432:	d105      	bne.n	8004440 <UART_DMAError+0x4c>
 8004434:	065b      	lsls	r3, r3, #25
 8004436:	d503      	bpl.n	8004440 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8004438:	2300      	movs	r3, #0
 800443a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800443c:	f7ff fea6 	bl	800418c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004440:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004442:	f043 0310 	orr.w	r3, r3, #16
 8004446:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8004448:	f7fd fdd3 	bl	8001ff2 <HAL_UART_ErrorCallback>
}
 800444c:	bd08      	pop	{r3, pc}

0800444e <UART_DMAAbortOnError>:
{
 800444e:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004450:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004452:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004454:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004456:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004458:	f7fd fdcb 	bl	8001ff2 <HAL_UART_ErrorCallback>
}
 800445c:	bd08      	pop	{r3, pc}

0800445e <HAL_UARTEx_RxEventCallback>:
}
 800445e:	4770      	bx	lr

08004460 <UART_DMARxHalfCplt>:
{
 8004460:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004462:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004464:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004466:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800446a:	2b01      	cmp	r3, #1
 800446c:	d104      	bne.n	8004478 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800446e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004470:	0849      	lsrs	r1, r1, #1
 8004472:	f7ff fff4 	bl	800445e <HAL_UARTEx_RxEventCallback>
}
 8004476:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8004478:	f7ff ffbb 	bl	80043f2 <HAL_UART_RxHalfCpltCallback>
}
 800447c:	e7fb      	b.n	8004476 <UART_DMARxHalfCplt+0x16>

0800447e <UART_DMAReceiveCplt>:
{
 800447e:	b508      	push	{r3, lr}
 8004480:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004482:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004484:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f013 0320 	ands.w	r3, r3, #32
 800448c:	d137      	bne.n	80044fe <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 800448e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004490:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	f102 030c 	add.w	r3, r2, #12
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	320c      	adds	r2, #12
 80044a0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80044a4:	6803      	ldr	r3, [r0, #0]
 80044a6:	2900      	cmp	r1, #0
 80044a8:	d1f2      	bne.n	8004490 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	f103 0214 	add.w	r2, r3, #20
 80044ae:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	f103 0c14 	add.w	ip, r3, #20
 80044ba:	e84c 2100 	strex	r1, r2, [ip]
 80044be:	2900      	cmp	r1, #0
 80044c0:	d1f3      	bne.n	80044aa <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	f103 0214 	add.w	r2, r3, #20
 80044c6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	f103 0c14 	add.w	ip, r3, #20
 80044d2:	e84c 2100 	strex	r1, r2, [ip]
 80044d6:	2900      	cmp	r1, #0
 80044d8:	d1f3      	bne.n	80044c2 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80044da:	2220      	movs	r2, #32
 80044dc:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80044e2:	2a01      	cmp	r2, #1
 80044e4:	d10b      	bne.n	80044fe <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	f103 020c 	add.w	r2, r3, #12
 80044ea:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ee:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	f103 0c0c 	add.w	ip, r3, #12
 80044f6:	e84c 2100 	strex	r1, r2, [ip]
 80044fa:	2900      	cmp	r1, #0
 80044fc:	d1f3      	bne.n	80044e6 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044fe:	2300      	movs	r3, #0
 8004500:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004502:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d103      	bne.n	8004510 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004508:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800450a:	f7ff ffa8 	bl	800445e <HAL_UARTEx_RxEventCallback>
}
 800450e:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8004510:	f7fd fd70 	bl	8001ff4 <HAL_UART_RxCpltCallback>
}
 8004514:	e7fb      	b.n	800450e <UART_DMAReceiveCplt+0x90>

08004516 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004516:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004518:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800451a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004520:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004522:	d13f      	bne.n	80045a4 <UART_Receive_IT.part.0.isra.0+0x8e>
 8004524:	6901      	ldr	r1, [r0, #16]
 8004526:	2900      	cmp	r1, #0
 8004528:	d13f      	bne.n	80045aa <UART_Receive_IT.part.0.isra.0+0x94>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800452a:	6852      	ldr	r2, [r2, #4]
 800452c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004530:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 8004534:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004536:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004538:	3b01      	subs	r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800453e:	2b00      	cmp	r3, #0
 8004540:	d12d      	bne.n	800459e <UART_Receive_IT.part.0.isra.0+0x88>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004542:	6802      	ldr	r2, [r0, #0]
 8004544:	68d1      	ldr	r1, [r2, #12]
 8004546:	f021 0120 	bic.w	r1, r1, #32
 800454a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800454c:	68d1      	ldr	r1, [r2, #12]
 800454e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004552:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004554:	6951      	ldr	r1, [r2, #20]
 8004556:	f021 0101 	bic.w	r1, r1, #1
 800455a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800455c:	2220      	movs	r2, #32
 800455e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004562:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004564:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004566:	2a01      	cmp	r2, #1
 8004568:	6802      	ldr	r2, [r0, #0]
 800456a:	d128      	bne.n	80045be <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456c:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	f102 030c 	add.w	r3, r2, #12
 8004572:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004576:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	f102 0c0c 	add.w	ip, r2, #12
 800457e:	e84c 3100 	strex	r1, r3, [ip]
 8004582:	2900      	cmp	r1, #0
 8004584:	d1f3      	bne.n	800456e <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004586:	6813      	ldr	r3, [r2, #0]
 8004588:	06db      	lsls	r3, r3, #27
 800458a:	d505      	bpl.n	8004598 <UART_Receive_IT.part.0.isra.0+0x82>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800458c:	9101      	str	r1, [sp, #4]
 800458e:	6813      	ldr	r3, [r2, #0]
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	6853      	ldr	r3, [r2, #4]
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004598:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800459a:	f7ff ff60 	bl	800445e <HAL_UARTEx_RxEventCallback>
}
 800459e:	b003      	add	sp, #12
 80045a0:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045a4:	b939      	cbnz	r1, 80045b6 <UART_Receive_IT.part.0.isra.0+0xa0>
 80045a6:	6901      	ldr	r1, [r0, #16]
 80045a8:	b929      	cbnz	r1, 80045b6 <UART_Receive_IT.part.0.isra.0+0xa0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045aa:	6852      	ldr	r2, [r2, #4]
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80045b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045b2:	3301      	adds	r3, #1
 80045b4:	e7be      	b.n	8004534 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045b6:	6852      	ldr	r2, [r2, #4]
 80045b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045bc:	e7f7      	b.n	80045ae <UART_Receive_IT.part.0.isra.0+0x98>
        HAL_UART_RxCpltCallback(huart);
 80045be:	f7fd fd19 	bl	8001ff4 <HAL_UART_RxCpltCallback>
 80045c2:	e7ec      	b.n	800459e <UART_Receive_IT.part.0.isra.0+0x88>

080045c4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045c4:	6803      	ldr	r3, [r0, #0]
{
 80045c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045c8:	681a      	ldr	r2, [r3, #0]
{
 80045ca:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80045cc:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045d0:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045d2:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80045d4:	d10c      	bne.n	80045f0 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d6:	0695      	lsls	r5, r2, #26
 80045d8:	d570      	bpl.n	80046bc <HAL_UART_IRQHandler+0xf8>
 80045da:	068d      	lsls	r5, r1, #26
 80045dc:	d56e      	bpl.n	80046bc <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045de:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80045e2:	2b22      	cmp	r3, #34	; 0x22
 80045e4:	d164      	bne.n	80046b0 <HAL_UART_IRQHandler+0xec>
}
 80045e6:	b003      	add	sp, #12
 80045e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045ec:	f7ff bf93 	b.w	8004516 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045f0:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045f4:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80045f8:	4305      	orrs	r5, r0
 80045fa:	d05f      	beq.n	80046bc <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045fc:	07d5      	lsls	r5, r2, #31
 80045fe:	d505      	bpl.n	800460c <HAL_UART_IRQHandler+0x48>
 8004600:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004602:	bf42      	ittt	mi
 8004604:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8004606:	f043 0301 	orrmi.w	r3, r3, #1
 800460a:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800460c:	0755      	lsls	r5, r2, #29
 800460e:	d504      	bpl.n	800461a <HAL_UART_IRQHandler+0x56>
 8004610:	b118      	cbz	r0, 800461a <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004612:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461a:	0793      	lsls	r3, r2, #30
 800461c:	d504      	bpl.n	8004628 <HAL_UART_IRQHandler+0x64>
 800461e:	b118      	cbz	r0, 8004628 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004620:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004622:	f043 0304 	orr.w	r3, r3, #4
 8004626:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004628:	0715      	lsls	r5, r2, #28
 800462a:	d507      	bpl.n	800463c <HAL_UART_IRQHandler+0x78>
 800462c:	f001 0320 	and.w	r3, r1, #32
 8004630:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004632:	bf1e      	ittt	ne
 8004634:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8004636:	f043 0308 	orrne.w	r3, r3, #8
 800463a:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800463c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800463e:	2b00      	cmp	r3, #0
 8004640:	d036      	beq.n	80046b0 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004642:	0690      	lsls	r0, r2, #26
 8004644:	d508      	bpl.n	8004658 <HAL_UART_IRQHandler+0x94>
 8004646:	068a      	lsls	r2, r1, #26
 8004648:	d506      	bpl.n	8004658 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800464a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800464e:	2b22      	cmp	r3, #34	; 0x22
 8004650:	d102      	bne.n	8004658 <HAL_UART_IRQHandler+0x94>
 8004652:	4620      	mov	r0, r4
 8004654:	f7ff ff5f 	bl	8004516 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004658:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800465a:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800465c:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800465e:	6c65      	ldr	r5, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004664:	f005 0508 	and.w	r5, r5, #8
 8004668:	431d      	orrs	r5, r3
 800466a:	d023      	beq.n	80046b4 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 800466c:	f7ff fd8e 	bl	800418c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	6953      	ldr	r3, [r2, #20]
 8004674:	065b      	lsls	r3, r3, #25
 8004676:	d518      	bpl.n	80046aa <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	f102 0314 	add.w	r3, r2, #20
 800467c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	f102 0014 	add.w	r0, r2, #20
 8004688:	e840 3100 	strex	r1, r3, [r0]
 800468c:	2900      	cmp	r1, #0
 800468e:	d1f3      	bne.n	8004678 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8004690:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004692:	b150      	cbz	r0, 80046aa <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004694:	4b73      	ldr	r3, [pc, #460]	; (8004864 <HAL_UART_IRQHandler+0x2a0>)
 8004696:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004698:	f7fe f936 	bl	8002908 <HAL_DMA_Abort_IT>
 800469c:	b140      	cbz	r0, 80046b0 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800469e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80046a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80046a2:	b003      	add	sp, #12
 80046a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046a8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7fd fca1 	bl	8001ff2 <HAL_UART_ErrorCallback>
}
 80046b0:	b003      	add	sp, #12
 80046b2:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80046b4:	f7fd fc9d 	bl	8001ff2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b8:	6465      	str	r5, [r4, #68]	; 0x44
 80046ba:	e7f9      	b.n	80046b0 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80046be:	2801      	cmp	r0, #1
 80046c0:	f040 8094 	bne.w	80047ec <HAL_UART_IRQHandler+0x228>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046c4:	06d5      	lsls	r5, r2, #27
 80046c6:	f140 8091 	bpl.w	80047ec <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046ca:	06c8      	lsls	r0, r1, #27
 80046cc:	f140 808e 	bpl.w	80047ec <HAL_UART_IRQHandler+0x228>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046d0:	2200      	movs	r2, #0
 80046d2:	9201      	str	r2, [sp, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	9201      	str	r2, [sp, #4]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	9201      	str	r2, [sp, #4]
 80046dc:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	0655      	lsls	r5, r2, #25
 80046e2:	d54d      	bpl.n	8004780 <HAL_UART_IRQHandler+0x1bc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80046e6:	680a      	ldr	r2, [r1, #0]
 80046e8:	6852      	ldr	r2, [r2, #4]
 80046ea:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	d0df      	beq.n	80046b0 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046f0:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80046f2:	4290      	cmp	r0, r2
 80046f4:	d9dc      	bls.n	80046b0 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 80046f6:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046f8:	698a      	ldr	r2, [r1, #24]
 80046fa:	2a20      	cmp	r2, #32
 80046fc:	d036      	beq.n	800476c <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	f103 020c 	add.w	r2, r3, #12
 8004702:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	f103 000c 	add.w	r0, r3, #12
 800470e:	e840 2100 	strex	r1, r2, [r0]
 8004712:	2900      	cmp	r1, #0
 8004714:	d1f3      	bne.n	80046fe <HAL_UART_IRQHandler+0x13a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	f103 0214 	add.w	r2, r3, #20
 800471a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	f103 0014 	add.w	r0, r3, #20
 8004726:	e840 2100 	strex	r1, r2, [r0]
 800472a:	2900      	cmp	r1, #0
 800472c:	d1f3      	bne.n	8004716 <HAL_UART_IRQHandler+0x152>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	f103 0214 	add.w	r2, r3, #20
 8004732:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	f103 0014 	add.w	r0, r3, #20
 800473e:	e840 2100 	strex	r1, r2, [r0]
 8004742:	2900      	cmp	r1, #0
 8004744:	d1f3      	bne.n	800472e <HAL_UART_IRQHandler+0x16a>
          huart->RxState = HAL_UART_STATE_READY;
 8004746:	2220      	movs	r2, #32
 8004748:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	f103 020c 	add.w	r2, r3, #12
 8004752:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	f103 000c 	add.w	r0, r3, #12
 800475e:	e840 2100 	strex	r1, r2, [r0]
 8004762:	2900      	cmp	r1, #0
 8004764:	d1f3      	bne.n	800474e <HAL_UART_IRQHandler+0x18a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004766:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004768:	f7fe f8ac 	bl	80028c4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800476c:	2302      	movs	r3, #2
 800476e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004770:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004772:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004774:	1ac9      	subs	r1, r1, r3
 8004776:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004778:	4620      	mov	r0, r4
 800477a:	f7ff fe70 	bl	800445e <HAL_UARTEx_RxEventCallback>
 800477e:	e797      	b.n	80046b0 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004780:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004782:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8004784:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004786:	b289      	uxth	r1, r1
 8004788:	2900      	cmp	r1, #0
 800478a:	d091      	beq.n	80046b0 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800478c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800478e:	1a89      	subs	r1, r1, r2
 8004790:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004792:	2900      	cmp	r1, #0
 8004794:	d08c      	beq.n	80046b0 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	f103 020c 	add.w	r2, r3, #12
 800479a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	f103 050c 	add.w	r5, r3, #12
 80047a6:	e845 2000 	strex	r0, r2, [r5]
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d1f3      	bne.n	8004796 <HAL_UART_IRQHandler+0x1d2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	f103 0214 	add.w	r2, r3, #20
 80047b2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	f103 0514 	add.w	r5, r3, #20
 80047be:	e845 2000 	strex	r0, r2, [r5]
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d1f3      	bne.n	80047ae <HAL_UART_IRQHandler+0x1ea>
        huart->RxState = HAL_UART_STATE_READY;
 80047c6:	2220      	movs	r2, #32
 80047c8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047cc:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	f103 020c 	add.w	r2, r3, #12
 80047d2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	f103 050c 	add.w	r5, r3, #12
 80047de:	e845 2000 	strex	r0, r2, [r5]
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d1f3      	bne.n	80047ce <HAL_UART_IRQHandler+0x20a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e6:	2302      	movs	r3, #2
 80047e8:	6363      	str	r3, [r4, #52]	; 0x34
 80047ea:	e7c5      	b.n	8004778 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ec:	0610      	lsls	r0, r2, #24
 80047ee:	d528      	bpl.n	8004842 <HAL_UART_IRQHandler+0x27e>
 80047f0:	060d      	lsls	r5, r1, #24
 80047f2:	d526      	bpl.n	8004842 <HAL_UART_IRQHandler+0x27e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047f4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80047f8:	2a21      	cmp	r2, #33	; 0x21
 80047fa:	f47f af59 	bne.w	80046b0 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fe:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004800:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004802:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004806:	d117      	bne.n	8004838 <HAL_UART_IRQHandler+0x274>
 8004808:	6921      	ldr	r1, [r4, #16]
 800480a:	b9a9      	cbnz	r1, 8004838 <HAL_UART_IRQHandler+0x274>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800480c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004810:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004814:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004816:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004818:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800481a:	3a01      	subs	r2, #1
 800481c:	b292      	uxth	r2, r2
 800481e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004820:	2a00      	cmp	r2, #0
 8004822:	f47f af45 	bne.w	80046b0 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800482c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	e73b      	b.n	80046b0 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004838:	1c51      	adds	r1, r2, #1
 800483a:	6221      	str	r1, [r4, #32]
 800483c:	7812      	ldrb	r2, [r2, #0]
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	e7ea      	b.n	8004818 <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004842:	0650      	lsls	r0, r2, #25
 8004844:	f57f af34 	bpl.w	80046b0 <HAL_UART_IRQHandler+0xec>
 8004848:	064a      	lsls	r2, r1, #25
 800484a:	f57f af31 	bpl.w	80046b0 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800484e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004850:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004856:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004858:	2320      	movs	r3, #32
 800485a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 800485e:	f7ff fdc7 	bl	80043f0 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004862:	e725      	b.n	80046b0 <HAL_UART_IRQHandler+0xec>
 8004864:	0800444f 	.word	0x0800444f

08004868 <UART_Start_Receive_DMA>:
{
 8004868:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800486a:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 800486c:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486e:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004870:	2222      	movs	r2, #34	; 0x22
{
 8004872:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8004874:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004876:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004878:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800487c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800487e:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004880:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004882:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004884:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <UART_Start_Receive_DMA+0x90>)
 8004886:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004888:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 800488a:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800488e:	460a      	mov	r2, r1
 8004890:	1d31      	adds	r1, r6, #4
 8004892:	f7fd ffdb 	bl	800284c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	9501      	str	r5, [sp, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	9201      	str	r2, [sp, #4]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	9201      	str	r2, [sp, #4]
 80048a2:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048a4:	6922      	ldr	r2, [r4, #16]
 80048a6:	b15a      	cbz	r2, 80048c0 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	f103 020c 	add.w	r2, r3, #12
 80048ac:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	f103 000c 	add.w	r0, r3, #12
 80048b8:	e840 2100 	strex	r1, r2, [r0]
 80048bc:	2900      	cmp	r1, #0
 80048be:	d1f3      	bne.n	80048a8 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	f103 0214 	add.w	r2, r3, #20
 80048c4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c8:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	f103 0014 	add.w	r0, r3, #20
 80048d0:	e840 2100 	strex	r1, r2, [r0]
 80048d4:	2900      	cmp	r1, #0
 80048d6:	d1f3      	bne.n	80048c0 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	f103 0214 	add.w	r2, r3, #20
 80048dc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	f103 0114 	add.w	r1, r3, #20
 80048e8:	e841 2000 	strex	r0, r2, [r1]
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d1f3      	bne.n	80048d8 <UART_Start_Receive_DMA+0x70>
}
 80048f0:	b002      	add	sp, #8
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	0800447f 	.word	0x0800447f
 80048f8:	08004461 	.word	0x08004461
 80048fc:	080043f5 	.word	0x080043f5

08004900 <HAL_UART_Receive_DMA>:
{
 8004900:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004902:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8004906:	2e20      	cmp	r6, #32
 8004908:	d106      	bne.n	8004918 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 800490a:	b141      	cbz	r1, 800491e <HAL_UART_Receive_DMA+0x1e>
 800490c:	b13a      	cbz	r2, 800491e <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	2400      	movs	r4, #0
 8004910:	6304      	str	r4, [r0, #48]	; 0x30
}
 8004912:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004914:	f7ff bfa8 	b.w	8004868 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8004918:	2002      	movs	r0, #2
}
 800491a:	bc70      	pop	{r4, r5, r6}
 800491c:	4770      	bx	lr
      return HAL_ERROR;
 800491e:	2001      	movs	r0, #1
 8004920:	e7fb      	b.n	800491a <HAL_UART_Receive_DMA+0x1a>

08004922 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004922:	b084      	sub	sp, #16
 8004924:	a801      	add	r0, sp, #4
 8004926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800492a:	b004      	add	sp, #16
 800492c:	2000      	movs	r0, #0
 800492e:	4770      	bx	lr

08004930 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004930:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004932:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8004936:	2000      	movs	r0, #0
 8004938:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800493c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004940:	4770      	bx	lr

08004942 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004942:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004946:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800494a:	045b      	lsls	r3, r3, #17
 800494c:	0c5b      	lsrs	r3, r3, #17
 800494e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004952:	2000      	movs	r0, #0
 8004954:	4770      	bx	lr

08004956 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004956:	2000      	movs	r0, #0
 8004958:	4770      	bx	lr

0800495a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800495a:	b084      	sub	sp, #16
 800495c:	b510      	push	{r4, lr}
 800495e:	4604      	mov	r4, r0
 8004960:	a803      	add	r0, sp, #12
 8004962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004966:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004968:	2301      	movs	r3, #1
 800496a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 800496e:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004972:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004976:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 800497a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497e:	b004      	add	sp, #16
 8004980:	4770      	bx	lr
	...

08004984 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004986:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004988:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800498a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 800498e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004990:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8004994:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8004998:	0424      	lsls	r4, r4, #16
 800499a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 800499c:	2e03      	cmp	r6, #3
 800499e:	d84c      	bhi.n	8004a3a <USB_ActivateEndpoint+0xb6>
 80049a0:	e8df f006 	tbb	[pc, r6]
 80049a4:	44464802 	.word	0x44464802
  HAL_StatusTypeDef ret = HAL_OK;
 80049a8:	4630      	mov	r0, r6
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80049aa:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80049ae:	f248 0780 	movw	r7, #32896	; 0x8080
 80049b2:	433c      	orrs	r4, r7
 80049b4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049b8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80049bc:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8004c3c <USB_ActivateEndpoint+0x2b8>
 80049c0:	b2a4      	uxth	r4, r4
 80049c2:	ea04 040c 	and.w	r4, r4, ip
 80049c6:	4314      	orrs	r4, r2
 80049c8:	433c      	orrs	r4, r7
 80049ca:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80049ce:	7b0c      	ldrb	r4, [r1, #12]
 80049d0:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	f040 808b 	bne.w	8004af0 <USB_ActivateEndpoint+0x16c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049da:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 80049dc:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049de:	086d      	lsrs	r5, r5, #1
 80049e0:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 80049e2:	b364      	cbz	r4, 8004a3e <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049e4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80049e8:	b2a4      	uxth	r4, r4
 80049ea:	4474      	add	r4, lr
 80049ec:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049f4:	064f      	lsls	r7, r1, #25
 80049f6:	d50a      	bpl.n	8004a0e <USB_ActivateEndpoint+0x8a>
 80049f8:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80049fc:	b2ad      	uxth	r5, r5
 80049fe:	ea05 050c 	and.w	r5, r5, ip
 8004a02:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8004a06:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8004a0a:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a0e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a12:	4c8b      	ldr	r4, [pc, #556]	; (8004c40 <USB_ActivateEndpoint+0x2bc>)
 8004a14:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8004a16:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a18:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004a1c:	d001      	beq.n	8004a22 <USB_ActivateEndpoint+0x9e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a1e:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a22:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004a26:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004a2a:	e0bf      	b.n	8004bac <USB_ActivateEndpoint+0x228>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a2c:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004a30:	2000      	movs	r0, #0
      break;
 8004a32:	e7bc      	b.n	80049ae <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a34:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8004a38:	e7fa      	b.n	8004a30 <USB_ActivateEndpoint+0xac>
  switch (ep->type)
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	e7b7      	b.n	80049ae <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a3e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004a42:	b2a4      	uxth	r4, r4
 8004a44:	4474      	add	r4, lr
 8004a46:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a4a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004a4e:	b2a4      	uxth	r4, r4
 8004a50:	4474      	add	r4, lr
 8004a52:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 8004a56:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004a5a:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 8004a5e:	690d      	ldr	r5, [r1, #16]
 8004a60:	2d3e      	cmp	r5, #62	; 0x3e
 8004a62:	d92f      	bls.n	8004ac4 <USB_ActivateEndpoint+0x140>
 8004a64:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8004a68:	096e      	lsrs	r6, r5, #5
 8004a6a:	06ed      	lsls	r5, r5, #27
 8004a6c:	bf08      	it	eq
 8004a6e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004a72:	b289      	uxth	r1, r1
 8004a74:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004a78:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004a7c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004a80:	b289      	uxth	r1, r1
 8004a82:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a86:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a8a:	044f      	lsls	r7, r1, #17
 8004a8c:	d50d      	bpl.n	8004aaa <USB_ActivateEndpoint+0x126>
 8004a8e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a92:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004a96:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004a9a:	0409      	lsls	r1, r1, #16
 8004a9c:	0c09      	lsrs	r1, r1, #16
 8004a9e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004aa2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004aa6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8004aaa:	4c66      	ldr	r4, [pc, #408]	; (8004c44 <USB_ActivateEndpoint+0x2c0>)
 8004aac:	b9ca      	cbnz	r2, 8004ae2 <USB_ActivateEndpoint+0x15e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aae:	8819      	ldrh	r1, [r3, #0]
 8004ab0:	b289      	uxth	r1, r1
 8004ab2:	4021      	ands	r1, r4
 8004ab4:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8004ab8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004abc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004ac0:	8019      	strh	r1, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ac4:	b915      	cbnz	r5, 8004acc <USB_ActivateEndpoint+0x148>
 8004ac6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8004aca:	e7d5      	b.n	8004a78 <USB_ActivateEndpoint+0xf4>
 8004acc:	07e9      	lsls	r1, r5, #31
 8004ace:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8004ad2:	ea4f 0655 	mov.w	r6, r5, lsr #1
 8004ad6:	bf48      	it	mi
 8004ad8:	3601      	addmi	r6, #1
 8004ada:	b289      	uxth	r1, r1
 8004adc:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004ae0:	e7ce      	b.n	8004a80 <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004ae2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ae6:	b289      	uxth	r1, r1
 8004ae8:	4021      	ands	r1, r4
 8004aea:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8004aee:	e798      	b.n	8004a22 <USB_ActivateEndpoint+0x9e>
    if (ep->type == EP_TYPE_BULK)
 8004af0:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004af2:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8004af6:	d15c      	bne.n	8004bb2 <USB_ActivateEndpoint+0x22e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004af8:	b2ad      	uxth	r5, r5
 8004afa:	ea05 050c 	and.w	r5, r5, ip
 8004afe:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8004b02:	f045 0580 	orr.w	r5, r5, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b06:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b0a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004b0e:	890d      	ldrh	r5, [r1, #8]
 8004b10:	b2a4      	uxth	r4, r4
 8004b12:	086d      	lsrs	r5, r5, #1
 8004b14:	4474      	add	r4, lr
 8004b16:	006d      	lsls	r5, r5, #1
 8004b18:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
 8004b1c:	894d      	ldrh	r5, [r1, #10]
 8004b1e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004b22:	086d      	lsrs	r5, r5, #1
 8004b24:	b2a4      	uxth	r4, r4
 8004b26:	4474      	add	r4, lr
 8004b28:	006d      	lsls	r5, r5, #1
 8004b2a:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8004b2e:	7849      	ldrb	r1, [r1, #1]
 8004b30:	2900      	cmp	r1, #0
 8004b32:	d146      	bne.n	8004bc2 <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b34:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b38:	044e      	lsls	r6, r1, #17
 8004b3a:	d50d      	bpl.n	8004b58 <USB_ActivateEndpoint+0x1d4>
 8004b3c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b40:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004b44:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004b48:	0409      	lsls	r1, r1, #16
 8004b4a:	0c09      	lsrs	r1, r1, #16
 8004b4c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004b50:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004b54:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b58:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b5c:	064d      	lsls	r5, r1, #25
 8004b5e:	d50d      	bpl.n	8004b7c <USB_ActivateEndpoint+0x1f8>
 8004b60:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b64:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004b68:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004b6c:	0409      	lsls	r1, r1, #16
 8004b6e:	0c09      	lsrs	r1, r1, #16
 8004b70:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004b74:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004b78:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b7c:	f248 0480 	movw	r4, #32896	; 0x8080
 8004b80:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b84:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004b88:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004b8c:	0409      	lsls	r1, r1, #16
 8004b8e:	0c09      	lsrs	r1, r1, #16
 8004b90:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8004b94:	4321      	orrs	r1, r4
 8004b96:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b9a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b9e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004ba2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004ba6:	0409      	lsls	r1, r1, #16
 8004ba8:	0c09      	lsrs	r1, r1, #16
 8004baa:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bac:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8004bb0:	e787      	b.n	8004ac2 <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004bb2:	f425 45e2 	bic.w	r5, r5, #28928	; 0x7100
 8004bb6:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8004bba:	042d      	lsls	r5, r5, #16
 8004bbc:	0c2d      	lsrs	r5, r5, #16
 8004bbe:	433d      	orrs	r5, r7
 8004bc0:	e7a1      	b.n	8004b06 <USB_ActivateEndpoint+0x182>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bc2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bc6:	044c      	lsls	r4, r1, #17
 8004bc8:	d50d      	bpl.n	8004be6 <USB_ActivateEndpoint+0x262>
 8004bca:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bce:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004bd2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004bd6:	0409      	lsls	r1, r1, #16
 8004bd8:	0c09      	lsrs	r1, r1, #16
 8004bda:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004bde:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004be2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004be6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bea:	0649      	lsls	r1, r1, #25
 8004bec:	d50d      	bpl.n	8004c0a <USB_ActivateEndpoint+0x286>
 8004bee:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bf2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004bf6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004bfa:	0409      	lsls	r1, r1, #16
 8004bfc:	0c09      	lsrs	r1, r1, #16
 8004bfe:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004c02:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004c06:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c0a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004c0e:	4c0c      	ldr	r4, [pc, #48]	; (8004c40 <USB_ActivateEndpoint+0x2bc>)
 8004c10:	b289      	uxth	r1, r1
 8004c12:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004c14:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c16:	bf18      	it	ne
 8004c18:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c1c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004c20:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004c24:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c28:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004c2c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004c30:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004c34:	0409      	lsls	r1, r1, #16
 8004c36:	0c09      	lsrs	r1, r1, #16
 8004c38:	e6f3      	b.n	8004a22 <USB_ActivateEndpoint+0x9e>
 8004c3a:	bf00      	nop
 8004c3c:	ffff8f8f 	.word	0xffff8f8f
 8004c40:	ffff8fbf 	.word	0xffff8fbf
 8004c44:	ffffbf8f 	.word	0xffffbf8f

08004c48 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004c48:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c4a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004c4c:	7b09      	ldrb	r1, [r1, #12]
 8004c4e:	bbd9      	cbnz	r1, 8004cc8 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004c50:	b30a      	cbz	r2, 8004c96 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c52:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c56:	0651      	lsls	r1, r2, #25
 8004c58:	d50d      	bpl.n	8004c76 <USB_DeactivateEndpoint+0x2e>
 8004c5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c5e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004c62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c66:	0412      	lsls	r2, r2, #16
 8004c68:	0c12      	lsrs	r2, r2, #16
 8004c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c6e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004c72:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c76:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c7a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c82:	0412      	lsls	r2, r2, #16
 8004c84:	0c12      	lsrs	r2, r2, #16
 8004c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c8e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004c92:	2000      	movs	r0, #0
 8004c94:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c96:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c9a:	0452      	lsls	r2, r2, #17
 8004c9c:	d50d      	bpl.n	8004cba <USB_DeactivateEndpoint+0x72>
 8004c9e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ca2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ca6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004caa:	0412      	lsls	r2, r2, #16
 8004cac:	0c12      	lsrs	r2, r2, #16
 8004cae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cb6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004cbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cc6:	e7dc      	b.n	8004c82 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8004cc8:	2a00      	cmp	r2, #0
 8004cca:	d148      	bne.n	8004d5e <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ccc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004cd0:	0451      	lsls	r1, r2, #17
 8004cd2:	d50d      	bpl.n	8004cf0 <USB_DeactivateEndpoint+0xa8>
 8004cd4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004cd8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004cdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ce0:	0412      	lsls	r2, r2, #16
 8004ce2:	0c12      	lsrs	r2, r2, #16
 8004ce4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004ce8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004cf4:	0652      	lsls	r2, r2, #25
 8004cf6:	d50d      	bpl.n	8004d14 <USB_DeactivateEndpoint+0xcc>
 8004cf8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004cfc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d04:	0412      	lsls	r2, r2, #16
 8004d06:	0c12      	lsrs	r2, r2, #16
 8004d08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d0c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004d10:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d14:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004d18:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d1c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d24:	0412      	lsls	r2, r2, #16
 8004d26:	0c12      	lsrs	r2, r2, #16
 8004d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d2c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004d30:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d34:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d40:	0412      	lsls	r2, r2, #16
 8004d42:	0c12      	lsrs	r2, r2, #16
 8004d44:	430a      	orrs	r2, r1
 8004d46:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d4e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d56:	0412      	lsls	r2, r2, #16
 8004d58:	0c12      	lsrs	r2, r2, #16
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	e797      	b.n	8004c8e <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d5e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d62:	0451      	lsls	r1, r2, #17
 8004d64:	d50d      	bpl.n	8004d82 <USB_DeactivateEndpoint+0x13a>
 8004d66:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d6a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d72:	0412      	lsls	r2, r2, #16
 8004d74:	0c12      	lsrs	r2, r2, #16
 8004d76:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d7e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d82:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d86:	0652      	lsls	r2, r2, #25
 8004d88:	d50d      	bpl.n	8004da6 <USB_DeactivateEndpoint+0x15e>
 8004d8a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d8e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d96:	0412      	lsls	r2, r2, #16
 8004d98:	0c12      	lsrs	r2, r2, #16
 8004d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d9e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004da2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da6:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004daa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004dae:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004db2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004db6:	0412      	lsls	r2, r2, #16
 8004db8:	0c12      	lsrs	r2, r2, #16
 8004dba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004dbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dc2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004dca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd2:	0412      	lsls	r2, r2, #16
 8004dd4:	0c12      	lsrs	r2, r2, #16
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ddc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004de4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004de8:	e7b5      	b.n	8004d56 <USB_DeactivateEndpoint+0x10e>

08004dea <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004dea:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004dec:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8004dee:	b18b      	cbz	r3, 8004e14 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004df0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004e10:	2000      	movs	r0, #0
 8004e12:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	0c1b      	lsrs	r3, r3, #16
 8004e24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e28:	e7ec      	b.n	8004e04 <USB_EPSetStall+0x1a>

08004e2a <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004e2a:	7b0b      	ldrb	r3, [r1, #12]
 8004e2c:	bb3b      	cbnz	r3, 8004e7e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8004e2e:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e30:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8004e32:	b333      	cbz	r3, 8004e82 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e38:	065b      	lsls	r3, r3, #25
 8004e3a:	d50d      	bpl.n	8004e58 <USB_EPClearStall+0x2e>
 8004e3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e54:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004e58:	78cb      	ldrb	r3, [r1, #3]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d00f      	beq.n	8004e7e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004e7e:	2000      	movs	r0, #0
 8004e80:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e82:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e86:	045b      	lsls	r3, r3, #17
 8004e88:	d50d      	bpl.n	8004ea6 <USB_EPClearStall+0x7c>
 8004e8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	0c1b      	lsrs	r3, r3, #16
 8004e9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ea6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004eba:	e7da      	b.n	8004e72 <USB_EPClearStall+0x48>

08004ebc <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004ebc:	b911      	cbnz	r1, 8004ec4 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	4770      	bx	lr

08004ec8 <USB_DevConnect>:
 8004ec8:	2000      	movs	r0, #0
 8004eca:	4770      	bx	lr

08004ecc <USB_DevDisconnect>:
 8004ecc:	2000      	movs	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ed0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004ed4:	b280      	uxth	r0, r0
 8004ed6:	4770      	bx	lr

08004ed8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004ed8:	2000      	movs	r0, #0
 8004eda:	4770      	bx	lr

08004edc <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004edc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004ee0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (count = n; count != 0U; count--)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d100      	bne.n	8004ef2 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8004ef0:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004ef2:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004ef6:	f822 0b04 	strh.w	r0, [r2], #4
  for (count = n; count != 0U; count--)
 8004efa:	e7f7      	b.n	8004eec <USB_WritePMA+0x10>

08004efc <USB_EPStartXfer>:
{
 8004efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f00:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8004f02:	7849      	ldrb	r1, [r1, #1]
{
 8004f04:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8004f06:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8004f08:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8004f0a:	f040 811e 	bne.w	800514a <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 8004f0e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8004f12:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f14:	6961      	ldr	r1, [r4, #20]
 8004f16:	4576      	cmp	r6, lr
 8004f18:	bf28      	it	cs
 8004f1a:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8004f1c:	bb0a      	cbnz	r2, 8004f62 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f1e:	b2b6      	uxth	r6, r6
 8004f20:	88e2      	ldrh	r2, [r4, #6]
 8004f22:	4633      	mov	r3, r6
 8004f24:	f7ff ffda 	bl	8004edc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f28:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004f2c:	7821      	ldrb	r1, [r4, #0]
 8004f2e:	b290      	uxth	r0, r2
 8004f30:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8004f34:	0109      	lsls	r1, r1, #4
 8004f36:	4402      	add	r2, r0
 8004f38:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004f3a:	7822      	ldrb	r2, [r4, #0]
 8004f3c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8004f50:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8004f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 8004f62:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f64:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8004f66:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8004f68:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f6a:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8004f6e:	f040 80d6 	bne.w	800511e <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 8004f72:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f74:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8004f78:	f080 80ba 	bcs.w	80050f0 <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f7c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f84:	0412      	lsls	r2, r2, #16
 8004f86:	0c12      	lsrs	r2, r2, #16
 8004f88:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004f8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f90:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f94:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f98:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004f9c:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f9e:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8004fa2:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fa4:	b297      	uxth	r7, r2
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004fa6:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fa8:	d052      	beq.n	8005050 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004faa:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8004fae:	443a      	add	r2, r7
 8004fb0:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fb4:	8962      	ldrh	r2, [r4, #10]
 8004fb6:	f7ff ff91 	bl	8004edc <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004fba:	6a27      	ldr	r7, [r4, #32]
 8004fbc:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8004fbe:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004fc0:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 8004fc2:	bf8a      	itet	hi
 8004fc4:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 8004fc6:	2300      	movls	r3, #0
 8004fc8:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fca:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8004fcc:	4431      	add	r1, r6
 8004fce:	6223      	str	r3, [r4, #32]
 8004fd0:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fd2:	b2bb      	uxth	r3, r7
 8004fd4:	bb82      	cbnz	r2, 8005038 <USB_EPStartXfer+0x13c>
 8004fd6:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004fda:	7826      	ldrb	r6, [r4, #0]
 8004fdc:	b282      	uxth	r2, r0
 8004fde:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8004fe2:	0136      	lsls	r6, r6, #4
 8004fe4:	4410      	add	r0, r2
 8004fe6:	5a32      	ldrh	r2, [r6, r0]
 8004fe8:	2f3e      	cmp	r7, #62	; 0x3e
 8004fea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004fee:	5232      	strh	r2, [r6, r0]
 8004ff0:	d914      	bls.n	800501c <USB_EPStartXfer+0x120>
 8004ff2:	06fa      	lsls	r2, r7, #27
 8004ff4:	5a32      	ldrh	r2, [r6, r0]
 8004ff6:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 8004ffa:	bf08      	it	eq
 8004ffc:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005000:	b292      	uxth	r2, r2
 8005002:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8005006:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800500a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800500e:	b292      	uxth	r2, r2
 8005010:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005012:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005014:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005016:	f7ff ff61 	bl	8004edc <USB_WritePMA>
 800501a:	e78e      	b.n	8004f3a <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800501c:	b90f      	cbnz	r7, 8005022 <USB_EPStartXfer+0x126>
 800501e:	5a32      	ldrh	r2, [r6, r0]
 8005020:	e7f1      	b.n	8005006 <USB_EPStartXfer+0x10a>
 8005022:	5a32      	ldrh	r2, [r6, r0]
 8005024:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 8005028:	07ff      	lsls	r7, r7, #31
 800502a:	bf48      	it	mi
 800502c:	f10c 0c01 	addmi.w	ip, ip, #1
 8005030:	b292      	uxth	r2, r2
 8005032:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8005036:	e7ea      	b.n	800500e <USB_EPStartXfer+0x112>
 8005038:	2a01      	cmp	r2, #1
 800503a:	d1ea      	bne.n	8005012 <USB_EPStartXfer+0x116>
 800503c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005040:	7820      	ldrb	r0, [r4, #0]
 8005042:	b296      	uxth	r6, r2
 8005044:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8005048:	0100      	lsls	r0, r0, #4
 800504a:	4432      	add	r2, r6
 800504c:	5283      	strh	r3, [r0, r2]
 800504e:	e7e0      	b.n	8005012 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005050:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8005054:	443a      	add	r2, r7
 8005056:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800505a:	8922      	ldrh	r2, [r4, #8]
 800505c:	f7ff ff3e 	bl	8004edc <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8005060:	6a27      	ldr	r7, [r4, #32]
 8005062:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8005064:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005066:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 8005068:	bf8a      	itet	hi
 800506a:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 800506c:	4643      	movls	r3, r8
 800506e:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005070:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8005072:	4431      	add	r1, r6
 8005074:	6223      	str	r3, [r4, #32]
 8005076:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005078:	b2bb      	uxth	r3, r7
 800507a:	bb6a      	cbnz	r2, 80050d8 <USB_EPStartXfer+0x1dc>
 800507c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8005080:	7826      	ldrb	r6, [r4, #0]
 8005082:	b282      	uxth	r2, r0
 8005084:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8005088:	0136      	lsls	r6, r6, #4
 800508a:	4410      	add	r0, r2
 800508c:	5a32      	ldrh	r2, [r6, r0]
 800508e:	2f3e      	cmp	r7, #62	; 0x3e
 8005090:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005094:	5232      	strh	r2, [r6, r0]
 8005096:	d911      	bls.n	80050bc <USB_EPStartXfer+0x1c0>
 8005098:	06fa      	lsls	r2, r7, #27
 800509a:	5a32      	ldrh	r2, [r6, r0]
 800509c:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 80050a0:	bf08      	it	eq
 80050a2:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80050a6:	b292      	uxth	r2, r2
 80050a8:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80050ac:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80050b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80050b4:	b292      	uxth	r2, r2
 80050b6:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050b8:	8962      	ldrh	r2, [r4, #10]
 80050ba:	e7ab      	b.n	8005014 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050bc:	b90f      	cbnz	r7, 80050c2 <USB_EPStartXfer+0x1c6>
 80050be:	5a32      	ldrh	r2, [r6, r0]
 80050c0:	e7f4      	b.n	80050ac <USB_EPStartXfer+0x1b0>
 80050c2:	5a32      	ldrh	r2, [r6, r0]
 80050c4:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 80050c8:	07ff      	lsls	r7, r7, #31
 80050ca:	bf48      	it	mi
 80050cc:	f10c 0c01 	addmi.w	ip, ip, #1
 80050d0:	b292      	uxth	r2, r2
 80050d2:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80050d6:	e7ed      	b.n	80050b4 <USB_EPStartXfer+0x1b8>
 80050d8:	2a01      	cmp	r2, #1
 80050da:	d1ed      	bne.n	80050b8 <USB_EPStartXfer+0x1bc>
 80050dc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80050e0:	7820      	ldrb	r0, [r4, #0]
 80050e2:	b296      	uxth	r6, r2
 80050e4:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80050e8:	0100      	lsls	r0, r0, #4
 80050ea:	4432      	add	r2, r6
 80050ec:	5283      	strh	r3, [r0, r2]
 80050ee:	e7e3      	b.n	80050b8 <USB_EPStartXfer+0x1bc>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80050f0:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80050f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050f8:	0412      	lsls	r2, r2, #16
 80050fa:	0c12      	lsrs	r2, r2, #16
 80050fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005104:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005108:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800510c:	b29b      	uxth	r3, r3
 800510e:	b296      	uxth	r6, r2
 8005110:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8005114:	4432      	add	r2, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005116:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800511a:	8922      	ldrh	r2, [r4, #8]
 800511c:	e77b      	b.n	8005016 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800511e:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 8005122:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005124:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005128:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
        ep->xfer_len_db -= len;
 800512c:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800512e:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005130:	b296      	uxth	r6, r2
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005132:	d006      	beq.n	8005142 <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005134:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8005138:	4432      	add	r2, r6
 800513a:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800513e:	8962      	ldrh	r2, [r4, #10]
 8005140:	e769      	b.n	8005016 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005142:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8005146:	4432      	add	r2, r6
 8005148:	e7e5      	b.n	8005116 <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 800514a:	2a00      	cmp	r2, #0
 800514c:	d131      	bne.n	80051b2 <USB_EPStartXfer+0x2b6>
      if (ep->xfer_len > ep->maxpacket)
 800514e:	69a0      	ldr	r0, [r4, #24]
 8005150:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005152:	7821      	ldrb	r1, [r4, #0]
      if (ep->xfer_len > ep->maxpacket)
 8005154:	4298      	cmp	r0, r3
        ep->xfer_len -= len;
 8005156:	bf84      	itt	hi
 8005158:	1ac2      	subhi	r2, r0, r3
 800515a:	4618      	movhi	r0, r3
 800515c:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800515e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005162:	0109      	lsls	r1, r1, #4
 8005164:	b293      	uxth	r3, r2
 8005166:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800516a:	441a      	add	r2, r3
 800516c:	5a8b      	ldrh	r3, [r1, r2]
 800516e:	283e      	cmp	r0, #62	; 0x3e
 8005170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005174:	528b      	strh	r3, [r1, r2]
 8005176:	d90d      	bls.n	8005194 <USB_EPStartXfer+0x298>
 8005178:	5a8b      	ldrh	r3, [r1, r2]
 800517a:	0946      	lsrs	r6, r0, #5
 800517c:	06c0      	lsls	r0, r0, #27
 800517e:	bf08      	it	eq
 8005180:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005184:	b29b      	uxth	r3, r3
 8005186:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800518a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005192:	e00b      	b.n	80051ac <USB_EPStartXfer+0x2b0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005194:	b908      	cbnz	r0, 800519a <USB_EPStartXfer+0x29e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005196:	5a53      	ldrh	r3, [r2, r1]
 8005198:	e7f7      	b.n	800518a <USB_EPStartXfer+0x28e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800519a:	07c3      	lsls	r3, r0, #31
 800519c:	5a8b      	ldrh	r3, [r1, r2]
 800519e:	ea4f 0650 	mov.w	r6, r0, lsr #1
 80051a2:	bf48      	it	mi
 80051a4:	3601      	addmi	r6, #1
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	5253      	strh	r3, [r2, r1]
 80051b0:	e06a      	b.n	8005288 <USB_EPStartXfer+0x38c>
      if (ep->type == EP_TYPE_BULK)
 80051b2:	78e3      	ldrb	r3, [r4, #3]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d17c      	bne.n	80052b2 <USB_EPStartXfer+0x3b6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80051b8:	2900      	cmp	r1, #0
 80051ba:	d14b      	bne.n	8005254 <USB_EPStartXfer+0x358>
 80051bc:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80051c0:	7820      	ldrb	r0, [r4, #0]
 80051c2:	b28b      	uxth	r3, r1
 80051c4:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80051c8:	0100      	lsls	r0, r0, #4
 80051ca:	4419      	add	r1, r3
 80051cc:	5a43      	ldrh	r3, [r0, r1]
 80051ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d2:	5243      	strh	r3, [r0, r1]
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	2b3e      	cmp	r3, #62	; 0x3e
 80051d8:	d920      	bls.n	800521c <USB_EPStartXfer+0x320>
 80051da:	5a42      	ldrh	r2, [r0, r1]
 80051dc:	095e      	lsrs	r6, r3, #5
 80051de:	06df      	lsls	r7, r3, #27
 80051e0:	bf08      	it	eq
 80051e2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80051e6:	b292      	uxth	r2, r2
 80051e8:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80051ec:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80051f0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80051f4:	b292      	uxth	r2, r2
 80051f6:	5242      	strh	r2, [r0, r1]
 80051f8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80051fc:	7822      	ldrb	r2, [r4, #0]
 80051fe:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8005202:	b289      	uxth	r1, r1
 8005204:	0112      	lsls	r2, r2, #4
 8005206:	4401      	add	r1, r0
 8005208:	5a50      	ldrh	r0, [r2, r1]
 800520a:	2b3e      	cmp	r3, #62	; 0x3e
 800520c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005210:	5250      	strh	r0, [r2, r1]
 8005212:	d810      	bhi.n	8005236 <USB_EPStartXfer+0x33a>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d143      	bne.n	80052a0 <USB_EPStartXfer+0x3a4>
 8005218:	5a53      	ldrh	r3, [r2, r1]
 800521a:	e015      	b.n	8005248 <USB_EPStartXfer+0x34c>
 800521c:	b90b      	cbnz	r3, 8005222 <USB_EPStartXfer+0x326>
 800521e:	5a42      	ldrh	r2, [r0, r1]
 8005220:	e7e4      	b.n	80051ec <USB_EPStartXfer+0x2f0>
 8005222:	07da      	lsls	r2, r3, #31
 8005224:	5a42      	ldrh	r2, [r0, r1]
 8005226:	ea4f 0653 	mov.w	r6, r3, lsr #1
 800522a:	bf48      	it	mi
 800522c:	3601      	addmi	r6, #1
 800522e:	b292      	uxth	r2, r2
 8005230:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005234:	e7de      	b.n	80051f4 <USB_EPStartXfer+0x2f8>
 8005236:	0958      	lsrs	r0, r3, #5
 8005238:	06df      	lsls	r7, r3, #27
 800523a:	5a53      	ldrh	r3, [r2, r1]
 800523c:	bf08      	it	eq
 800523e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005242:	b29b      	uxth	r3, r3
 8005244:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005250:	b29b      	uxth	r3, r3
 8005252:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 8005254:	69e3      	ldr	r3, [r4, #28]
 8005256:	b1bb      	cbz	r3, 8005288 <USB_EPStartXfer+0x38c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005258:	f244 0340 	movw	r3, #16448	; 0x4040
 800525c:	7822      	ldrb	r2, [r4, #0]
 800525e:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005262:	ea03 0001 	and.w	r0, r3, r1
 8005266:	438b      	bics	r3, r1
 8005268:	d000      	beq.n	800526c <USB_EPStartXfer+0x370>
 800526a:	b968      	cbnz	r0, 8005288 <USB_EPStartXfer+0x38c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800526c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005280:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005284:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005288:	7822      	ldrb	r2, [r4, #0]
 800528a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800528e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800529e:	e657      	b.n	8004f50 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80052a0:	0858      	lsrs	r0, r3, #1
 80052a2:	07de      	lsls	r6, r3, #31
 80052a4:	5a53      	ldrh	r3, [r2, r1]
 80052a6:	bf48      	it	mi
 80052a8:	3001      	addmi	r0, #1
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80052b0:	e7ce      	b.n	8005250 <USB_EPStartXfer+0x354>
      else if (ep->type == EP_TYPE_ISOC)
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d158      	bne.n	8005368 <USB_EPStartXfer+0x46c>
        if (ep->xfer_len > ep->maxpacket)
 80052b6:	69a3      	ldr	r3, [r4, #24]
 80052b8:	6922      	ldr	r2, [r4, #16]
 80052ba:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 80052bc:	bf94      	ite	ls
 80052be:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 80052c0:	1a98      	subhi	r0, r3, r2
 80052c2:	61a0      	str	r0, [r4, #24]
 80052c4:	bf88      	it	hi
 80052c6:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052c8:	2900      	cmp	r1, #0
 80052ca:	d1dd      	bne.n	8005288 <USB_EPStartXfer+0x38c>
 80052cc:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80052d0:	7820      	ldrb	r0, [r4, #0]
 80052d2:	b28a      	uxth	r2, r1
 80052d4:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80052d8:	0100      	lsls	r0, r0, #4
 80052da:	4411      	add	r1, r2
 80052dc:	5a42      	ldrh	r2, [r0, r1]
 80052de:	2b3e      	cmp	r3, #62	; 0x3e
 80052e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80052e4:	5242      	strh	r2, [r0, r1]
 80052e6:	d929      	bls.n	800533c <USB_EPStartXfer+0x440>
 80052e8:	06da      	lsls	r2, r3, #27
 80052ea:	5a42      	ldrh	r2, [r0, r1]
 80052ec:	ea4f 1653 	mov.w	r6, r3, lsr #5
 80052f0:	bf08      	it	eq
 80052f2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80052f6:	b292      	uxth	r2, r2
 80052f8:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80052fc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005300:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005304:	b292      	uxth	r2, r2
 8005306:	5242      	strh	r2, [r0, r1]
 8005308:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800530c:	7822      	ldrb	r2, [r4, #0]
 800530e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8005312:	b289      	uxth	r1, r1
 8005314:	0112      	lsls	r2, r2, #4
 8005316:	4401      	add	r1, r0
 8005318:	5a50      	ldrh	r0, [r2, r1]
 800531a:	2b3e      	cmp	r3, #62	; 0x3e
 800531c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005320:	5250      	strh	r0, [r2, r1]
 8005322:	d817      	bhi.n	8005354 <USB_EPStartXfer+0x458>
 8005324:	2b00      	cmp	r3, #0
 8005326:	f43f af36 	beq.w	8005196 <USB_EPStartXfer+0x29a>
 800532a:	0858      	lsrs	r0, r3, #1
 800532c:	07db      	lsls	r3, r3, #31
 800532e:	5a53      	ldrh	r3, [r2, r1]
 8005330:	bf48      	it	mi
 8005332:	3001      	addmi	r0, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800533a:	e737      	b.n	80051ac <USB_EPStartXfer+0x2b0>
 800533c:	b90b      	cbnz	r3, 8005342 <USB_EPStartXfer+0x446>
 800533e:	5a42      	ldrh	r2, [r0, r1]
 8005340:	e7dc      	b.n	80052fc <USB_EPStartXfer+0x400>
 8005342:	5a42      	ldrh	r2, [r0, r1]
 8005344:	085e      	lsrs	r6, r3, #1
 8005346:	07df      	lsls	r7, r3, #31
 8005348:	bf48      	it	mi
 800534a:	3601      	addmi	r6, #1
 800534c:	b292      	uxth	r2, r2
 800534e:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005352:	e7d7      	b.n	8005304 <USB_EPStartXfer+0x408>
 8005354:	0958      	lsrs	r0, r3, #5
 8005356:	06de      	lsls	r6, r3, #27
 8005358:	5a53      	ldrh	r3, [r2, r1]
 800535a:	bf08      	it	eq
 800535c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005360:	b29b      	uxth	r3, r3
 8005362:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005366:	e710      	b.n	800518a <USB_EPStartXfer+0x28e>
        return HAL_ERROR;
 8005368:	2001      	movs	r0, #1
 800536a:	e5f8      	b.n	8004f5e <USB_EPStartXfer+0x62>

0800536c <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800536c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8005370:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005376:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8005378:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800537a:	4617      	mov	r7, r2
  for (count = n; count != 0U; count--)
 800537c:	462e      	mov	r6, r5
 800537e:	3402      	adds	r4, #2
 8005380:	b936      	cbnz	r6, 8005390 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005382:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8005384:	bf44      	itt	mi
 8005386:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800538a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8005390:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (count = n; count != 0U; count--)
 8005394:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8005396:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005398:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800539c:	0a00      	lsrs	r0, r0, #8
 800539e:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (count = n; count != 0U; count--)
 80053a2:	e7ec      	b.n	800537e <USB_ReadPMA+0x12>

080053a4 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053a4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 80053a8:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053aa:	b16b      	cbz	r3, 80053c8 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053ac:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053b0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80053b4:	28ff      	cmp	r0, #255	; 0xff
 80053b6:	d007      	beq.n	80053c8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	4621      	mov	r1, r4
 80053bc:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80053c0:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80053c2:	23ff      	movs	r3, #255	; 0xff
 80053c4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80053c8:	2000      	movs	r0, #0
 80053ca:	bd10      	pop	{r4, pc}

080053cc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80053cc:	2343      	movs	r3, #67	; 0x43
 80053ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80053d0:	4800      	ldr	r0, [pc, #0]	; (80053d4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80053d2:	4770      	bx	lr
 80053d4:	2000008c 	.word	0x2000008c

080053d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80053d8:	2343      	movs	r3, #67	; 0x43
 80053da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80053dc:	4800      	ldr	r0, [pc, #0]	; (80053e0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80053de:	4770      	bx	lr
 80053e0:	200000d0 	.word	0x200000d0

080053e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053e4:	2343      	movs	r3, #67	; 0x43
 80053e6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80053e8:	4800      	ldr	r0, [pc, #0]	; (80053ec <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80053ea:	4770      	bx	lr
 80053ec:	20000120 	.word	0x20000120

080053f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80053f0:	230a      	movs	r3, #10
 80053f2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80053f4:	4800      	ldr	r0, [pc, #0]	; (80053f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80053f6:	4770      	bx	lr
 80053f8:	20000114 	.word	0x20000114

080053fc <USBD_CDC_DataOut>:
{
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005400:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005404:	f000 ff6d 	bl	80062e2 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8005408:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800540c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8005410:	b14b      	cbz	r3, 8005426 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005412:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005416:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005420:	4798      	blx	r3
    return USBD_OK;
 8005422:	2000      	movs	r0, #0
}
 8005424:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005426:	2002      	movs	r0, #2
 8005428:	e7fc      	b.n	8005424 <USBD_CDC_DataOut+0x28>

0800542a <USBD_CDC_DataIn>:
{
 800542a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800542c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8005430:	b1d6      	cbz	r6, 8005468 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005432:	2214      	movs	r2, #20
 8005434:	fb02 0201 	mla	r2, r2, r1, r0
 8005438:	69d4      	ldr	r4, [r2, #28]
 800543a:	b18c      	cbz	r4, 8005460 <USBD_CDC_DataIn+0x36>
 800543c:	2728      	movs	r7, #40	; 0x28
 800543e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8005442:	fb07 3501 	mla	r5, r7, r1, r3
 8005446:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005448:	fbb4 f5f3 	udiv	r5, r4, r3
 800544c:	fb03 4415 	mls	r4, r3, r5, r4
 8005450:	b934      	cbnz	r4, 8005460 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8005452:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005454:	4623      	mov	r3, r4
 8005456:	4622      	mov	r2, r4
 8005458:	f000 ff31 	bl	80062be <USBD_LL_Transmit>
    return USBD_OK;
 800545c:	4620      	mov	r0, r4
}
 800545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8005460:	2000      	movs	r0, #0
 8005462:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8005466:	e7fa      	b.n	800545e <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8005468:	2002      	movs	r0, #2
 800546a:	e7f8      	b.n	800545e <USBD_CDC_DataIn+0x34>

0800546c <USBD_CDC_Setup>:
{
 800546c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8005470:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005474:	780a      	ldrb	r2, [r1, #0]
{
 8005476:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005478:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800547c:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800547e:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8005482:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8005486:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800548a:	d028      	beq.n	80054de <USBD_CDC_Setup+0x72>
 800548c:	2c20      	cmp	r4, #32
 800548e:	d142      	bne.n	8005516 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8005490:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005492:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8005494:	b1e4      	cbz	r4, 80054d0 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8005496:	0612      	lsls	r2, r2, #24
 8005498:	d511      	bpl.n	80054be <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800549a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800549e:	4639      	mov	r1, r7
 80054a0:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	4622      	mov	r2, r4
 80054a8:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054aa:	4639      	mov	r1, r7
 80054ac:	4628      	mov	r0, r5
 80054ae:	88f2      	ldrh	r2, [r6, #6]
 80054b0:	f000 fc4b 	bl	8005d4a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80054b4:	4644      	mov	r4, r8
}
 80054b6:	4620      	mov	r0, r4
 80054b8:	b003      	add	sp, #12
 80054ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054be:	4622      	mov	r2, r4
 80054c0:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 80054c2:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80054c6:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80054ca:	f000 fc53 	bl	8005d74 <USBD_CtlPrepareRx>
 80054ce:	e7f1      	b.n	80054b4 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054d0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80054d4:	4618      	mov	r0, r3
 80054d6:	6895      	ldr	r5, [r2, #8]
 80054d8:	4622      	mov	r2, r4
 80054da:	47a8      	blx	r5
 80054dc:	e7eb      	b.n	80054b6 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80054de:	784b      	ldrb	r3, [r1, #1]
 80054e0:	2b0a      	cmp	r3, #10
 80054e2:	d00c      	beq.n	80054fe <USBD_CDC_Setup+0x92>
 80054e4:	2b0b      	cmp	r3, #11
 80054e6:	d012      	beq.n	800550e <USBD_CDC_Setup+0xa2>
 80054e8:	b9ab      	cbnz	r3, 8005516 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d111      	bne.n	8005516 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80054f2:	2202      	movs	r2, #2
 80054f4:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80054f8:	f000 fc27 	bl	8005d4a <USBD_CtlSendData>
 80054fc:	e7db      	b.n	80054b6 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005502:	2b03      	cmp	r3, #3
 8005504:	d107      	bne.n	8005516 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005506:	2201      	movs	r2, #1
 8005508:	f10d 0105 	add.w	r1, sp, #5
 800550c:	e7f4      	b.n	80054f8 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800550e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005512:	2b03      	cmp	r3, #3
 8005514:	d0cf      	beq.n	80054b6 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	f000 fbef 	bl	8005cfc <USBD_CtlError>
          ret = USBD_FAIL;
 800551e:	2402      	movs	r4, #2
          break;
 8005520:	e7c9      	b.n	80054b6 <USBD_CDC_Setup+0x4a>

08005522 <USBD_CDC_DeInit>:
{
 8005522:	b538      	push	{r3, r4, r5, lr}
 8005524:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005526:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005528:	2181      	movs	r1, #129	; 0x81
 800552a:	f000 fe92 	bl	8006252 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800552e:	2101      	movs	r1, #1
 8005530:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005532:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005534:	f000 fe8d 	bl	8006252 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005538:	2182      	movs	r1, #130	; 0x82
 800553a:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800553c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005540:	f000 fe87 	bl	8006252 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005544:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005548:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800554a:	b14b      	cbz	r3, 8005560 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800554c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005554:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005558:	f000 fecc 	bl	80062f4 <USBD_static_free>
    pdev->pClassData = NULL;
 800555c:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005560:	2000      	movs	r0, #0
 8005562:	bd38      	pop	{r3, r4, r5, pc}

08005564 <USBD_CDC_Init>:
{
 8005564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005568:	7c03      	ldrb	r3, [r0, #16]
{
 800556a:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800556c:	bbbb      	cbnz	r3, 80055de <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800556e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005572:	2202      	movs	r2, #2
 8005574:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005576:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005578:	f000 fe5f 	bl	800623a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800557c:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005580:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005582:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005584:	4629      	mov	r1, r5
 8005586:	2202      	movs	r2, #2
 8005588:	4620      	mov	r0, r4
 800558a:	f000 fe56 	bl	800623a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800558e:	2308      	movs	r3, #8
 8005590:	2203      	movs	r2, #3
 8005592:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005594:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005598:	4620      	mov	r0, r4
 800559a:	f000 fe4e 	bl	800623a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800559e:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80055a2:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055a4:	f000 fea2 	bl	80062ec <USBD_static_malloc>
 80055a8:	4605      	mov	r5, r0
 80055aa:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80055ae:	b340      	cbz	r0, 8005602 <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 80055b0:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80055b4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4798      	blx	r3
    hcdc->TxState = 0U;
 80055bc:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80055c0:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055c4:	7c26      	ldrb	r6, [r4, #16]
 80055c6:	b99e      	cbnz	r6, 80055f0 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055cc:	4639      	mov	r1, r7
 80055ce:	4620      	mov	r0, r4
 80055d0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80055d4:	f000 fe7c 	bl	80062d0 <USBD_LL_PrepareReceive>
}
 80055d8:	4630      	mov	r0, r6
 80055da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055de:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80055e0:	2340      	movs	r3, #64	; 0x40
 80055e2:	2202      	movs	r2, #2
 80055e4:	2181      	movs	r1, #129	; 0x81
 80055e6:	f000 fe28 	bl	800623a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055ea:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055ec:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055ee:	e7c8      	b.n	8005582 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055f0:	2340      	movs	r3, #64	; 0x40
 80055f2:	4639      	mov	r1, r7
 80055f4:	4620      	mov	r0, r4
 80055f6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80055fa:	f000 fe69 	bl	80062d0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80055fe:	4646      	mov	r6, r8
 8005600:	e7ea      	b.n	80055d8 <USBD_CDC_Init+0x74>
    ret = 1U;
 8005602:	463e      	mov	r6, r7
 8005604:	e7e8      	b.n	80055d8 <USBD_CDC_Init+0x74>

08005606 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005606:	b119      	cbz	r1, 8005610 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005608:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800560c:	2000      	movs	r0, #0
 800560e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005610:	2002      	movs	r0, #2
  }

  return ret;
}
 8005612:	4770      	bx	lr

08005614 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005614:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005618:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800561a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800561e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005622:	4770      	bx	lr

08005624 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005624:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8005628:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800562a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800562e:	4770      	bx	lr

08005630 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005630:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8005634:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8005636:	b182      	cbz	r2, 800565a <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8005638:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800563c:	2301      	movs	r3, #1
 800563e:	b974      	cbnz	r4, 800565e <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005640:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005644:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005648:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800564a:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800564c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8005650:	b29b      	uxth	r3, r3
 8005652:	f000 fe34 	bl	80062be <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8005656:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005658:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800565a:	2002      	movs	r0, #2
 800565c:	e7fc      	b.n	8005658 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800565e:	4618      	mov	r0, r3
 8005660:	e7fa      	b.n	8005658 <USBD_CDC_TransmitPacket+0x28>

08005662 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005662:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8005666:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005668:	b182      	cbz	r2, 800568c <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800566a:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800566c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005670:	b934      	cbnz	r4, 8005680 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8005672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005676:	2101      	movs	r1, #1
 8005678:	f000 fe2a 	bl	80062d0 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800567c:	4620      	mov	r0, r4
 800567e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005680:	2340      	movs	r3, #64	; 0x40
 8005682:	2101      	movs	r1, #1
 8005684:	f000 fe24 	bl	80062d0 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005688:	2400      	movs	r4, #0
 800568a:	e7f7      	b.n	800567c <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800568c:	2402      	movs	r4, #2
 800568e:	e7f5      	b.n	800567c <USBD_CDC_ReceivePacket+0x1a>

08005690 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005690:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005692:	b180      	cbz	r0, 80056b6 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005694:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005698:	b113      	cbz	r3, 80056a0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80056a0:	b109      	cbz	r1, 80056a6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80056a2:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056a6:	2301      	movs	r3, #1
  pdev->id = id;
 80056a8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056aa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80056ae:	f000 fd79 	bl	80061a4 <USBD_LL_Init>

  return USBD_OK;
 80056b2:	2000      	movs	r0, #0
}
 80056b4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80056b6:	2002      	movs	r0, #2
 80056b8:	e7fc      	b.n	80056b4 <USBD_Init+0x24>

080056ba <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80056ba:	b119      	cbz	r1, 80056c4 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80056bc:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80056c0:	2000      	movs	r0, #0
 80056c2:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80056c4:	2002      	movs	r0, #2
  }

  return status;
}
 80056c6:	4770      	bx	lr

080056c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056c8:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80056ca:	f000 fdad 	bl	8006228 <USBD_LL_Start>

  return USBD_OK;
}
 80056ce:	2000      	movs	r0, #0
 80056d0:	bd08      	pop	{r3, pc}

080056d2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80056d2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80056d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80056d8:	b90b      	cbnz	r3, 80056de <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80056da:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80056dc:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4798      	blx	r3
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d0fa      	beq.n	80056dc <USBD_SetClassConfig+0xa>
 80056e6:	e7f8      	b.n	80056da <USBD_SetClassConfig+0x8>

080056e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80056e8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80056ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4798      	blx	r3

  return USBD_OK;
}
 80056f2:	2000      	movs	r0, #0
 80056f4:	bd08      	pop	{r3, pc}

080056f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056f6:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056f8:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80056fc:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056fe:	4628      	mov	r0, r5
 8005700:	f000 fae8 	bl	8005cd4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005704:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005706:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800570a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800570e:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8005712:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005716:	f001 031f 	and.w	r3, r1, #31
 800571a:	2b01      	cmp	r3, #1
 800571c:	d008      	beq.n	8005730 <USBD_LL_SetupStage+0x3a>
 800571e:	2b02      	cmp	r3, #2
 8005720:	d00b      	beq.n	800573a <USBD_LL_SetupStage+0x44>
 8005722:	b97b      	cbnz	r3, 8005744 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005724:	4629      	mov	r1, r5
 8005726:	4620      	mov	r0, r4
 8005728:	f000 f8fc 	bl	8005924 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 800572c:	2000      	movs	r0, #0
 800572e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005730:	4629      	mov	r1, r5
 8005732:	4620      	mov	r0, r4
 8005734:	f000 fa20 	bl	8005b78 <USBD_StdItfReq>
      break;
 8005738:	e7f8      	b.n	800572c <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 800573a:	4629      	mov	r1, r5
 800573c:	4620      	mov	r0, r4
 800573e:	f000 fa3f 	bl	8005bc0 <USBD_StdEPReq>
      break;
 8005742:	e7f3      	b.n	800572c <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005744:	4620      	mov	r0, r4
 8005746:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800574a:	f000 fd8b 	bl	8006264 <USBD_LL_StallEP>
      break;
 800574e:	e7ed      	b.n	800572c <USBD_LL_SetupStage+0x36>

08005750 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	4604      	mov	r4, r0
 8005754:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005756:	460d      	mov	r5, r1
 8005758:	bb39      	cbnz	r1, 80057aa <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800575a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800575e:	2b03      	cmp	r3, #3
 8005760:	d11c      	bne.n	800579c <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005762:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8005766:	4296      	cmp	r6, r2
 8005768:	d90b      	bls.n	8005782 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800576a:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 800576c:	42b2      	cmp	r2, r6
 800576e:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8005770:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005774:	bf8c      	ite	hi
 8005776:	b2b2      	uxthhi	r2, r6
 8005778:	b292      	uxthls	r2, r2
 800577a:	f000 fb08 	bl	8005d8e <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800577e:	4628      	mov	r0, r5
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005782:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	b123      	cbz	r3, 8005794 <USBD_LL_DataOutStage+0x44>
 800578a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800578e:	2a03      	cmp	r2, #3
 8005790:	d100      	bne.n	8005794 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8005792:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005794:	4620      	mov	r0, r4
 8005796:	f000 fb02 	bl	8005d9e <USBD_CtlSendStatus>
 800579a:	e7f0      	b.n	800577e <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800579c:	2b05      	cmp	r3, #5
 800579e:	d1ee      	bne.n	800577e <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 80057a0:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80057a4:	f000 fd5e 	bl	8006264 <USBD_LL_StallEP>
 80057a8:	e7e9      	b.n	800577e <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 80057aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	b133      	cbz	r3, 80057c0 <USBD_LL_DataOutStage+0x70>
 80057b2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80057b6:	2a03      	cmp	r2, #3
 80057b8:	d102      	bne.n	80057c0 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80057ba:	4798      	blx	r3
  return USBD_OK;
 80057bc:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80057be:	e7de      	b.n	800577e <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 80057c0:	2502      	movs	r5, #2
 80057c2:	e7dc      	b.n	800577e <USBD_LL_DataOutStage+0x2e>

080057c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	4604      	mov	r4, r0
 80057c8:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80057ca:	460d      	mov	r5, r1
 80057cc:	2900      	cmp	r1, #0
 80057ce:	d147      	bne.n	8005860 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057d0:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d13c      	bne.n	8005852 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80057d8:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80057dc:	429e      	cmp	r6, r3
 80057de:	d914      	bls.n	800580a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80057e0:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80057e2:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80057e4:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	f000 fabc 	bl	8005d64 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057ec:	462b      	mov	r3, r5
 80057ee:	462a      	mov	r2, r5
 80057f0:	4629      	mov	r1, r5
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 fd6c 	bl	80062d0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80057f8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d102      	bne.n	8005806 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005806:	4628      	mov	r0, r5
 8005808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800580a:	69c2      	ldr	r2, [r0, #28]
 800580c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005810:	fb03 2616 	mls	r6, r3, r6, r2
 8005814:	b95e      	cbnz	r6, 800582e <USBD_LL_DataInStage+0x6a>
 8005816:	4293      	cmp	r3, r2
 8005818:	d809      	bhi.n	800582e <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800581a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800581e:	429a      	cmp	r2, r3
 8005820:	d205      	bcs.n	800582e <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005822:	460a      	mov	r2, r1
 8005824:	f000 fa9e 	bl	8005d64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005828:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800582c:	e7de      	b.n	80057ec <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800582e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	b12b      	cbz	r3, 8005842 <USBD_LL_DataInStage+0x7e>
 8005836:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800583a:	2a03      	cmp	r2, #3
 800583c:	d101      	bne.n	8005842 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800583e:	4620      	mov	r0, r4
 8005840:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8005842:	2180      	movs	r1, #128	; 0x80
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fd0d 	bl	8006264 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800584a:	4620      	mov	r0, r4
 800584c:	f000 fab2 	bl	8005db4 <USBD_CtlReceiveStatus>
 8005850:	e7d2      	b.n	80057f8 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005852:	f033 0304 	bics.w	r3, r3, #4
 8005856:	d1cf      	bne.n	80057f8 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005858:	2180      	movs	r1, #128	; 0x80
 800585a:	f000 fd03 	bl	8006264 <USBD_LL_StallEP>
 800585e:	e7cb      	b.n	80057f8 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005860:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	b133      	cbz	r3, 8005876 <USBD_LL_DataInStage+0xb2>
 8005868:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800586c:	2a03      	cmp	r2, #3
 800586e:	d102      	bne.n	8005876 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8005870:	4798      	blx	r3
  return USBD_OK;
 8005872:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005874:	e7c7      	b.n	8005806 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8005876:	2502      	movs	r5, #2
 8005878:	e7c5      	b.n	8005806 <USBD_LL_DataInStage+0x42>

0800587a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800587a:	2200      	movs	r2, #0
{
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005880:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005882:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005884:	4611      	mov	r1, r2
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	f000 fcd7 	bl	800623a <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800588c:	4633      	mov	r3, r6
 800588e:	2180      	movs	r1, #128	; 0x80
 8005890:	2200      	movs	r2, #0
 8005892:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005894:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005898:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800589c:	f000 fccd 	bl	800623a <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80058a0:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80058a2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058a6:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058a8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058aa:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058ae:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80058b2:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80058b4:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80058b8:	b123      	cbz	r3, 80058c4 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058ba:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80058be:	4620      	mov	r0, r4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80058c4:	2000      	movs	r0, #0
 80058c6:	bd70      	pop	{r4, r5, r6, pc}

080058c8 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80058c8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80058ca:	2000      	movs	r0, #0
 80058cc:	4770      	bx	lr

080058ce <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80058ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80058d2:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80058d6:	2304      	movs	r3, #4
 80058d8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80058dc:	2000      	movs	r0, #0
 80058de:	4770      	bx	lr

080058e0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80058e4:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80058e6:	bf04      	itt	eq
 80058e8:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80058ec:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80058f0:	2000      	movs	r0, #0
 80058f2:	4770      	bx	lr

080058f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80058f4:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80058fa:	2a03      	cmp	r2, #3
 80058fc:	d104      	bne.n	8005908 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80058fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	b103      	cbz	r3, 8005908 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005906:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005908:	2000      	movs	r0, #0
 800590a:	bd08      	pop	{r3, pc}

0800590c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800590c:	b510      	push	{r4, lr}
 800590e:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005910:	2180      	movs	r1, #128	; 0x80
 8005912:	f000 fca7 	bl	8006264 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005916:	4620      	mov	r0, r4
}
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800591c:	2100      	movs	r1, #0
 800591e:	f000 bca1 	b.w	8006264 <USBD_LL_StallEP>
	...

08005924 <USBD_StdDevReq>:
{
 8005924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005926:	780b      	ldrb	r3, [r1, #0]
 8005928:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800592a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800592e:	2b20      	cmp	r3, #32
{
 8005930:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005932:	d012      	beq.n	800595a <USBD_StdDevReq+0x36>
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d010      	beq.n	800595a <USBD_StdDevReq+0x36>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d151      	bne.n	80059e0 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 800593c:	784b      	ldrb	r3, [r1, #1]
 800593e:	2b09      	cmp	r3, #9
 8005940:	d84e      	bhi.n	80059e0 <USBD_StdDevReq+0xbc>
 8005942:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005946:	00ee      	.short	0x00ee
 8005948:	004d010a 	.word	0x004d010a
 800594c:	004d0103 	.word	0x004d0103
 8005950:	00130087 	.word	0x00130087
 8005954:	00d6004d 	.word	0x00d6004d
 8005958:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800595a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800595e:	4629      	mov	r1, r5
 8005960:	4620      	mov	r0, r4
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4798      	blx	r3
}
 8005966:	2000      	movs	r0, #0
 8005968:	b003      	add	sp, #12
 800596a:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005972:	884b      	ldrh	r3, [r1, #2]
 8005974:	0a1a      	lsrs	r2, r3, #8
 8005976:	3a01      	subs	r2, #1
 8005978:	2a06      	cmp	r2, #6
 800597a:	d831      	bhi.n	80059e0 <USBD_StdDevReq+0xbc>
 800597c:	e8df f002 	tbb	[pc, r2]
 8005980:	30231604 	.word	0x30231604
 8005984:	4830      	.short	0x4830
 8005986:	52          	.byte	0x52
 8005987:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005988:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800598c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800598e:	7c20      	ldrb	r0, [r4, #16]
 8005990:	f10d 0106 	add.w	r1, sp, #6
 8005994:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005996:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800599a:	2a00      	cmp	r2, #0
 800599c:	d056      	beq.n	8005a4c <USBD_StdDevReq+0x128>
 800599e:	88eb      	ldrh	r3, [r5, #6]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d14a      	bne.n	8005a3a <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 80059a4:	4620      	mov	r0, r4
 80059a6:	f000 f9fa 	bl	8005d9e <USBD_CtlSendStatus>
 80059aa:	e7dc      	b.n	8005966 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059ac:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 80059ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b2:	b932      	cbnz	r2, 80059c2 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80059b6:	f10d 0006 	add.w	r0, sp, #6
 80059ba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059bc:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059be:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80059c0:	e7e9      	b.n	8005996 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	e7f7      	b.n	80059b6 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d809      	bhi.n	80059e0 <USBD_StdDevReq+0xbc>
 80059cc:	e8df f003 	tbb	[pc, r3]
 80059d0:	14100c03 	.word	0x14100c03
 80059d4:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80059d6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80059da:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1d6      	bne.n	800598e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff ff93 	bl	800590c <USBD_CtlError.constprop.0>
        break;
 80059e6:	e7be      	b.n	8005966 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	e7f5      	b.n	80059dc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80059f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	e7f1      	b.n	80059dc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80059f8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	e7ed      	b.n	80059dc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a00:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	e7e9      	b.n	80059dc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a08:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	e7e5      	b.n	80059dc <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a10:	7c03      	ldrb	r3, [r0, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e4      	bne.n	80059e0 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a16:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005a1a:	f10d 0006 	add.w	r0, sp, #6
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	4798      	blx	r3
  if (err != 0U)
 8005a22:	e7b8      	b.n	8005996 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a24:	7c03      	ldrb	r3, [r0, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1da      	bne.n	80059e0 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005a2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005a2e:	f10d 0006 	add.w	r0, sp, #6
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a36:	2307      	movs	r3, #7
 8005a38:	e7c1      	b.n	80059be <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	bf28      	it	cs
 8005a3e:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a40:	4601      	mov	r1, r0
 8005a42:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005a44:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a48:	f000 f97f 	bl	8005d4a <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005a4c:	88eb      	ldrh	r3, [r5, #6]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d189      	bne.n	8005966 <USBD_StdDevReq+0x42>
 8005a52:	e7a7      	b.n	80059a4 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a54:	888b      	ldrh	r3, [r1, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1c2      	bne.n	80059e0 <USBD_StdDevReq+0xbc>
 8005a5a:	88cb      	ldrh	r3, [r1, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1bf      	bne.n	80059e0 <USBD_StdDevReq+0xbc>
 8005a60:	884d      	ldrh	r5, [r1, #2]
 8005a62:	2d7f      	cmp	r5, #127	; 0x7f
 8005a64:	d8bc      	bhi.n	80059e0 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a66:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d0b8      	beq.n	80059e0 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a6e:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005a70:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a74:	f000 fc1a 	bl	80062ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 f990 	bl	8005d9e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005a7e:	b11d      	cbz	r5, 8005a88 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a80:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a82:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005a86:	e76e      	b.n	8005966 <USBD_StdDevReq+0x42>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e7fa      	b.n	8005a82 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8005a8c:	7889      	ldrb	r1, [r1, #2]
 8005a8e:	4d39      	ldr	r5, [pc, #228]	; (8005b74 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a90:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005a92:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a94:	d8a4      	bhi.n	80059e0 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8005a96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d008      	beq.n	8005ab0 <USBD_StdDevReq+0x18c>
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d015      	beq.n	8005ace <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8005aa2:	f7ff ff33 	bl	800590c <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	7829      	ldrb	r1, [r5, #0]
 8005aaa:	f7ff fe1d 	bl	80056e8 <USBD_ClrClassConfig>
        break;
 8005aae:	e75a      	b.n	8005966 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	f43f af77 	beq.w	80059a4 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8005ab6:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ab8:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8005aba:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005abc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7ff fe06 	bl	80056d2 <USBD_SetClassConfig>
 8005ac6:	2802      	cmp	r0, #2
 8005ac8:	f47f af6c 	bne.w	80059a4 <USBD_StdDevReq+0x80>
 8005acc:	e788      	b.n	80059e0 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8005ace:	b931      	cbnz	r1, 8005ade <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ad0:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8005ad2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ad4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8005ad8:	f7ff fe06 	bl	80056e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005adc:	e762      	b.n	80059a4 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8005ade:	6841      	ldr	r1, [r0, #4]
 8005ae0:	2901      	cmp	r1, #1
 8005ae2:	f43f af5f 	beq.w	80059a4 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ae6:	b2c9      	uxtb	r1, r1
 8005ae8:	f7ff fdfe 	bl	80056e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005aec:	7829      	ldrb	r1, [r5, #0]
 8005aee:	6061      	str	r1, [r4, #4]
 8005af0:	e7e6      	b.n	8005ac0 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8005af2:	88ca      	ldrh	r2, [r1, #6]
 8005af4:	2a01      	cmp	r2, #1
 8005af6:	f47f af73 	bne.w	80059e0 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8005afa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d80a      	bhi.n	8005b18 <USBD_StdDevReq+0x1f4>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f43f af6c 	beq.w	80059e0 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8005b08:	4601      	mov	r1, r0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 f91a 	bl	8005d4a <USBD_CtlSendData>
      break;
 8005b16:	e726      	b.n	8005966 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	f47f af61 	bne.w	80059e0 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005b1e:	1d01      	adds	r1, r0, #4
 8005b20:	e7f6      	b.n	8005b10 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8005b22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005b26:	3b01      	subs	r3, #1
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	f63f af59 	bhi.w	80059e0 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8005b2e:	88cb      	ldrh	r3, [r1, #6]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	f47f af55 	bne.w	80059e0 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b36:	2301      	movs	r3, #1
 8005b38:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8005b3a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005b3e:	b10b      	cbz	r3, 8005b44 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b40:	2303      	movs	r3, #3
 8005b42:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005b44:	2202      	movs	r2, #2
 8005b46:	f104 010c 	add.w	r1, r4, #12
 8005b4a:	e7e1      	b.n	8005b10 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b4c:	884b      	ldrh	r3, [r1, #2]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f47f af09 	bne.w	8005966 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005b54:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8005b58:	e724      	b.n	80059a4 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8005b5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	f63f af3d 	bhi.w	80059e0 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b66:	884b      	ldrh	r3, [r1, #2]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f47f aefc 	bne.w	8005966 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e7f0      	b.n	8005b54 <USBD_StdDevReq+0x230>
 8005b72:	bf00      	nop
 8005b74:	20000908 	.word	0x20000908

08005b78 <USBD_StdItfReq>:
{
 8005b78:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7a:	780b      	ldrb	r3, [r1, #0]
{
 8005b7c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005b82:	2a40      	cmp	r2, #64	; 0x40
{
 8005b84:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b86:	d001      	beq.n	8005b8c <USBD_StdItfReq+0x14>
 8005b88:	065b      	lsls	r3, r3, #25
 8005b8a:	d415      	bmi.n	8005bb8 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8005b8c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005b90:	3b01      	subs	r3, #1
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d810      	bhi.n	8005bb8 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b96:	792b      	ldrb	r3, [r5, #4]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d80d      	bhi.n	8005bb8 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b9c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ba8:	88eb      	ldrh	r3, [r5, #6]
 8005baa:	b91b      	cbnz	r3, 8005bb4 <USBD_StdItfReq+0x3c>
 8005bac:	b910      	cbnz	r0, 8005bb4 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 f8f5 	bl	8005d9e <USBD_CtlSendStatus>
}
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff fea7 	bl	800590c <USBD_CtlError.constprop.0>
          break;
 8005bbe:	e7f9      	b.n	8005bb4 <USBD_StdItfReq+0x3c>

08005bc0 <USBD_StdEPReq>:
{
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	780a      	ldrb	r2, [r1, #0]
 8005bc4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bc6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8005bca:	2a20      	cmp	r2, #32
{
 8005bcc:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bce:	d027      	beq.n	8005c20 <USBD_StdEPReq+0x60>
 8005bd0:	2a40      	cmp	r2, #64	; 0x40
 8005bd2:	d025      	beq.n	8005c20 <USBD_StdEPReq+0x60>
 8005bd4:	bb92      	cbnz	r2, 8005c3c <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8005bd6:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005bd8:	888d      	ldrh	r5, [r1, #4]
 8005bda:	2a01      	cmp	r2, #1
 8005bdc:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8005bde:	d03d      	beq.n	8005c5c <USBD_StdEPReq+0x9c>
 8005be0:	2a03      	cmp	r2, #3
 8005be2:	d025      	beq.n	8005c30 <USBD_StdEPReq+0x70>
 8005be4:	bb52      	cbnz	r2, 8005c3c <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8005be6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d04d      	beq.n	8005c8a <USBD_StdEPReq+0xca>
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d124      	bne.n	8005c3c <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 8005bf2:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bf4:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8005bf8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bfc:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8005c00:	d054      	beq.n	8005cac <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	b1d3      	cbz	r3, 8005c3c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c06:	2314      	movs	r3, #20
 8005c08:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005c0c:	fb05 3303 	mla	r3, r5, r3, r3
 8005c10:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c12:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8005c16:	d155      	bne.n	8005cc4 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8005c18:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	e041      	b.n	8005ca4 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8005c20:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4620      	mov	r0, r4
 8005c28:	6892      	ldr	r2, [r2, #8]
 8005c2a:	4790      	blx	r2
}
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8005c30:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005c34:	2a02      	cmp	r2, #2
 8005c36:	d01f      	beq.n	8005c78 <USBD_StdEPReq+0xb8>
 8005c38:	2a03      	cmp	r2, #3
 8005c3a:	d003      	beq.n	8005c44 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7ff fe65 	bl	800590c <USBD_CtlError.constprop.0>
              break;
 8005c42:	e7f3      	b.n	8005c2c <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c44:	885a      	ldrh	r2, [r3, #2]
 8005c46:	b92a      	cbnz	r2, 8005c54 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8005c48:	064a      	lsls	r2, r1, #25
 8005c4a:	d003      	beq.n	8005c54 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c4c:	88db      	ldrh	r3, [r3, #6]
 8005c4e:	b90b      	cbnz	r3, 8005c54 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005c50:	f000 fb08 	bl	8006264 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f000 f8a2 	bl	8005d9e <USBD_CtlSendStatus>
              break;
 8005c5a:	e7e7      	b.n	8005c2c <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8005c5c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005c60:	2a02      	cmp	r2, #2
 8005c62:	d009      	beq.n	8005c78 <USBD_StdEPReq+0xb8>
 8005c64:	2a03      	cmp	r2, #3
 8005c66:	d1e9      	bne.n	8005c3c <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c68:	885b      	ldrh	r3, [r3, #2]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1de      	bne.n	8005c2c <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c6e:	064d      	lsls	r5, r1, #25
 8005c70:	d0f0      	beq.n	8005c54 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c72:	f000 fb00 	bl	8006276 <USBD_LL_ClearStallEP>
 8005c76:	e7ed      	b.n	8005c54 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c78:	064b      	lsls	r3, r1, #25
 8005c7a:	d0df      	beq.n	8005c3c <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8005c7c:	f000 faf2 	bl	8006264 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 faee 	bl	8006264 <USBD_LL_StallEP>
 8005c88:	e7d0      	b.n	8005c2c <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c8a:	064a      	lsls	r2, r1, #25
 8005c8c:	d1d6      	bne.n	8005c3c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c8e:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8005c90:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c94:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c98:	bf4c      	ite	mi
 8005c9a:	f100 0114 	addmi.w	r1, r0, #20
 8005c9e:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8005ca2:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 f850 	bl	8005d4a <USBD_CtlSendData>
              break;
 8005caa:	e7bf      	b.n	8005c2c <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cac:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0c3      	beq.n	8005c3c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cb4:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cb6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cba:	fb03 0505 	mla	r5, r3, r5, r0
 8005cbe:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005cc2:	e7a6      	b.n	8005c12 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 fadf 	bl	8006288 <USBD_LL_IsStallEP>
 8005cca:	b108      	cbz	r0, 8005cd0 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e7a3      	b.n	8005c18 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8005cd0:	6028      	str	r0, [r5, #0]
 8005cd2:	e7a2      	b.n	8005c1a <USBD_StdEPReq+0x5a>

08005cd4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005cd4:	780b      	ldrb	r3, [r1, #0]
 8005cd6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005cd8:	784b      	ldrb	r3, [r1, #1]
 8005cda:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005cdc:	78ca      	ldrb	r2, [r1, #3]
 8005cde:	788b      	ldrb	r3, [r1, #2]
 8005ce0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ce4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005ce6:	794a      	ldrb	r2, [r1, #5]
 8005ce8:	790b      	ldrb	r3, [r1, #4]
 8005cea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005cee:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005cf0:	79ca      	ldrb	r2, [r1, #7]
 8005cf2:	798b      	ldrb	r3, [r1, #6]
 8005cf4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005cf8:	80c3      	strh	r3, [r0, #6]
}
 8005cfa:	4770      	bx	lr

08005cfc <USBD_CtlError>:
{
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005d00:	2180      	movs	r1, #128	; 0x80
 8005d02:	f000 faaf 	bl	8006264 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005d06:	4620      	mov	r0, r4
}
 8005d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	f000 baa9 	b.w	8006264 <USBD_LL_StallEP>

08005d12 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005d12:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8005d14:	b188      	cbz	r0, 8005d3a <USBD_GetString+0x28>
 8005d16:	2400      	movs	r4, #0
 8005d18:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	3401      	adds	r4, #1
 8005d1e:	5d05      	ldrb	r5, [r0, r4]
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	d1fa      	bne.n	8005d1a <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005d2c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	704b      	strb	r3, [r1, #1]
 8005d32:	2302      	movs	r3, #2
    while (*desc != '\0')
 8005d34:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005d38:	b904      	cbnz	r4, 8005d3c <USBD_GetString+0x2a>
}
 8005d3a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	54cc      	strb	r4, [r1, r3]
 8005d40:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005d42:	3302      	adds	r3, #2
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	548d      	strb	r5, [r1, r2]
 8005d48:	e7f4      	b.n	8005d34 <USBD_GetString+0x22>

08005d4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005d4a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d4c:	2202      	movs	r2, #2
{
 8005d4e:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8005d50:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d54:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d58:	460a      	mov	r2, r1
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	f000 faaf 	bl	80062be <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d60:	2000      	movs	r0, #0
 8005d62:	bd10      	pop	{r4, pc}

08005d64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005d64:	b508      	push	{r3, lr}
 8005d66:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d68:	460a      	mov	r2, r1
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	f000 faa7 	bl	80062be <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d70:	2000      	movs	r0, #0
 8005d72:	bd08      	pop	{r3, pc}

08005d74 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005d74:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d76:	2203      	movs	r2, #3
{
 8005d78:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8005d7a:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d7e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d82:	460a      	mov	r2, r1
 8005d84:	2100      	movs	r1, #0
 8005d86:	f000 faa3 	bl	80062d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	bd10      	pop	{r4, pc}

08005d8e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005d8e:	b508      	push	{r3, lr}
 8005d90:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d92:	460a      	mov	r2, r1
 8005d94:	2100      	movs	r1, #0
 8005d96:	f000 fa9b 	bl	80062d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	bd08      	pop	{r3, pc}

08005d9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d9e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005da0:	2304      	movs	r3, #4
 8005da2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005da6:	2300      	movs	r3, #0
 8005da8:	461a      	mov	r2, r3
 8005daa:	4619      	mov	r1, r3
 8005dac:	f000 fa87 	bl	80062be <USBD_LL_Transmit>

  return USBD_OK;
}
 8005db0:	2000      	movs	r0, #0
 8005db2:	bd08      	pop	{r3, pc}

08005db4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005db4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005db6:	2305      	movs	r3, #5
 8005db8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f000 fa85 	bl	80062d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	bd08      	pop	{r3, pc}
	...

08005dcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005dcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	490e      	ldr	r1, [pc, #56]	; (8005e0c <MX_USB_DEVICE_Init+0x40>)
 8005dd2:	480f      	ldr	r0, [pc, #60]	; (8005e10 <MX_USB_DEVICE_Init+0x44>)
 8005dd4:	f7ff fc5c 	bl	8005690 <USBD_Init>
 8005dd8:	b108      	cbz	r0, 8005dde <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8005dda:	f7fb f851 	bl	8000e80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005dde:	490d      	ldr	r1, [pc, #52]	; (8005e14 <MX_USB_DEVICE_Init+0x48>)
 8005de0:	480b      	ldr	r0, [pc, #44]	; (8005e10 <MX_USB_DEVICE_Init+0x44>)
 8005de2:	f7ff fc6a 	bl	80056ba <USBD_RegisterClass>
 8005de6:	b108      	cbz	r0, 8005dec <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8005de8:	f7fb f84a 	bl	8000e80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005dec:	490a      	ldr	r1, [pc, #40]	; (8005e18 <MX_USB_DEVICE_Init+0x4c>)
 8005dee:	4808      	ldr	r0, [pc, #32]	; (8005e10 <MX_USB_DEVICE_Init+0x44>)
 8005df0:	f7ff fc09 	bl	8005606 <USBD_CDC_RegisterInterface>
 8005df4:	b108      	cbz	r0, 8005dfa <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8005df6:	f7fb f843 	bl	8000e80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005dfa:	4805      	ldr	r0, [pc, #20]	; (8005e10 <MX_USB_DEVICE_Init+0x44>)
 8005dfc:	f7ff fc64 	bl	80056c8 <USBD_Start>
 8005e00:	b118      	cbz	r0, 8005e0a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005e06:	f7fb b83b 	b.w	8000e80 <Error_Handler>
}
 8005e0a:	bd08      	pop	{r3, pc}
 8005e0c:	20000180 	.word	0x20000180
 8005e10:	2000090c 	.word	0x2000090c
 8005e14:	20000054 	.word	0x20000054
 8005e18:	2000016c 	.word	0x2000016c

08005e1c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4770      	bx	lr

08005e20 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005e20:	2820      	cmp	r0, #32
 8005e22:	d003      	beq.n	8005e2c <CDC_Control_FS+0xc>
 8005e24:	2821      	cmp	r0, #33	; 0x21
 8005e26:	d017      	beq.n	8005e58 <CDC_Control_FS+0x38>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005e28:	2000      	movs	r0, #0
 8005e2a:	4770      	bx	lr
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 8005e2c:	780b      	ldrb	r3, [r1, #0]
 8005e2e:	4a13      	ldr	r2, [pc, #76]	; (8005e7c <CDC_Control_FS+0x5c>)
 8005e30:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1]<<8);
 8005e32:	7848      	ldrb	r0, [r1, #1]
 8005e34:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005e38:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2]<<16);
 8005e3a:	7888      	ldrb	r0, [r1, #2]
 8005e3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e40:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3]<<24);
 8005e42:	78c8      	ldrb	r0, [r1, #3]
 8005e44:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005e48:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 8005e4a:	790b      	ldrb	r3, [r1, #4]
 8005e4c:	7113      	strb	r3, [r2, #4]
      LineCoding.paritytype = pbuf[5];
 8005e4e:	794b      	ldrb	r3, [r1, #5]
 8005e50:	7153      	strb	r3, [r2, #5]
      LineCoding.datatype   = pbuf[6];
 8005e52:	798b      	ldrb	r3, [r1, #6]
 8005e54:	7193      	strb	r3, [r2, #6]
    break;
 8005e56:	e7e7      	b.n	8005e28 <CDC_Control_FS+0x8>
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005e58:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <CDC_Control_FS+0x5c>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	700a      	strb	r2, [r1, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	0a12      	lsrs	r2, r2, #8
 8005e62:	704a      	strb	r2, [r1, #1]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8005e64:	885a      	ldrh	r2, [r3, #2]
 8005e66:	708a      	strb	r2, [r1, #2]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8005e68:	78da      	ldrb	r2, [r3, #3]
 8005e6a:	70ca      	strb	r2, [r1, #3]
      pbuf[4] = LineCoding.format;
 8005e6c:	791a      	ldrb	r2, [r3, #4]
 8005e6e:	710a      	strb	r2, [r1, #4]
      pbuf[5] = LineCoding.paritytype;
 8005e70:	795a      	ldrb	r2, [r3, #5]
 8005e72:	714a      	strb	r2, [r1, #5]
      pbuf[6] = LineCoding.datatype;
 8005e74:	799b      	ldrb	r3, [r3, #6]
 8005e76:	718b      	strb	r3, [r1, #6]
    break;
 8005e78:	e7d6      	b.n	8005e28 <CDC_Control_FS+0x8>
 8005e7a:	bf00      	nop
 8005e7c:	20000164 	.word	0x20000164

08005e80 <CDC_Init_FS>:
{
 8005e80:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e82:	4c06      	ldr	r4, [pc, #24]	; (8005e9c <CDC_Init_FS+0x1c>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	4620      	mov	r0, r4
 8005e88:	4905      	ldr	r1, [pc, #20]	; (8005ea0 <CDC_Init_FS+0x20>)
 8005e8a:	f7ff fbc3 	bl	8005614 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e8e:	4620      	mov	r0, r4
 8005e90:	4904      	ldr	r1, [pc, #16]	; (8005ea4 <CDC_Init_FS+0x24>)
 8005e92:	f7ff fbc7 	bl	8005624 <USBD_CDC_SetRxBuffer>
}
 8005e96:	2000      	movs	r0, #0
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	bf00      	nop
 8005e9c:	2000090c 	.word	0x2000090c
 8005ea0:	20000dd0 	.word	0x20000dd0
 8005ea4:	20000bd0 	.word	0x20000bd0

08005ea8 <cdcAvailable>:
  ret = (rx_head - rx_tail) % rx_len;
 8005ea8:	4a05      	ldr	r2, [pc, #20]	; (8005ec0 <cdcAvailable+0x18>)
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <cdcAvailable+0x1c>)
 8005eac:	6810      	ldr	r0, [r2, #0]
 8005eae:	4a06      	ldr	r2, [pc, #24]	; (8005ec8 <cdcAvailable+0x20>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	1a1b      	subs	r3, r3, r0
 8005eb6:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8005eba:	fb02 3010 	mls	r0, r2, r0, r3
 8005ebe:	4770      	bx	lr
 8005ec0:	200010d8 	.word	0x200010d8
 8005ec4:	200010d4 	.word	0x200010d4
 8005ec8:	2000017c 	.word	0x2000017c

08005ecc <cdcDataIn>:
  rx_buf[rx_head]= rx_data;
 8005ecc:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <cdcDataIn+0x24>)
 8005ece:	4909      	ldr	r1, [pc, #36]	; (8005ef4 <cdcDataIn+0x28>)
 8005ed0:	6813      	ldr	r3, [r2, #0]
 8005ed2:	54c8      	strb	r0, [r1, r3]
  next_rx_head =(rx_head +1)% rx_len;
 8005ed4:	4908      	ldr	r1, [pc, #32]	; (8005ef8 <cdcDataIn+0x2c>)
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	6809      	ldr	r1, [r1, #0]
 8005eda:	fbb3 f0f1 	udiv	r0, r3, r1
 8005ede:	fb01 3310 	mls	r3, r1, r0, r3
  if (next_rx_head != rx_tail)
 8005ee2:	4906      	ldr	r1, [pc, #24]	; (8005efc <cdcDataIn+0x30>)
}
 8005ee4:	2000      	movs	r0, #0
  if (next_rx_head != rx_tail)
 8005ee6:	6809      	ldr	r1, [r1, #0]
 8005ee8:	4299      	cmp	r1, r3
      rx_head = next_rx_head;
 8005eea:	bf18      	it	ne
 8005eec:	6013      	strne	r3, [r2, #0]
}
 8005eee:	4770      	bx	lr
 8005ef0:	200010d4 	.word	0x200010d4
 8005ef4:	20000fd0 	.word	0x20000fd0
 8005ef8:	2000017c 	.word	0x2000017c
 8005efc:	200010d8 	.word	0x200010d8

08005f00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	4605      	mov	r5, r0
 8005f04:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */


  for (int i=0; i<*Len ; i++)
 8005f06:	2400      	movs	r4, #0
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	d810      	bhi.n	8005f30 <CDC_Receive_FS+0x30>
      cdcDataIn(Buf[i]);
    }

  uint32_t buf_len;

  buf_len = ( rx_len - cdcAvailable() ) -1; //-1 : ?��?�� ?��?�� ?��칸을 비워?���????
 8005f0e:	4b0d      	ldr	r3, [pc, #52]	; (8005f44 <CDC_Receive_FS+0x44>)
 8005f10:	681c      	ldr	r4, [r3, #0]
 8005f12:	f7ff ffc9 	bl	8005ea8 <cdcAvailable>
 8005f16:	3c01      	subs	r4, #1
 8005f18:	1a24      	subs	r4, r4, r0
  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8005f1a:	2c3f      	cmp	r4, #63	; 0x3f
 8005f1c:	d90d      	bls.n	8005f3a <CDC_Receive_FS+0x3a>
    {
      //?��?��?��?��?��?�� 보내�????
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f1e:	4629      	mov	r1, r5
 8005f20:	4809      	ldr	r0, [pc, #36]	; (8005f48 <CDC_Receive_FS+0x48>)
 8005f22:	f7ff fb7f 	bl	8005624 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005f26:	4808      	ldr	r0, [pc, #32]	; (8005f48 <CDC_Receive_FS+0x48>)
 8005f28:	f7ff fb9b 	bl	8005662 <USBD_CDC_ReceivePacket>
      rx_full = true;
    }

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
      cdcDataIn(Buf[i]);
 8005f30:	5d28      	ldrb	r0, [r5, r4]
 8005f32:	f7ff ffcb 	bl	8005ecc <cdcDataIn>
  for (int i=0; i<*Len ; i++)
 8005f36:	3401      	adds	r4, #1
 8005f38:	e7e6      	b.n	8005f08 <CDC_Receive_FS+0x8>
      rx_full = true;
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4b03      	ldr	r3, [pc, #12]	; (8005f4c <CDC_Receive_FS+0x4c>)
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e7f4      	b.n	8005f2c <CDC_Receive_FS+0x2c>
 8005f42:	bf00      	nop
 8005f44:	2000017c 	.word	0x2000017c
 8005f48:	2000090c 	.word	0x2000090c
 8005f4c:	200010d0 	.word	0x200010d0

08005f50 <cdcRead>:
{
 8005f50:	b510      	push	{r4, lr}
  ret = rx_buf[rx_tail];
 8005f52:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <cdcRead+0x24>)
 8005f54:	4908      	ldr	r1, [pc, #32]	; (8005f78 <cdcRead+0x28>)
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	5cc8      	ldrb	r0, [r1, r3]
  if (rx_head != rx_tail)
 8005f5a:	4908      	ldr	r1, [pc, #32]	; (8005f7c <cdcRead+0x2c>)
 8005f5c:	6809      	ldr	r1, [r1, #0]
 8005f5e:	428b      	cmp	r3, r1
 8005f60:	d007      	beq.n	8005f72 <cdcRead+0x22>
      rx_tail = (rx_tail + 1) % rx_len;
 8005f62:	4907      	ldr	r1, [pc, #28]	; (8005f80 <cdcRead+0x30>)
 8005f64:	3301      	adds	r3, #1
 8005f66:	6809      	ldr	r1, [r1, #0]
 8005f68:	fbb3 f4f1 	udiv	r4, r3, r1
 8005f6c:	fb01 3314 	mls	r3, r1, r4, r3
 8005f70:	6013      	str	r3, [r2, #0]
}
 8005f72:	bd10      	pop	{r4, pc}
 8005f74:	200010d8 	.word	0x200010d8
 8005f78:	20000fd0 	.word	0x20000fd0
 8005f7c:	200010d4 	.word	0x200010d4
 8005f80:	2000017c 	.word	0x2000017c

08005f84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005f84:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005f86:	4c09      	ldr	r4, [pc, #36]	; (8005fac <CDC_Transmit_FS+0x28>)
{
 8005f88:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005f8a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8005f8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f92:	b943      	cbnz	r3, 8005fa6 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005f94:	4601      	mov	r1, r0
 8005f96:	4620      	mov	r0, r4
 8005f98:	f7ff fb3c 	bl	8005614 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005f9c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8005f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005fa2:	f7ff bb45 	b.w	8005630 <USBD_CDC_TransmitPacket>
}
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	bf00      	nop
 8005fac:	2000090c 	.word	0x2000090c

08005fb0 <cdcWrite>:
{
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4606      	mov	r6, r0
  pre_time = millis();
 8005fb6:	f7fa fee1 	bl	8000d7c <millis>
 8005fba:	4605      	mov	r5, r0
      ret= CDC_Transmit_FS(p_data, length);
 8005fbc:	b2a7      	uxth	r7, r4
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f7ff ffdf 	bl	8005f84 <CDC_Transmit_FS>
      if (ret == USBD_OK)
 8005fc6:	b908      	cbnz	r0, 8005fcc <cdcWrite+0x1c>
          return length;
 8005fc8:	b2e0      	uxtb	r0, r4
}
 8005fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (ret == USBD_FAIL)
 8005fcc:	2802      	cmp	r0, #2
 8005fce:	d004      	beq.n	8005fda <cdcWrite+0x2a>
      if (millis()- pre_time  >=100)
 8005fd0:	f7fa fed4 	bl	8000d7c <millis>
 8005fd4:	1b43      	subs	r3, r0, r5
 8005fd6:	2b63      	cmp	r3, #99	; 0x63
 8005fd8:	d9f1      	bls.n	8005fbe <cdcWrite+0xe>
          return 0;
 8005fda:	2000      	movs	r0, #0
 8005fdc:	e7f5      	b.n	8005fca <cdcWrite+0x1a>
	...

08005fe0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fe0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005fe2:	4801      	ldr	r0, [pc, #4]	; (8005fe8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fe4:	800b      	strh	r3, [r1, #0]
}
 8005fe6:	4770      	bx	lr
 8005fe8:	2000019c 	.word	0x2000019c

08005fec <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005fec:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005fee:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005ff0:	800b      	strh	r3, [r1, #0]
}
 8005ff2:	4770      	bx	lr
 8005ff4:	200001b0 	.word	0x200001b0

08005ff8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005ffc:	461e      	mov	r6, r3
 8005ffe:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8006000:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8006002:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8006006:	bf34      	ite	cc
 8006008:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800600a:	3437      	addcs	r4, #55	; 0x37
 800600c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8006010:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8006014:	3301      	adds	r3, #1
 8006016:	b2dc      	uxtb	r4, r3
 8006018:	42a2      	cmp	r2, r4
    value = value << 4;
 800601a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800601e:	d8ef      	bhi.n	8006000 <IntToUnicode+0x8>
  }
}
 8006020:	bd70      	pop	{r4, r5, r6, pc}
	...

08006024 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006024:	231a      	movs	r3, #26
{
 8006026:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006028:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <USBD_FS_SerialStrDescriptor+0x30>)
 800602c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8006030:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8006034:	1880      	adds	r0, r0, r2
 8006036:	d00a      	beq.n	800604e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006038:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800603c:	4906      	ldr	r1, [pc, #24]	; (8006058 <USBD_FS_SerialStrDescriptor+0x34>)
 800603e:	2208      	movs	r2, #8
 8006040:	f7ff ffda 	bl	8005ff8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006044:	2204      	movs	r2, #4
 8006046:	4620      	mov	r0, r4
 8006048:	3110      	adds	r1, #16
 800604a:	f7ff ffd5 	bl	8005ff8 <IntToUnicode>
}
 800604e:	4803      	ldr	r0, [pc, #12]	; (800605c <USBD_FS_SerialStrDescriptor+0x38>)
 8006050:	bd10      	pop	{r4, pc}
 8006052:	bf00      	nop
 8006054:	1ffff000 	.word	0x1ffff000
 8006058:	200001b6 	.word	0x200001b6
 800605c:	200001b4 	.word	0x200001b4

08006060 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006060:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006062:	4c04      	ldr	r4, [pc, #16]	; (8006074 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8006064:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006066:	4804      	ldr	r0, [pc, #16]	; (8006078 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006068:	4621      	mov	r1, r4
 800606a:	f7ff fe52 	bl	8005d12 <USBD_GetString>
}
 800606e:	4620      	mov	r0, r4
 8006070:	bd10      	pop	{r4, pc}
 8006072:	bf00      	nop
 8006074:	200010dc 	.word	0x200010dc
 8006078:	0800ab16 	.word	0x0800ab16

0800607c <USBD_FS_ProductStrDescriptor>:
{
 800607c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800607e:	4c04      	ldr	r4, [pc, #16]	; (8006090 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006080:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006082:	4804      	ldr	r0, [pc, #16]	; (8006094 <USBD_FS_ProductStrDescriptor+0x18>)
 8006084:	4621      	mov	r1, r4
 8006086:	f7ff fe44 	bl	8005d12 <USBD_GetString>
}
 800608a:	4620      	mov	r0, r4
 800608c:	bd10      	pop	{r4, pc}
 800608e:	bf00      	nop
 8006090:	200010dc 	.word	0x200010dc
 8006094:	0800ab29 	.word	0x0800ab29

08006098 <USBD_FS_ConfigStrDescriptor>:
{
 8006098:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800609a:	4c04      	ldr	r4, [pc, #16]	; (80060ac <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800609c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800609e:	4804      	ldr	r0, [pc, #16]	; (80060b0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80060a0:	4621      	mov	r1, r4
 80060a2:	f7ff fe36 	bl	8005d12 <USBD_GetString>
}
 80060a6:	4620      	mov	r0, r4
 80060a8:	bd10      	pop	{r4, pc}
 80060aa:	bf00      	nop
 80060ac:	200010dc 	.word	0x200010dc
 80060b0:	0800ab3f 	.word	0x0800ab3f

080060b4 <USBD_FS_InterfaceStrDescriptor>:
{
 80060b4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060b6:	4c04      	ldr	r4, [pc, #16]	; (80060c8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80060b8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060ba:	4804      	ldr	r0, [pc, #16]	; (80060cc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80060bc:	4621      	mov	r1, r4
 80060be:	f7ff fe28 	bl	8005d12 <USBD_GetString>
}
 80060c2:	4620      	mov	r0, r4
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	bf00      	nop
 80060c8:	200010dc 	.word	0x200010dc
 80060cc:	0800ab4a 	.word	0x0800ab4a

080060d0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80060d0:	2803      	cmp	r0, #3
 80060d2:	bf9a      	itte	ls
 80060d4:	4b01      	ldrls	r3, [pc, #4]	; (80060dc <USBD_Get_USB_Status+0xc>)
 80060d6:	5c18      	ldrbls	r0, [r3, r0]
{
 80060d8:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80060da:	4770      	bx	lr
 80060dc:	0800ab58 	.word	0x0800ab58

080060e0 <HAL_PCD_MspInit>:
{
 80060e0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80060e2:	4b0e      	ldr	r3, [pc, #56]	; (800611c <HAL_PCD_MspInit+0x3c>)
 80060e4:	6802      	ldr	r2, [r0, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d115      	bne.n	8006116 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 80060ea:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80060ee:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060f0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80060f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80060f6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060f8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80060fa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060fc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80060fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006106:	f7fc fadd 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800610a:	2014      	movs	r0, #20
}
 800610c:	b003      	add	sp, #12
 800610e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006112:	f7fc bb09 	b.w	8002728 <HAL_NVIC_EnableIRQ>
}
 8006116:	b003      	add	sp, #12
 8006118:	f85d fb04 	ldr.w	pc, [sp], #4
 800611c:	40005c00 	.word	0x40005c00

08006120 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006120:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8006124:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8006128:	f7ff bae5 	b.w	80056f6 <USBD_LL_SetupStage>

0800612c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800612c:	2328      	movs	r3, #40	; 0x28
 800612e:	fb03 0301 	mla	r3, r3, r1, r0
 8006132:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8006136:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800613a:	f7ff bb09 	b.w	8005750 <USBD_LL_DataOutStage>

0800613e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800613e:	2328      	movs	r3, #40	; 0x28
 8006140:	fb03 0301 	mla	r3, r3, r1, r0
 8006144:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8006148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800614a:	f7ff bb3b 	b.w	80057c4 <USBD_LL_DataInStage>

0800614e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800614e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8006152:	f7ff bbcf 	b.w	80058f4 <USBD_LL_SOF>

08006156 <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006156:	6883      	ldr	r3, [r0, #8]
{
 8006158:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800615a:	2b02      	cmp	r3, #2
{
 800615c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800615e:	d001      	beq.n	8006164 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8006160:	f7fa fe8e 	bl	8000e80 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006164:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8006168:	2101      	movs	r1, #1
 800616a:	f7ff fbad 	bl	80058c8 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800616e:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 8006172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006176:	f7ff bb80 	b.w	800587a <USBD_LL_Reset>
	...

0800617c <HAL_PCD_SuspendCallback>:
{
 800617c:	b510      	push	{r4, lr}
 800617e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006180:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8006184:	f7ff fba3 	bl	80058ce <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006188:	69a3      	ldr	r3, [r4, #24]
 800618a:	b123      	cbz	r3, 8006196 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800618c:	4a02      	ldr	r2, [pc, #8]	; (8006198 <HAL_PCD_SuspendCallback+0x1c>)
 800618e:	6913      	ldr	r3, [r2, #16]
 8006190:	f043 0306 	orr.w	r3, r3, #6
 8006194:	6113      	str	r3, [r2, #16]
}
 8006196:	bd10      	pop	{r4, pc}
 8006198:	e000ed00 	.word	0xe000ed00

0800619c <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800619c:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80061a0:	f7ff bb9e 	b.w	80058e0 <USBD_LL_Resume>

080061a4 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80061a4:	2308      	movs	r3, #8
{
 80061a6:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80061a8:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <USBD_LL_Init+0x7c>)
{
 80061aa:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80061ac:	481d      	ldr	r0, [pc, #116]	; (8006224 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80061ae:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80061b2:	2302      	movs	r3, #2
 80061b4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80061b6:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80061b8:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80061bc:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80061c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80061c4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80061c6:	f7fc fdd7 	bl	8002d78 <HAL_PCD_Init>
 80061ca:	b108      	cbz	r0, 80061d0 <USBD_LL_Init+0x2c>
    Error_Handler( );
 80061cc:	f7fa fe58 	bl	8000e80 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80061d0:	2200      	movs	r2, #0
 80061d2:	2318      	movs	r3, #24
 80061d4:	4611      	mov	r1, r2
 80061d6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80061da:	f7fd fc46 	bl	8003a6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80061de:	2358      	movs	r3, #88	; 0x58
 80061e0:	2200      	movs	r2, #0
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80061e8:	f7fd fc3f 	bl	8003a6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80061ec:	23c0      	movs	r3, #192	; 0xc0
 80061ee:	2200      	movs	r2, #0
 80061f0:	2181      	movs	r1, #129	; 0x81
 80061f2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80061f6:	f7fd fc38 	bl	8003a6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80061fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80061fe:	2200      	movs	r2, #0
 8006200:	2101      	movs	r1, #1
 8006202:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006206:	f7fd fc30 	bl	8003a6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800620a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800620e:	2200      	movs	r2, #0
 8006210:	2182      	movs	r1, #130	; 0x82
 8006212:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006216:	f7fd fc28 	bl	8003a6a <HAL_PCDEx_PMAConfig>
}
 800621a:	2000      	movs	r0, #0
 800621c:	bd10      	pop	{r4, pc}
 800621e:	bf00      	nop
 8006220:	40005c00 	.word	0x40005c00
 8006224:	200012dc 	.word	0x200012dc

08006228 <USBD_LL_Start>:
{
 8006228:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800622a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800622e:	f7fc fe1b 	bl	8002e68 <HAL_PCD_Start>
}
 8006232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006236:	f7ff bf4b 	b.w	80060d0 <USBD_Get_USB_Status>

0800623a <USBD_LL_OpenEP>:
{
 800623a:	b510      	push	{r4, lr}
 800623c:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800623e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8006242:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006244:	4623      	mov	r3, r4
 8006246:	f7fd fb1b 	bl	8003880 <HAL_PCD_EP_Open>
}
 800624a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800624e:	f7ff bf3f 	b.w	80060d0 <USBD_Get_USB_Status>

08006252 <USBD_LL_CloseEP>:
{
 8006252:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006254:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006258:	f7fd fb41 	bl	80038de <HAL_PCD_EP_Close>
}
 800625c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006260:	f7ff bf36 	b.w	80060d0 <USBD_Get_USB_Status>

08006264 <USBD_LL_StallEP>:
{
 8006264:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006266:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800626a:	f7fd fb99 	bl	80039a0 <HAL_PCD_EP_SetStall>
}
 800626e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006272:	f7ff bf2d 	b.w	80060d0 <USBD_Get_USB_Status>

08006276 <USBD_LL_ClearStallEP>:
{
 8006276:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006278:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800627c:	f7fd fbc4 	bl	8003a08 <HAL_PCD_EP_ClrStall>
}
 8006280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006284:	f7ff bf24 	b.w	80060d0 <USBD_Get_USB_Status>

08006288 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006288:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 800628a:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800628e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006292:	bf1b      	ittet	ne
 8006294:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8006298:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800629c:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80062a0:	185b      	addne	r3, r3, r1
 80062a2:	bf14      	ite	ne
 80062a4:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80062a6:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 80062aa:	4770      	bx	lr

080062ac <USBD_LL_SetUSBAddress>:
{
 80062ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062b2:	f7fc fdf2 	bl	8002e9a <HAL_PCD_SetAddress>
}
 80062b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80062ba:	f7ff bf09 	b.w	80060d0 <USBD_Get_USB_Status>

080062be <USBD_LL_Transmit>:
{
 80062be:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062c0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062c4:	f7fd fb52 	bl	800396c <HAL_PCD_EP_Transmit>
}
 80062c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80062cc:	f7ff bf00 	b.w	80060d0 <USBD_Get_USB_Status>

080062d0 <USBD_LL_PrepareReceive>:
{
 80062d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80062d2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062d6:	f7fd fb2a 	bl	800392e <HAL_PCD_EP_Receive>
}
 80062da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80062de:	f7ff bef7 	b.w	80060d0 <USBD_Get_USB_Status>

080062e2 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80062e2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062e6:	f7fd bb39 	b.w	800395c <HAL_PCD_EP_GetRxCount>
	...

080062ec <USBD_static_malloc>:
}
 80062ec:	4800      	ldr	r0, [pc, #0]	; (80062f0 <USBD_static_malloc+0x4>)
 80062ee:	4770      	bx	lr
 80062f0:	200015cc 	.word	0x200015cc

080062f4 <USBD_static_free>:
}
 80062f4:	4770      	bx	lr

080062f6 <HAL_PCDEx_SetConnectionState>:
}
 80062f6:	4770      	bx	lr

080062f8 <main>:

#include "main.h"


int main(void)
{
 80062f8:	b508      	push	{r3, lr}
  hwInit();
 80062fa:	f7fb ff11 	bl	8002120 <hwInit>
  apInit();
 80062fe:	f7fa fd01 	bl	8000d04 <apInit>
  apMain();
 8006302:	f7fa fd0d 	bl	8000d20 <apMain>
  return 0;
}
 8006306:	2000      	movs	r0, #0
 8006308:	bd08      	pop	{r3, pc}
	...

0800630c <__errno>:
 800630c:	4b01      	ldr	r3, [pc, #4]	; (8006314 <__errno+0x8>)
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	200001d0 	.word	0x200001d0

08006318 <__libc_init_array>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	2600      	movs	r6, #0
 800631c:	4d0c      	ldr	r5, [pc, #48]	; (8006350 <__libc_init_array+0x38>)
 800631e:	4c0d      	ldr	r4, [pc, #52]	; (8006354 <__libc_init_array+0x3c>)
 8006320:	1b64      	subs	r4, r4, r5
 8006322:	10a4      	asrs	r4, r4, #2
 8006324:	42a6      	cmp	r6, r4
 8006326:	d109      	bne.n	800633c <__libc_init_array+0x24>
 8006328:	f004 fada 	bl	800a8e0 <_init>
 800632c:	2600      	movs	r6, #0
 800632e:	4d0a      	ldr	r5, [pc, #40]	; (8006358 <__libc_init_array+0x40>)
 8006330:	4c0a      	ldr	r4, [pc, #40]	; (800635c <__libc_init_array+0x44>)
 8006332:	1b64      	subs	r4, r4, r5
 8006334:	10a4      	asrs	r4, r4, #2
 8006336:	42a6      	cmp	r6, r4
 8006338:	d105      	bne.n	8006346 <__libc_init_array+0x2e>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006340:	4798      	blx	r3
 8006342:	3601      	adds	r6, #1
 8006344:	e7ee      	b.n	8006324 <__libc_init_array+0xc>
 8006346:	f855 3b04 	ldr.w	r3, [r5], #4
 800634a:	4798      	blx	r3
 800634c:	3601      	adds	r6, #1
 800634e:	e7f2      	b.n	8006336 <__libc_init_array+0x1e>
 8006350:	0800affc 	.word	0x0800affc
 8006354:	0800affc 	.word	0x0800affc
 8006358:	0800affc 	.word	0x0800affc
 800635c:	0800b000 	.word	0x0800b000

08006360 <memmove>:
 8006360:	4288      	cmp	r0, r1
 8006362:	b510      	push	{r4, lr}
 8006364:	eb01 0402 	add.w	r4, r1, r2
 8006368:	d902      	bls.n	8006370 <memmove+0x10>
 800636a:	4284      	cmp	r4, r0
 800636c:	4623      	mov	r3, r4
 800636e:	d807      	bhi.n	8006380 <memmove+0x20>
 8006370:	1e43      	subs	r3, r0, #1
 8006372:	42a1      	cmp	r1, r4
 8006374:	d008      	beq.n	8006388 <memmove+0x28>
 8006376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800637a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800637e:	e7f8      	b.n	8006372 <memmove+0x12>
 8006380:	4601      	mov	r1, r0
 8006382:	4402      	add	r2, r0
 8006384:	428a      	cmp	r2, r1
 8006386:	d100      	bne.n	800638a <memmove+0x2a>
 8006388:	bd10      	pop	{r4, pc}
 800638a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800638e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006392:	e7f7      	b.n	8006384 <memmove+0x24>

08006394 <memset>:
 8006394:	4603      	mov	r3, r0
 8006396:	4402      	add	r2, r0
 8006398:	4293      	cmp	r3, r2
 800639a:	d100      	bne.n	800639e <memset+0xa>
 800639c:	4770      	bx	lr
 800639e:	f803 1b01 	strb.w	r1, [r3], #1
 80063a2:	e7f9      	b.n	8006398 <memset+0x4>

080063a4 <__cvt>:
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063aa:	461f      	mov	r7, r3
 80063ac:	bfbb      	ittet	lt
 80063ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80063b2:	461f      	movlt	r7, r3
 80063b4:	2300      	movge	r3, #0
 80063b6:	232d      	movlt	r3, #45	; 0x2d
 80063b8:	b088      	sub	sp, #32
 80063ba:	4614      	mov	r4, r2
 80063bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80063c0:	7013      	strb	r3, [r2, #0]
 80063c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80063c8:	f023 0820 	bic.w	r8, r3, #32
 80063cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063d0:	d005      	beq.n	80063de <__cvt+0x3a>
 80063d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063d6:	d100      	bne.n	80063da <__cvt+0x36>
 80063d8:	3501      	adds	r5, #1
 80063da:	2302      	movs	r3, #2
 80063dc:	e000      	b.n	80063e0 <__cvt+0x3c>
 80063de:	2303      	movs	r3, #3
 80063e0:	aa07      	add	r2, sp, #28
 80063e2:	9204      	str	r2, [sp, #16]
 80063e4:	aa06      	add	r2, sp, #24
 80063e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80063ea:	e9cd 3500 	strd	r3, r5, [sp]
 80063ee:	4622      	mov	r2, r4
 80063f0:	463b      	mov	r3, r7
 80063f2:	f001 fc09 	bl	8007c08 <_dtoa_r>
 80063f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063fa:	4606      	mov	r6, r0
 80063fc:	d102      	bne.n	8006404 <__cvt+0x60>
 80063fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006400:	07db      	lsls	r3, r3, #31
 8006402:	d522      	bpl.n	800644a <__cvt+0xa6>
 8006404:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006408:	eb06 0905 	add.w	r9, r6, r5
 800640c:	d110      	bne.n	8006430 <__cvt+0x8c>
 800640e:	7833      	ldrb	r3, [r6, #0]
 8006410:	2b30      	cmp	r3, #48	; 0x30
 8006412:	d10a      	bne.n	800642a <__cvt+0x86>
 8006414:	2200      	movs	r2, #0
 8006416:	2300      	movs	r3, #0
 8006418:	4620      	mov	r0, r4
 800641a:	4639      	mov	r1, r7
 800641c:	f7fa face 	bl	80009bc <__aeabi_dcmpeq>
 8006420:	b918      	cbnz	r0, 800642a <__cvt+0x86>
 8006422:	f1c5 0501 	rsb	r5, r5, #1
 8006426:	f8ca 5000 	str.w	r5, [sl]
 800642a:	f8da 3000 	ldr.w	r3, [sl]
 800642e:	4499      	add	r9, r3
 8006430:	2200      	movs	r2, #0
 8006432:	2300      	movs	r3, #0
 8006434:	4620      	mov	r0, r4
 8006436:	4639      	mov	r1, r7
 8006438:	f7fa fac0 	bl	80009bc <__aeabi_dcmpeq>
 800643c:	b108      	cbz	r0, 8006442 <__cvt+0x9e>
 800643e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006442:	2230      	movs	r2, #48	; 0x30
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	454b      	cmp	r3, r9
 8006448:	d307      	bcc.n	800645a <__cvt+0xb6>
 800644a:	4630      	mov	r0, r6
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006450:	1b9b      	subs	r3, r3, r6
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	b008      	add	sp, #32
 8006456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645a:	1c59      	adds	r1, r3, #1
 800645c:	9107      	str	r1, [sp, #28]
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e7f0      	b.n	8006444 <__cvt+0xa0>

08006462 <__exponent>:
 8006462:	4603      	mov	r3, r0
 8006464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006466:	2900      	cmp	r1, #0
 8006468:	f803 2b02 	strb.w	r2, [r3], #2
 800646c:	bfb6      	itet	lt
 800646e:	222d      	movlt	r2, #45	; 0x2d
 8006470:	222b      	movge	r2, #43	; 0x2b
 8006472:	4249      	neglt	r1, r1
 8006474:	2909      	cmp	r1, #9
 8006476:	7042      	strb	r2, [r0, #1]
 8006478:	dd2b      	ble.n	80064d2 <__exponent+0x70>
 800647a:	f10d 0407 	add.w	r4, sp, #7
 800647e:	46a4      	mov	ip, r4
 8006480:	270a      	movs	r7, #10
 8006482:	fb91 f6f7 	sdiv	r6, r1, r7
 8006486:	460a      	mov	r2, r1
 8006488:	46a6      	mov	lr, r4
 800648a:	fb07 1516 	mls	r5, r7, r6, r1
 800648e:	2a63      	cmp	r2, #99	; 0x63
 8006490:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006494:	4631      	mov	r1, r6
 8006496:	f104 34ff 	add.w	r4, r4, #4294967295
 800649a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800649e:	dcf0      	bgt.n	8006482 <__exponent+0x20>
 80064a0:	3130      	adds	r1, #48	; 0x30
 80064a2:	f1ae 0502 	sub.w	r5, lr, #2
 80064a6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064aa:	4629      	mov	r1, r5
 80064ac:	1c44      	adds	r4, r0, #1
 80064ae:	4561      	cmp	r1, ip
 80064b0:	d30a      	bcc.n	80064c8 <__exponent+0x66>
 80064b2:	f10d 0209 	add.w	r2, sp, #9
 80064b6:	eba2 020e 	sub.w	r2, r2, lr
 80064ba:	4565      	cmp	r5, ip
 80064bc:	bf88      	it	hi
 80064be:	2200      	movhi	r2, #0
 80064c0:	4413      	add	r3, r2
 80064c2:	1a18      	subs	r0, r3, r0
 80064c4:	b003      	add	sp, #12
 80064c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064cc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064d0:	e7ed      	b.n	80064ae <__exponent+0x4c>
 80064d2:	2330      	movs	r3, #48	; 0x30
 80064d4:	3130      	adds	r1, #48	; 0x30
 80064d6:	7083      	strb	r3, [r0, #2]
 80064d8:	70c1      	strb	r1, [r0, #3]
 80064da:	1d03      	adds	r3, r0, #4
 80064dc:	e7f1      	b.n	80064c2 <__exponent+0x60>
	...

080064e0 <_printf_float>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	b091      	sub	sp, #68	; 0x44
 80064e6:	460c      	mov	r4, r1
 80064e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80064ec:	4616      	mov	r6, r2
 80064ee:	461f      	mov	r7, r3
 80064f0:	4605      	mov	r5, r0
 80064f2:	f002 fcdd 	bl	8008eb0 <_localeconv_r>
 80064f6:	6803      	ldr	r3, [r0, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	9309      	str	r3, [sp, #36]	; 0x24
 80064fc:	f7f9 fe32 	bl	8000164 <strlen>
 8006500:	2300      	movs	r3, #0
 8006502:	930e      	str	r3, [sp, #56]	; 0x38
 8006504:	f8d8 3000 	ldr.w	r3, [r8]
 8006508:	900a      	str	r0, [sp, #40]	; 0x28
 800650a:	3307      	adds	r3, #7
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	f103 0208 	add.w	r2, r3, #8
 8006514:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006518:	f8d4 b000 	ldr.w	fp, [r4]
 800651c:	f8c8 2000 	str.w	r2, [r8]
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006528:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800652c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006530:	930b      	str	r3, [sp, #44]	; 0x2c
 8006532:	f04f 32ff 	mov.w	r2, #4294967295
 8006536:	4640      	mov	r0, r8
 8006538:	4b9c      	ldr	r3, [pc, #624]	; (80067ac <_printf_float+0x2cc>)
 800653a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800653c:	f7fa fa70 	bl	8000a20 <__aeabi_dcmpun>
 8006540:	bb70      	cbnz	r0, 80065a0 <_printf_float+0xc0>
 8006542:	f04f 32ff 	mov.w	r2, #4294967295
 8006546:	4640      	mov	r0, r8
 8006548:	4b98      	ldr	r3, [pc, #608]	; (80067ac <_printf_float+0x2cc>)
 800654a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800654c:	f7fa fa4a 	bl	80009e4 <__aeabi_dcmple>
 8006550:	bb30      	cbnz	r0, 80065a0 <_printf_float+0xc0>
 8006552:	2200      	movs	r2, #0
 8006554:	2300      	movs	r3, #0
 8006556:	4640      	mov	r0, r8
 8006558:	4651      	mov	r1, sl
 800655a:	f7fa fa39 	bl	80009d0 <__aeabi_dcmplt>
 800655e:	b110      	cbz	r0, 8006566 <_printf_float+0x86>
 8006560:	232d      	movs	r3, #45	; 0x2d
 8006562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006566:	4b92      	ldr	r3, [pc, #584]	; (80067b0 <_printf_float+0x2d0>)
 8006568:	4892      	ldr	r0, [pc, #584]	; (80067b4 <_printf_float+0x2d4>)
 800656a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800656e:	bf94      	ite	ls
 8006570:	4698      	movls	r8, r3
 8006572:	4680      	movhi	r8, r0
 8006574:	2303      	movs	r3, #3
 8006576:	f04f 0a00 	mov.w	sl, #0
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	f02b 0304 	bic.w	r3, fp, #4
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	4633      	mov	r3, r6
 8006584:	4621      	mov	r1, r4
 8006586:	4628      	mov	r0, r5
 8006588:	9700      	str	r7, [sp, #0]
 800658a:	aa0f      	add	r2, sp, #60	; 0x3c
 800658c:	f000 f9d4 	bl	8006938 <_printf_common>
 8006590:	3001      	adds	r0, #1
 8006592:	f040 8090 	bne.w	80066b6 <_printf_float+0x1d6>
 8006596:	f04f 30ff 	mov.w	r0, #4294967295
 800659a:	b011      	add	sp, #68	; 0x44
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a0:	4642      	mov	r2, r8
 80065a2:	4653      	mov	r3, sl
 80065a4:	4640      	mov	r0, r8
 80065a6:	4651      	mov	r1, sl
 80065a8:	f7fa fa3a 	bl	8000a20 <__aeabi_dcmpun>
 80065ac:	b148      	cbz	r0, 80065c2 <_printf_float+0xe2>
 80065ae:	f1ba 0f00 	cmp.w	sl, #0
 80065b2:	bfb8      	it	lt
 80065b4:	232d      	movlt	r3, #45	; 0x2d
 80065b6:	4880      	ldr	r0, [pc, #512]	; (80067b8 <_printf_float+0x2d8>)
 80065b8:	bfb8      	it	lt
 80065ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065be:	4b7f      	ldr	r3, [pc, #508]	; (80067bc <_printf_float+0x2dc>)
 80065c0:	e7d3      	b.n	800656a <_printf_float+0x8a>
 80065c2:	6863      	ldr	r3, [r4, #4]
 80065c4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	d142      	bne.n	8006652 <_printf_float+0x172>
 80065cc:	2306      	movs	r3, #6
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	9206      	str	r2, [sp, #24]
 80065d4:	aa0e      	add	r2, sp, #56	; 0x38
 80065d6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80065da:	aa0d      	add	r2, sp, #52	; 0x34
 80065dc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80065e0:	9203      	str	r2, [sp, #12]
 80065e2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80065e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80065ea:	6023      	str	r3, [r4, #0]
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	4642      	mov	r2, r8
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	4628      	mov	r0, r5
 80065f4:	4653      	mov	r3, sl
 80065f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80065f8:	f7ff fed4 	bl	80063a4 <__cvt>
 80065fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065fe:	4680      	mov	r8, r0
 8006600:	2947      	cmp	r1, #71	; 0x47
 8006602:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006604:	d108      	bne.n	8006618 <_printf_float+0x138>
 8006606:	1cc8      	adds	r0, r1, #3
 8006608:	db02      	blt.n	8006610 <_printf_float+0x130>
 800660a:	6863      	ldr	r3, [r4, #4]
 800660c:	4299      	cmp	r1, r3
 800660e:	dd40      	ble.n	8006692 <_printf_float+0x1b2>
 8006610:	f1a9 0902 	sub.w	r9, r9, #2
 8006614:	fa5f f989 	uxtb.w	r9, r9
 8006618:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800661c:	d81f      	bhi.n	800665e <_printf_float+0x17e>
 800661e:	464a      	mov	r2, r9
 8006620:	3901      	subs	r1, #1
 8006622:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006626:	910d      	str	r1, [sp, #52]	; 0x34
 8006628:	f7ff ff1b 	bl	8006462 <__exponent>
 800662c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800662e:	4682      	mov	sl, r0
 8006630:	1813      	adds	r3, r2, r0
 8006632:	2a01      	cmp	r2, #1
 8006634:	6123      	str	r3, [r4, #16]
 8006636:	dc02      	bgt.n	800663e <_printf_float+0x15e>
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	07d2      	lsls	r2, r2, #31
 800663c:	d501      	bpl.n	8006642 <_printf_float+0x162>
 800663e:	3301      	adds	r3, #1
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006646:	2b00      	cmp	r3, #0
 8006648:	d09b      	beq.n	8006582 <_printf_float+0xa2>
 800664a:	232d      	movs	r3, #45	; 0x2d
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006650:	e797      	b.n	8006582 <_printf_float+0xa2>
 8006652:	2947      	cmp	r1, #71	; 0x47
 8006654:	d1bc      	bne.n	80065d0 <_printf_float+0xf0>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1ba      	bne.n	80065d0 <_printf_float+0xf0>
 800665a:	2301      	movs	r3, #1
 800665c:	e7b7      	b.n	80065ce <_printf_float+0xee>
 800665e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006662:	d118      	bne.n	8006696 <_printf_float+0x1b6>
 8006664:	2900      	cmp	r1, #0
 8006666:	6863      	ldr	r3, [r4, #4]
 8006668:	dd0b      	ble.n	8006682 <_printf_float+0x1a2>
 800666a:	6121      	str	r1, [r4, #16]
 800666c:	b913      	cbnz	r3, 8006674 <_printf_float+0x194>
 800666e:	6822      	ldr	r2, [r4, #0]
 8006670:	07d0      	lsls	r0, r2, #31
 8006672:	d502      	bpl.n	800667a <_printf_float+0x19a>
 8006674:	3301      	adds	r3, #1
 8006676:	440b      	add	r3, r1
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	f04f 0a00 	mov.w	sl, #0
 800667e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006680:	e7df      	b.n	8006642 <_printf_float+0x162>
 8006682:	b913      	cbnz	r3, 800668a <_printf_float+0x1aa>
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	07d2      	lsls	r2, r2, #31
 8006688:	d501      	bpl.n	800668e <_printf_float+0x1ae>
 800668a:	3302      	adds	r3, #2
 800668c:	e7f4      	b.n	8006678 <_printf_float+0x198>
 800668e:	2301      	movs	r3, #1
 8006690:	e7f2      	b.n	8006678 <_printf_float+0x198>
 8006692:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006698:	4299      	cmp	r1, r3
 800669a:	db05      	blt.n	80066a8 <_printf_float+0x1c8>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	6121      	str	r1, [r4, #16]
 80066a0:	07d8      	lsls	r0, r3, #31
 80066a2:	d5ea      	bpl.n	800667a <_printf_float+0x19a>
 80066a4:	1c4b      	adds	r3, r1, #1
 80066a6:	e7e7      	b.n	8006678 <_printf_float+0x198>
 80066a8:	2900      	cmp	r1, #0
 80066aa:	bfcc      	ite	gt
 80066ac:	2201      	movgt	r2, #1
 80066ae:	f1c1 0202 	rsble	r2, r1, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	e7e0      	b.n	8006678 <_printf_float+0x198>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	055a      	lsls	r2, r3, #21
 80066ba:	d407      	bmi.n	80066cc <_printf_float+0x1ec>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	4642      	mov	r2, r8
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	d12b      	bne.n	8006722 <_printf_float+0x242>
 80066ca:	e764      	b.n	8006596 <_printf_float+0xb6>
 80066cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066d0:	f240 80dd 	bls.w	800688e <_printf_float+0x3ae>
 80066d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	f7fa f96e 	bl	80009bc <__aeabi_dcmpeq>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d033      	beq.n	800674c <_printf_float+0x26c>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	4a35      	ldr	r2, [pc, #212]	; (80067c0 <_printf_float+0x2e0>)
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	f43f af51 	beq.w	8006596 <_printf_float+0xb6>
 80066f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066f8:	429a      	cmp	r2, r3
 80066fa:	db02      	blt.n	8006702 <_printf_float+0x222>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	07d8      	lsls	r0, r3, #31
 8006700:	d50f      	bpl.n	8006722 <_printf_float+0x242>
 8006702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f af42 	beq.w	8006596 <_printf_float+0xb6>
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	f104 091a 	add.w	r9, r4, #26
 800671a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800671c:	3b01      	subs	r3, #1
 800671e:	4543      	cmp	r3, r8
 8006720:	dc09      	bgt.n	8006736 <_printf_float+0x256>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	079b      	lsls	r3, r3, #30
 8006726:	f100 8102 	bmi.w	800692e <_printf_float+0x44e>
 800672a:	68e0      	ldr	r0, [r4, #12]
 800672c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800672e:	4298      	cmp	r0, r3
 8006730:	bfb8      	it	lt
 8006732:	4618      	movlt	r0, r3
 8006734:	e731      	b.n	800659a <_printf_float+0xba>
 8006736:	2301      	movs	r3, #1
 8006738:	464a      	mov	r2, r9
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f af28 	beq.w	8006596 <_printf_float+0xb6>
 8006746:	f108 0801 	add.w	r8, r8, #1
 800674a:	e7e6      	b.n	800671a <_printf_float+0x23a>
 800674c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800674e:	2b00      	cmp	r3, #0
 8006750:	dc38      	bgt.n	80067c4 <_printf_float+0x2e4>
 8006752:	2301      	movs	r3, #1
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	4a19      	ldr	r2, [pc, #100]	; (80067c0 <_printf_float+0x2e0>)
 800675a:	47b8      	blx	r7
 800675c:	3001      	adds	r0, #1
 800675e:	f43f af1a 	beq.w	8006596 <_printf_float+0xb6>
 8006762:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006766:	4313      	orrs	r3, r2
 8006768:	d102      	bne.n	8006770 <_printf_float+0x290>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	07d9      	lsls	r1, r3, #31
 800676e:	d5d8      	bpl.n	8006722 <_printf_float+0x242>
 8006770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af0b 	beq.w	8006596 <_printf_float+0xb6>
 8006780:	f04f 0900 	mov.w	r9, #0
 8006784:	f104 0a1a 	add.w	sl, r4, #26
 8006788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800678a:	425b      	negs	r3, r3
 800678c:	454b      	cmp	r3, r9
 800678e:	dc01      	bgt.n	8006794 <_printf_float+0x2b4>
 8006790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006792:	e794      	b.n	80066be <_printf_float+0x1de>
 8006794:	2301      	movs	r3, #1
 8006796:	4652      	mov	r2, sl
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f aef9 	beq.w	8006596 <_printf_float+0xb6>
 80067a4:	f109 0901 	add.w	r9, r9, #1
 80067a8:	e7ee      	b.n	8006788 <_printf_float+0x2a8>
 80067aa:	bf00      	nop
 80067ac:	7fefffff 	.word	0x7fefffff
 80067b0:	0800ab60 	.word	0x0800ab60
 80067b4:	0800ab64 	.word	0x0800ab64
 80067b8:	0800ab6c 	.word	0x0800ab6c
 80067bc:	0800ab68 	.word	0x0800ab68
 80067c0:	0800ab70 	.word	0x0800ab70
 80067c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067c8:	429a      	cmp	r2, r3
 80067ca:	bfa8      	it	ge
 80067cc:	461a      	movge	r2, r3
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	4691      	mov	r9, r2
 80067d2:	dc37      	bgt.n	8006844 <_printf_float+0x364>
 80067d4:	f04f 0b00 	mov.w	fp, #0
 80067d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067dc:	f104 021a 	add.w	r2, r4, #26
 80067e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80067e4:	ebaa 0309 	sub.w	r3, sl, r9
 80067e8:	455b      	cmp	r3, fp
 80067ea:	dc33      	bgt.n	8006854 <_printf_float+0x374>
 80067ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067f0:	429a      	cmp	r2, r3
 80067f2:	db3b      	blt.n	800686c <_printf_float+0x38c>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	07da      	lsls	r2, r3, #31
 80067f8:	d438      	bmi.n	800686c <_printf_float+0x38c>
 80067fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067fe:	eba3 020a 	sub.w	r2, r3, sl
 8006802:	eba3 0901 	sub.w	r9, r3, r1
 8006806:	4591      	cmp	r9, r2
 8006808:	bfa8      	it	ge
 800680a:	4691      	movge	r9, r2
 800680c:	f1b9 0f00 	cmp.w	r9, #0
 8006810:	dc34      	bgt.n	800687c <_printf_float+0x39c>
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800681a:	f104 0a1a 	add.w	sl, r4, #26
 800681e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	eba3 0309 	sub.w	r3, r3, r9
 8006828:	4543      	cmp	r3, r8
 800682a:	f77f af7a 	ble.w	8006722 <_printf_float+0x242>
 800682e:	2301      	movs	r3, #1
 8006830:	4652      	mov	r2, sl
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	f43f aeac 	beq.w	8006596 <_printf_float+0xb6>
 800683e:	f108 0801 	add.w	r8, r8, #1
 8006842:	e7ec      	b.n	800681e <_printf_float+0x33e>
 8006844:	4613      	mov	r3, r2
 8006846:	4631      	mov	r1, r6
 8006848:	4642      	mov	r2, r8
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	d1c0      	bne.n	80067d4 <_printf_float+0x2f4>
 8006852:	e6a0      	b.n	8006596 <_printf_float+0xb6>
 8006854:	2301      	movs	r3, #1
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	920b      	str	r2, [sp, #44]	; 0x2c
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f ae99 	beq.w	8006596 <_printf_float+0xb6>
 8006864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006866:	f10b 0b01 	add.w	fp, fp, #1
 800686a:	e7b9      	b.n	80067e0 <_printf_float+0x300>
 800686c:	4631      	mov	r1, r6
 800686e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	d1bf      	bne.n	80067fa <_printf_float+0x31a>
 800687a:	e68c      	b.n	8006596 <_printf_float+0xb6>
 800687c:	464b      	mov	r3, r9
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	eb08 020a 	add.w	r2, r8, sl
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	d1c2      	bne.n	8006812 <_printf_float+0x332>
 800688c:	e683      	b.n	8006596 <_printf_float+0xb6>
 800688e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006890:	2a01      	cmp	r2, #1
 8006892:	dc01      	bgt.n	8006898 <_printf_float+0x3b8>
 8006894:	07db      	lsls	r3, r3, #31
 8006896:	d537      	bpl.n	8006908 <_printf_float+0x428>
 8006898:	2301      	movs	r3, #1
 800689a:	4642      	mov	r2, r8
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	f43f ae77 	beq.w	8006596 <_printf_float+0xb6>
 80068a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f ae6f 	beq.w	8006596 <_printf_float+0xb6>
 80068b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	f7fa f87c 	bl	80009bc <__aeabi_dcmpeq>
 80068c4:	b9d8      	cbnz	r0, 80068fe <_printf_float+0x41e>
 80068c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c8:	f108 0201 	add.w	r2, r8, #1
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	d10e      	bne.n	80068f6 <_printf_float+0x416>
 80068d8:	e65d      	b.n	8006596 <_printf_float+0xb6>
 80068da:	2301      	movs	r3, #1
 80068dc:	464a      	mov	r2, r9
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f ae56 	beq.w	8006596 <_printf_float+0xb6>
 80068ea:	f108 0801 	add.w	r8, r8, #1
 80068ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f0:	3b01      	subs	r3, #1
 80068f2:	4543      	cmp	r3, r8
 80068f4:	dcf1      	bgt.n	80068da <_printf_float+0x3fa>
 80068f6:	4653      	mov	r3, sl
 80068f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068fc:	e6e0      	b.n	80066c0 <_printf_float+0x1e0>
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	f104 091a 	add.w	r9, r4, #26
 8006906:	e7f2      	b.n	80068ee <_printf_float+0x40e>
 8006908:	2301      	movs	r3, #1
 800690a:	4642      	mov	r2, r8
 800690c:	e7df      	b.n	80068ce <_printf_float+0x3ee>
 800690e:	2301      	movs	r3, #1
 8006910:	464a      	mov	r2, r9
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	f43f ae3c 	beq.w	8006596 <_printf_float+0xb6>
 800691e:	f108 0801 	add.w	r8, r8, #1
 8006922:	68e3      	ldr	r3, [r4, #12]
 8006924:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006926:	1a5b      	subs	r3, r3, r1
 8006928:	4543      	cmp	r3, r8
 800692a:	dcf0      	bgt.n	800690e <_printf_float+0x42e>
 800692c:	e6fd      	b.n	800672a <_printf_float+0x24a>
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	f104 0919 	add.w	r9, r4, #25
 8006936:	e7f4      	b.n	8006922 <_printf_float+0x442>

08006938 <_printf_common>:
 8006938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	4616      	mov	r6, r2
 800693e:	4699      	mov	r9, r3
 8006940:	688a      	ldr	r2, [r1, #8]
 8006942:	690b      	ldr	r3, [r1, #16]
 8006944:	4607      	mov	r7, r0
 8006946:	4293      	cmp	r3, r2
 8006948:	bfb8      	it	lt
 800694a:	4613      	movlt	r3, r2
 800694c:	6033      	str	r3, [r6, #0]
 800694e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006952:	460c      	mov	r4, r1
 8006954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006958:	b10a      	cbz	r2, 800695e <_printf_common+0x26>
 800695a:	3301      	adds	r3, #1
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	0699      	lsls	r1, r3, #26
 8006962:	bf42      	ittt	mi
 8006964:	6833      	ldrmi	r3, [r6, #0]
 8006966:	3302      	addmi	r3, #2
 8006968:	6033      	strmi	r3, [r6, #0]
 800696a:	6825      	ldr	r5, [r4, #0]
 800696c:	f015 0506 	ands.w	r5, r5, #6
 8006970:	d106      	bne.n	8006980 <_printf_common+0x48>
 8006972:	f104 0a19 	add.w	sl, r4, #25
 8006976:	68e3      	ldr	r3, [r4, #12]
 8006978:	6832      	ldr	r2, [r6, #0]
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	42ab      	cmp	r3, r5
 800697e:	dc28      	bgt.n	80069d2 <_printf_common+0x9a>
 8006980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006984:	1e13      	subs	r3, r2, #0
 8006986:	6822      	ldr	r2, [r4, #0]
 8006988:	bf18      	it	ne
 800698a:	2301      	movne	r3, #1
 800698c:	0692      	lsls	r2, r2, #26
 800698e:	d42d      	bmi.n	80069ec <_printf_common+0xb4>
 8006990:	4649      	mov	r1, r9
 8006992:	4638      	mov	r0, r7
 8006994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006998:	47c0      	blx	r8
 800699a:	3001      	adds	r0, #1
 800699c:	d020      	beq.n	80069e0 <_printf_common+0xa8>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	68e5      	ldr	r5, [r4, #12]
 80069a2:	f003 0306 	and.w	r3, r3, #6
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	bf18      	it	ne
 80069aa:	2500      	movne	r5, #0
 80069ac:	6832      	ldr	r2, [r6, #0]
 80069ae:	f04f 0600 	mov.w	r6, #0
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	bf08      	it	eq
 80069b6:	1aad      	subeq	r5, r5, r2
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	bf08      	it	eq
 80069bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069c0:	4293      	cmp	r3, r2
 80069c2:	bfc4      	itt	gt
 80069c4:	1a9b      	subgt	r3, r3, r2
 80069c6:	18ed      	addgt	r5, r5, r3
 80069c8:	341a      	adds	r4, #26
 80069ca:	42b5      	cmp	r5, r6
 80069cc:	d11a      	bne.n	8006a04 <_printf_common+0xcc>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e008      	b.n	80069e4 <_printf_common+0xac>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4652      	mov	r2, sl
 80069d6:	4649      	mov	r1, r9
 80069d8:	4638      	mov	r0, r7
 80069da:	47c0      	blx	r8
 80069dc:	3001      	adds	r0, #1
 80069de:	d103      	bne.n	80069e8 <_printf_common+0xb0>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	3501      	adds	r5, #1
 80069ea:	e7c4      	b.n	8006976 <_printf_common+0x3e>
 80069ec:	2030      	movs	r0, #48	; 0x30
 80069ee:	18e1      	adds	r1, r4, r3
 80069f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069fa:	4422      	add	r2, r4
 80069fc:	3302      	adds	r3, #2
 80069fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a02:	e7c5      	b.n	8006990 <_printf_common+0x58>
 8006a04:	2301      	movs	r3, #1
 8006a06:	4622      	mov	r2, r4
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	47c0      	blx	r8
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d0e6      	beq.n	80069e0 <_printf_common+0xa8>
 8006a12:	3601      	adds	r6, #1
 8006a14:	e7d9      	b.n	80069ca <_printf_common+0x92>
	...

08006a18 <_printf_i>:
 8006a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	7e0f      	ldrb	r7, [r1, #24]
 8006a1e:	4691      	mov	r9, r2
 8006a20:	2f78      	cmp	r7, #120	; 0x78
 8006a22:	4680      	mov	r8, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	469a      	mov	sl, r3
 8006a28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a2e:	d807      	bhi.n	8006a40 <_printf_i+0x28>
 8006a30:	2f62      	cmp	r7, #98	; 0x62
 8006a32:	d80a      	bhi.n	8006a4a <_printf_i+0x32>
 8006a34:	2f00      	cmp	r7, #0
 8006a36:	f000 80d9 	beq.w	8006bec <_printf_i+0x1d4>
 8006a3a:	2f58      	cmp	r7, #88	; 0x58
 8006a3c:	f000 80a4 	beq.w	8006b88 <_printf_i+0x170>
 8006a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a48:	e03a      	b.n	8006ac0 <_printf_i+0xa8>
 8006a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a4e:	2b15      	cmp	r3, #21
 8006a50:	d8f6      	bhi.n	8006a40 <_printf_i+0x28>
 8006a52:	a101      	add	r1, pc, #4	; (adr r1, 8006a58 <_printf_i+0x40>)
 8006a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a58:	08006ab1 	.word	0x08006ab1
 8006a5c:	08006ac5 	.word	0x08006ac5
 8006a60:	08006a41 	.word	0x08006a41
 8006a64:	08006a41 	.word	0x08006a41
 8006a68:	08006a41 	.word	0x08006a41
 8006a6c:	08006a41 	.word	0x08006a41
 8006a70:	08006ac5 	.word	0x08006ac5
 8006a74:	08006a41 	.word	0x08006a41
 8006a78:	08006a41 	.word	0x08006a41
 8006a7c:	08006a41 	.word	0x08006a41
 8006a80:	08006a41 	.word	0x08006a41
 8006a84:	08006bd3 	.word	0x08006bd3
 8006a88:	08006af5 	.word	0x08006af5
 8006a8c:	08006bb5 	.word	0x08006bb5
 8006a90:	08006a41 	.word	0x08006a41
 8006a94:	08006a41 	.word	0x08006a41
 8006a98:	08006bf5 	.word	0x08006bf5
 8006a9c:	08006a41 	.word	0x08006a41
 8006aa0:	08006af5 	.word	0x08006af5
 8006aa4:	08006a41 	.word	0x08006a41
 8006aa8:	08006a41 	.word	0x08006a41
 8006aac:	08006bbd 	.word	0x08006bbd
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	1d1a      	adds	r2, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	602a      	str	r2, [r5, #0]
 8006ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0a4      	b.n	8006c0e <_printf_i+0x1f6>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	6829      	ldr	r1, [r5, #0]
 8006ac8:	0606      	lsls	r6, r0, #24
 8006aca:	f101 0304 	add.w	r3, r1, #4
 8006ace:	d50a      	bpl.n	8006ae6 <_printf_i+0xce>
 8006ad0:	680e      	ldr	r6, [r1, #0]
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	2e00      	cmp	r6, #0
 8006ad6:	da03      	bge.n	8006ae0 <_printf_i+0xc8>
 8006ad8:	232d      	movs	r3, #45	; 0x2d
 8006ada:	4276      	negs	r6, r6
 8006adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae0:	230a      	movs	r3, #10
 8006ae2:	485e      	ldr	r0, [pc, #376]	; (8006c5c <_printf_i+0x244>)
 8006ae4:	e019      	b.n	8006b1a <_printf_i+0x102>
 8006ae6:	680e      	ldr	r6, [r1, #0]
 8006ae8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	bf18      	it	ne
 8006af0:	b236      	sxthne	r6, r6
 8006af2:	e7ef      	b.n	8006ad4 <_printf_i+0xbc>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	6820      	ldr	r0, [r4, #0]
 8006af8:	1d19      	adds	r1, r3, #4
 8006afa:	6029      	str	r1, [r5, #0]
 8006afc:	0601      	lsls	r1, r0, #24
 8006afe:	d501      	bpl.n	8006b04 <_printf_i+0xec>
 8006b00:	681e      	ldr	r6, [r3, #0]
 8006b02:	e002      	b.n	8006b0a <_printf_i+0xf2>
 8006b04:	0646      	lsls	r6, r0, #25
 8006b06:	d5fb      	bpl.n	8006b00 <_printf_i+0xe8>
 8006b08:	881e      	ldrh	r6, [r3, #0]
 8006b0a:	2f6f      	cmp	r7, #111	; 0x6f
 8006b0c:	bf0c      	ite	eq
 8006b0e:	2308      	moveq	r3, #8
 8006b10:	230a      	movne	r3, #10
 8006b12:	4852      	ldr	r0, [pc, #328]	; (8006c5c <_printf_i+0x244>)
 8006b14:	2100      	movs	r1, #0
 8006b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b1a:	6865      	ldr	r5, [r4, #4]
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	bfa8      	it	ge
 8006b20:	6821      	ldrge	r1, [r4, #0]
 8006b22:	60a5      	str	r5, [r4, #8]
 8006b24:	bfa4      	itt	ge
 8006b26:	f021 0104 	bicge.w	r1, r1, #4
 8006b2a:	6021      	strge	r1, [r4, #0]
 8006b2c:	b90e      	cbnz	r6, 8006b32 <_printf_i+0x11a>
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	d04d      	beq.n	8006bce <_printf_i+0x1b6>
 8006b32:	4615      	mov	r5, r2
 8006b34:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b38:	fb03 6711 	mls	r7, r3, r1, r6
 8006b3c:	5dc7      	ldrb	r7, [r0, r7]
 8006b3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b42:	4637      	mov	r7, r6
 8006b44:	42bb      	cmp	r3, r7
 8006b46:	460e      	mov	r6, r1
 8006b48:	d9f4      	bls.n	8006b34 <_printf_i+0x11c>
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d10b      	bne.n	8006b66 <_printf_i+0x14e>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	07de      	lsls	r6, r3, #31
 8006b52:	d508      	bpl.n	8006b66 <_printf_i+0x14e>
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	6861      	ldr	r1, [r4, #4]
 8006b58:	4299      	cmp	r1, r3
 8006b5a:	bfde      	ittt	le
 8006b5c:	2330      	movle	r3, #48	; 0x30
 8006b5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b66:	1b52      	subs	r2, r2, r5
 8006b68:	6122      	str	r2, [r4, #16]
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4640      	mov	r0, r8
 8006b70:	f8cd a000 	str.w	sl, [sp]
 8006b74:	aa03      	add	r2, sp, #12
 8006b76:	f7ff fedf 	bl	8006938 <_printf_common>
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d14c      	bne.n	8006c18 <_printf_i+0x200>
 8006b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b82:	b004      	add	sp, #16
 8006b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b88:	4834      	ldr	r0, [pc, #208]	; (8006c5c <_printf_i+0x244>)
 8006b8a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b8e:	6829      	ldr	r1, [r5, #0]
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b96:	6029      	str	r1, [r5, #0]
 8006b98:	061d      	lsls	r5, r3, #24
 8006b9a:	d514      	bpl.n	8006bc6 <_printf_i+0x1ae>
 8006b9c:	07df      	lsls	r7, r3, #31
 8006b9e:	bf44      	itt	mi
 8006ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ba4:	6023      	strmi	r3, [r4, #0]
 8006ba6:	b91e      	cbnz	r6, 8006bb0 <_printf_i+0x198>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	f023 0320 	bic.w	r3, r3, #32
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	e7af      	b.n	8006b14 <_printf_i+0xfc>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	f043 0320 	orr.w	r3, r3, #32
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	2378      	movs	r3, #120	; 0x78
 8006bbe:	4828      	ldr	r0, [pc, #160]	; (8006c60 <_printf_i+0x248>)
 8006bc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bc4:	e7e3      	b.n	8006b8e <_printf_i+0x176>
 8006bc6:	0659      	lsls	r1, r3, #25
 8006bc8:	bf48      	it	mi
 8006bca:	b2b6      	uxthmi	r6, r6
 8006bcc:	e7e6      	b.n	8006b9c <_printf_i+0x184>
 8006bce:	4615      	mov	r5, r2
 8006bd0:	e7bb      	b.n	8006b4a <_printf_i+0x132>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	6826      	ldr	r6, [r4, #0]
 8006bd6:	1d18      	adds	r0, r3, #4
 8006bd8:	6961      	ldr	r1, [r4, #20]
 8006bda:	6028      	str	r0, [r5, #0]
 8006bdc:	0635      	lsls	r5, r6, #24
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	d501      	bpl.n	8006be6 <_printf_i+0x1ce>
 8006be2:	6019      	str	r1, [r3, #0]
 8006be4:	e002      	b.n	8006bec <_printf_i+0x1d4>
 8006be6:	0670      	lsls	r0, r6, #25
 8006be8:	d5fb      	bpl.n	8006be2 <_printf_i+0x1ca>
 8006bea:	8019      	strh	r1, [r3, #0]
 8006bec:	2300      	movs	r3, #0
 8006bee:	4615      	mov	r5, r2
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	e7ba      	b.n	8006b6a <_printf_i+0x152>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	602a      	str	r2, [r5, #0]
 8006bfc:	681d      	ldr	r5, [r3, #0]
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	4628      	mov	r0, r5
 8006c02:	f002 f973 	bl	8008eec <memchr>
 8006c06:	b108      	cbz	r0, 8006c0c <_printf_i+0x1f4>
 8006c08:	1b40      	subs	r0, r0, r5
 8006c0a:	6060      	str	r0, [r4, #4]
 8006c0c:	6863      	ldr	r3, [r4, #4]
 8006c0e:	6123      	str	r3, [r4, #16]
 8006c10:	2300      	movs	r3, #0
 8006c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c16:	e7a8      	b.n	8006b6a <_printf_i+0x152>
 8006c18:	462a      	mov	r2, r5
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	47d0      	blx	sl
 8006c22:	3001      	adds	r0, #1
 8006c24:	d0ab      	beq.n	8006b7e <_printf_i+0x166>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	079b      	lsls	r3, r3, #30
 8006c2a:	d413      	bmi.n	8006c54 <_printf_i+0x23c>
 8006c2c:	68e0      	ldr	r0, [r4, #12]
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	4298      	cmp	r0, r3
 8006c32:	bfb8      	it	lt
 8006c34:	4618      	movlt	r0, r3
 8006c36:	e7a4      	b.n	8006b82 <_printf_i+0x16a>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	4632      	mov	r2, r6
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	4640      	mov	r0, r8
 8006c40:	47d0      	blx	sl
 8006c42:	3001      	adds	r0, #1
 8006c44:	d09b      	beq.n	8006b7e <_printf_i+0x166>
 8006c46:	3501      	adds	r5, #1
 8006c48:	68e3      	ldr	r3, [r4, #12]
 8006c4a:	9903      	ldr	r1, [sp, #12]
 8006c4c:	1a5b      	subs	r3, r3, r1
 8006c4e:	42ab      	cmp	r3, r5
 8006c50:	dcf2      	bgt.n	8006c38 <_printf_i+0x220>
 8006c52:	e7eb      	b.n	8006c2c <_printf_i+0x214>
 8006c54:	2500      	movs	r5, #0
 8006c56:	f104 0619 	add.w	r6, r4, #25
 8006c5a:	e7f5      	b.n	8006c48 <_printf_i+0x230>
 8006c5c:	0800ab72 	.word	0x0800ab72
 8006c60:	0800ab83 	.word	0x0800ab83

08006c64 <strcpy>:
 8006c64:	4603      	mov	r3, r0
 8006c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c6a:	f803 2b01 	strb.w	r2, [r3], #1
 8006c6e:	2a00      	cmp	r2, #0
 8006c70:	d1f9      	bne.n	8006c66 <strcpy+0x2>
 8006c72:	4770      	bx	lr

08006c74 <sulp>:
 8006c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c78:	460f      	mov	r7, r1
 8006c7a:	4690      	mov	r8, r2
 8006c7c:	f002 fcc2 	bl	8009604 <__ulp>
 8006c80:	4604      	mov	r4, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	f1b8 0f00 	cmp.w	r8, #0
 8006c88:	d011      	beq.n	8006cae <sulp+0x3a>
 8006c8a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006c8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	dd0b      	ble.n	8006cae <sulp+0x3a>
 8006c96:	2400      	movs	r4, #0
 8006c98:	051b      	lsls	r3, r3, #20
 8006c9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	f7f9 fc21 	bl	80004ec <__aeabi_dmul>
 8006caa:	4604      	mov	r4, r0
 8006cac:	460d      	mov	r5, r1
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006cb8 <_strtod_l>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	469b      	mov	fp, r3
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	b09f      	sub	sp, #124	; 0x7c
 8006cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc4:	4b9e      	ldr	r3, [pc, #632]	; (8006f40 <_strtod_l+0x288>)
 8006cc6:	4682      	mov	sl, r0
 8006cc8:	681f      	ldr	r7, [r3, #0]
 8006cca:	460e      	mov	r6, r1
 8006ccc:	4638      	mov	r0, r7
 8006cce:	9215      	str	r2, [sp, #84]	; 0x54
 8006cd0:	f7f9 fa48 	bl	8000164 <strlen>
 8006cd4:	f04f 0800 	mov.w	r8, #0
 8006cd8:	4604      	mov	r4, r0
 8006cda:	f04f 0900 	mov.w	r9, #0
 8006cde:	9619      	str	r6, [sp, #100]	; 0x64
 8006ce0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	2a2b      	cmp	r2, #43	; 0x2b
 8006ce6:	d04c      	beq.n	8006d82 <_strtod_l+0xca>
 8006ce8:	d83a      	bhi.n	8006d60 <_strtod_l+0xa8>
 8006cea:	2a0d      	cmp	r2, #13
 8006cec:	d833      	bhi.n	8006d56 <_strtod_l+0x9e>
 8006cee:	2a08      	cmp	r2, #8
 8006cf0:	d833      	bhi.n	8006d5a <_strtod_l+0xa2>
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	d03d      	beq.n	8006d72 <_strtod_l+0xba>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8006cfa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006cfc:	782b      	ldrb	r3, [r5, #0]
 8006cfe:	2b30      	cmp	r3, #48	; 0x30
 8006d00:	f040 80aa 	bne.w	8006e58 <_strtod_l+0x1a0>
 8006d04:	786b      	ldrb	r3, [r5, #1]
 8006d06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d0a:	2b58      	cmp	r3, #88	; 0x58
 8006d0c:	d166      	bne.n	8006ddc <_strtod_l+0x124>
 8006d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d10:	4650      	mov	r0, sl
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	ab1a      	add	r3, sp, #104	; 0x68
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	4a8a      	ldr	r2, [pc, #552]	; (8006f44 <_strtod_l+0x28c>)
 8006d1a:	f8cd b008 	str.w	fp, [sp, #8]
 8006d1e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006d20:	a919      	add	r1, sp, #100	; 0x64
 8006d22:	f001 fdc7 	bl	80088b4 <__gethex>
 8006d26:	f010 0607 	ands.w	r6, r0, #7
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	d005      	beq.n	8006d3a <_strtod_l+0x82>
 8006d2e:	2e06      	cmp	r6, #6
 8006d30:	d129      	bne.n	8006d86 <_strtod_l+0xce>
 8006d32:	2300      	movs	r3, #0
 8006d34:	3501      	adds	r5, #1
 8006d36:	9519      	str	r5, [sp, #100]	; 0x64
 8006d38:	930a      	str	r3, [sp, #40]	; 0x28
 8006d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 858a 	bne.w	8007856 <_strtod_l+0xb9e>
 8006d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d44:	b1d3      	cbz	r3, 8006d7c <_strtod_l+0xc4>
 8006d46:	4642      	mov	r2, r8
 8006d48:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	b01f      	add	sp, #124	; 0x7c
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	2a20      	cmp	r2, #32
 8006d58:	d1cd      	bne.n	8006cf6 <_strtod_l+0x3e>
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	9319      	str	r3, [sp, #100]	; 0x64
 8006d5e:	e7bf      	b.n	8006ce0 <_strtod_l+0x28>
 8006d60:	2a2d      	cmp	r2, #45	; 0x2d
 8006d62:	d1c8      	bne.n	8006cf6 <_strtod_l+0x3e>
 8006d64:	2201      	movs	r2, #1
 8006d66:	920a      	str	r2, [sp, #40]	; 0x28
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	9219      	str	r2, [sp, #100]	; 0x64
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1c3      	bne.n	8006cfa <_strtod_l+0x42>
 8006d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d74:	9619      	str	r6, [sp, #100]	; 0x64
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 856b 	bne.w	8007852 <_strtod_l+0xb9a>
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	464b      	mov	r3, r9
 8006d80:	e7e4      	b.n	8006d4c <_strtod_l+0x94>
 8006d82:	2200      	movs	r2, #0
 8006d84:	e7ef      	b.n	8006d66 <_strtod_l+0xae>
 8006d86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d88:	b13a      	cbz	r2, 8006d9a <_strtod_l+0xe2>
 8006d8a:	2135      	movs	r1, #53	; 0x35
 8006d8c:	a81c      	add	r0, sp, #112	; 0x70
 8006d8e:	f002 fd3d 	bl	800980c <__copybits>
 8006d92:	4650      	mov	r0, sl
 8006d94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d96:	f002 f905 	bl	8008fa4 <_Bfree>
 8006d9a:	3e01      	subs	r6, #1
 8006d9c:	2e04      	cmp	r6, #4
 8006d9e:	d806      	bhi.n	8006dae <_strtod_l+0xf6>
 8006da0:	e8df f006 	tbb	[pc, r6]
 8006da4:	1714030a 	.word	0x1714030a
 8006da8:	0a          	.byte	0x0a
 8006da9:	00          	.byte	0x00
 8006daa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006dae:	0721      	lsls	r1, r4, #28
 8006db0:	d5c3      	bpl.n	8006d3a <_strtod_l+0x82>
 8006db2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006db6:	e7c0      	b.n	8006d3a <_strtod_l+0x82>
 8006db8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006dba:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006dbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006dc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006dc6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006dca:	e7f0      	b.n	8006dae <_strtod_l+0xf6>
 8006dcc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006f48 <_strtod_l+0x290>
 8006dd0:	e7ed      	b.n	8006dae <_strtod_l+0xf6>
 8006dd2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006dd6:	f04f 38ff 	mov.w	r8, #4294967295
 8006dda:	e7e8      	b.n	8006dae <_strtod_l+0xf6>
 8006ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	9219      	str	r2, [sp, #100]	; 0x64
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	d0f9      	beq.n	8006ddc <_strtod_l+0x124>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0a6      	beq.n	8006d3a <_strtod_l+0x82>
 8006dec:	2301      	movs	r3, #1
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006df2:	220a      	movs	r2, #10
 8006df4:	9308      	str	r3, [sp, #32]
 8006df6:	2300      	movs	r3, #0
 8006df8:	469b      	mov	fp, r3
 8006dfa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006dfe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006e00:	7805      	ldrb	r5, [r0, #0]
 8006e02:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006e06:	b2d9      	uxtb	r1, r3
 8006e08:	2909      	cmp	r1, #9
 8006e0a:	d927      	bls.n	8006e5c <_strtod_l+0x1a4>
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4639      	mov	r1, r7
 8006e10:	f002 ffa6 	bl	8009d60 <strncmp>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d033      	beq.n	8006e80 <_strtod_l+0x1c8>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	465c      	mov	r4, fp
 8006e1e:	4603      	mov	r3, r0
 8006e20:	9004      	str	r0, [sp, #16]
 8006e22:	2a65      	cmp	r2, #101	; 0x65
 8006e24:	d001      	beq.n	8006e2a <_strtod_l+0x172>
 8006e26:	2a45      	cmp	r2, #69	; 0x45
 8006e28:	d114      	bne.n	8006e54 <_strtod_l+0x19c>
 8006e2a:	b91c      	cbnz	r4, 8006e34 <_strtod_l+0x17c>
 8006e2c:	9a07      	ldr	r2, [sp, #28]
 8006e2e:	4302      	orrs	r2, r0
 8006e30:	d09f      	beq.n	8006d72 <_strtod_l+0xba>
 8006e32:	2400      	movs	r4, #0
 8006e34:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006e36:	1c72      	adds	r2, r6, #1
 8006e38:	9219      	str	r2, [sp, #100]	; 0x64
 8006e3a:	7872      	ldrb	r2, [r6, #1]
 8006e3c:	2a2b      	cmp	r2, #43	; 0x2b
 8006e3e:	d079      	beq.n	8006f34 <_strtod_l+0x27c>
 8006e40:	2a2d      	cmp	r2, #45	; 0x2d
 8006e42:	f000 8083 	beq.w	8006f4c <_strtod_l+0x294>
 8006e46:	2700      	movs	r7, #0
 8006e48:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e4c:	2909      	cmp	r1, #9
 8006e4e:	f240 8083 	bls.w	8006f58 <_strtod_l+0x2a0>
 8006e52:	9619      	str	r6, [sp, #100]	; 0x64
 8006e54:	2500      	movs	r5, #0
 8006e56:	e09f      	b.n	8006f98 <_strtod_l+0x2e0>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e7c8      	b.n	8006dee <_strtod_l+0x136>
 8006e5c:	f1bb 0f08 	cmp.w	fp, #8
 8006e60:	bfd5      	itete	le
 8006e62:	9906      	ldrle	r1, [sp, #24]
 8006e64:	9905      	ldrgt	r1, [sp, #20]
 8006e66:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e6a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006e6e:	f100 0001 	add.w	r0, r0, #1
 8006e72:	bfd4      	ite	le
 8006e74:	9306      	strle	r3, [sp, #24]
 8006e76:	9305      	strgt	r3, [sp, #20]
 8006e78:	f10b 0b01 	add.w	fp, fp, #1
 8006e7c:	9019      	str	r0, [sp, #100]	; 0x64
 8006e7e:	e7be      	b.n	8006dfe <_strtod_l+0x146>
 8006e80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e82:	191a      	adds	r2, r3, r4
 8006e84:	9219      	str	r2, [sp, #100]	; 0x64
 8006e86:	5d1a      	ldrb	r2, [r3, r4]
 8006e88:	f1bb 0f00 	cmp.w	fp, #0
 8006e8c:	d036      	beq.n	8006efc <_strtod_l+0x244>
 8006e8e:	465c      	mov	r4, fp
 8006e90:	9004      	str	r0, [sp, #16]
 8006e92:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006e96:	2b09      	cmp	r3, #9
 8006e98:	d912      	bls.n	8006ec0 <_strtod_l+0x208>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e7c1      	b.n	8006e22 <_strtod_l+0x16a>
 8006e9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	9219      	str	r2, [sp, #100]	; 0x64
 8006ea6:	785a      	ldrb	r2, [r3, #1]
 8006ea8:	2a30      	cmp	r2, #48	; 0x30
 8006eaa:	d0f8      	beq.n	8006e9e <_strtod_l+0x1e6>
 8006eac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	f200 84d5 	bhi.w	8007860 <_strtod_l+0xba8>
 8006eb6:	9004      	str	r0, [sp, #16]
 8006eb8:	2000      	movs	r0, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ebe:	9308      	str	r3, [sp, #32]
 8006ec0:	3a30      	subs	r2, #48	; 0x30
 8006ec2:	f100 0301 	add.w	r3, r0, #1
 8006ec6:	d013      	beq.n	8006ef0 <_strtod_l+0x238>
 8006ec8:	9904      	ldr	r1, [sp, #16]
 8006eca:	1905      	adds	r5, r0, r4
 8006ecc:	4419      	add	r1, r3
 8006ece:	9104      	str	r1, [sp, #16]
 8006ed0:	4623      	mov	r3, r4
 8006ed2:	210a      	movs	r1, #10
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	d113      	bne.n	8006f00 <_strtod_l+0x248>
 8006ed8:	1823      	adds	r3, r4, r0
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	f104 0401 	add.w	r4, r4, #1
 8006ee0:	4404      	add	r4, r0
 8006ee2:	dc1b      	bgt.n	8006f1c <_strtod_l+0x264>
 8006ee4:	230a      	movs	r3, #10
 8006ee6:	9906      	ldr	r1, [sp, #24]
 8006ee8:	fb03 2301 	mla	r3, r3, r1, r2
 8006eec:	9306      	str	r3, [sp, #24]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	1c51      	adds	r1, r2, #1
 8006ef6:	9119      	str	r1, [sp, #100]	; 0x64
 8006ef8:	7852      	ldrb	r2, [r2, #1]
 8006efa:	e7ca      	b.n	8006e92 <_strtod_l+0x1da>
 8006efc:	4658      	mov	r0, fp
 8006efe:	e7d3      	b.n	8006ea8 <_strtod_l+0x1f0>
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	dc04      	bgt.n	8006f0e <_strtod_l+0x256>
 8006f04:	9f06      	ldr	r7, [sp, #24]
 8006f06:	434f      	muls	r7, r1
 8006f08:	9706      	str	r7, [sp, #24]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	e7e2      	b.n	8006ed4 <_strtod_l+0x21c>
 8006f0e:	1c5f      	adds	r7, r3, #1
 8006f10:	2f10      	cmp	r7, #16
 8006f12:	bfde      	ittt	le
 8006f14:	9f05      	ldrle	r7, [sp, #20]
 8006f16:	434f      	mulle	r7, r1
 8006f18:	9705      	strle	r7, [sp, #20]
 8006f1a:	e7f6      	b.n	8006f0a <_strtod_l+0x252>
 8006f1c:	2c10      	cmp	r4, #16
 8006f1e:	bfdf      	itttt	le
 8006f20:	230a      	movle	r3, #10
 8006f22:	9905      	ldrle	r1, [sp, #20]
 8006f24:	fb03 2301 	mlale	r3, r3, r1, r2
 8006f28:	9305      	strle	r3, [sp, #20]
 8006f2a:	e7e0      	b.n	8006eee <_strtod_l+0x236>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9304      	str	r3, [sp, #16]
 8006f30:	2301      	movs	r3, #1
 8006f32:	e77b      	b.n	8006e2c <_strtod_l+0x174>
 8006f34:	2700      	movs	r7, #0
 8006f36:	1cb2      	adds	r2, r6, #2
 8006f38:	9219      	str	r2, [sp, #100]	; 0x64
 8006f3a:	78b2      	ldrb	r2, [r6, #2]
 8006f3c:	e784      	b.n	8006e48 <_strtod_l+0x190>
 8006f3e:	bf00      	nop
 8006f40:	0800addc 	.word	0x0800addc
 8006f44:	0800ab94 	.word	0x0800ab94
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	2701      	movs	r7, #1
 8006f4e:	e7f2      	b.n	8006f36 <_strtod_l+0x27e>
 8006f50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f52:	1c51      	adds	r1, r2, #1
 8006f54:	9119      	str	r1, [sp, #100]	; 0x64
 8006f56:	7852      	ldrb	r2, [r2, #1]
 8006f58:	2a30      	cmp	r2, #48	; 0x30
 8006f5a:	d0f9      	beq.n	8006f50 <_strtod_l+0x298>
 8006f5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006f60:	2908      	cmp	r1, #8
 8006f62:	f63f af77 	bhi.w	8006e54 <_strtod_l+0x19c>
 8006f66:	f04f 0e0a 	mov.w	lr, #10
 8006f6a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006f6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f70:	9209      	str	r2, [sp, #36]	; 0x24
 8006f72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f74:	1c51      	adds	r1, r2, #1
 8006f76:	9119      	str	r1, [sp, #100]	; 0x64
 8006f78:	7852      	ldrb	r2, [r2, #1]
 8006f7a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006f7e:	2d09      	cmp	r5, #9
 8006f80:	d935      	bls.n	8006fee <_strtod_l+0x336>
 8006f82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f84:	1b49      	subs	r1, r1, r5
 8006f86:	2908      	cmp	r1, #8
 8006f88:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006f8c:	dc02      	bgt.n	8006f94 <_strtod_l+0x2dc>
 8006f8e:	4565      	cmp	r5, ip
 8006f90:	bfa8      	it	ge
 8006f92:	4665      	movge	r5, ip
 8006f94:	b107      	cbz	r7, 8006f98 <_strtod_l+0x2e0>
 8006f96:	426d      	negs	r5, r5
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	d14c      	bne.n	8007036 <_strtod_l+0x37e>
 8006f9c:	9907      	ldr	r1, [sp, #28]
 8006f9e:	4301      	orrs	r1, r0
 8006fa0:	f47f aecb 	bne.w	8006d3a <_strtod_l+0x82>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f47f aee4 	bne.w	8006d72 <_strtod_l+0xba>
 8006faa:	2a69      	cmp	r2, #105	; 0x69
 8006fac:	d026      	beq.n	8006ffc <_strtod_l+0x344>
 8006fae:	dc23      	bgt.n	8006ff8 <_strtod_l+0x340>
 8006fb0:	2a49      	cmp	r2, #73	; 0x49
 8006fb2:	d023      	beq.n	8006ffc <_strtod_l+0x344>
 8006fb4:	2a4e      	cmp	r2, #78	; 0x4e
 8006fb6:	f47f aedc 	bne.w	8006d72 <_strtod_l+0xba>
 8006fba:	499d      	ldr	r1, [pc, #628]	; (8007230 <_strtod_l+0x578>)
 8006fbc:	a819      	add	r0, sp, #100	; 0x64
 8006fbe:	f001 fec7 	bl	8008d50 <__match>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	f43f aed5 	beq.w	8006d72 <_strtod_l+0xba>
 8006fc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b28      	cmp	r3, #40	; 0x28
 8006fce:	d12c      	bne.n	800702a <_strtod_l+0x372>
 8006fd0:	4998      	ldr	r1, [pc, #608]	; (8007234 <_strtod_l+0x57c>)
 8006fd2:	aa1c      	add	r2, sp, #112	; 0x70
 8006fd4:	a819      	add	r0, sp, #100	; 0x64
 8006fd6:	f001 fecf 	bl	8008d78 <__hexnan>
 8006fda:	2805      	cmp	r0, #5
 8006fdc:	d125      	bne.n	800702a <_strtod_l+0x372>
 8006fde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fe0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006fe4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006fe8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006fec:	e6a5      	b.n	8006d3a <_strtod_l+0x82>
 8006fee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006ff2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006ff6:	e7bc      	b.n	8006f72 <_strtod_l+0x2ba>
 8006ff8:	2a6e      	cmp	r2, #110	; 0x6e
 8006ffa:	e7dc      	b.n	8006fb6 <_strtod_l+0x2fe>
 8006ffc:	498e      	ldr	r1, [pc, #568]	; (8007238 <_strtod_l+0x580>)
 8006ffe:	a819      	add	r0, sp, #100	; 0x64
 8007000:	f001 fea6 	bl	8008d50 <__match>
 8007004:	2800      	cmp	r0, #0
 8007006:	f43f aeb4 	beq.w	8006d72 <_strtod_l+0xba>
 800700a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800700c:	498b      	ldr	r1, [pc, #556]	; (800723c <_strtod_l+0x584>)
 800700e:	3b01      	subs	r3, #1
 8007010:	a819      	add	r0, sp, #100	; 0x64
 8007012:	9319      	str	r3, [sp, #100]	; 0x64
 8007014:	f001 fe9c 	bl	8008d50 <__match>
 8007018:	b910      	cbnz	r0, 8007020 <_strtod_l+0x368>
 800701a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800701c:	3301      	adds	r3, #1
 800701e:	9319      	str	r3, [sp, #100]	; 0x64
 8007020:	f04f 0800 	mov.w	r8, #0
 8007024:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007240 <_strtod_l+0x588>
 8007028:	e687      	b.n	8006d3a <_strtod_l+0x82>
 800702a:	4886      	ldr	r0, [pc, #536]	; (8007244 <_strtod_l+0x58c>)
 800702c:	f002 fe7e 	bl	8009d2c <nan>
 8007030:	4680      	mov	r8, r0
 8007032:	4689      	mov	r9, r1
 8007034:	e681      	b.n	8006d3a <_strtod_l+0x82>
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	f1bb 0f00 	cmp.w	fp, #0
 800703c:	bf08      	it	eq
 800703e:	46a3      	moveq	fp, r4
 8007040:	1aeb      	subs	r3, r5, r3
 8007042:	2c10      	cmp	r4, #16
 8007044:	9806      	ldr	r0, [sp, #24]
 8007046:	4626      	mov	r6, r4
 8007048:	9307      	str	r3, [sp, #28]
 800704a:	bfa8      	it	ge
 800704c:	2610      	movge	r6, #16
 800704e:	f7f9 f9d3 	bl	80003f8 <__aeabi_ui2d>
 8007052:	2c09      	cmp	r4, #9
 8007054:	4680      	mov	r8, r0
 8007056:	4689      	mov	r9, r1
 8007058:	dd13      	ble.n	8007082 <_strtod_l+0x3ca>
 800705a:	4b7b      	ldr	r3, [pc, #492]	; (8007248 <_strtod_l+0x590>)
 800705c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007060:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007064:	f7f9 fa42 	bl	80004ec <__aeabi_dmul>
 8007068:	4680      	mov	r8, r0
 800706a:	9805      	ldr	r0, [sp, #20]
 800706c:	4689      	mov	r9, r1
 800706e:	f7f9 f9c3 	bl	80003f8 <__aeabi_ui2d>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4640      	mov	r0, r8
 8007078:	4649      	mov	r1, r9
 800707a:	f7f9 f881 	bl	8000180 <__adddf3>
 800707e:	4680      	mov	r8, r0
 8007080:	4689      	mov	r9, r1
 8007082:	2c0f      	cmp	r4, #15
 8007084:	dc36      	bgt.n	80070f4 <_strtod_l+0x43c>
 8007086:	9b07      	ldr	r3, [sp, #28]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f43f ae56 	beq.w	8006d3a <_strtod_l+0x82>
 800708e:	dd22      	ble.n	80070d6 <_strtod_l+0x41e>
 8007090:	2b16      	cmp	r3, #22
 8007092:	dc09      	bgt.n	80070a8 <_strtod_l+0x3f0>
 8007094:	496c      	ldr	r1, [pc, #432]	; (8007248 <_strtod_l+0x590>)
 8007096:	4642      	mov	r2, r8
 8007098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800709c:	464b      	mov	r3, r9
 800709e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070a2:	f7f9 fa23 	bl	80004ec <__aeabi_dmul>
 80070a6:	e7c3      	b.n	8007030 <_strtod_l+0x378>
 80070a8:	9a07      	ldr	r2, [sp, #28]
 80070aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80070ae:	4293      	cmp	r3, r2
 80070b0:	db20      	blt.n	80070f4 <_strtod_l+0x43c>
 80070b2:	4d65      	ldr	r5, [pc, #404]	; (8007248 <_strtod_l+0x590>)
 80070b4:	f1c4 040f 	rsb	r4, r4, #15
 80070b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80070bc:	4642      	mov	r2, r8
 80070be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c2:	464b      	mov	r3, r9
 80070c4:	f7f9 fa12 	bl	80004ec <__aeabi_dmul>
 80070c8:	9b07      	ldr	r3, [sp, #28]
 80070ca:	1b1c      	subs	r4, r3, r4
 80070cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80070d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070d4:	e7e5      	b.n	80070a2 <_strtod_l+0x3ea>
 80070d6:	9b07      	ldr	r3, [sp, #28]
 80070d8:	3316      	adds	r3, #22
 80070da:	db0b      	blt.n	80070f4 <_strtod_l+0x43c>
 80070dc:	9b04      	ldr	r3, [sp, #16]
 80070de:	4640      	mov	r0, r8
 80070e0:	1b5d      	subs	r5, r3, r5
 80070e2:	4b59      	ldr	r3, [pc, #356]	; (8007248 <_strtod_l+0x590>)
 80070e4:	4649      	mov	r1, r9
 80070e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80070ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070ee:	f7f9 fb27 	bl	8000740 <__aeabi_ddiv>
 80070f2:	e79d      	b.n	8007030 <_strtod_l+0x378>
 80070f4:	9b07      	ldr	r3, [sp, #28]
 80070f6:	1ba6      	subs	r6, r4, r6
 80070f8:	441e      	add	r6, r3
 80070fa:	2e00      	cmp	r6, #0
 80070fc:	dd74      	ble.n	80071e8 <_strtod_l+0x530>
 80070fe:	f016 030f 	ands.w	r3, r6, #15
 8007102:	d00a      	beq.n	800711a <_strtod_l+0x462>
 8007104:	4950      	ldr	r1, [pc, #320]	; (8007248 <_strtod_l+0x590>)
 8007106:	4642      	mov	r2, r8
 8007108:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800710c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007110:	464b      	mov	r3, r9
 8007112:	f7f9 f9eb 	bl	80004ec <__aeabi_dmul>
 8007116:	4680      	mov	r8, r0
 8007118:	4689      	mov	r9, r1
 800711a:	f036 060f 	bics.w	r6, r6, #15
 800711e:	d052      	beq.n	80071c6 <_strtod_l+0x50e>
 8007120:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007124:	dd27      	ble.n	8007176 <_strtod_l+0x4be>
 8007126:	f04f 0b00 	mov.w	fp, #0
 800712a:	f8cd b010 	str.w	fp, [sp, #16]
 800712e:	f8cd b020 	str.w	fp, [sp, #32]
 8007132:	f8cd b018 	str.w	fp, [sp, #24]
 8007136:	2322      	movs	r3, #34	; 0x22
 8007138:	f04f 0800 	mov.w	r8, #0
 800713c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007240 <_strtod_l+0x588>
 8007140:	f8ca 3000 	str.w	r3, [sl]
 8007144:	9b08      	ldr	r3, [sp, #32]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f43f adf7 	beq.w	8006d3a <_strtod_l+0x82>
 800714c:	4650      	mov	r0, sl
 800714e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007150:	f001 ff28 	bl	8008fa4 <_Bfree>
 8007154:	4650      	mov	r0, sl
 8007156:	9906      	ldr	r1, [sp, #24]
 8007158:	f001 ff24 	bl	8008fa4 <_Bfree>
 800715c:	4650      	mov	r0, sl
 800715e:	9904      	ldr	r1, [sp, #16]
 8007160:	f001 ff20 	bl	8008fa4 <_Bfree>
 8007164:	4650      	mov	r0, sl
 8007166:	9908      	ldr	r1, [sp, #32]
 8007168:	f001 ff1c 	bl	8008fa4 <_Bfree>
 800716c:	4659      	mov	r1, fp
 800716e:	4650      	mov	r0, sl
 8007170:	f001 ff18 	bl	8008fa4 <_Bfree>
 8007174:	e5e1      	b.n	8006d3a <_strtod_l+0x82>
 8007176:	4b35      	ldr	r3, [pc, #212]	; (800724c <_strtod_l+0x594>)
 8007178:	4640      	mov	r0, r8
 800717a:	9305      	str	r3, [sp, #20]
 800717c:	2300      	movs	r3, #0
 800717e:	4649      	mov	r1, r9
 8007180:	461f      	mov	r7, r3
 8007182:	1136      	asrs	r6, r6, #4
 8007184:	2e01      	cmp	r6, #1
 8007186:	dc21      	bgt.n	80071cc <_strtod_l+0x514>
 8007188:	b10b      	cbz	r3, 800718e <_strtod_l+0x4d6>
 800718a:	4680      	mov	r8, r0
 800718c:	4689      	mov	r9, r1
 800718e:	4b2f      	ldr	r3, [pc, #188]	; (800724c <_strtod_l+0x594>)
 8007190:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007194:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007198:	4642      	mov	r2, r8
 800719a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800719e:	464b      	mov	r3, r9
 80071a0:	f7f9 f9a4 	bl	80004ec <__aeabi_dmul>
 80071a4:	4b26      	ldr	r3, [pc, #152]	; (8007240 <_strtod_l+0x588>)
 80071a6:	460a      	mov	r2, r1
 80071a8:	400b      	ands	r3, r1
 80071aa:	4929      	ldr	r1, [pc, #164]	; (8007250 <_strtod_l+0x598>)
 80071ac:	4680      	mov	r8, r0
 80071ae:	428b      	cmp	r3, r1
 80071b0:	d8b9      	bhi.n	8007126 <_strtod_l+0x46e>
 80071b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80071b6:	428b      	cmp	r3, r1
 80071b8:	bf86      	itte	hi
 80071ba:	f04f 38ff 	movhi.w	r8, #4294967295
 80071be:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007254 <_strtod_l+0x59c>
 80071c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80071c6:	2300      	movs	r3, #0
 80071c8:	9305      	str	r3, [sp, #20]
 80071ca:	e07f      	b.n	80072cc <_strtod_l+0x614>
 80071cc:	07f2      	lsls	r2, r6, #31
 80071ce:	d505      	bpl.n	80071dc <_strtod_l+0x524>
 80071d0:	9b05      	ldr	r3, [sp, #20]
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f7f9 f989 	bl	80004ec <__aeabi_dmul>
 80071da:	2301      	movs	r3, #1
 80071dc:	9a05      	ldr	r2, [sp, #20]
 80071de:	3701      	adds	r7, #1
 80071e0:	3208      	adds	r2, #8
 80071e2:	1076      	asrs	r6, r6, #1
 80071e4:	9205      	str	r2, [sp, #20]
 80071e6:	e7cd      	b.n	8007184 <_strtod_l+0x4cc>
 80071e8:	d0ed      	beq.n	80071c6 <_strtod_l+0x50e>
 80071ea:	4276      	negs	r6, r6
 80071ec:	f016 020f 	ands.w	r2, r6, #15
 80071f0:	d00a      	beq.n	8007208 <_strtod_l+0x550>
 80071f2:	4b15      	ldr	r3, [pc, #84]	; (8007248 <_strtod_l+0x590>)
 80071f4:	4640      	mov	r0, r8
 80071f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071fa:	4649      	mov	r1, r9
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 fa9e 	bl	8000740 <__aeabi_ddiv>
 8007204:	4680      	mov	r8, r0
 8007206:	4689      	mov	r9, r1
 8007208:	1136      	asrs	r6, r6, #4
 800720a:	d0dc      	beq.n	80071c6 <_strtod_l+0x50e>
 800720c:	2e1f      	cmp	r6, #31
 800720e:	dd23      	ble.n	8007258 <_strtod_l+0x5a0>
 8007210:	f04f 0b00 	mov.w	fp, #0
 8007214:	f8cd b010 	str.w	fp, [sp, #16]
 8007218:	f8cd b020 	str.w	fp, [sp, #32]
 800721c:	f8cd b018 	str.w	fp, [sp, #24]
 8007220:	2322      	movs	r3, #34	; 0x22
 8007222:	f04f 0800 	mov.w	r8, #0
 8007226:	f04f 0900 	mov.w	r9, #0
 800722a:	f8ca 3000 	str.w	r3, [sl]
 800722e:	e789      	b.n	8007144 <_strtod_l+0x48c>
 8007230:	0800ab6d 	.word	0x0800ab6d
 8007234:	0800aba8 	.word	0x0800aba8
 8007238:	0800ab65 	.word	0x0800ab65
 800723c:	0800acec 	.word	0x0800acec
 8007240:	7ff00000 	.word	0x7ff00000
 8007244:	0800a9c1 	.word	0x0800a9c1
 8007248:	0800ae78 	.word	0x0800ae78
 800724c:	0800ae50 	.word	0x0800ae50
 8007250:	7ca00000 	.word	0x7ca00000
 8007254:	7fefffff 	.word	0x7fefffff
 8007258:	f016 0310 	ands.w	r3, r6, #16
 800725c:	bf18      	it	ne
 800725e:	236a      	movne	r3, #106	; 0x6a
 8007260:	4640      	mov	r0, r8
 8007262:	9305      	str	r3, [sp, #20]
 8007264:	4649      	mov	r1, r9
 8007266:	2300      	movs	r3, #0
 8007268:	4fb0      	ldr	r7, [pc, #704]	; (800752c <_strtod_l+0x874>)
 800726a:	07f2      	lsls	r2, r6, #31
 800726c:	d504      	bpl.n	8007278 <_strtod_l+0x5c0>
 800726e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007272:	f7f9 f93b 	bl	80004ec <__aeabi_dmul>
 8007276:	2301      	movs	r3, #1
 8007278:	1076      	asrs	r6, r6, #1
 800727a:	f107 0708 	add.w	r7, r7, #8
 800727e:	d1f4      	bne.n	800726a <_strtod_l+0x5b2>
 8007280:	b10b      	cbz	r3, 8007286 <_strtod_l+0x5ce>
 8007282:	4680      	mov	r8, r0
 8007284:	4689      	mov	r9, r1
 8007286:	9b05      	ldr	r3, [sp, #20]
 8007288:	b1c3      	cbz	r3, 80072bc <_strtod_l+0x604>
 800728a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800728e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007292:	2b00      	cmp	r3, #0
 8007294:	4649      	mov	r1, r9
 8007296:	dd11      	ble.n	80072bc <_strtod_l+0x604>
 8007298:	2b1f      	cmp	r3, #31
 800729a:	f340 8127 	ble.w	80074ec <_strtod_l+0x834>
 800729e:	2b34      	cmp	r3, #52	; 0x34
 80072a0:	bfd8      	it	le
 80072a2:	f04f 33ff 	movle.w	r3, #4294967295
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	bfcf      	iteee	gt
 80072ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80072b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072b4:	fa03 f202 	lslle.w	r2, r3, r2
 80072b8:	ea02 0901 	andle.w	r9, r2, r1
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	4640      	mov	r0, r8
 80072c2:	4649      	mov	r1, r9
 80072c4:	f7f9 fb7a 	bl	80009bc <__aeabi_dcmpeq>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d1a1      	bne.n	8007210 <_strtod_l+0x558>
 80072cc:	9b06      	ldr	r3, [sp, #24]
 80072ce:	465a      	mov	r2, fp
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	4650      	mov	r0, sl
 80072d4:	4623      	mov	r3, r4
 80072d6:	9908      	ldr	r1, [sp, #32]
 80072d8:	f001 fecc 	bl	8009074 <__s2b>
 80072dc:	9008      	str	r0, [sp, #32]
 80072de:	2800      	cmp	r0, #0
 80072e0:	f43f af21 	beq.w	8007126 <_strtod_l+0x46e>
 80072e4:	9b04      	ldr	r3, [sp, #16]
 80072e6:	f04f 0b00 	mov.w	fp, #0
 80072ea:	1b5d      	subs	r5, r3, r5
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	f8cd b010 	str.w	fp, [sp, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfb4      	ite	lt
 80072f6:	462b      	movlt	r3, r5
 80072f8:	2300      	movge	r3, #0
 80072fa:	930e      	str	r3, [sp, #56]	; 0x38
 80072fc:	9b07      	ldr	r3, [sp, #28]
 80072fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007302:	9314      	str	r3, [sp, #80]	; 0x50
 8007304:	9b08      	ldr	r3, [sp, #32]
 8007306:	4650      	mov	r0, sl
 8007308:	6859      	ldr	r1, [r3, #4]
 800730a:	f001 fe0b 	bl	8008f24 <_Balloc>
 800730e:	9006      	str	r0, [sp, #24]
 8007310:	2800      	cmp	r0, #0
 8007312:	f43f af10 	beq.w	8007136 <_strtod_l+0x47e>
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	300c      	adds	r0, #12
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	f103 010c 	add.w	r1, r3, #12
 8007320:	3202      	adds	r2, #2
 8007322:	0092      	lsls	r2, r2, #2
 8007324:	f001 fdf0 	bl	8008f08 <memcpy>
 8007328:	ab1c      	add	r3, sp, #112	; 0x70
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	ab1b      	add	r3, sp, #108	; 0x6c
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	4642      	mov	r2, r8
 8007332:	464b      	mov	r3, r9
 8007334:	4650      	mov	r0, sl
 8007336:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800733a:	f002 f9dd 	bl	80096f8 <__d2b>
 800733e:	901a      	str	r0, [sp, #104]	; 0x68
 8007340:	2800      	cmp	r0, #0
 8007342:	f43f aef8 	beq.w	8007136 <_strtod_l+0x47e>
 8007346:	2101      	movs	r1, #1
 8007348:	4650      	mov	r0, sl
 800734a:	f001 ff2b 	bl	80091a4 <__i2b>
 800734e:	4603      	mov	r3, r0
 8007350:	9004      	str	r0, [sp, #16]
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f aeef 	beq.w	8007136 <_strtod_l+0x47e>
 8007358:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800735a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800735c:	2d00      	cmp	r5, #0
 800735e:	bfab      	itete	ge
 8007360:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007362:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007364:	18ee      	addge	r6, r5, r3
 8007366:	1b5c      	sublt	r4, r3, r5
 8007368:	9b05      	ldr	r3, [sp, #20]
 800736a:	bfa8      	it	ge
 800736c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800736e:	eba5 0503 	sub.w	r5, r5, r3
 8007372:	4415      	add	r5, r2
 8007374:	4b6e      	ldr	r3, [pc, #440]	; (8007530 <_strtod_l+0x878>)
 8007376:	f105 35ff 	add.w	r5, r5, #4294967295
 800737a:	bfb8      	it	lt
 800737c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800737e:	429d      	cmp	r5, r3
 8007380:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007384:	f280 80c4 	bge.w	8007510 <_strtod_l+0x858>
 8007388:	1b5b      	subs	r3, r3, r5
 800738a:	2b1f      	cmp	r3, #31
 800738c:	f04f 0701 	mov.w	r7, #1
 8007390:	eba2 0203 	sub.w	r2, r2, r3
 8007394:	f300 80b1 	bgt.w	80074fa <_strtod_l+0x842>
 8007398:	2500      	movs	r5, #0
 800739a:	fa07 f303 	lsl.w	r3, r7, r3
 800739e:	930f      	str	r3, [sp, #60]	; 0x3c
 80073a0:	18b7      	adds	r7, r6, r2
 80073a2:	9b05      	ldr	r3, [sp, #20]
 80073a4:	42be      	cmp	r6, r7
 80073a6:	4414      	add	r4, r2
 80073a8:	441c      	add	r4, r3
 80073aa:	4633      	mov	r3, r6
 80073ac:	bfa8      	it	ge
 80073ae:	463b      	movge	r3, r7
 80073b0:	42a3      	cmp	r3, r4
 80073b2:	bfa8      	it	ge
 80073b4:	4623      	movge	r3, r4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	bfc2      	ittt	gt
 80073ba:	1aff      	subgt	r7, r7, r3
 80073bc:	1ae4      	subgt	r4, r4, r3
 80073be:	1af6      	subgt	r6, r6, r3
 80073c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dd17      	ble.n	80073f6 <_strtod_l+0x73e>
 80073c6:	461a      	mov	r2, r3
 80073c8:	4650      	mov	r0, sl
 80073ca:	9904      	ldr	r1, [sp, #16]
 80073cc:	f001 ffa8 	bl	8009320 <__pow5mult>
 80073d0:	9004      	str	r0, [sp, #16]
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f43f aeaf 	beq.w	8007136 <_strtod_l+0x47e>
 80073d8:	4601      	mov	r1, r0
 80073da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073dc:	4650      	mov	r0, sl
 80073de:	f001 fef7 	bl	80091d0 <__multiply>
 80073e2:	9009      	str	r0, [sp, #36]	; 0x24
 80073e4:	2800      	cmp	r0, #0
 80073e6:	f43f aea6 	beq.w	8007136 <_strtod_l+0x47e>
 80073ea:	4650      	mov	r0, sl
 80073ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073ee:	f001 fdd9 	bl	8008fa4 <_Bfree>
 80073f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f4:	931a      	str	r3, [sp, #104]	; 0x68
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	f300 808e 	bgt.w	8007518 <_strtod_l+0x860>
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	dd08      	ble.n	8007414 <_strtod_l+0x75c>
 8007402:	4650      	mov	r0, sl
 8007404:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007406:	9906      	ldr	r1, [sp, #24]
 8007408:	f001 ff8a 	bl	8009320 <__pow5mult>
 800740c:	9006      	str	r0, [sp, #24]
 800740e:	2800      	cmp	r0, #0
 8007410:	f43f ae91 	beq.w	8007136 <_strtod_l+0x47e>
 8007414:	2c00      	cmp	r4, #0
 8007416:	dd08      	ble.n	800742a <_strtod_l+0x772>
 8007418:	4622      	mov	r2, r4
 800741a:	4650      	mov	r0, sl
 800741c:	9906      	ldr	r1, [sp, #24]
 800741e:	f001 ffd9 	bl	80093d4 <__lshift>
 8007422:	9006      	str	r0, [sp, #24]
 8007424:	2800      	cmp	r0, #0
 8007426:	f43f ae86 	beq.w	8007136 <_strtod_l+0x47e>
 800742a:	2e00      	cmp	r6, #0
 800742c:	dd08      	ble.n	8007440 <_strtod_l+0x788>
 800742e:	4632      	mov	r2, r6
 8007430:	4650      	mov	r0, sl
 8007432:	9904      	ldr	r1, [sp, #16]
 8007434:	f001 ffce 	bl	80093d4 <__lshift>
 8007438:	9004      	str	r0, [sp, #16]
 800743a:	2800      	cmp	r0, #0
 800743c:	f43f ae7b 	beq.w	8007136 <_strtod_l+0x47e>
 8007440:	4650      	mov	r0, sl
 8007442:	9a06      	ldr	r2, [sp, #24]
 8007444:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007446:	f002 f851 	bl	80094ec <__mdiff>
 800744a:	4683      	mov	fp, r0
 800744c:	2800      	cmp	r0, #0
 800744e:	f43f ae72 	beq.w	8007136 <_strtod_l+0x47e>
 8007452:	2400      	movs	r4, #0
 8007454:	68c3      	ldr	r3, [r0, #12]
 8007456:	9904      	ldr	r1, [sp, #16]
 8007458:	60c4      	str	r4, [r0, #12]
 800745a:	930b      	str	r3, [sp, #44]	; 0x2c
 800745c:	f002 f82a 	bl	80094b4 <__mcmp>
 8007460:	42a0      	cmp	r0, r4
 8007462:	da6b      	bge.n	800753c <_strtod_l+0x884>
 8007464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007466:	ea53 0308 	orrs.w	r3, r3, r8
 800746a:	f040 8091 	bne.w	8007590 <_strtod_l+0x8d8>
 800746e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007472:	2b00      	cmp	r3, #0
 8007474:	f040 808c 	bne.w	8007590 <_strtod_l+0x8d8>
 8007478:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800747c:	0d1b      	lsrs	r3, r3, #20
 800747e:	051b      	lsls	r3, r3, #20
 8007480:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007484:	f240 8084 	bls.w	8007590 <_strtod_l+0x8d8>
 8007488:	f8db 3014 	ldr.w	r3, [fp, #20]
 800748c:	b91b      	cbnz	r3, 8007496 <_strtod_l+0x7de>
 800748e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007492:	2b01      	cmp	r3, #1
 8007494:	dd7c      	ble.n	8007590 <_strtod_l+0x8d8>
 8007496:	4659      	mov	r1, fp
 8007498:	2201      	movs	r2, #1
 800749a:	4650      	mov	r0, sl
 800749c:	f001 ff9a 	bl	80093d4 <__lshift>
 80074a0:	9904      	ldr	r1, [sp, #16]
 80074a2:	4683      	mov	fp, r0
 80074a4:	f002 f806 	bl	80094b4 <__mcmp>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	dd71      	ble.n	8007590 <_strtod_l+0x8d8>
 80074ac:	9905      	ldr	r1, [sp, #20]
 80074ae:	464b      	mov	r3, r9
 80074b0:	4a20      	ldr	r2, [pc, #128]	; (8007534 <_strtod_l+0x87c>)
 80074b2:	2900      	cmp	r1, #0
 80074b4:	f000 808c 	beq.w	80075d0 <_strtod_l+0x918>
 80074b8:	ea02 0109 	and.w	r1, r2, r9
 80074bc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074c0:	f300 8086 	bgt.w	80075d0 <_strtod_l+0x918>
 80074c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80074c8:	f77f aeaa 	ble.w	8007220 <_strtod_l+0x568>
 80074cc:	4640      	mov	r0, r8
 80074ce:	4649      	mov	r1, r9
 80074d0:	4b19      	ldr	r3, [pc, #100]	; (8007538 <_strtod_l+0x880>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	f7f9 f80a 	bl	80004ec <__aeabi_dmul>
 80074d8:	460b      	mov	r3, r1
 80074da:	4303      	orrs	r3, r0
 80074dc:	bf08      	it	eq
 80074de:	2322      	moveq	r3, #34	; 0x22
 80074e0:	4680      	mov	r8, r0
 80074e2:	4689      	mov	r9, r1
 80074e4:	bf08      	it	eq
 80074e6:	f8ca 3000 	streq.w	r3, [sl]
 80074ea:	e62f      	b.n	800714c <_strtod_l+0x494>
 80074ec:	f04f 32ff 	mov.w	r2, #4294967295
 80074f0:	fa02 f303 	lsl.w	r3, r2, r3
 80074f4:	ea03 0808 	and.w	r8, r3, r8
 80074f8:	e6e0      	b.n	80072bc <_strtod_l+0x604>
 80074fa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80074fe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007502:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007506:	35e2      	adds	r5, #226	; 0xe2
 8007508:	fa07 f505 	lsl.w	r5, r7, r5
 800750c:	970f      	str	r7, [sp, #60]	; 0x3c
 800750e:	e747      	b.n	80073a0 <_strtod_l+0x6e8>
 8007510:	2301      	movs	r3, #1
 8007512:	2500      	movs	r5, #0
 8007514:	930f      	str	r3, [sp, #60]	; 0x3c
 8007516:	e743      	b.n	80073a0 <_strtod_l+0x6e8>
 8007518:	463a      	mov	r2, r7
 800751a:	4650      	mov	r0, sl
 800751c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800751e:	f001 ff59 	bl	80093d4 <__lshift>
 8007522:	901a      	str	r0, [sp, #104]	; 0x68
 8007524:	2800      	cmp	r0, #0
 8007526:	f47f af69 	bne.w	80073fc <_strtod_l+0x744>
 800752a:	e604      	b.n	8007136 <_strtod_l+0x47e>
 800752c:	0800abc0 	.word	0x0800abc0
 8007530:	fffffc02 	.word	0xfffffc02
 8007534:	7ff00000 	.word	0x7ff00000
 8007538:	39500000 	.word	0x39500000
 800753c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007540:	d165      	bne.n	800760e <_strtod_l+0x956>
 8007542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007544:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007548:	b35a      	cbz	r2, 80075a2 <_strtod_l+0x8ea>
 800754a:	4a99      	ldr	r2, [pc, #612]	; (80077b0 <_strtod_l+0xaf8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d12b      	bne.n	80075a8 <_strtod_l+0x8f0>
 8007550:	9b05      	ldr	r3, [sp, #20]
 8007552:	4641      	mov	r1, r8
 8007554:	b303      	cbz	r3, 8007598 <_strtod_l+0x8e0>
 8007556:	464a      	mov	r2, r9
 8007558:	4b96      	ldr	r3, [pc, #600]	; (80077b4 <_strtod_l+0xafc>)
 800755a:	4013      	ands	r3, r2
 800755c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007560:	f04f 32ff 	mov.w	r2, #4294967295
 8007564:	d81b      	bhi.n	800759e <_strtod_l+0x8e6>
 8007566:	0d1b      	lsrs	r3, r3, #20
 8007568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	4299      	cmp	r1, r3
 8007572:	d119      	bne.n	80075a8 <_strtod_l+0x8f0>
 8007574:	4b90      	ldr	r3, [pc, #576]	; (80077b8 <_strtod_l+0xb00>)
 8007576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007578:	429a      	cmp	r2, r3
 800757a:	d102      	bne.n	8007582 <_strtod_l+0x8ca>
 800757c:	3101      	adds	r1, #1
 800757e:	f43f adda 	beq.w	8007136 <_strtod_l+0x47e>
 8007582:	f04f 0800 	mov.w	r8, #0
 8007586:	4b8b      	ldr	r3, [pc, #556]	; (80077b4 <_strtod_l+0xafc>)
 8007588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800758a:	401a      	ands	r2, r3
 800758c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007590:	9b05      	ldr	r3, [sp, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d19a      	bne.n	80074cc <_strtod_l+0x814>
 8007596:	e5d9      	b.n	800714c <_strtod_l+0x494>
 8007598:	f04f 33ff 	mov.w	r3, #4294967295
 800759c:	e7e8      	b.n	8007570 <_strtod_l+0x8b8>
 800759e:	4613      	mov	r3, r2
 80075a0:	e7e6      	b.n	8007570 <_strtod_l+0x8b8>
 80075a2:	ea53 0308 	orrs.w	r3, r3, r8
 80075a6:	d081      	beq.n	80074ac <_strtod_l+0x7f4>
 80075a8:	b1e5      	cbz	r5, 80075e4 <_strtod_l+0x92c>
 80075aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ac:	421d      	tst	r5, r3
 80075ae:	d0ef      	beq.n	8007590 <_strtod_l+0x8d8>
 80075b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	9a05      	ldr	r2, [sp, #20]
 80075b8:	b1c3      	cbz	r3, 80075ec <_strtod_l+0x934>
 80075ba:	f7ff fb5b 	bl	8006c74 <sulp>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075c6:	f7f8 fddb 	bl	8000180 <__adddf3>
 80075ca:	4680      	mov	r8, r0
 80075cc:	4689      	mov	r9, r1
 80075ce:	e7df      	b.n	8007590 <_strtod_l+0x8d8>
 80075d0:	4013      	ands	r3, r2
 80075d2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80075d6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80075da:	f04f 38ff 	mov.w	r8, #4294967295
 80075de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80075e2:	e7d5      	b.n	8007590 <_strtod_l+0x8d8>
 80075e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075e6:	ea13 0f08 	tst.w	r3, r8
 80075ea:	e7e0      	b.n	80075ae <_strtod_l+0x8f6>
 80075ec:	f7ff fb42 	bl	8006c74 <sulp>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075f8:	f7f8 fdc0 	bl	800017c <__aeabi_dsub>
 80075fc:	2200      	movs	r2, #0
 80075fe:	2300      	movs	r3, #0
 8007600:	4680      	mov	r8, r0
 8007602:	4689      	mov	r9, r1
 8007604:	f7f9 f9da 	bl	80009bc <__aeabi_dcmpeq>
 8007608:	2800      	cmp	r0, #0
 800760a:	d0c1      	beq.n	8007590 <_strtod_l+0x8d8>
 800760c:	e608      	b.n	8007220 <_strtod_l+0x568>
 800760e:	4658      	mov	r0, fp
 8007610:	9904      	ldr	r1, [sp, #16]
 8007612:	f002 f8cd 	bl	80097b0 <__ratio>
 8007616:	2200      	movs	r2, #0
 8007618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800761c:	4606      	mov	r6, r0
 800761e:	460f      	mov	r7, r1
 8007620:	f7f9 f9e0 	bl	80009e4 <__aeabi_dcmple>
 8007624:	2800      	cmp	r0, #0
 8007626:	d070      	beq.n	800770a <_strtod_l+0xa52>
 8007628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d042      	beq.n	80076b4 <_strtod_l+0x9fc>
 800762e:	2600      	movs	r6, #0
 8007630:	4f62      	ldr	r7, [pc, #392]	; (80077bc <_strtod_l+0xb04>)
 8007632:	4d62      	ldr	r5, [pc, #392]	; (80077bc <_strtod_l+0xb04>)
 8007634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800763a:	0d1b      	lsrs	r3, r3, #20
 800763c:	051b      	lsls	r3, r3, #20
 800763e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007642:	4b5f      	ldr	r3, [pc, #380]	; (80077c0 <_strtod_l+0xb08>)
 8007644:	429a      	cmp	r2, r3
 8007646:	f040 80c3 	bne.w	80077d0 <_strtod_l+0xb18>
 800764a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764c:	4640      	mov	r0, r8
 800764e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007652:	4649      	mov	r1, r9
 8007654:	f001 ffd6 	bl	8009604 <__ulp>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f8 ff44 	bl	80004ec <__aeabi_dmul>
 8007664:	4642      	mov	r2, r8
 8007666:	464b      	mov	r3, r9
 8007668:	f7f8 fd8a 	bl	8000180 <__adddf3>
 800766c:	460b      	mov	r3, r1
 800766e:	4951      	ldr	r1, [pc, #324]	; (80077b4 <_strtod_l+0xafc>)
 8007670:	4a54      	ldr	r2, [pc, #336]	; (80077c4 <_strtod_l+0xb0c>)
 8007672:	4019      	ands	r1, r3
 8007674:	4291      	cmp	r1, r2
 8007676:	4680      	mov	r8, r0
 8007678:	d95d      	bls.n	8007736 <_strtod_l+0xa7e>
 800767a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800767c:	4b4e      	ldr	r3, [pc, #312]	; (80077b8 <_strtod_l+0xb00>)
 800767e:	429a      	cmp	r2, r3
 8007680:	d103      	bne.n	800768a <_strtod_l+0x9d2>
 8007682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007684:	3301      	adds	r3, #1
 8007686:	f43f ad56 	beq.w	8007136 <_strtod_l+0x47e>
 800768a:	f04f 38ff 	mov.w	r8, #4294967295
 800768e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80077b8 <_strtod_l+0xb00>
 8007692:	4650      	mov	r0, sl
 8007694:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007696:	f001 fc85 	bl	8008fa4 <_Bfree>
 800769a:	4650      	mov	r0, sl
 800769c:	9906      	ldr	r1, [sp, #24]
 800769e:	f001 fc81 	bl	8008fa4 <_Bfree>
 80076a2:	4650      	mov	r0, sl
 80076a4:	9904      	ldr	r1, [sp, #16]
 80076a6:	f001 fc7d 	bl	8008fa4 <_Bfree>
 80076aa:	4659      	mov	r1, fp
 80076ac:	4650      	mov	r0, sl
 80076ae:	f001 fc79 	bl	8008fa4 <_Bfree>
 80076b2:	e627      	b.n	8007304 <_strtod_l+0x64c>
 80076b4:	f1b8 0f00 	cmp.w	r8, #0
 80076b8:	d119      	bne.n	80076ee <_strtod_l+0xa36>
 80076ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076c0:	b9e3      	cbnz	r3, 80076fc <_strtod_l+0xa44>
 80076c2:	2200      	movs	r2, #0
 80076c4:	4630      	mov	r0, r6
 80076c6:	4639      	mov	r1, r7
 80076c8:	4b3c      	ldr	r3, [pc, #240]	; (80077bc <_strtod_l+0xb04>)
 80076ca:	f7f9 f981 	bl	80009d0 <__aeabi_dcmplt>
 80076ce:	b9c8      	cbnz	r0, 8007704 <_strtod_l+0xa4c>
 80076d0:	2200      	movs	r2, #0
 80076d2:	4630      	mov	r0, r6
 80076d4:	4639      	mov	r1, r7
 80076d6:	4b3c      	ldr	r3, [pc, #240]	; (80077c8 <_strtod_l+0xb10>)
 80076d8:	f7f8 ff08 	bl	80004ec <__aeabi_dmul>
 80076dc:	4604      	mov	r4, r0
 80076de:	460d      	mov	r5, r1
 80076e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80076e4:	9416      	str	r4, [sp, #88]	; 0x58
 80076e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80076e8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80076ec:	e7a2      	b.n	8007634 <_strtod_l+0x97c>
 80076ee:	f1b8 0f01 	cmp.w	r8, #1
 80076f2:	d103      	bne.n	80076fc <_strtod_l+0xa44>
 80076f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f43f ad92 	beq.w	8007220 <_strtod_l+0x568>
 80076fc:	2600      	movs	r6, #0
 80076fe:	2400      	movs	r4, #0
 8007700:	4f32      	ldr	r7, [pc, #200]	; (80077cc <_strtod_l+0xb14>)
 8007702:	e796      	b.n	8007632 <_strtod_l+0x97a>
 8007704:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007706:	4d30      	ldr	r5, [pc, #192]	; (80077c8 <_strtod_l+0xb10>)
 8007708:	e7ea      	b.n	80076e0 <_strtod_l+0xa28>
 800770a:	4b2f      	ldr	r3, [pc, #188]	; (80077c8 <_strtod_l+0xb10>)
 800770c:	2200      	movs	r2, #0
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	f7f8 feeb 	bl	80004ec <__aeabi_dmul>
 8007716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007718:	4604      	mov	r4, r0
 800771a:	460d      	mov	r5, r1
 800771c:	b933      	cbnz	r3, 800772c <_strtod_l+0xa74>
 800771e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007722:	9010      	str	r0, [sp, #64]	; 0x40
 8007724:	9311      	str	r3, [sp, #68]	; 0x44
 8007726:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800772a:	e783      	b.n	8007634 <_strtod_l+0x97c>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007734:	e7f7      	b.n	8007726 <_strtod_l+0xa6e>
 8007736:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1a8      	bne.n	8007692 <_strtod_l+0x9da>
 8007740:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007744:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007746:	0d1b      	lsrs	r3, r3, #20
 8007748:	051b      	lsls	r3, r3, #20
 800774a:	429a      	cmp	r2, r3
 800774c:	d1a1      	bne.n	8007692 <_strtod_l+0x9da>
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f9 fa9f 	bl	8000c94 <__aeabi_d2lz>
 8007756:	f7f8 fe9b 	bl	8000490 <__aeabi_l2d>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f8 fd0b 	bl	800017c <__aeabi_dsub>
 8007766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800776c:	ea43 0308 	orr.w	r3, r3, r8
 8007770:	4313      	orrs	r3, r2
 8007772:	4604      	mov	r4, r0
 8007774:	460d      	mov	r5, r1
 8007776:	d066      	beq.n	8007846 <_strtod_l+0xb8e>
 8007778:	a309      	add	r3, pc, #36	; (adr r3, 80077a0 <_strtod_l+0xae8>)
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	f7f9 f927 	bl	80009d0 <__aeabi_dcmplt>
 8007782:	2800      	cmp	r0, #0
 8007784:	f47f ace2 	bne.w	800714c <_strtod_l+0x494>
 8007788:	a307      	add	r3, pc, #28	; (adr r3, 80077a8 <_strtod_l+0xaf0>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	4620      	mov	r0, r4
 8007790:	4629      	mov	r1, r5
 8007792:	f7f9 f93b 	bl	8000a0c <__aeabi_dcmpgt>
 8007796:	2800      	cmp	r0, #0
 8007798:	f43f af7b 	beq.w	8007692 <_strtod_l+0x9da>
 800779c:	e4d6      	b.n	800714c <_strtod_l+0x494>
 800779e:	bf00      	nop
 80077a0:	94a03595 	.word	0x94a03595
 80077a4:	3fdfffff 	.word	0x3fdfffff
 80077a8:	35afe535 	.word	0x35afe535
 80077ac:	3fe00000 	.word	0x3fe00000
 80077b0:	000fffff 	.word	0x000fffff
 80077b4:	7ff00000 	.word	0x7ff00000
 80077b8:	7fefffff 	.word	0x7fefffff
 80077bc:	3ff00000 	.word	0x3ff00000
 80077c0:	7fe00000 	.word	0x7fe00000
 80077c4:	7c9fffff 	.word	0x7c9fffff
 80077c8:	3fe00000 	.word	0x3fe00000
 80077cc:	bff00000 	.word	0xbff00000
 80077d0:	9b05      	ldr	r3, [sp, #20]
 80077d2:	b313      	cbz	r3, 800781a <_strtod_l+0xb62>
 80077d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077da:	d81e      	bhi.n	800781a <_strtod_l+0xb62>
 80077dc:	a326      	add	r3, pc, #152	; (adr r3, 8007878 <_strtod_l+0xbc0>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	4620      	mov	r0, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	f7f9 f8fd 	bl	80009e4 <__aeabi_dcmple>
 80077ea:	b190      	cbz	r0, 8007812 <_strtod_l+0xb5a>
 80077ec:	4629      	mov	r1, r5
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7f9 f954 	bl	8000a9c <__aeabi_d2uiz>
 80077f4:	2801      	cmp	r0, #1
 80077f6:	bf38      	it	cc
 80077f8:	2001      	movcc	r0, #1
 80077fa:	f7f8 fdfd 	bl	80003f8 <__aeabi_ui2d>
 80077fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007800:	4604      	mov	r4, r0
 8007802:	460d      	mov	r5, r1
 8007804:	b9d3      	cbnz	r3, 800783c <_strtod_l+0xb84>
 8007806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800780a:	9012      	str	r0, [sp, #72]	; 0x48
 800780c:	9313      	str	r3, [sp, #76]	; 0x4c
 800780e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007812:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007814:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007818:	1a9f      	subs	r7, r3, r2
 800781a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800781e:	f001 fef1 	bl	8009604 <__ulp>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	f7f8 fe5f 	bl	80004ec <__aeabi_dmul>
 800782e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007832:	f7f8 fca5 	bl	8000180 <__adddf3>
 8007836:	4680      	mov	r8, r0
 8007838:	4689      	mov	r9, r1
 800783a:	e77e      	b.n	800773a <_strtod_l+0xa82>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007844:	e7e3      	b.n	800780e <_strtod_l+0xb56>
 8007846:	a30e      	add	r3, pc, #56	; (adr r3, 8007880 <_strtod_l+0xbc8>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f9 f8c0 	bl	80009d0 <__aeabi_dcmplt>
 8007850:	e7a1      	b.n	8007796 <_strtod_l+0xade>
 8007852:	2300      	movs	r3, #0
 8007854:	930a      	str	r3, [sp, #40]	; 0x28
 8007856:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007858:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	f7ff ba71 	b.w	8006d42 <_strtod_l+0x8a>
 8007860:	2a65      	cmp	r2, #101	; 0x65
 8007862:	f43f ab63 	beq.w	8006f2c <_strtod_l+0x274>
 8007866:	2a45      	cmp	r2, #69	; 0x45
 8007868:	f43f ab60 	beq.w	8006f2c <_strtod_l+0x274>
 800786c:	2301      	movs	r3, #1
 800786e:	f7ff bb95 	b.w	8006f9c <_strtod_l+0x2e4>
 8007872:	bf00      	nop
 8007874:	f3af 8000 	nop.w
 8007878:	ffc00000 	.word	0xffc00000
 800787c:	41dfffff 	.word	0x41dfffff
 8007880:	94a03595 	.word	0x94a03595
 8007884:	3fcfffff 	.word	0x3fcfffff

08007888 <strtof>:
 8007888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800788c:	4f22      	ldr	r7, [pc, #136]	; (8007918 <strtof+0x90>)
 800788e:	460a      	mov	r2, r1
 8007890:	4b22      	ldr	r3, [pc, #136]	; (800791c <strtof+0x94>)
 8007892:	4601      	mov	r1, r0
 8007894:	6838      	ldr	r0, [r7, #0]
 8007896:	f7ff fa0f 	bl	8006cb8 <_strtod_l>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4606      	mov	r6, r0
 80078a0:	460c      	mov	r4, r1
 80078a2:	f7f9 f8bd 	bl	8000a20 <__aeabi_dcmpun>
 80078a6:	b168      	cbz	r0, 80078c4 <strtof+0x3c>
 80078a8:	2c00      	cmp	r4, #0
 80078aa:	481d      	ldr	r0, [pc, #116]	; (8007920 <strtof+0x98>)
 80078ac:	da06      	bge.n	80078bc <strtof+0x34>
 80078ae:	f002 fa53 	bl	8009d58 <nanf>
 80078b2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80078b6:	4628      	mov	r0, r5
 80078b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c0:	f002 ba4a 	b.w	8009d58 <nanf>
 80078c4:	4621      	mov	r1, r4
 80078c6:	4630      	mov	r0, r6
 80078c8:	f7f9 f908 	bl	8000adc <__aeabi_d2f>
 80078cc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80078d0:	4605      	mov	r5, r0
 80078d2:	4914      	ldr	r1, [pc, #80]	; (8007924 <strtof+0x9c>)
 80078d4:	4640      	mov	r0, r8
 80078d6:	f7f9 f9c7 	bl	8000c68 <__aeabi_fcmpun>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d1eb      	bne.n	80078b6 <strtof+0x2e>
 80078de:	4640      	mov	r0, r8
 80078e0:	4910      	ldr	r1, [pc, #64]	; (8007924 <strtof+0x9c>)
 80078e2:	f7f9 f9a3 	bl	8000c2c <__aeabi_fcmple>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d1e5      	bne.n	80078b6 <strtof+0x2e>
 80078ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80078ee:	f04f 32ff 	mov.w	r2, #4294967295
 80078f2:	4630      	mov	r0, r6
 80078f4:	4621      	mov	r1, r4
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <strtof+0xa0>)
 80078f8:	f7f9 f892 	bl	8000a20 <__aeabi_dcmpun>
 80078fc:	b940      	cbnz	r0, 8007910 <strtof+0x88>
 80078fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007902:	4630      	mov	r0, r6
 8007904:	4621      	mov	r1, r4
 8007906:	4b08      	ldr	r3, [pc, #32]	; (8007928 <strtof+0xa0>)
 8007908:	f7f9 f86c 	bl	80009e4 <__aeabi_dcmple>
 800790c:	2800      	cmp	r0, #0
 800790e:	d0d2      	beq.n	80078b6 <strtof+0x2e>
 8007910:	2222      	movs	r2, #34	; 0x22
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	e7ce      	b.n	80078b6 <strtof+0x2e>
 8007918:	200001d0 	.word	0x200001d0
 800791c:	20000238 	.word	0x20000238
 8007920:	0800a9c1 	.word	0x0800a9c1
 8007924:	7f7fffff 	.word	0x7f7fffff
 8007928:	7fefffff 	.word	0x7fefffff

0800792c <__strtok_r>:
 800792c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800792e:	b908      	cbnz	r0, 8007934 <__strtok_r+0x8>
 8007930:	6810      	ldr	r0, [r2, #0]
 8007932:	b188      	cbz	r0, 8007958 <__strtok_r+0x2c>
 8007934:	4604      	mov	r4, r0
 8007936:	460f      	mov	r7, r1
 8007938:	4620      	mov	r0, r4
 800793a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800793e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007942:	b91e      	cbnz	r6, 800794c <__strtok_r+0x20>
 8007944:	b965      	cbnz	r5, 8007960 <__strtok_r+0x34>
 8007946:	4628      	mov	r0, r5
 8007948:	6015      	str	r5, [r2, #0]
 800794a:	e005      	b.n	8007958 <__strtok_r+0x2c>
 800794c:	42b5      	cmp	r5, r6
 800794e:	d1f6      	bne.n	800793e <__strtok_r+0x12>
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f0      	bne.n	8007936 <__strtok_r+0xa>
 8007954:	6014      	str	r4, [r2, #0]
 8007956:	7003      	strb	r3, [r0, #0]
 8007958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795a:	461c      	mov	r4, r3
 800795c:	e00c      	b.n	8007978 <__strtok_r+0x4c>
 800795e:	b915      	cbnz	r5, 8007966 <__strtok_r+0x3a>
 8007960:	460e      	mov	r6, r1
 8007962:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007966:	f816 5b01 	ldrb.w	r5, [r6], #1
 800796a:	42ab      	cmp	r3, r5
 800796c:	d1f7      	bne.n	800795e <__strtok_r+0x32>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f3      	beq.n	800795a <__strtok_r+0x2e>
 8007972:	2300      	movs	r3, #0
 8007974:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007978:	6014      	str	r4, [r2, #0]
 800797a:	e7ed      	b.n	8007958 <__strtok_r+0x2c>

0800797c <strtok_r>:
 800797c:	2301      	movs	r3, #1
 800797e:	f7ff bfd5 	b.w	800792c <__strtok_r>
	...

08007984 <_strtoul_l.constprop.0>:
 8007984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007988:	4686      	mov	lr, r0
 800798a:	460d      	mov	r5, r1
 800798c:	4f35      	ldr	r7, [pc, #212]	; (8007a64 <_strtoul_l.constprop.0+0xe0>)
 800798e:	4628      	mov	r0, r5
 8007990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007994:	5de6      	ldrb	r6, [r4, r7]
 8007996:	f016 0608 	ands.w	r6, r6, #8
 800799a:	d1f8      	bne.n	800798e <_strtoul_l.constprop.0+0xa>
 800799c:	2c2d      	cmp	r4, #45	; 0x2d
 800799e:	d12f      	bne.n	8007a00 <_strtoul_l.constprop.0+0x7c>
 80079a0:	2601      	movs	r6, #1
 80079a2:	782c      	ldrb	r4, [r5, #0]
 80079a4:	1c85      	adds	r5, r0, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d057      	beq.n	8007a5a <_strtoul_l.constprop.0+0xd6>
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d109      	bne.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 80079ae:	2c30      	cmp	r4, #48	; 0x30
 80079b0:	d107      	bne.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 80079b2:	7828      	ldrb	r0, [r5, #0]
 80079b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80079b8:	2858      	cmp	r0, #88	; 0x58
 80079ba:	d149      	bne.n	8007a50 <_strtoul_l.constprop.0+0xcc>
 80079bc:	2310      	movs	r3, #16
 80079be:	786c      	ldrb	r4, [r5, #1]
 80079c0:	3502      	adds	r5, #2
 80079c2:	f04f 38ff 	mov.w	r8, #4294967295
 80079c6:	fbb8 f8f3 	udiv	r8, r8, r3
 80079ca:	2700      	movs	r7, #0
 80079cc:	fb03 f908 	mul.w	r9, r3, r8
 80079d0:	4638      	mov	r0, r7
 80079d2:	ea6f 0909 	mvn.w	r9, r9
 80079d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079da:	f1bc 0f09 	cmp.w	ip, #9
 80079de:	d814      	bhi.n	8007a0a <_strtoul_l.constprop.0+0x86>
 80079e0:	4664      	mov	r4, ip
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	dd22      	ble.n	8007a2c <_strtoul_l.constprop.0+0xa8>
 80079e6:	2f00      	cmp	r7, #0
 80079e8:	db1d      	blt.n	8007a26 <_strtoul_l.constprop.0+0xa2>
 80079ea:	4580      	cmp	r8, r0
 80079ec:	d31b      	bcc.n	8007a26 <_strtoul_l.constprop.0+0xa2>
 80079ee:	d101      	bne.n	80079f4 <_strtoul_l.constprop.0+0x70>
 80079f0:	45a1      	cmp	r9, r4
 80079f2:	db18      	blt.n	8007a26 <_strtoul_l.constprop.0+0xa2>
 80079f4:	2701      	movs	r7, #1
 80079f6:	fb00 4003 	mla	r0, r0, r3, r4
 80079fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079fe:	e7ea      	b.n	80079d6 <_strtoul_l.constprop.0+0x52>
 8007a00:	2c2b      	cmp	r4, #43	; 0x2b
 8007a02:	bf04      	itt	eq
 8007a04:	782c      	ldrbeq	r4, [r5, #0]
 8007a06:	1c85      	addeq	r5, r0, #2
 8007a08:	e7cd      	b.n	80079a6 <_strtoul_l.constprop.0+0x22>
 8007a0a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a0e:	f1bc 0f19 	cmp.w	ip, #25
 8007a12:	d801      	bhi.n	8007a18 <_strtoul_l.constprop.0+0x94>
 8007a14:	3c37      	subs	r4, #55	; 0x37
 8007a16:	e7e4      	b.n	80079e2 <_strtoul_l.constprop.0+0x5e>
 8007a18:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a1c:	f1bc 0f19 	cmp.w	ip, #25
 8007a20:	d804      	bhi.n	8007a2c <_strtoul_l.constprop.0+0xa8>
 8007a22:	3c57      	subs	r4, #87	; 0x57
 8007a24:	e7dd      	b.n	80079e2 <_strtoul_l.constprop.0+0x5e>
 8007a26:	f04f 37ff 	mov.w	r7, #4294967295
 8007a2a:	e7e6      	b.n	80079fa <_strtoul_l.constprop.0+0x76>
 8007a2c:	2f00      	cmp	r7, #0
 8007a2e:	da07      	bge.n	8007a40 <_strtoul_l.constprop.0+0xbc>
 8007a30:	2322      	movs	r3, #34	; 0x22
 8007a32:	f04f 30ff 	mov.w	r0, #4294967295
 8007a36:	f8ce 3000 	str.w	r3, [lr]
 8007a3a:	b932      	cbnz	r2, 8007a4a <_strtoul_l.constprop.0+0xc6>
 8007a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a40:	b106      	cbz	r6, 8007a44 <_strtoul_l.constprop.0+0xc0>
 8007a42:	4240      	negs	r0, r0
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	d0f9      	beq.n	8007a3c <_strtoul_l.constprop.0+0xb8>
 8007a48:	b107      	cbz	r7, 8007a4c <_strtoul_l.constprop.0+0xc8>
 8007a4a:	1e69      	subs	r1, r5, #1
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	e7f5      	b.n	8007a3c <_strtoul_l.constprop.0+0xb8>
 8007a50:	2430      	movs	r4, #48	; 0x30
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1b5      	bne.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 8007a56:	2308      	movs	r3, #8
 8007a58:	e7b3      	b.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 8007a5a:	2c30      	cmp	r4, #48	; 0x30
 8007a5c:	d0a9      	beq.n	80079b2 <_strtoul_l.constprop.0+0x2e>
 8007a5e:	230a      	movs	r3, #10
 8007a60:	e7af      	b.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 8007a62:	bf00      	nop
 8007a64:	0800abe9 	.word	0x0800abe9

08007a68 <strtoul>:
 8007a68:	4613      	mov	r3, r2
 8007a6a:	460a      	mov	r2, r1
 8007a6c:	4601      	mov	r1, r0
 8007a6e:	4802      	ldr	r0, [pc, #8]	; (8007a78 <strtoul+0x10>)
 8007a70:	6800      	ldr	r0, [r0, #0]
 8007a72:	f7ff bf87 	b.w	8007984 <_strtoul_l.constprop.0>
 8007a76:	bf00      	nop
 8007a78:	200001d0 	.word	0x200001d0

08007a7c <_vsniprintf_r>:
 8007a7c:	b530      	push	{r4, r5, lr}
 8007a7e:	4614      	mov	r4, r2
 8007a80:	2c00      	cmp	r4, #0
 8007a82:	4605      	mov	r5, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	b09b      	sub	sp, #108	; 0x6c
 8007a88:	da05      	bge.n	8007a96 <_vsniprintf_r+0x1a>
 8007a8a:	238b      	movs	r3, #139	; 0x8b
 8007a8c:	6003      	str	r3, [r0, #0]
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a92:	b01b      	add	sp, #108	; 0x6c
 8007a94:	bd30      	pop	{r4, r5, pc}
 8007a96:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007a9e:	bf0c      	ite	eq
 8007aa0:	4623      	moveq	r3, r4
 8007aa2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007aae:	9100      	str	r1, [sp, #0]
 8007ab0:	9104      	str	r1, [sp, #16]
 8007ab2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ab6:	4669      	mov	r1, sp
 8007ab8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007aba:	f002 f837 	bl	8009b2c <_svfiprintf_r>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	bfbc      	itt	lt
 8007ac2:	238b      	movlt	r3, #139	; 0x8b
 8007ac4:	602b      	strlt	r3, [r5, #0]
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	d0e3      	beq.n	8007a92 <_vsniprintf_r+0x16>
 8007aca:	2200      	movs	r2, #0
 8007acc:	9b00      	ldr	r3, [sp, #0]
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e7df      	b.n	8007a92 <_vsniprintf_r+0x16>
	...

08007ad4 <vsniprintf>:
 8007ad4:	b507      	push	{r0, r1, r2, lr}
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	460a      	mov	r2, r1
 8007adc:	4601      	mov	r1, r0
 8007ade:	4803      	ldr	r0, [pc, #12]	; (8007aec <vsniprintf+0x18>)
 8007ae0:	6800      	ldr	r0, [r0, #0]
 8007ae2:	f7ff ffcb 	bl	8007a7c <_vsniprintf_r>
 8007ae6:	b003      	add	sp, #12
 8007ae8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007aec:	200001d0 	.word	0x200001d0

08007af0 <quorem>:
 8007af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	6903      	ldr	r3, [r0, #16]
 8007af6:	690c      	ldr	r4, [r1, #16]
 8007af8:	4607      	mov	r7, r0
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	f2c0 8082 	blt.w	8007c04 <quorem+0x114>
 8007b00:	3c01      	subs	r4, #1
 8007b02:	f100 0514 	add.w	r5, r0, #20
 8007b06:	f101 0814 	add.w	r8, r1, #20
 8007b0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b28:	d331      	bcc.n	8007b8e <quorem+0x9e>
 8007b2a:	f04f 0e00 	mov.w	lr, #0
 8007b2e:	4640      	mov	r0, r8
 8007b30:	46ac      	mov	ip, r5
 8007b32:	46f2      	mov	sl, lr
 8007b34:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b38:	b293      	uxth	r3, r2
 8007b3a:	fb06 e303 	mla	r3, r6, r3, lr
 8007b3e:	0c12      	lsrs	r2, r2, #16
 8007b40:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	fb06 e202 	mla	r2, r6, r2, lr
 8007b4a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b4e:	f8dc a000 	ldr.w	sl, [ip]
 8007b52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b56:	fa1f fa8a 	uxth.w	sl, sl
 8007b5a:	4453      	add	r3, sl
 8007b5c:	f8dc a000 	ldr.w	sl, [ip]
 8007b60:	b292      	uxth	r2, r2
 8007b62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b70:	4581      	cmp	r9, r0
 8007b72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b76:	f84c 3b04 	str.w	r3, [ip], #4
 8007b7a:	d2db      	bcs.n	8007b34 <quorem+0x44>
 8007b7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b80:	b92b      	cbnz	r3, 8007b8e <quorem+0x9e>
 8007b82:	9b01      	ldr	r3, [sp, #4]
 8007b84:	3b04      	subs	r3, #4
 8007b86:	429d      	cmp	r5, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	d32f      	bcc.n	8007bec <quorem+0xfc>
 8007b8c:	613c      	str	r4, [r7, #16]
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f001 fc90 	bl	80094b4 <__mcmp>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	db25      	blt.n	8007be4 <quorem+0xf4>
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f04f 0c00 	mov.w	ip, #0
 8007b9e:	3601      	adds	r6, #1
 8007ba0:	f858 1b04 	ldr.w	r1, [r8], #4
 8007ba4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ba8:	b28b      	uxth	r3, r1
 8007baa:	ebac 0303 	sub.w	r3, ip, r3
 8007bae:	fa1f f28e 	uxth.w	r2, lr
 8007bb2:	4413      	add	r3, r2
 8007bb4:	0c0a      	lsrs	r2, r1, #16
 8007bb6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bc4:	45c1      	cmp	r9, r8
 8007bc6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bca:	f840 3b04 	str.w	r3, [r0], #4
 8007bce:	d2e7      	bcs.n	8007ba0 <quorem+0xb0>
 8007bd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bd8:	b922      	cbnz	r2, 8007be4 <quorem+0xf4>
 8007bda:	3b04      	subs	r3, #4
 8007bdc:	429d      	cmp	r5, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	d30a      	bcc.n	8007bf8 <quorem+0x108>
 8007be2:	613c      	str	r4, [r7, #16]
 8007be4:	4630      	mov	r0, r6
 8007be6:	b003      	add	sp, #12
 8007be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bec:	6812      	ldr	r2, [r2, #0]
 8007bee:	3b04      	subs	r3, #4
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	d1cb      	bne.n	8007b8c <quorem+0x9c>
 8007bf4:	3c01      	subs	r4, #1
 8007bf6:	e7c6      	b.n	8007b86 <quorem+0x96>
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	3b04      	subs	r3, #4
 8007bfc:	2a00      	cmp	r2, #0
 8007bfe:	d1f0      	bne.n	8007be2 <quorem+0xf2>
 8007c00:	3c01      	subs	r4, #1
 8007c02:	e7eb      	b.n	8007bdc <quorem+0xec>
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7ee      	b.n	8007be6 <quorem+0xf6>

08007c08 <_dtoa_r>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	4616      	mov	r6, r2
 8007c0e:	461f      	mov	r7, r3
 8007c10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c12:	b099      	sub	sp, #100	; 0x64
 8007c14:	4605      	mov	r5, r0
 8007c16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007c1e:	b974      	cbnz	r4, 8007c3e <_dtoa_r+0x36>
 8007c20:	2010      	movs	r0, #16
 8007c22:	f001 f949 	bl	8008eb8 <malloc>
 8007c26:	4602      	mov	r2, r0
 8007c28:	6268      	str	r0, [r5, #36]	; 0x24
 8007c2a:	b920      	cbnz	r0, 8007c36 <_dtoa_r+0x2e>
 8007c2c:	21ea      	movs	r1, #234	; 0xea
 8007c2e:	4ba8      	ldr	r3, [pc, #672]	; (8007ed0 <_dtoa_r+0x2c8>)
 8007c30:	48a8      	ldr	r0, [pc, #672]	; (8007ed4 <_dtoa_r+0x2cc>)
 8007c32:	f002 f8b7 	bl	8009da4 <__assert_func>
 8007c36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c3a:	6004      	str	r4, [r0, #0]
 8007c3c:	60c4      	str	r4, [r0, #12]
 8007c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c40:	6819      	ldr	r1, [r3, #0]
 8007c42:	b151      	cbz	r1, 8007c5a <_dtoa_r+0x52>
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	2301      	movs	r3, #1
 8007c48:	4093      	lsls	r3, r2
 8007c4a:	604a      	str	r2, [r1, #4]
 8007c4c:	608b      	str	r3, [r1, #8]
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f001 f9a8 	bl	8008fa4 <_Bfree>
 8007c54:	2200      	movs	r2, #0
 8007c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	1e3b      	subs	r3, r7, #0
 8007c5c:	bfaf      	iteee	ge
 8007c5e:	2300      	movge	r3, #0
 8007c60:	2201      	movlt	r2, #1
 8007c62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c66:	9305      	strlt	r3, [sp, #20]
 8007c68:	bfa8      	it	ge
 8007c6a:	f8c8 3000 	strge.w	r3, [r8]
 8007c6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007c72:	4b99      	ldr	r3, [pc, #612]	; (8007ed8 <_dtoa_r+0x2d0>)
 8007c74:	bfb8      	it	lt
 8007c76:	f8c8 2000 	strlt.w	r2, [r8]
 8007c7a:	ea33 0309 	bics.w	r3, r3, r9
 8007c7e:	d119      	bne.n	8007cb4 <_dtoa_r+0xac>
 8007c80:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c8c:	4333      	orrs	r3, r6
 8007c8e:	f000 857f 	beq.w	8008790 <_dtoa_r+0xb88>
 8007c92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c94:	b953      	cbnz	r3, 8007cac <_dtoa_r+0xa4>
 8007c96:	4b91      	ldr	r3, [pc, #580]	; (8007edc <_dtoa_r+0x2d4>)
 8007c98:	e022      	b.n	8007ce0 <_dtoa_r+0xd8>
 8007c9a:	4b91      	ldr	r3, [pc, #580]	; (8007ee0 <_dtoa_r+0x2d8>)
 8007c9c:	9303      	str	r3, [sp, #12]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	9803      	ldr	r0, [sp, #12]
 8007ca6:	b019      	add	sp, #100	; 0x64
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	4b8b      	ldr	r3, [pc, #556]	; (8007edc <_dtoa_r+0x2d4>)
 8007cae:	9303      	str	r3, [sp, #12]
 8007cb0:	3303      	adds	r3, #3
 8007cb2:	e7f5      	b.n	8007ca0 <_dtoa_r+0x98>
 8007cb4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007cb8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007cbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f7f8 fe7a 	bl	80009bc <__aeabi_dcmpeq>
 8007cc8:	4680      	mov	r8, r0
 8007cca:	b158      	cbz	r0, 8007ce4 <_dtoa_r+0xdc>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8558 	beq.w	800878a <_dtoa_r+0xb82>
 8007cda:	4882      	ldr	r0, [pc, #520]	; (8007ee4 <_dtoa_r+0x2dc>)
 8007cdc:	6018      	str	r0, [r3, #0]
 8007cde:	1e43      	subs	r3, r0, #1
 8007ce0:	9303      	str	r3, [sp, #12]
 8007ce2:	e7df      	b.n	8007ca4 <_dtoa_r+0x9c>
 8007ce4:	ab16      	add	r3, sp, #88	; 0x58
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	ab17      	add	r3, sp, #92	; 0x5c
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4628      	mov	r0, r5
 8007cee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cf2:	f001 fd01 	bl	80096f8 <__d2b>
 8007cf6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007cfa:	4683      	mov	fp, r0
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d07f      	beq.n	8007e00 <_dtoa_r+0x1f8>
 8007d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d06:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007d0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007d12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007d16:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	4b72      	ldr	r3, [pc, #456]	; (8007ee8 <_dtoa_r+0x2e0>)
 8007d1e:	f7f8 fa2d 	bl	800017c <__aeabi_dsub>
 8007d22:	a365      	add	r3, pc, #404	; (adr r3, 8007eb8 <_dtoa_r+0x2b0>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fbe0 	bl	80004ec <__aeabi_dmul>
 8007d2c:	a364      	add	r3, pc, #400	; (adr r3, 8007ec0 <_dtoa_r+0x2b8>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	f7f8 fa25 	bl	8000180 <__adddf3>
 8007d36:	4606      	mov	r6, r0
 8007d38:	4620      	mov	r0, r4
 8007d3a:	460f      	mov	r7, r1
 8007d3c:	f7f8 fb6c 	bl	8000418 <__aeabi_i2d>
 8007d40:	a361      	add	r3, pc, #388	; (adr r3, 8007ec8 <_dtoa_r+0x2c0>)
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	f7f8 fbd1 	bl	80004ec <__aeabi_dmul>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4630      	mov	r0, r6
 8007d50:	4639      	mov	r1, r7
 8007d52:	f7f8 fa15 	bl	8000180 <__adddf3>
 8007d56:	4606      	mov	r6, r0
 8007d58:	460f      	mov	r7, r1
 8007d5a:	f7f8 fe77 	bl	8000a4c <__aeabi_d2iz>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4682      	mov	sl, r0
 8007d62:	2300      	movs	r3, #0
 8007d64:	4630      	mov	r0, r6
 8007d66:	4639      	mov	r1, r7
 8007d68:	f7f8 fe32 	bl	80009d0 <__aeabi_dcmplt>
 8007d6c:	b148      	cbz	r0, 8007d82 <_dtoa_r+0x17a>
 8007d6e:	4650      	mov	r0, sl
 8007d70:	f7f8 fb52 	bl	8000418 <__aeabi_i2d>
 8007d74:	4632      	mov	r2, r6
 8007d76:	463b      	mov	r3, r7
 8007d78:	f7f8 fe20 	bl	80009bc <__aeabi_dcmpeq>
 8007d7c:	b908      	cbnz	r0, 8007d82 <_dtoa_r+0x17a>
 8007d7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d82:	f1ba 0f16 	cmp.w	sl, #22
 8007d86:	d858      	bhi.n	8007e3a <_dtoa_r+0x232>
 8007d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d8c:	4b57      	ldr	r3, [pc, #348]	; (8007eec <_dtoa_r+0x2e4>)
 8007d8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f7f8 fe1b 	bl	80009d0 <__aeabi_dcmplt>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d04f      	beq.n	8007e3e <_dtoa_r+0x236>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007da4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007da6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007da8:	1b1c      	subs	r4, r3, r4
 8007daa:	1e63      	subs	r3, r4, #1
 8007dac:	9309      	str	r3, [sp, #36]	; 0x24
 8007dae:	bf49      	itett	mi
 8007db0:	f1c4 0301 	rsbmi	r3, r4, #1
 8007db4:	2300      	movpl	r3, #0
 8007db6:	9306      	strmi	r3, [sp, #24]
 8007db8:	2300      	movmi	r3, #0
 8007dba:	bf54      	ite	pl
 8007dbc:	9306      	strpl	r3, [sp, #24]
 8007dbe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007dc0:	f1ba 0f00 	cmp.w	sl, #0
 8007dc4:	db3d      	blt.n	8007e42 <_dtoa_r+0x23a>
 8007dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007dcc:	4453      	add	r3, sl
 8007dce:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8007dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dd6:	2b09      	cmp	r3, #9
 8007dd8:	f200 808c 	bhi.w	8007ef4 <_dtoa_r+0x2ec>
 8007ddc:	2b05      	cmp	r3, #5
 8007dde:	bfc4      	itt	gt
 8007de0:	3b04      	subgt	r3, #4
 8007de2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007de6:	bfc8      	it	gt
 8007de8:	2400      	movgt	r4, #0
 8007dea:	f1a3 0302 	sub.w	r3, r3, #2
 8007dee:	bfd8      	it	le
 8007df0:	2401      	movle	r4, #1
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	f200 808a 	bhi.w	8007f0c <_dtoa_r+0x304>
 8007df8:	e8df f003 	tbb	[pc, r3]
 8007dfc:	5b4d4f2d 	.word	0x5b4d4f2d
 8007e00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007e04:	441c      	add	r4, r3
 8007e06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	bfc3      	ittte	gt
 8007e0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e12:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007e16:	fa09 f303 	lslgt.w	r3, r9, r3
 8007e1a:	f1c3 0320 	rsble	r3, r3, #32
 8007e1e:	bfc6      	itte	gt
 8007e20:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e24:	4318      	orrgt	r0, r3
 8007e26:	fa06 f003 	lslle.w	r0, r6, r3
 8007e2a:	f7f8 fae5 	bl	80003f8 <__aeabi_ui2d>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007e34:	3c01      	subs	r4, #1
 8007e36:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e38:	e76f      	b.n	8007d1a <_dtoa_r+0x112>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e7b2      	b.n	8007da4 <_dtoa_r+0x19c>
 8007e3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007e40:	e7b1      	b.n	8007da6 <_dtoa_r+0x19e>
 8007e42:	9b06      	ldr	r3, [sp, #24]
 8007e44:	eba3 030a 	sub.w	r3, r3, sl
 8007e48:	9306      	str	r3, [sp, #24]
 8007e4a:	f1ca 0300 	rsb	r3, sl, #0
 8007e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e50:	2300      	movs	r3, #0
 8007e52:	930e      	str	r3, [sp, #56]	; 0x38
 8007e54:	e7be      	b.n	8007dd4 <_dtoa_r+0x1cc>
 8007e56:	2300      	movs	r3, #0
 8007e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dc58      	bgt.n	8007f12 <_dtoa_r+0x30a>
 8007e60:	f04f 0901 	mov.w	r9, #1
 8007e64:	464b      	mov	r3, r9
 8007e66:	f8cd 9020 	str.w	r9, [sp, #32]
 8007e6a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007e6e:	2200      	movs	r2, #0
 8007e70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007e72:	6042      	str	r2, [r0, #4]
 8007e74:	2204      	movs	r2, #4
 8007e76:	f102 0614 	add.w	r6, r2, #20
 8007e7a:	429e      	cmp	r6, r3
 8007e7c:	6841      	ldr	r1, [r0, #4]
 8007e7e:	d94e      	bls.n	8007f1e <_dtoa_r+0x316>
 8007e80:	4628      	mov	r0, r5
 8007e82:	f001 f84f 	bl	8008f24 <_Balloc>
 8007e86:	9003      	str	r0, [sp, #12]
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d14c      	bne.n	8007f26 <_dtoa_r+0x31e>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e92:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <_dtoa_r+0x2e8>)
 8007e94:	e6cc      	b.n	8007c30 <_dtoa_r+0x28>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e7de      	b.n	8007e58 <_dtoa_r+0x250>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ea0:	eb0a 0903 	add.w	r9, sl, r3
 8007ea4:	f109 0301 	add.w	r3, r9, #1
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	9308      	str	r3, [sp, #32]
 8007eac:	bfb8      	it	lt
 8007eae:	2301      	movlt	r3, #1
 8007eb0:	e7dd      	b.n	8007e6e <_dtoa_r+0x266>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e7f2      	b.n	8007e9c <_dtoa_r+0x294>
 8007eb6:	bf00      	nop
 8007eb8:	636f4361 	.word	0x636f4361
 8007ebc:	3fd287a7 	.word	0x3fd287a7
 8007ec0:	8b60c8b3 	.word	0x8b60c8b3
 8007ec4:	3fc68a28 	.word	0x3fc68a28
 8007ec8:	509f79fb 	.word	0x509f79fb
 8007ecc:	3fd34413 	.word	0x3fd34413
 8007ed0:	0800acf6 	.word	0x0800acf6
 8007ed4:	0800ad0d 	.word	0x0800ad0d
 8007ed8:	7ff00000 	.word	0x7ff00000
 8007edc:	0800acf2 	.word	0x0800acf2
 8007ee0:	0800ace9 	.word	0x0800ace9
 8007ee4:	0800ab71 	.word	0x0800ab71
 8007ee8:	3ff80000 	.word	0x3ff80000
 8007eec:	0800ae78 	.word	0x0800ae78
 8007ef0:	0800ad68 	.word	0x0800ad68
 8007ef4:	2401      	movs	r4, #1
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	940b      	str	r4, [sp, #44]	; 0x2c
 8007efa:	9322      	str	r3, [sp, #136]	; 0x88
 8007efc:	f04f 39ff 	mov.w	r9, #4294967295
 8007f00:	2200      	movs	r2, #0
 8007f02:	2312      	movs	r3, #18
 8007f04:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f08:	9223      	str	r2, [sp, #140]	; 0x8c
 8007f0a:	e7b0      	b.n	8007e6e <_dtoa_r+0x266>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f10:	e7f4      	b.n	8007efc <_dtoa_r+0x2f4>
 8007f12:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007f16:	464b      	mov	r3, r9
 8007f18:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f1c:	e7a7      	b.n	8007e6e <_dtoa_r+0x266>
 8007f1e:	3101      	adds	r1, #1
 8007f20:	6041      	str	r1, [r0, #4]
 8007f22:	0052      	lsls	r2, r2, #1
 8007f24:	e7a7      	b.n	8007e76 <_dtoa_r+0x26e>
 8007f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f28:	9a03      	ldr	r2, [sp, #12]
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	2b0e      	cmp	r3, #14
 8007f30:	f200 80a8 	bhi.w	8008084 <_dtoa_r+0x47c>
 8007f34:	2c00      	cmp	r4, #0
 8007f36:	f000 80a5 	beq.w	8008084 <_dtoa_r+0x47c>
 8007f3a:	f1ba 0f00 	cmp.w	sl, #0
 8007f3e:	dd34      	ble.n	8007faa <_dtoa_r+0x3a2>
 8007f40:	4a9a      	ldr	r2, [pc, #616]	; (80081ac <_dtoa_r+0x5a4>)
 8007f42:	f00a 030f 	and.w	r3, sl, #15
 8007f46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f4a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f56:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007f5a:	d016      	beq.n	8007f8a <_dtoa_r+0x382>
 8007f5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f60:	4b93      	ldr	r3, [pc, #588]	; (80081b0 <_dtoa_r+0x5a8>)
 8007f62:	2703      	movs	r7, #3
 8007f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f68:	f7f8 fbea 	bl	8000740 <__aeabi_ddiv>
 8007f6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f70:	f004 040f 	and.w	r4, r4, #15
 8007f74:	4e8e      	ldr	r6, [pc, #568]	; (80081b0 <_dtoa_r+0x5a8>)
 8007f76:	b954      	cbnz	r4, 8007f8e <_dtoa_r+0x386>
 8007f78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f80:	f7f8 fbde 	bl	8000740 <__aeabi_ddiv>
 8007f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f88:	e029      	b.n	8007fde <_dtoa_r+0x3d6>
 8007f8a:	2702      	movs	r7, #2
 8007f8c:	e7f2      	b.n	8007f74 <_dtoa_r+0x36c>
 8007f8e:	07e1      	lsls	r1, r4, #31
 8007f90:	d508      	bpl.n	8007fa4 <_dtoa_r+0x39c>
 8007f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f9a:	f7f8 faa7 	bl	80004ec <__aeabi_dmul>
 8007f9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fa2:	3701      	adds	r7, #1
 8007fa4:	1064      	asrs	r4, r4, #1
 8007fa6:	3608      	adds	r6, #8
 8007fa8:	e7e5      	b.n	8007f76 <_dtoa_r+0x36e>
 8007faa:	f000 80a5 	beq.w	80080f8 <_dtoa_r+0x4f0>
 8007fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fb2:	f1ca 0400 	rsb	r4, sl, #0
 8007fb6:	4b7d      	ldr	r3, [pc, #500]	; (80081ac <_dtoa_r+0x5a4>)
 8007fb8:	f004 020f 	and.w	r2, r4, #15
 8007fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	f7f8 fa92 	bl	80004ec <__aeabi_dmul>
 8007fc8:	2702      	movs	r7, #2
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fd0:	4e77      	ldr	r6, [pc, #476]	; (80081b0 <_dtoa_r+0x5a8>)
 8007fd2:	1124      	asrs	r4, r4, #4
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	f040 8084 	bne.w	80080e2 <_dtoa_r+0x4da>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1d2      	bne.n	8007f84 <_dtoa_r+0x37c>
 8007fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 808b 	beq.w	80080fc <_dtoa_r+0x4f4>
 8007fe6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007fea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007fee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4b6f      	ldr	r3, [pc, #444]	; (80081b4 <_dtoa_r+0x5ac>)
 8007ff6:	f7f8 fceb 	bl	80009d0 <__aeabi_dcmplt>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d07e      	beq.n	80080fc <_dtoa_r+0x4f4>
 8007ffe:	9b08      	ldr	r3, [sp, #32]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d07b      	beq.n	80080fc <_dtoa_r+0x4f4>
 8008004:	f1b9 0f00 	cmp.w	r9, #0
 8008008:	dd38      	ble.n	800807c <_dtoa_r+0x474>
 800800a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800800e:	2200      	movs	r2, #0
 8008010:	4b69      	ldr	r3, [pc, #420]	; (80081b8 <_dtoa_r+0x5b0>)
 8008012:	f7f8 fa6b 	bl	80004ec <__aeabi_dmul>
 8008016:	464c      	mov	r4, r9
 8008018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800801c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008020:	3701      	adds	r7, #1
 8008022:	4638      	mov	r0, r7
 8008024:	f7f8 f9f8 	bl	8000418 <__aeabi_i2d>
 8008028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802c:	f7f8 fa5e 	bl	80004ec <__aeabi_dmul>
 8008030:	2200      	movs	r2, #0
 8008032:	4b62      	ldr	r3, [pc, #392]	; (80081bc <_dtoa_r+0x5b4>)
 8008034:	f7f8 f8a4 	bl	8000180 <__adddf3>
 8008038:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800803c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008040:	9611      	str	r6, [sp, #68]	; 0x44
 8008042:	2c00      	cmp	r4, #0
 8008044:	d15d      	bne.n	8008102 <_dtoa_r+0x4fa>
 8008046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800804a:	2200      	movs	r2, #0
 800804c:	4b5c      	ldr	r3, [pc, #368]	; (80081c0 <_dtoa_r+0x5b8>)
 800804e:	f7f8 f895 	bl	800017c <__aeabi_dsub>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800805a:	4633      	mov	r3, r6
 800805c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800805e:	f7f8 fcd5 	bl	8000a0c <__aeabi_dcmpgt>
 8008062:	2800      	cmp	r0, #0
 8008064:	f040 829c 	bne.w	80085a0 <_dtoa_r+0x998>
 8008068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800806c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800806e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008072:	f7f8 fcad 	bl	80009d0 <__aeabi_dcmplt>
 8008076:	2800      	cmp	r0, #0
 8008078:	f040 8290 	bne.w	800859c <_dtoa_r+0x994>
 800807c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008080:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008086:	2b00      	cmp	r3, #0
 8008088:	f2c0 8152 	blt.w	8008330 <_dtoa_r+0x728>
 800808c:	f1ba 0f0e 	cmp.w	sl, #14
 8008090:	f300 814e 	bgt.w	8008330 <_dtoa_r+0x728>
 8008094:	4b45      	ldr	r3, [pc, #276]	; (80081ac <_dtoa_r+0x5a4>)
 8008096:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800809a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800809e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80080a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f280 80db 	bge.w	8008260 <_dtoa_r+0x658>
 80080aa:	9b08      	ldr	r3, [sp, #32]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f300 80d7 	bgt.w	8008260 <_dtoa_r+0x658>
 80080b2:	f040 8272 	bne.w	800859a <_dtoa_r+0x992>
 80080b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ba:	2200      	movs	r2, #0
 80080bc:	4b40      	ldr	r3, [pc, #256]	; (80081c0 <_dtoa_r+0x5b8>)
 80080be:	f7f8 fa15 	bl	80004ec <__aeabi_dmul>
 80080c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080c6:	f7f8 fc97 	bl	80009f8 <__aeabi_dcmpge>
 80080ca:	9c08      	ldr	r4, [sp, #32]
 80080cc:	4626      	mov	r6, r4
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f040 8248 	bne.w	8008564 <_dtoa_r+0x95c>
 80080d4:	2331      	movs	r3, #49	; 0x31
 80080d6:	9f03      	ldr	r7, [sp, #12]
 80080d8:	f10a 0a01 	add.w	sl, sl, #1
 80080dc:	f807 3b01 	strb.w	r3, [r7], #1
 80080e0:	e244      	b.n	800856c <_dtoa_r+0x964>
 80080e2:	07e2      	lsls	r2, r4, #31
 80080e4:	d505      	bpl.n	80080f2 <_dtoa_r+0x4ea>
 80080e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080ea:	f7f8 f9ff 	bl	80004ec <__aeabi_dmul>
 80080ee:	2301      	movs	r3, #1
 80080f0:	3701      	adds	r7, #1
 80080f2:	1064      	asrs	r4, r4, #1
 80080f4:	3608      	adds	r6, #8
 80080f6:	e76d      	b.n	8007fd4 <_dtoa_r+0x3cc>
 80080f8:	2702      	movs	r7, #2
 80080fa:	e770      	b.n	8007fde <_dtoa_r+0x3d6>
 80080fc:	46d0      	mov	r8, sl
 80080fe:	9c08      	ldr	r4, [sp, #32]
 8008100:	e78f      	b.n	8008022 <_dtoa_r+0x41a>
 8008102:	9903      	ldr	r1, [sp, #12]
 8008104:	4b29      	ldr	r3, [pc, #164]	; (80081ac <_dtoa_r+0x5a4>)
 8008106:	4421      	add	r1, r4
 8008108:	9112      	str	r1, [sp, #72]	; 0x48
 800810a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800810c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008110:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008114:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008118:	2900      	cmp	r1, #0
 800811a:	d055      	beq.n	80081c8 <_dtoa_r+0x5c0>
 800811c:	2000      	movs	r0, #0
 800811e:	4929      	ldr	r1, [pc, #164]	; (80081c4 <_dtoa_r+0x5bc>)
 8008120:	f7f8 fb0e 	bl	8000740 <__aeabi_ddiv>
 8008124:	463b      	mov	r3, r7
 8008126:	4632      	mov	r2, r6
 8008128:	f7f8 f828 	bl	800017c <__aeabi_dsub>
 800812c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008130:	9f03      	ldr	r7, [sp, #12]
 8008132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008136:	f7f8 fc89 	bl	8000a4c <__aeabi_d2iz>
 800813a:	4604      	mov	r4, r0
 800813c:	f7f8 f96c 	bl	8000418 <__aeabi_i2d>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008148:	f7f8 f818 	bl	800017c <__aeabi_dsub>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	3430      	adds	r4, #48	; 0x30
 8008152:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008156:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800815a:	f807 4b01 	strb.w	r4, [r7], #1
 800815e:	f7f8 fc37 	bl	80009d0 <__aeabi_dcmplt>
 8008162:	2800      	cmp	r0, #0
 8008164:	d174      	bne.n	8008250 <_dtoa_r+0x648>
 8008166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800816a:	2000      	movs	r0, #0
 800816c:	4911      	ldr	r1, [pc, #68]	; (80081b4 <_dtoa_r+0x5ac>)
 800816e:	f7f8 f805 	bl	800017c <__aeabi_dsub>
 8008172:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008176:	f7f8 fc2b 	bl	80009d0 <__aeabi_dcmplt>
 800817a:	2800      	cmp	r0, #0
 800817c:	f040 80b7 	bne.w	80082ee <_dtoa_r+0x6e6>
 8008180:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008182:	429f      	cmp	r7, r3
 8008184:	f43f af7a 	beq.w	800807c <_dtoa_r+0x474>
 8008188:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800818c:	2200      	movs	r2, #0
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <_dtoa_r+0x5b0>)
 8008190:	f7f8 f9ac 	bl	80004ec <__aeabi_dmul>
 8008194:	2200      	movs	r2, #0
 8008196:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800819a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800819e:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <_dtoa_r+0x5b0>)
 80081a0:	f7f8 f9a4 	bl	80004ec <__aeabi_dmul>
 80081a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a8:	e7c3      	b.n	8008132 <_dtoa_r+0x52a>
 80081aa:	bf00      	nop
 80081ac:	0800ae78 	.word	0x0800ae78
 80081b0:	0800ae50 	.word	0x0800ae50
 80081b4:	3ff00000 	.word	0x3ff00000
 80081b8:	40240000 	.word	0x40240000
 80081bc:	401c0000 	.word	0x401c0000
 80081c0:	40140000 	.word	0x40140000
 80081c4:	3fe00000 	.word	0x3fe00000
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 f98e 	bl	80004ec <__aeabi_dmul>
 80081d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081d6:	9c03      	ldr	r4, [sp, #12]
 80081d8:	9314      	str	r3, [sp, #80]	; 0x50
 80081da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081de:	f7f8 fc35 	bl	8000a4c <__aeabi_d2iz>
 80081e2:	9015      	str	r0, [sp, #84]	; 0x54
 80081e4:	f7f8 f918 	bl	8000418 <__aeabi_i2d>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f0:	f7f7 ffc4 	bl	800017c <__aeabi_dsub>
 80081f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081f6:	4606      	mov	r6, r0
 80081f8:	3330      	adds	r3, #48	; 0x30
 80081fa:	f804 3b01 	strb.w	r3, [r4], #1
 80081fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008200:	460f      	mov	r7, r1
 8008202:	429c      	cmp	r4, r3
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	d124      	bne.n	8008254 <_dtoa_r+0x64c>
 800820a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800820e:	4bb0      	ldr	r3, [pc, #704]	; (80084d0 <_dtoa_r+0x8c8>)
 8008210:	f7f7 ffb6 	bl	8000180 <__adddf3>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4630      	mov	r0, r6
 800821a:	4639      	mov	r1, r7
 800821c:	f7f8 fbf6 	bl	8000a0c <__aeabi_dcmpgt>
 8008220:	2800      	cmp	r0, #0
 8008222:	d163      	bne.n	80082ec <_dtoa_r+0x6e4>
 8008224:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008228:	2000      	movs	r0, #0
 800822a:	49a9      	ldr	r1, [pc, #676]	; (80084d0 <_dtoa_r+0x8c8>)
 800822c:	f7f7 ffa6 	bl	800017c <__aeabi_dsub>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4630      	mov	r0, r6
 8008236:	4639      	mov	r1, r7
 8008238:	f7f8 fbca 	bl	80009d0 <__aeabi_dcmplt>
 800823c:	2800      	cmp	r0, #0
 800823e:	f43f af1d 	beq.w	800807c <_dtoa_r+0x474>
 8008242:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008244:	1e7b      	subs	r3, r7, #1
 8008246:	9314      	str	r3, [sp, #80]	; 0x50
 8008248:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800824c:	2b30      	cmp	r3, #48	; 0x30
 800824e:	d0f8      	beq.n	8008242 <_dtoa_r+0x63a>
 8008250:	46c2      	mov	sl, r8
 8008252:	e03b      	b.n	80082cc <_dtoa_r+0x6c4>
 8008254:	4b9f      	ldr	r3, [pc, #636]	; (80084d4 <_dtoa_r+0x8cc>)
 8008256:	f7f8 f949 	bl	80004ec <__aeabi_dmul>
 800825a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800825e:	e7bc      	b.n	80081da <_dtoa_r+0x5d2>
 8008260:	9f03      	ldr	r7, [sp, #12]
 8008262:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	f7f8 fa67 	bl	8000740 <__aeabi_ddiv>
 8008272:	f7f8 fbeb 	bl	8000a4c <__aeabi_d2iz>
 8008276:	4604      	mov	r4, r0
 8008278:	f7f8 f8ce 	bl	8000418 <__aeabi_i2d>
 800827c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008280:	f7f8 f934 	bl	80004ec <__aeabi_dmul>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	f7f7 ff76 	bl	800017c <__aeabi_dsub>
 8008290:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008294:	f807 6b01 	strb.w	r6, [r7], #1
 8008298:	9e03      	ldr	r6, [sp, #12]
 800829a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800829e:	1bbe      	subs	r6, r7, r6
 80082a0:	45b4      	cmp	ip, r6
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	d136      	bne.n	8008316 <_dtoa_r+0x70e>
 80082a8:	f7f7 ff6a 	bl	8000180 <__adddf3>
 80082ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082b0:	4680      	mov	r8, r0
 80082b2:	4689      	mov	r9, r1
 80082b4:	f7f8 fbaa 	bl	8000a0c <__aeabi_dcmpgt>
 80082b8:	bb58      	cbnz	r0, 8008312 <_dtoa_r+0x70a>
 80082ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082be:	4640      	mov	r0, r8
 80082c0:	4649      	mov	r1, r9
 80082c2:	f7f8 fb7b 	bl	80009bc <__aeabi_dcmpeq>
 80082c6:	b108      	cbz	r0, 80082cc <_dtoa_r+0x6c4>
 80082c8:	07e1      	lsls	r1, r4, #31
 80082ca:	d422      	bmi.n	8008312 <_dtoa_r+0x70a>
 80082cc:	4628      	mov	r0, r5
 80082ce:	4659      	mov	r1, fp
 80082d0:	f000 fe68 	bl	8008fa4 <_Bfree>
 80082d4:	2300      	movs	r3, #0
 80082d6:	703b      	strb	r3, [r7, #0]
 80082d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80082da:	f10a 0001 	add.w	r0, sl, #1
 80082de:	6018      	str	r0, [r3, #0]
 80082e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f43f acde 	beq.w	8007ca4 <_dtoa_r+0x9c>
 80082e8:	601f      	str	r7, [r3, #0]
 80082ea:	e4db      	b.n	8007ca4 <_dtoa_r+0x9c>
 80082ec:	4627      	mov	r7, r4
 80082ee:	463b      	mov	r3, r7
 80082f0:	461f      	mov	r7, r3
 80082f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082f6:	2a39      	cmp	r2, #57	; 0x39
 80082f8:	d107      	bne.n	800830a <_dtoa_r+0x702>
 80082fa:	9a03      	ldr	r2, [sp, #12]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d1f7      	bne.n	80082f0 <_dtoa_r+0x6e8>
 8008300:	2230      	movs	r2, #48	; 0x30
 8008302:	9903      	ldr	r1, [sp, #12]
 8008304:	f108 0801 	add.w	r8, r8, #1
 8008308:	700a      	strb	r2, [r1, #0]
 800830a:	781a      	ldrb	r2, [r3, #0]
 800830c:	3201      	adds	r2, #1
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	e79e      	b.n	8008250 <_dtoa_r+0x648>
 8008312:	46d0      	mov	r8, sl
 8008314:	e7eb      	b.n	80082ee <_dtoa_r+0x6e6>
 8008316:	2200      	movs	r2, #0
 8008318:	4b6e      	ldr	r3, [pc, #440]	; (80084d4 <_dtoa_r+0x8cc>)
 800831a:	f7f8 f8e7 	bl	80004ec <__aeabi_dmul>
 800831e:	2200      	movs	r2, #0
 8008320:	2300      	movs	r3, #0
 8008322:	4680      	mov	r8, r0
 8008324:	4689      	mov	r9, r1
 8008326:	f7f8 fb49 	bl	80009bc <__aeabi_dcmpeq>
 800832a:	2800      	cmp	r0, #0
 800832c:	d09b      	beq.n	8008266 <_dtoa_r+0x65e>
 800832e:	e7cd      	b.n	80082cc <_dtoa_r+0x6c4>
 8008330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008332:	2a00      	cmp	r2, #0
 8008334:	f000 80d0 	beq.w	80084d8 <_dtoa_r+0x8d0>
 8008338:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800833a:	2a01      	cmp	r2, #1
 800833c:	f300 80ae 	bgt.w	800849c <_dtoa_r+0x894>
 8008340:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008342:	2a00      	cmp	r2, #0
 8008344:	f000 80a6 	beq.w	8008494 <_dtoa_r+0x88c>
 8008348:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800834c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800834e:	9f06      	ldr	r7, [sp, #24]
 8008350:	9a06      	ldr	r2, [sp, #24]
 8008352:	2101      	movs	r1, #1
 8008354:	441a      	add	r2, r3
 8008356:	9206      	str	r2, [sp, #24]
 8008358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800835a:	4628      	mov	r0, r5
 800835c:	441a      	add	r2, r3
 800835e:	9209      	str	r2, [sp, #36]	; 0x24
 8008360:	f000 ff20 	bl	80091a4 <__i2b>
 8008364:	4606      	mov	r6, r0
 8008366:	2f00      	cmp	r7, #0
 8008368:	dd0c      	ble.n	8008384 <_dtoa_r+0x77c>
 800836a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	dd09      	ble.n	8008384 <_dtoa_r+0x77c>
 8008370:	42bb      	cmp	r3, r7
 8008372:	bfa8      	it	ge
 8008374:	463b      	movge	r3, r7
 8008376:	9a06      	ldr	r2, [sp, #24]
 8008378:	1aff      	subs	r7, r7, r3
 800837a:	1ad2      	subs	r2, r2, r3
 800837c:	9206      	str	r2, [sp, #24]
 800837e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	9309      	str	r3, [sp, #36]	; 0x24
 8008384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008386:	b1f3      	cbz	r3, 80083c6 <_dtoa_r+0x7be>
 8008388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 80a8 	beq.w	80084e0 <_dtoa_r+0x8d8>
 8008390:	2c00      	cmp	r4, #0
 8008392:	dd10      	ble.n	80083b6 <_dtoa_r+0x7ae>
 8008394:	4631      	mov	r1, r6
 8008396:	4622      	mov	r2, r4
 8008398:	4628      	mov	r0, r5
 800839a:	f000 ffc1 	bl	8009320 <__pow5mult>
 800839e:	465a      	mov	r2, fp
 80083a0:	4601      	mov	r1, r0
 80083a2:	4606      	mov	r6, r0
 80083a4:	4628      	mov	r0, r5
 80083a6:	f000 ff13 	bl	80091d0 <__multiply>
 80083aa:	4680      	mov	r8, r0
 80083ac:	4659      	mov	r1, fp
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 fdf8 	bl	8008fa4 <_Bfree>
 80083b4:	46c3      	mov	fp, r8
 80083b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b8:	1b1a      	subs	r2, r3, r4
 80083ba:	d004      	beq.n	80083c6 <_dtoa_r+0x7be>
 80083bc:	4659      	mov	r1, fp
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 ffae 	bl	8009320 <__pow5mult>
 80083c4:	4683      	mov	fp, r0
 80083c6:	2101      	movs	r1, #1
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 feeb 	bl	80091a4 <__i2b>
 80083ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d0:	4604      	mov	r4, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f340 8086 	ble.w	80084e4 <_dtoa_r+0x8dc>
 80083d8:	461a      	mov	r2, r3
 80083da:	4601      	mov	r1, r0
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 ff9f 	bl	8009320 <__pow5mult>
 80083e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083e4:	4604      	mov	r4, r0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	dd7f      	ble.n	80084ea <_dtoa_r+0x8e2>
 80083ea:	f04f 0800 	mov.w	r8, #0
 80083ee:	6923      	ldr	r3, [r4, #16]
 80083f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083f4:	6918      	ldr	r0, [r3, #16]
 80083f6:	f000 fe87 	bl	8009108 <__hi0bits>
 80083fa:	f1c0 0020 	rsb	r0, r0, #32
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	4418      	add	r0, r3
 8008402:	f010 001f 	ands.w	r0, r0, #31
 8008406:	f000 8092 	beq.w	800852e <_dtoa_r+0x926>
 800840a:	f1c0 0320 	rsb	r3, r0, #32
 800840e:	2b04      	cmp	r3, #4
 8008410:	f340 808a 	ble.w	8008528 <_dtoa_r+0x920>
 8008414:	f1c0 001c 	rsb	r0, r0, #28
 8008418:	9b06      	ldr	r3, [sp, #24]
 800841a:	4407      	add	r7, r0
 800841c:	4403      	add	r3, r0
 800841e:	9306      	str	r3, [sp, #24]
 8008420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008422:	4403      	add	r3, r0
 8008424:	9309      	str	r3, [sp, #36]	; 0x24
 8008426:	9b06      	ldr	r3, [sp, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	dd05      	ble.n	8008438 <_dtoa_r+0x830>
 800842c:	4659      	mov	r1, fp
 800842e:	461a      	mov	r2, r3
 8008430:	4628      	mov	r0, r5
 8008432:	f000 ffcf 	bl	80093d4 <__lshift>
 8008436:	4683      	mov	fp, r0
 8008438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	dd05      	ble.n	800844a <_dtoa_r+0x842>
 800843e:	4621      	mov	r1, r4
 8008440:	461a      	mov	r2, r3
 8008442:	4628      	mov	r0, r5
 8008444:	f000 ffc6 	bl	80093d4 <__lshift>
 8008448:	4604      	mov	r4, r0
 800844a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d070      	beq.n	8008532 <_dtoa_r+0x92a>
 8008450:	4621      	mov	r1, r4
 8008452:	4658      	mov	r0, fp
 8008454:	f001 f82e 	bl	80094b4 <__mcmp>
 8008458:	2800      	cmp	r0, #0
 800845a:	da6a      	bge.n	8008532 <_dtoa_r+0x92a>
 800845c:	2300      	movs	r3, #0
 800845e:	4659      	mov	r1, fp
 8008460:	220a      	movs	r2, #10
 8008462:	4628      	mov	r0, r5
 8008464:	f000 fdc0 	bl	8008fe8 <__multadd>
 8008468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800846a:	4683      	mov	fp, r0
 800846c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 8194 	beq.w	800879e <_dtoa_r+0xb96>
 8008476:	4631      	mov	r1, r6
 8008478:	2300      	movs	r3, #0
 800847a:	220a      	movs	r2, #10
 800847c:	4628      	mov	r0, r5
 800847e:	f000 fdb3 	bl	8008fe8 <__multadd>
 8008482:	f1b9 0f00 	cmp.w	r9, #0
 8008486:	4606      	mov	r6, r0
 8008488:	f300 8093 	bgt.w	80085b2 <_dtoa_r+0x9aa>
 800848c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800848e:	2b02      	cmp	r3, #2
 8008490:	dc57      	bgt.n	8008542 <_dtoa_r+0x93a>
 8008492:	e08e      	b.n	80085b2 <_dtoa_r+0x9aa>
 8008494:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800849a:	e757      	b.n	800834c <_dtoa_r+0x744>
 800849c:	9b08      	ldr	r3, [sp, #32]
 800849e:	1e5c      	subs	r4, r3, #1
 80084a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a2:	42a3      	cmp	r3, r4
 80084a4:	bfb7      	itett	lt
 80084a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084a8:	1b1c      	subge	r4, r3, r4
 80084aa:	1ae2      	sublt	r2, r4, r3
 80084ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80084ae:	bfbe      	ittt	lt
 80084b0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80084b2:	189b      	addlt	r3, r3, r2
 80084b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80084b6:	9b08      	ldr	r3, [sp, #32]
 80084b8:	bfb8      	it	lt
 80084ba:	2400      	movlt	r4, #0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfbb      	ittet	lt
 80084c0:	9b06      	ldrlt	r3, [sp, #24]
 80084c2:	9a08      	ldrlt	r2, [sp, #32]
 80084c4:	9f06      	ldrge	r7, [sp, #24]
 80084c6:	1a9f      	sublt	r7, r3, r2
 80084c8:	bfac      	ite	ge
 80084ca:	9b08      	ldrge	r3, [sp, #32]
 80084cc:	2300      	movlt	r3, #0
 80084ce:	e73f      	b.n	8008350 <_dtoa_r+0x748>
 80084d0:	3fe00000 	.word	0x3fe00000
 80084d4:	40240000 	.word	0x40240000
 80084d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084da:	9f06      	ldr	r7, [sp, #24]
 80084dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80084de:	e742      	b.n	8008366 <_dtoa_r+0x75e>
 80084e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084e2:	e76b      	b.n	80083bc <_dtoa_r+0x7b4>
 80084e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	dc19      	bgt.n	800851e <_dtoa_r+0x916>
 80084ea:	9b04      	ldr	r3, [sp, #16]
 80084ec:	b9bb      	cbnz	r3, 800851e <_dtoa_r+0x916>
 80084ee:	9b05      	ldr	r3, [sp, #20]
 80084f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f4:	b99b      	cbnz	r3, 800851e <_dtoa_r+0x916>
 80084f6:	9b05      	ldr	r3, [sp, #20]
 80084f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084fc:	0d1b      	lsrs	r3, r3, #20
 80084fe:	051b      	lsls	r3, r3, #20
 8008500:	b183      	cbz	r3, 8008524 <_dtoa_r+0x91c>
 8008502:	f04f 0801 	mov.w	r8, #1
 8008506:	9b06      	ldr	r3, [sp, #24]
 8008508:	3301      	adds	r3, #1
 800850a:	9306      	str	r3, [sp, #24]
 800850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850e:	3301      	adds	r3, #1
 8008510:	9309      	str	r3, [sp, #36]	; 0x24
 8008512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008514:	2b00      	cmp	r3, #0
 8008516:	f47f af6a 	bne.w	80083ee <_dtoa_r+0x7e6>
 800851a:	2001      	movs	r0, #1
 800851c:	e76f      	b.n	80083fe <_dtoa_r+0x7f6>
 800851e:	f04f 0800 	mov.w	r8, #0
 8008522:	e7f6      	b.n	8008512 <_dtoa_r+0x90a>
 8008524:	4698      	mov	r8, r3
 8008526:	e7f4      	b.n	8008512 <_dtoa_r+0x90a>
 8008528:	f43f af7d 	beq.w	8008426 <_dtoa_r+0x81e>
 800852c:	4618      	mov	r0, r3
 800852e:	301c      	adds	r0, #28
 8008530:	e772      	b.n	8008418 <_dtoa_r+0x810>
 8008532:	9b08      	ldr	r3, [sp, #32]
 8008534:	2b00      	cmp	r3, #0
 8008536:	dc36      	bgt.n	80085a6 <_dtoa_r+0x99e>
 8008538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800853a:	2b02      	cmp	r3, #2
 800853c:	dd33      	ble.n	80085a6 <_dtoa_r+0x99e>
 800853e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008542:	f1b9 0f00 	cmp.w	r9, #0
 8008546:	d10d      	bne.n	8008564 <_dtoa_r+0x95c>
 8008548:	4621      	mov	r1, r4
 800854a:	464b      	mov	r3, r9
 800854c:	2205      	movs	r2, #5
 800854e:	4628      	mov	r0, r5
 8008550:	f000 fd4a 	bl	8008fe8 <__multadd>
 8008554:	4601      	mov	r1, r0
 8008556:	4604      	mov	r4, r0
 8008558:	4658      	mov	r0, fp
 800855a:	f000 ffab 	bl	80094b4 <__mcmp>
 800855e:	2800      	cmp	r0, #0
 8008560:	f73f adb8 	bgt.w	80080d4 <_dtoa_r+0x4cc>
 8008564:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008566:	9f03      	ldr	r7, [sp, #12]
 8008568:	ea6f 0a03 	mvn.w	sl, r3
 800856c:	f04f 0800 	mov.w	r8, #0
 8008570:	4621      	mov	r1, r4
 8008572:	4628      	mov	r0, r5
 8008574:	f000 fd16 	bl	8008fa4 <_Bfree>
 8008578:	2e00      	cmp	r6, #0
 800857a:	f43f aea7 	beq.w	80082cc <_dtoa_r+0x6c4>
 800857e:	f1b8 0f00 	cmp.w	r8, #0
 8008582:	d005      	beq.n	8008590 <_dtoa_r+0x988>
 8008584:	45b0      	cmp	r8, r6
 8008586:	d003      	beq.n	8008590 <_dtoa_r+0x988>
 8008588:	4641      	mov	r1, r8
 800858a:	4628      	mov	r0, r5
 800858c:	f000 fd0a 	bl	8008fa4 <_Bfree>
 8008590:	4631      	mov	r1, r6
 8008592:	4628      	mov	r0, r5
 8008594:	f000 fd06 	bl	8008fa4 <_Bfree>
 8008598:	e698      	b.n	80082cc <_dtoa_r+0x6c4>
 800859a:	2400      	movs	r4, #0
 800859c:	4626      	mov	r6, r4
 800859e:	e7e1      	b.n	8008564 <_dtoa_r+0x95c>
 80085a0:	46c2      	mov	sl, r8
 80085a2:	4626      	mov	r6, r4
 80085a4:	e596      	b.n	80080d4 <_dtoa_r+0x4cc>
 80085a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 80fd 	beq.w	80087ac <_dtoa_r+0xba4>
 80085b2:	2f00      	cmp	r7, #0
 80085b4:	dd05      	ble.n	80085c2 <_dtoa_r+0x9ba>
 80085b6:	4631      	mov	r1, r6
 80085b8:	463a      	mov	r2, r7
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 ff0a 	bl	80093d4 <__lshift>
 80085c0:	4606      	mov	r6, r0
 80085c2:	f1b8 0f00 	cmp.w	r8, #0
 80085c6:	d05c      	beq.n	8008682 <_dtoa_r+0xa7a>
 80085c8:	4628      	mov	r0, r5
 80085ca:	6871      	ldr	r1, [r6, #4]
 80085cc:	f000 fcaa 	bl	8008f24 <_Balloc>
 80085d0:	4607      	mov	r7, r0
 80085d2:	b928      	cbnz	r0, 80085e0 <_dtoa_r+0x9d8>
 80085d4:	4602      	mov	r2, r0
 80085d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085da:	4b7f      	ldr	r3, [pc, #508]	; (80087d8 <_dtoa_r+0xbd0>)
 80085dc:	f7ff bb28 	b.w	8007c30 <_dtoa_r+0x28>
 80085e0:	6932      	ldr	r2, [r6, #16]
 80085e2:	f106 010c 	add.w	r1, r6, #12
 80085e6:	3202      	adds	r2, #2
 80085e8:	0092      	lsls	r2, r2, #2
 80085ea:	300c      	adds	r0, #12
 80085ec:	f000 fc8c 	bl	8008f08 <memcpy>
 80085f0:	2201      	movs	r2, #1
 80085f2:	4639      	mov	r1, r7
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 feed 	bl	80093d4 <__lshift>
 80085fa:	46b0      	mov	r8, r6
 80085fc:	4606      	mov	r6, r0
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	9308      	str	r3, [sp, #32]
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	444b      	add	r3, r9
 8008608:	930a      	str	r3, [sp, #40]	; 0x28
 800860a:	9b04      	ldr	r3, [sp, #16]
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	9309      	str	r3, [sp, #36]	; 0x24
 8008612:	9b08      	ldr	r3, [sp, #32]
 8008614:	4621      	mov	r1, r4
 8008616:	3b01      	subs	r3, #1
 8008618:	4658      	mov	r0, fp
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	f7ff fa68 	bl	8007af0 <quorem>
 8008620:	4603      	mov	r3, r0
 8008622:	4641      	mov	r1, r8
 8008624:	3330      	adds	r3, #48	; 0x30
 8008626:	9006      	str	r0, [sp, #24]
 8008628:	4658      	mov	r0, fp
 800862a:	930b      	str	r3, [sp, #44]	; 0x2c
 800862c:	f000 ff42 	bl	80094b4 <__mcmp>
 8008630:	4632      	mov	r2, r6
 8008632:	4681      	mov	r9, r0
 8008634:	4621      	mov	r1, r4
 8008636:	4628      	mov	r0, r5
 8008638:	f000 ff58 	bl	80094ec <__mdiff>
 800863c:	68c2      	ldr	r2, [r0, #12]
 800863e:	4607      	mov	r7, r0
 8008640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008642:	bb02      	cbnz	r2, 8008686 <_dtoa_r+0xa7e>
 8008644:	4601      	mov	r1, r0
 8008646:	4658      	mov	r0, fp
 8008648:	f000 ff34 	bl	80094b4 <__mcmp>
 800864c:	4602      	mov	r2, r0
 800864e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008650:	4639      	mov	r1, r7
 8008652:	4628      	mov	r0, r5
 8008654:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008658:	f000 fca4 	bl	8008fa4 <_Bfree>
 800865c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800865e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008660:	9f08      	ldr	r7, [sp, #32]
 8008662:	ea43 0102 	orr.w	r1, r3, r2
 8008666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008668:	430b      	orrs	r3, r1
 800866a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800866c:	d10d      	bne.n	800868a <_dtoa_r+0xa82>
 800866e:	2b39      	cmp	r3, #57	; 0x39
 8008670:	d029      	beq.n	80086c6 <_dtoa_r+0xabe>
 8008672:	f1b9 0f00 	cmp.w	r9, #0
 8008676:	dd01      	ble.n	800867c <_dtoa_r+0xa74>
 8008678:	9b06      	ldr	r3, [sp, #24]
 800867a:	3331      	adds	r3, #49	; 0x31
 800867c:	9a04      	ldr	r2, [sp, #16]
 800867e:	7013      	strb	r3, [r2, #0]
 8008680:	e776      	b.n	8008570 <_dtoa_r+0x968>
 8008682:	4630      	mov	r0, r6
 8008684:	e7b9      	b.n	80085fa <_dtoa_r+0x9f2>
 8008686:	2201      	movs	r2, #1
 8008688:	e7e2      	b.n	8008650 <_dtoa_r+0xa48>
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	db06      	blt.n	800869e <_dtoa_r+0xa96>
 8008690:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008692:	ea41 0909 	orr.w	r9, r1, r9
 8008696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008698:	ea59 0101 	orrs.w	r1, r9, r1
 800869c:	d120      	bne.n	80086e0 <_dtoa_r+0xad8>
 800869e:	2a00      	cmp	r2, #0
 80086a0:	ddec      	ble.n	800867c <_dtoa_r+0xa74>
 80086a2:	4659      	mov	r1, fp
 80086a4:	2201      	movs	r2, #1
 80086a6:	4628      	mov	r0, r5
 80086a8:	9308      	str	r3, [sp, #32]
 80086aa:	f000 fe93 	bl	80093d4 <__lshift>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4683      	mov	fp, r0
 80086b2:	f000 feff 	bl	80094b4 <__mcmp>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	9b08      	ldr	r3, [sp, #32]
 80086ba:	dc02      	bgt.n	80086c2 <_dtoa_r+0xaba>
 80086bc:	d1de      	bne.n	800867c <_dtoa_r+0xa74>
 80086be:	07da      	lsls	r2, r3, #31
 80086c0:	d5dc      	bpl.n	800867c <_dtoa_r+0xa74>
 80086c2:	2b39      	cmp	r3, #57	; 0x39
 80086c4:	d1d8      	bne.n	8008678 <_dtoa_r+0xa70>
 80086c6:	2339      	movs	r3, #57	; 0x39
 80086c8:	9a04      	ldr	r2, [sp, #16]
 80086ca:	7013      	strb	r3, [r2, #0]
 80086cc:	463b      	mov	r3, r7
 80086ce:	461f      	mov	r7, r3
 80086d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	2a39      	cmp	r2, #57	; 0x39
 80086d8:	d050      	beq.n	800877c <_dtoa_r+0xb74>
 80086da:	3201      	adds	r2, #1
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e747      	b.n	8008570 <_dtoa_r+0x968>
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	dd03      	ble.n	80086ec <_dtoa_r+0xae4>
 80086e4:	2b39      	cmp	r3, #57	; 0x39
 80086e6:	d0ee      	beq.n	80086c6 <_dtoa_r+0xabe>
 80086e8:	3301      	adds	r3, #1
 80086ea:	e7c7      	b.n	800867c <_dtoa_r+0xa74>
 80086ec:	9a08      	ldr	r2, [sp, #32]
 80086ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086f4:	428a      	cmp	r2, r1
 80086f6:	d02a      	beq.n	800874e <_dtoa_r+0xb46>
 80086f8:	4659      	mov	r1, fp
 80086fa:	2300      	movs	r3, #0
 80086fc:	220a      	movs	r2, #10
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 fc72 	bl	8008fe8 <__multadd>
 8008704:	45b0      	cmp	r8, r6
 8008706:	4683      	mov	fp, r0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	f04f 020a 	mov.w	r2, #10
 8008710:	4641      	mov	r1, r8
 8008712:	4628      	mov	r0, r5
 8008714:	d107      	bne.n	8008726 <_dtoa_r+0xb1e>
 8008716:	f000 fc67 	bl	8008fe8 <__multadd>
 800871a:	4680      	mov	r8, r0
 800871c:	4606      	mov	r6, r0
 800871e:	9b08      	ldr	r3, [sp, #32]
 8008720:	3301      	adds	r3, #1
 8008722:	9308      	str	r3, [sp, #32]
 8008724:	e775      	b.n	8008612 <_dtoa_r+0xa0a>
 8008726:	f000 fc5f 	bl	8008fe8 <__multadd>
 800872a:	4631      	mov	r1, r6
 800872c:	4680      	mov	r8, r0
 800872e:	2300      	movs	r3, #0
 8008730:	220a      	movs	r2, #10
 8008732:	4628      	mov	r0, r5
 8008734:	f000 fc58 	bl	8008fe8 <__multadd>
 8008738:	4606      	mov	r6, r0
 800873a:	e7f0      	b.n	800871e <_dtoa_r+0xb16>
 800873c:	f1b9 0f00 	cmp.w	r9, #0
 8008740:	bfcc      	ite	gt
 8008742:	464f      	movgt	r7, r9
 8008744:	2701      	movle	r7, #1
 8008746:	f04f 0800 	mov.w	r8, #0
 800874a:	9a03      	ldr	r2, [sp, #12]
 800874c:	4417      	add	r7, r2
 800874e:	4659      	mov	r1, fp
 8008750:	2201      	movs	r2, #1
 8008752:	4628      	mov	r0, r5
 8008754:	9308      	str	r3, [sp, #32]
 8008756:	f000 fe3d 	bl	80093d4 <__lshift>
 800875a:	4621      	mov	r1, r4
 800875c:	4683      	mov	fp, r0
 800875e:	f000 fea9 	bl	80094b4 <__mcmp>
 8008762:	2800      	cmp	r0, #0
 8008764:	dcb2      	bgt.n	80086cc <_dtoa_r+0xac4>
 8008766:	d102      	bne.n	800876e <_dtoa_r+0xb66>
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	07db      	lsls	r3, r3, #31
 800876c:	d4ae      	bmi.n	80086cc <_dtoa_r+0xac4>
 800876e:	463b      	mov	r3, r7
 8008770:	461f      	mov	r7, r3
 8008772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008776:	2a30      	cmp	r2, #48	; 0x30
 8008778:	d0fa      	beq.n	8008770 <_dtoa_r+0xb68>
 800877a:	e6f9      	b.n	8008570 <_dtoa_r+0x968>
 800877c:	9a03      	ldr	r2, [sp, #12]
 800877e:	429a      	cmp	r2, r3
 8008780:	d1a5      	bne.n	80086ce <_dtoa_r+0xac6>
 8008782:	2331      	movs	r3, #49	; 0x31
 8008784:	f10a 0a01 	add.w	sl, sl, #1
 8008788:	e779      	b.n	800867e <_dtoa_r+0xa76>
 800878a:	4b14      	ldr	r3, [pc, #80]	; (80087dc <_dtoa_r+0xbd4>)
 800878c:	f7ff baa8 	b.w	8007ce0 <_dtoa_r+0xd8>
 8008790:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008792:	2b00      	cmp	r3, #0
 8008794:	f47f aa81 	bne.w	8007c9a <_dtoa_r+0x92>
 8008798:	4b11      	ldr	r3, [pc, #68]	; (80087e0 <_dtoa_r+0xbd8>)
 800879a:	f7ff baa1 	b.w	8007ce0 <_dtoa_r+0xd8>
 800879e:	f1b9 0f00 	cmp.w	r9, #0
 80087a2:	dc03      	bgt.n	80087ac <_dtoa_r+0xba4>
 80087a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	f73f aecb 	bgt.w	8008542 <_dtoa_r+0x93a>
 80087ac:	9f03      	ldr	r7, [sp, #12]
 80087ae:	4621      	mov	r1, r4
 80087b0:	4658      	mov	r0, fp
 80087b2:	f7ff f99d 	bl	8007af0 <quorem>
 80087b6:	9a03      	ldr	r2, [sp, #12]
 80087b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087bc:	f807 3b01 	strb.w	r3, [r7], #1
 80087c0:	1aba      	subs	r2, r7, r2
 80087c2:	4591      	cmp	r9, r2
 80087c4:	ddba      	ble.n	800873c <_dtoa_r+0xb34>
 80087c6:	4659      	mov	r1, fp
 80087c8:	2300      	movs	r3, #0
 80087ca:	220a      	movs	r2, #10
 80087cc:	4628      	mov	r0, r5
 80087ce:	f000 fc0b 	bl	8008fe8 <__multadd>
 80087d2:	4683      	mov	fp, r0
 80087d4:	e7eb      	b.n	80087ae <_dtoa_r+0xba6>
 80087d6:	bf00      	nop
 80087d8:	0800ad68 	.word	0x0800ad68
 80087dc:	0800ab70 	.word	0x0800ab70
 80087e0:	0800ace9 	.word	0x0800ace9

080087e4 <rshift>:
 80087e4:	6903      	ldr	r3, [r0, #16]
 80087e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80087ee:	f100 0414 	add.w	r4, r0, #20
 80087f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087f6:	dd46      	ble.n	8008886 <rshift+0xa2>
 80087f8:	f011 011f 	ands.w	r1, r1, #31
 80087fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008800:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008804:	d10c      	bne.n	8008820 <rshift+0x3c>
 8008806:	4629      	mov	r1, r5
 8008808:	f100 0710 	add.w	r7, r0, #16
 800880c:	42b1      	cmp	r1, r6
 800880e:	d335      	bcc.n	800887c <rshift+0x98>
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	1eea      	subs	r2, r5, #3
 8008816:	4296      	cmp	r6, r2
 8008818:	bf38      	it	cc
 800881a:	2300      	movcc	r3, #0
 800881c:	4423      	add	r3, r4
 800881e:	e015      	b.n	800884c <rshift+0x68>
 8008820:	46a1      	mov	r9, r4
 8008822:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008826:	f1c1 0820 	rsb	r8, r1, #32
 800882a:	40cf      	lsrs	r7, r1
 800882c:	f105 0e04 	add.w	lr, r5, #4
 8008830:	4576      	cmp	r6, lr
 8008832:	46f4      	mov	ip, lr
 8008834:	d816      	bhi.n	8008864 <rshift+0x80>
 8008836:	1a9a      	subs	r2, r3, r2
 8008838:	0092      	lsls	r2, r2, #2
 800883a:	3a04      	subs	r2, #4
 800883c:	3501      	adds	r5, #1
 800883e:	42ae      	cmp	r6, r5
 8008840:	bf38      	it	cc
 8008842:	2200      	movcc	r2, #0
 8008844:	18a3      	adds	r3, r4, r2
 8008846:	50a7      	str	r7, [r4, r2]
 8008848:	b107      	cbz	r7, 800884c <rshift+0x68>
 800884a:	3304      	adds	r3, #4
 800884c:	42a3      	cmp	r3, r4
 800884e:	eba3 0204 	sub.w	r2, r3, r4
 8008852:	bf08      	it	eq
 8008854:	2300      	moveq	r3, #0
 8008856:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800885a:	6102      	str	r2, [r0, #16]
 800885c:	bf08      	it	eq
 800885e:	6143      	streq	r3, [r0, #20]
 8008860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008864:	f8dc c000 	ldr.w	ip, [ip]
 8008868:	fa0c fc08 	lsl.w	ip, ip, r8
 800886c:	ea4c 0707 	orr.w	r7, ip, r7
 8008870:	f849 7b04 	str.w	r7, [r9], #4
 8008874:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008878:	40cf      	lsrs	r7, r1
 800887a:	e7d9      	b.n	8008830 <rshift+0x4c>
 800887c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008880:	f847 cf04 	str.w	ip, [r7, #4]!
 8008884:	e7c2      	b.n	800880c <rshift+0x28>
 8008886:	4623      	mov	r3, r4
 8008888:	e7e0      	b.n	800884c <rshift+0x68>

0800888a <__hexdig_fun>:
 800888a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800888e:	2b09      	cmp	r3, #9
 8008890:	d802      	bhi.n	8008898 <__hexdig_fun+0xe>
 8008892:	3820      	subs	r0, #32
 8008894:	b2c0      	uxtb	r0, r0
 8008896:	4770      	bx	lr
 8008898:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800889c:	2b05      	cmp	r3, #5
 800889e:	d801      	bhi.n	80088a4 <__hexdig_fun+0x1a>
 80088a0:	3847      	subs	r0, #71	; 0x47
 80088a2:	e7f7      	b.n	8008894 <__hexdig_fun+0xa>
 80088a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80088a8:	2b05      	cmp	r3, #5
 80088aa:	d801      	bhi.n	80088b0 <__hexdig_fun+0x26>
 80088ac:	3827      	subs	r0, #39	; 0x27
 80088ae:	e7f1      	b.n	8008894 <__hexdig_fun+0xa>
 80088b0:	2000      	movs	r0, #0
 80088b2:	4770      	bx	lr

080088b4 <__gethex>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	b08b      	sub	sp, #44	; 0x2c
 80088ba:	9305      	str	r3, [sp, #20]
 80088bc:	4bb2      	ldr	r3, [pc, #712]	; (8008b88 <__gethex+0x2d4>)
 80088be:	9002      	str	r0, [sp, #8]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	468b      	mov	fp, r1
 80088c4:	4618      	mov	r0, r3
 80088c6:	4690      	mov	r8, r2
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	f7f7 fc4b 	bl	8000164 <strlen>
 80088ce:	4682      	mov	sl, r0
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	f8db 2000 	ldr.w	r2, [fp]
 80088d6:	4403      	add	r3, r0
 80088d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80088dc:	9306      	str	r3, [sp, #24]
 80088de:	1c93      	adds	r3, r2, #2
 80088e0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80088e4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80088e8:	32fe      	adds	r2, #254	; 0xfe
 80088ea:	18d1      	adds	r1, r2, r3
 80088ec:	461f      	mov	r7, r3
 80088ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088f2:	9101      	str	r1, [sp, #4]
 80088f4:	2830      	cmp	r0, #48	; 0x30
 80088f6:	d0f8      	beq.n	80088ea <__gethex+0x36>
 80088f8:	f7ff ffc7 	bl	800888a <__hexdig_fun>
 80088fc:	4604      	mov	r4, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d13a      	bne.n	8008978 <__gethex+0xc4>
 8008902:	4652      	mov	r2, sl
 8008904:	4638      	mov	r0, r7
 8008906:	9903      	ldr	r1, [sp, #12]
 8008908:	f001 fa2a 	bl	8009d60 <strncmp>
 800890c:	4605      	mov	r5, r0
 800890e:	2800      	cmp	r0, #0
 8008910:	d166      	bne.n	80089e0 <__gethex+0x12c>
 8008912:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008916:	eb07 060a 	add.w	r6, r7, sl
 800891a:	f7ff ffb6 	bl	800888a <__hexdig_fun>
 800891e:	2800      	cmp	r0, #0
 8008920:	d060      	beq.n	80089e4 <__gethex+0x130>
 8008922:	4633      	mov	r3, r6
 8008924:	7818      	ldrb	r0, [r3, #0]
 8008926:	461f      	mov	r7, r3
 8008928:	2830      	cmp	r0, #48	; 0x30
 800892a:	f103 0301 	add.w	r3, r3, #1
 800892e:	d0f9      	beq.n	8008924 <__gethex+0x70>
 8008930:	f7ff ffab 	bl	800888a <__hexdig_fun>
 8008934:	2301      	movs	r3, #1
 8008936:	fab0 f480 	clz	r4, r0
 800893a:	4635      	mov	r5, r6
 800893c:	0964      	lsrs	r4, r4, #5
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	463a      	mov	r2, r7
 8008942:	4616      	mov	r6, r2
 8008944:	7830      	ldrb	r0, [r6, #0]
 8008946:	3201      	adds	r2, #1
 8008948:	f7ff ff9f 	bl	800888a <__hexdig_fun>
 800894c:	2800      	cmp	r0, #0
 800894e:	d1f8      	bne.n	8008942 <__gethex+0x8e>
 8008950:	4652      	mov	r2, sl
 8008952:	4630      	mov	r0, r6
 8008954:	9903      	ldr	r1, [sp, #12]
 8008956:	f001 fa03 	bl	8009d60 <strncmp>
 800895a:	b980      	cbnz	r0, 800897e <__gethex+0xca>
 800895c:	b94d      	cbnz	r5, 8008972 <__gethex+0xbe>
 800895e:	eb06 050a 	add.w	r5, r6, sl
 8008962:	462a      	mov	r2, r5
 8008964:	4616      	mov	r6, r2
 8008966:	7830      	ldrb	r0, [r6, #0]
 8008968:	3201      	adds	r2, #1
 800896a:	f7ff ff8e 	bl	800888a <__hexdig_fun>
 800896e:	2800      	cmp	r0, #0
 8008970:	d1f8      	bne.n	8008964 <__gethex+0xb0>
 8008972:	1bad      	subs	r5, r5, r6
 8008974:	00ad      	lsls	r5, r5, #2
 8008976:	e004      	b.n	8008982 <__gethex+0xce>
 8008978:	2400      	movs	r4, #0
 800897a:	4625      	mov	r5, r4
 800897c:	e7e0      	b.n	8008940 <__gethex+0x8c>
 800897e:	2d00      	cmp	r5, #0
 8008980:	d1f7      	bne.n	8008972 <__gethex+0xbe>
 8008982:	7833      	ldrb	r3, [r6, #0]
 8008984:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008988:	2b50      	cmp	r3, #80	; 0x50
 800898a:	d139      	bne.n	8008a00 <__gethex+0x14c>
 800898c:	7873      	ldrb	r3, [r6, #1]
 800898e:	2b2b      	cmp	r3, #43	; 0x2b
 8008990:	d02a      	beq.n	80089e8 <__gethex+0x134>
 8008992:	2b2d      	cmp	r3, #45	; 0x2d
 8008994:	d02c      	beq.n	80089f0 <__gethex+0x13c>
 8008996:	f04f 0900 	mov.w	r9, #0
 800899a:	1c71      	adds	r1, r6, #1
 800899c:	7808      	ldrb	r0, [r1, #0]
 800899e:	f7ff ff74 	bl	800888a <__hexdig_fun>
 80089a2:	1e43      	subs	r3, r0, #1
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b18      	cmp	r3, #24
 80089a8:	d82a      	bhi.n	8008a00 <__gethex+0x14c>
 80089aa:	f1a0 0210 	sub.w	r2, r0, #16
 80089ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089b2:	f7ff ff6a 	bl	800888a <__hexdig_fun>
 80089b6:	1e43      	subs	r3, r0, #1
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b18      	cmp	r3, #24
 80089bc:	d91b      	bls.n	80089f6 <__gethex+0x142>
 80089be:	f1b9 0f00 	cmp.w	r9, #0
 80089c2:	d000      	beq.n	80089c6 <__gethex+0x112>
 80089c4:	4252      	negs	r2, r2
 80089c6:	4415      	add	r5, r2
 80089c8:	f8cb 1000 	str.w	r1, [fp]
 80089cc:	b1d4      	cbz	r4, 8008a04 <__gethex+0x150>
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bf14      	ite	ne
 80089d4:	2700      	movne	r7, #0
 80089d6:	2706      	moveq	r7, #6
 80089d8:	4638      	mov	r0, r7
 80089da:	b00b      	add	sp, #44	; 0x2c
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e0:	463e      	mov	r6, r7
 80089e2:	4625      	mov	r5, r4
 80089e4:	2401      	movs	r4, #1
 80089e6:	e7cc      	b.n	8008982 <__gethex+0xce>
 80089e8:	f04f 0900 	mov.w	r9, #0
 80089ec:	1cb1      	adds	r1, r6, #2
 80089ee:	e7d5      	b.n	800899c <__gethex+0xe8>
 80089f0:	f04f 0901 	mov.w	r9, #1
 80089f4:	e7fa      	b.n	80089ec <__gethex+0x138>
 80089f6:	230a      	movs	r3, #10
 80089f8:	fb03 0202 	mla	r2, r3, r2, r0
 80089fc:	3a10      	subs	r2, #16
 80089fe:	e7d6      	b.n	80089ae <__gethex+0xfa>
 8008a00:	4631      	mov	r1, r6
 8008a02:	e7e1      	b.n	80089c8 <__gethex+0x114>
 8008a04:	4621      	mov	r1, r4
 8008a06:	1bf3      	subs	r3, r6, r7
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	2b07      	cmp	r3, #7
 8008a0c:	dc0a      	bgt.n	8008a24 <__gethex+0x170>
 8008a0e:	9802      	ldr	r0, [sp, #8]
 8008a10:	f000 fa88 	bl	8008f24 <_Balloc>
 8008a14:	4604      	mov	r4, r0
 8008a16:	b940      	cbnz	r0, 8008a2a <__gethex+0x176>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	21de      	movs	r1, #222	; 0xde
 8008a1c:	4b5b      	ldr	r3, [pc, #364]	; (8008b8c <__gethex+0x2d8>)
 8008a1e:	485c      	ldr	r0, [pc, #368]	; (8008b90 <__gethex+0x2dc>)
 8008a20:	f001 f9c0 	bl	8009da4 <__assert_func>
 8008a24:	3101      	adds	r1, #1
 8008a26:	105b      	asrs	r3, r3, #1
 8008a28:	e7ef      	b.n	8008a0a <__gethex+0x156>
 8008a2a:	f04f 0b00 	mov.w	fp, #0
 8008a2e:	f100 0914 	add.w	r9, r0, #20
 8008a32:	f1ca 0301 	rsb	r3, sl, #1
 8008a36:	f8cd 9010 	str.w	r9, [sp, #16]
 8008a3a:	f8cd b004 	str.w	fp, [sp, #4]
 8008a3e:	9308      	str	r3, [sp, #32]
 8008a40:	42b7      	cmp	r7, r6
 8008a42:	d33f      	bcc.n	8008ac4 <__gethex+0x210>
 8008a44:	9f04      	ldr	r7, [sp, #16]
 8008a46:	9b01      	ldr	r3, [sp, #4]
 8008a48:	f847 3b04 	str.w	r3, [r7], #4
 8008a4c:	eba7 0709 	sub.w	r7, r7, r9
 8008a50:	10bf      	asrs	r7, r7, #2
 8008a52:	6127      	str	r7, [r4, #16]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fb57 	bl	8009108 <__hi0bits>
 8008a5a:	017f      	lsls	r7, r7, #5
 8008a5c:	f8d8 6000 	ldr.w	r6, [r8]
 8008a60:	1a3f      	subs	r7, r7, r0
 8008a62:	42b7      	cmp	r7, r6
 8008a64:	dd62      	ble.n	8008b2c <__gethex+0x278>
 8008a66:	1bbf      	subs	r7, r7, r6
 8008a68:	4639      	mov	r1, r7
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fef1 	bl	8009852 <__any_on>
 8008a70:	4682      	mov	sl, r0
 8008a72:	b1a8      	cbz	r0, 8008aa0 <__gethex+0x1ec>
 8008a74:	f04f 0a01 	mov.w	sl, #1
 8008a78:	1e7b      	subs	r3, r7, #1
 8008a7a:	1159      	asrs	r1, r3, #5
 8008a7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a80:	f003 021f 	and.w	r2, r3, #31
 8008a84:	fa0a f202 	lsl.w	r2, sl, r2
 8008a88:	420a      	tst	r2, r1
 8008a8a:	d009      	beq.n	8008aa0 <__gethex+0x1ec>
 8008a8c:	4553      	cmp	r3, sl
 8008a8e:	dd05      	ble.n	8008a9c <__gethex+0x1e8>
 8008a90:	4620      	mov	r0, r4
 8008a92:	1eb9      	subs	r1, r7, #2
 8008a94:	f000 fedd 	bl	8009852 <__any_on>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d144      	bne.n	8008b26 <__gethex+0x272>
 8008a9c:	f04f 0a02 	mov.w	sl, #2
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7ff fe9e 	bl	80087e4 <rshift>
 8008aa8:	443d      	add	r5, r7
 8008aaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008aae:	42ab      	cmp	r3, r5
 8008ab0:	da4a      	bge.n	8008b48 <__gethex+0x294>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	9802      	ldr	r0, [sp, #8]
 8008ab6:	f000 fa75 	bl	8008fa4 <_Bfree>
 8008aba:	2300      	movs	r3, #0
 8008abc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008abe:	27a3      	movs	r7, #163	; 0xa3
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	e789      	b.n	80089d8 <__gethex+0x124>
 8008ac4:	1e73      	subs	r3, r6, #1
 8008ac6:	9a06      	ldr	r2, [sp, #24]
 8008ac8:	9307      	str	r3, [sp, #28]
 8008aca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d019      	beq.n	8008b06 <__gethex+0x252>
 8008ad2:	f1bb 0f20 	cmp.w	fp, #32
 8008ad6:	d107      	bne.n	8008ae8 <__gethex+0x234>
 8008ad8:	9b04      	ldr	r3, [sp, #16]
 8008ada:	9a01      	ldr	r2, [sp, #4]
 8008adc:	f843 2b04 	str.w	r2, [r3], #4
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	469b      	mov	fp, r3
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008aec:	f7ff fecd 	bl	800888a <__hexdig_fun>
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	f000 000f 	and.w	r0, r0, #15
 8008af6:	fa00 f00b 	lsl.w	r0, r0, fp
 8008afa:	4303      	orrs	r3, r0
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	f10b 0b04 	add.w	fp, fp, #4
 8008b02:	9b07      	ldr	r3, [sp, #28]
 8008b04:	e00d      	b.n	8008b22 <__gethex+0x26e>
 8008b06:	9a08      	ldr	r2, [sp, #32]
 8008b08:	1e73      	subs	r3, r6, #1
 8008b0a:	4413      	add	r3, r2
 8008b0c:	42bb      	cmp	r3, r7
 8008b0e:	d3e0      	bcc.n	8008ad2 <__gethex+0x21e>
 8008b10:	4618      	mov	r0, r3
 8008b12:	4652      	mov	r2, sl
 8008b14:	9903      	ldr	r1, [sp, #12]
 8008b16:	9309      	str	r3, [sp, #36]	; 0x24
 8008b18:	f001 f922 	bl	8009d60 <strncmp>
 8008b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d1d7      	bne.n	8008ad2 <__gethex+0x21e>
 8008b22:	461e      	mov	r6, r3
 8008b24:	e78c      	b.n	8008a40 <__gethex+0x18c>
 8008b26:	f04f 0a03 	mov.w	sl, #3
 8008b2a:	e7b9      	b.n	8008aa0 <__gethex+0x1ec>
 8008b2c:	da09      	bge.n	8008b42 <__gethex+0x28e>
 8008b2e:	1bf7      	subs	r7, r6, r7
 8008b30:	4621      	mov	r1, r4
 8008b32:	463a      	mov	r2, r7
 8008b34:	9802      	ldr	r0, [sp, #8]
 8008b36:	f000 fc4d 	bl	80093d4 <__lshift>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	1bed      	subs	r5, r5, r7
 8008b3e:	f100 0914 	add.w	r9, r0, #20
 8008b42:	f04f 0a00 	mov.w	sl, #0
 8008b46:	e7b0      	b.n	8008aaa <__gethex+0x1f6>
 8008b48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b4c:	42a8      	cmp	r0, r5
 8008b4e:	dd72      	ble.n	8008c36 <__gethex+0x382>
 8008b50:	1b45      	subs	r5, r0, r5
 8008b52:	42ae      	cmp	r6, r5
 8008b54:	dc35      	bgt.n	8008bc2 <__gethex+0x30e>
 8008b56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d029      	beq.n	8008bb2 <__gethex+0x2fe>
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d02b      	beq.n	8008bba <__gethex+0x306>
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d11c      	bne.n	8008ba0 <__gethex+0x2ec>
 8008b66:	42ae      	cmp	r6, r5
 8008b68:	d11a      	bne.n	8008ba0 <__gethex+0x2ec>
 8008b6a:	2e01      	cmp	r6, #1
 8008b6c:	d112      	bne.n	8008b94 <__gethex+0x2e0>
 8008b6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b72:	9a05      	ldr	r2, [sp, #20]
 8008b74:	2762      	movs	r7, #98	; 0x62
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	f8c9 3000 	str.w	r3, [r9]
 8008b80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b82:	601c      	str	r4, [r3, #0]
 8008b84:	e728      	b.n	80089d8 <__gethex+0x124>
 8008b86:	bf00      	nop
 8008b88:	0800addc 	.word	0x0800addc
 8008b8c:	0800ad68 	.word	0x0800ad68
 8008b90:	0800ad79 	.word	0x0800ad79
 8008b94:	4620      	mov	r0, r4
 8008b96:	1e71      	subs	r1, r6, #1
 8008b98:	f000 fe5b 	bl	8009852 <__any_on>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d1e6      	bne.n	8008b6e <__gethex+0x2ba>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	9802      	ldr	r0, [sp, #8]
 8008ba4:	f000 f9fe 	bl	8008fa4 <_Bfree>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bac:	2750      	movs	r7, #80	; 0x50
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	e712      	b.n	80089d8 <__gethex+0x124>
 8008bb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f3      	bne.n	8008ba0 <__gethex+0x2ec>
 8008bb8:	e7d9      	b.n	8008b6e <__gethex+0x2ba>
 8008bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1d6      	bne.n	8008b6e <__gethex+0x2ba>
 8008bc0:	e7ee      	b.n	8008ba0 <__gethex+0x2ec>
 8008bc2:	1e6f      	subs	r7, r5, #1
 8008bc4:	f1ba 0f00 	cmp.w	sl, #0
 8008bc8:	d132      	bne.n	8008c30 <__gethex+0x37c>
 8008bca:	b127      	cbz	r7, 8008bd6 <__gethex+0x322>
 8008bcc:	4639      	mov	r1, r7
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 fe3f 	bl	8009852 <__any_on>
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	117b      	asrs	r3, r7, #5
 8008bda:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008bde:	f007 071f 	and.w	r7, r7, #31
 8008be2:	fa01 f707 	lsl.w	r7, r1, r7
 8008be6:	421f      	tst	r7, r3
 8008be8:	f04f 0702 	mov.w	r7, #2
 8008bec:	4629      	mov	r1, r5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	bf18      	it	ne
 8008bf2:	f04a 0a02 	orrne.w	sl, sl, #2
 8008bf6:	1b76      	subs	r6, r6, r5
 8008bf8:	f7ff fdf4 	bl	80087e4 <rshift>
 8008bfc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c00:	f1ba 0f00 	cmp.w	sl, #0
 8008c04:	d048      	beq.n	8008c98 <__gethex+0x3e4>
 8008c06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d015      	beq.n	8008c3a <__gethex+0x386>
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d017      	beq.n	8008c42 <__gethex+0x38e>
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d109      	bne.n	8008c2a <__gethex+0x376>
 8008c16:	f01a 0f02 	tst.w	sl, #2
 8008c1a:	d006      	beq.n	8008c2a <__gethex+0x376>
 8008c1c:	f8d9 0000 	ldr.w	r0, [r9]
 8008c20:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c24:	f01a 0f01 	tst.w	sl, #1
 8008c28:	d10e      	bne.n	8008c48 <__gethex+0x394>
 8008c2a:	f047 0710 	orr.w	r7, r7, #16
 8008c2e:	e033      	b.n	8008c98 <__gethex+0x3e4>
 8008c30:	f04f 0a01 	mov.w	sl, #1
 8008c34:	e7cf      	b.n	8008bd6 <__gethex+0x322>
 8008c36:	2701      	movs	r7, #1
 8008c38:	e7e2      	b.n	8008c00 <__gethex+0x34c>
 8008c3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c3c:	f1c3 0301 	rsb	r3, r3, #1
 8008c40:	9315      	str	r3, [sp, #84]	; 0x54
 8008c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d0f0      	beq.n	8008c2a <__gethex+0x376>
 8008c48:	f04f 0c00 	mov.w	ip, #0
 8008c4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c50:	f104 0314 	add.w	r3, r4, #20
 8008c54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c62:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c66:	d01c      	beq.n	8008ca2 <__gethex+0x3ee>
 8008c68:	3201      	adds	r2, #1
 8008c6a:	6002      	str	r2, [r0, #0]
 8008c6c:	2f02      	cmp	r7, #2
 8008c6e:	f104 0314 	add.w	r3, r4, #20
 8008c72:	d13d      	bne.n	8008cf0 <__gethex+0x43c>
 8008c74:	f8d8 2000 	ldr.w	r2, [r8]
 8008c78:	3a01      	subs	r2, #1
 8008c7a:	42b2      	cmp	r2, r6
 8008c7c:	d10a      	bne.n	8008c94 <__gethex+0x3e0>
 8008c7e:	2201      	movs	r2, #1
 8008c80:	1171      	asrs	r1, r6, #5
 8008c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c86:	f006 061f 	and.w	r6, r6, #31
 8008c8a:	fa02 f606 	lsl.w	r6, r2, r6
 8008c8e:	421e      	tst	r6, r3
 8008c90:	bf18      	it	ne
 8008c92:	4617      	movne	r7, r2
 8008c94:	f047 0720 	orr.w	r7, r7, #32
 8008c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c9a:	601c      	str	r4, [r3, #0]
 8008c9c:	9b05      	ldr	r3, [sp, #20]
 8008c9e:	601d      	str	r5, [r3, #0]
 8008ca0:	e69a      	b.n	80089d8 <__gethex+0x124>
 8008ca2:	4299      	cmp	r1, r3
 8008ca4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ca8:	d8d8      	bhi.n	8008c5c <__gethex+0x3a8>
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	459b      	cmp	fp, r3
 8008cae:	db17      	blt.n	8008ce0 <__gethex+0x42c>
 8008cb0:	6861      	ldr	r1, [r4, #4]
 8008cb2:	9802      	ldr	r0, [sp, #8]
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	f000 f935 	bl	8008f24 <_Balloc>
 8008cba:	4681      	mov	r9, r0
 8008cbc:	b918      	cbnz	r0, 8008cc6 <__gethex+0x412>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	2184      	movs	r1, #132	; 0x84
 8008cc2:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <__gethex+0x474>)
 8008cc4:	e6ab      	b.n	8008a1e <__gethex+0x16a>
 8008cc6:	6922      	ldr	r2, [r4, #16]
 8008cc8:	f104 010c 	add.w	r1, r4, #12
 8008ccc:	3202      	adds	r2, #2
 8008cce:	0092      	lsls	r2, r2, #2
 8008cd0:	300c      	adds	r0, #12
 8008cd2:	f000 f919 	bl	8008f08 <memcpy>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	9802      	ldr	r0, [sp, #8]
 8008cda:	f000 f963 	bl	8008fa4 <_Bfree>
 8008cde:	464c      	mov	r4, r9
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	6122      	str	r2, [r4, #16]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cec:	615a      	str	r2, [r3, #20]
 8008cee:	e7bd      	b.n	8008c6c <__gethex+0x3b8>
 8008cf0:	6922      	ldr	r2, [r4, #16]
 8008cf2:	455a      	cmp	r2, fp
 8008cf4:	dd0b      	ble.n	8008d0e <__gethex+0x45a>
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff fd73 	bl	80087e4 <rshift>
 8008cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d02:	3501      	adds	r5, #1
 8008d04:	42ab      	cmp	r3, r5
 8008d06:	f6ff aed4 	blt.w	8008ab2 <__gethex+0x1fe>
 8008d0a:	2701      	movs	r7, #1
 8008d0c:	e7c2      	b.n	8008c94 <__gethex+0x3e0>
 8008d0e:	f016 061f 	ands.w	r6, r6, #31
 8008d12:	d0fa      	beq.n	8008d0a <__gethex+0x456>
 8008d14:	4453      	add	r3, sl
 8008d16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d1a:	f000 f9f5 	bl	8009108 <__hi0bits>
 8008d1e:	f1c6 0620 	rsb	r6, r6, #32
 8008d22:	42b0      	cmp	r0, r6
 8008d24:	dbe7      	blt.n	8008cf6 <__gethex+0x442>
 8008d26:	e7f0      	b.n	8008d0a <__gethex+0x456>
 8008d28:	0800ad68 	.word	0x0800ad68

08008d2c <L_shift>:
 8008d2c:	f1c2 0208 	rsb	r2, r2, #8
 8008d30:	0092      	lsls	r2, r2, #2
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	f1c2 0620 	rsb	r6, r2, #32
 8008d38:	6843      	ldr	r3, [r0, #4]
 8008d3a:	6804      	ldr	r4, [r0, #0]
 8008d3c:	fa03 f506 	lsl.w	r5, r3, r6
 8008d40:	432c      	orrs	r4, r5
 8008d42:	40d3      	lsrs	r3, r2
 8008d44:	6004      	str	r4, [r0, #0]
 8008d46:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d4a:	4288      	cmp	r0, r1
 8008d4c:	d3f4      	bcc.n	8008d38 <L_shift+0xc>
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}

08008d50 <__match>:
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	6803      	ldr	r3, [r0, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5a:	b914      	cbnz	r4, 8008d62 <__match+0x12>
 8008d5c:	6003      	str	r3, [r0, #0]
 8008d5e:	2001      	movs	r0, #1
 8008d60:	bd30      	pop	{r4, r5, pc}
 8008d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d6a:	2d19      	cmp	r5, #25
 8008d6c:	bf98      	it	ls
 8008d6e:	3220      	addls	r2, #32
 8008d70:	42a2      	cmp	r2, r4
 8008d72:	d0f0      	beq.n	8008d56 <__match+0x6>
 8008d74:	2000      	movs	r0, #0
 8008d76:	e7f3      	b.n	8008d60 <__match+0x10>

08008d78 <__hexnan>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	2500      	movs	r5, #0
 8008d7e:	680b      	ldr	r3, [r1, #0]
 8008d80:	4682      	mov	sl, r0
 8008d82:	115e      	asrs	r6, r3, #5
 8008d84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d88:	f013 031f 	ands.w	r3, r3, #31
 8008d8c:	bf18      	it	ne
 8008d8e:	3604      	addne	r6, #4
 8008d90:	1f37      	subs	r7, r6, #4
 8008d92:	46b9      	mov	r9, r7
 8008d94:	463c      	mov	r4, r7
 8008d96:	46ab      	mov	fp, r5
 8008d98:	b087      	sub	sp, #28
 8008d9a:	4690      	mov	r8, r2
 8008d9c:	6802      	ldr	r2, [r0, #0]
 8008d9e:	9301      	str	r3, [sp, #4]
 8008da0:	f846 5c04 	str.w	r5, [r6, #-4]
 8008da4:	9502      	str	r5, [sp, #8]
 8008da6:	7851      	ldrb	r1, [r2, #1]
 8008da8:	1c53      	adds	r3, r2, #1
 8008daa:	9303      	str	r3, [sp, #12]
 8008dac:	b341      	cbz	r1, 8008e00 <__hexnan+0x88>
 8008dae:	4608      	mov	r0, r1
 8008db0:	9205      	str	r2, [sp, #20]
 8008db2:	9104      	str	r1, [sp, #16]
 8008db4:	f7ff fd69 	bl	800888a <__hexdig_fun>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d14f      	bne.n	8008e5c <__hexnan+0xe4>
 8008dbc:	9904      	ldr	r1, [sp, #16]
 8008dbe:	9a05      	ldr	r2, [sp, #20]
 8008dc0:	2920      	cmp	r1, #32
 8008dc2:	d818      	bhi.n	8008df6 <__hexnan+0x7e>
 8008dc4:	9b02      	ldr	r3, [sp, #8]
 8008dc6:	459b      	cmp	fp, r3
 8008dc8:	dd13      	ble.n	8008df2 <__hexnan+0x7a>
 8008dca:	454c      	cmp	r4, r9
 8008dcc:	d206      	bcs.n	8008ddc <__hexnan+0x64>
 8008dce:	2d07      	cmp	r5, #7
 8008dd0:	dc04      	bgt.n	8008ddc <__hexnan+0x64>
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f7ff ffa8 	bl	8008d2c <L_shift>
 8008ddc:	4544      	cmp	r4, r8
 8008dde:	d950      	bls.n	8008e82 <__hexnan+0x10a>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f1a4 0904 	sub.w	r9, r4, #4
 8008de6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dea:	461d      	mov	r5, r3
 8008dec:	464c      	mov	r4, r9
 8008dee:	f8cd b008 	str.w	fp, [sp, #8]
 8008df2:	9a03      	ldr	r2, [sp, #12]
 8008df4:	e7d7      	b.n	8008da6 <__hexnan+0x2e>
 8008df6:	2929      	cmp	r1, #41	; 0x29
 8008df8:	d156      	bne.n	8008ea8 <__hexnan+0x130>
 8008dfa:	3202      	adds	r2, #2
 8008dfc:	f8ca 2000 	str.w	r2, [sl]
 8008e00:	f1bb 0f00 	cmp.w	fp, #0
 8008e04:	d050      	beq.n	8008ea8 <__hexnan+0x130>
 8008e06:	454c      	cmp	r4, r9
 8008e08:	d206      	bcs.n	8008e18 <__hexnan+0xa0>
 8008e0a:	2d07      	cmp	r5, #7
 8008e0c:	dc04      	bgt.n	8008e18 <__hexnan+0xa0>
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4649      	mov	r1, r9
 8008e12:	4620      	mov	r0, r4
 8008e14:	f7ff ff8a 	bl	8008d2c <L_shift>
 8008e18:	4544      	cmp	r4, r8
 8008e1a:	d934      	bls.n	8008e86 <__hexnan+0x10e>
 8008e1c:	4623      	mov	r3, r4
 8008e1e:	f1a8 0204 	sub.w	r2, r8, #4
 8008e22:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e26:	429f      	cmp	r7, r3
 8008e28:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e2c:	d2f9      	bcs.n	8008e22 <__hexnan+0xaa>
 8008e2e:	1b3b      	subs	r3, r7, r4
 8008e30:	f023 0303 	bic.w	r3, r3, #3
 8008e34:	3304      	adds	r3, #4
 8008e36:	3401      	adds	r4, #1
 8008e38:	3e03      	subs	r6, #3
 8008e3a:	42b4      	cmp	r4, r6
 8008e3c:	bf88      	it	hi
 8008e3e:	2304      	movhi	r3, #4
 8008e40:	2200      	movs	r2, #0
 8008e42:	4443      	add	r3, r8
 8008e44:	f843 2b04 	str.w	r2, [r3], #4
 8008e48:	429f      	cmp	r7, r3
 8008e4a:	d2fb      	bcs.n	8008e44 <__hexnan+0xcc>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	b91b      	cbnz	r3, 8008e58 <__hexnan+0xe0>
 8008e50:	4547      	cmp	r7, r8
 8008e52:	d127      	bne.n	8008ea4 <__hexnan+0x12c>
 8008e54:	2301      	movs	r3, #1
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	2005      	movs	r0, #5
 8008e5a:	e026      	b.n	8008eaa <__hexnan+0x132>
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	2d08      	cmp	r5, #8
 8008e60:	f10b 0b01 	add.w	fp, fp, #1
 8008e64:	dd06      	ble.n	8008e74 <__hexnan+0xfc>
 8008e66:	4544      	cmp	r4, r8
 8008e68:	d9c3      	bls.n	8008df2 <__hexnan+0x7a>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2501      	movs	r5, #1
 8008e6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e72:	3c04      	subs	r4, #4
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	f000 000f 	and.w	r0, r0, #15
 8008e7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e7e:	6022      	str	r2, [r4, #0]
 8008e80:	e7b7      	b.n	8008df2 <__hexnan+0x7a>
 8008e82:	2508      	movs	r5, #8
 8008e84:	e7b5      	b.n	8008df2 <__hexnan+0x7a>
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0df      	beq.n	8008e4c <__hexnan+0xd4>
 8008e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e90:	f1c3 0320 	rsb	r3, r3, #32
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e9c:	401a      	ands	r2, r3
 8008e9e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ea2:	e7d3      	b.n	8008e4c <__hexnan+0xd4>
 8008ea4:	3f04      	subs	r7, #4
 8008ea6:	e7d1      	b.n	8008e4c <__hexnan+0xd4>
 8008ea8:	2004      	movs	r0, #4
 8008eaa:	b007      	add	sp, #28
 8008eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008eb0 <_localeconv_r>:
 8008eb0:	4800      	ldr	r0, [pc, #0]	; (8008eb4 <_localeconv_r+0x4>)
 8008eb2:	4770      	bx	lr
 8008eb4:	20000328 	.word	0x20000328

08008eb8 <malloc>:
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <malloc+0xc>)
 8008eba:	4601      	mov	r1, r0
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f000 bd65 	b.w	800998c <_malloc_r>
 8008ec2:	bf00      	nop
 8008ec4:	200001d0 	.word	0x200001d0

08008ec8 <__ascii_mbtowc>:
 8008ec8:	b082      	sub	sp, #8
 8008eca:	b901      	cbnz	r1, 8008ece <__ascii_mbtowc+0x6>
 8008ecc:	a901      	add	r1, sp, #4
 8008ece:	b142      	cbz	r2, 8008ee2 <__ascii_mbtowc+0x1a>
 8008ed0:	b14b      	cbz	r3, 8008ee6 <__ascii_mbtowc+0x1e>
 8008ed2:	7813      	ldrb	r3, [r2, #0]
 8008ed4:	600b      	str	r3, [r1, #0]
 8008ed6:	7812      	ldrb	r2, [r2, #0]
 8008ed8:	1e10      	subs	r0, r2, #0
 8008eda:	bf18      	it	ne
 8008edc:	2001      	movne	r0, #1
 8008ede:	b002      	add	sp, #8
 8008ee0:	4770      	bx	lr
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	e7fb      	b.n	8008ede <__ascii_mbtowc+0x16>
 8008ee6:	f06f 0001 	mvn.w	r0, #1
 8008eea:	e7f8      	b.n	8008ede <__ascii_mbtowc+0x16>

08008eec <memchr>:
 8008eec:	4603      	mov	r3, r0
 8008eee:	b510      	push	{r4, lr}
 8008ef0:	b2c9      	uxtb	r1, r1
 8008ef2:	4402      	add	r2, r0
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	d101      	bne.n	8008efe <memchr+0x12>
 8008efa:	2000      	movs	r0, #0
 8008efc:	e003      	b.n	8008f06 <memchr+0x1a>
 8008efe:	7804      	ldrb	r4, [r0, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	428c      	cmp	r4, r1
 8008f04:	d1f6      	bne.n	8008ef4 <memchr+0x8>
 8008f06:	bd10      	pop	{r4, pc}

08008f08 <memcpy>:
 8008f08:	440a      	add	r2, r1
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f10:	d100      	bne.n	8008f14 <memcpy+0xc>
 8008f12:	4770      	bx	lr
 8008f14:	b510      	push	{r4, lr}
 8008f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1a:	4291      	cmp	r1, r2
 8008f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f20:	d1f9      	bne.n	8008f16 <memcpy+0xe>
 8008f22:	bd10      	pop	{r4, pc}

08008f24 <_Balloc>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f28:	4604      	mov	r4, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	b976      	cbnz	r6, 8008f4c <_Balloc+0x28>
 8008f2e:	2010      	movs	r0, #16
 8008f30:	f7ff ffc2 	bl	8008eb8 <malloc>
 8008f34:	4602      	mov	r2, r0
 8008f36:	6260      	str	r0, [r4, #36]	; 0x24
 8008f38:	b920      	cbnz	r0, 8008f44 <_Balloc+0x20>
 8008f3a:	2166      	movs	r1, #102	; 0x66
 8008f3c:	4b17      	ldr	r3, [pc, #92]	; (8008f9c <_Balloc+0x78>)
 8008f3e:	4818      	ldr	r0, [pc, #96]	; (8008fa0 <_Balloc+0x7c>)
 8008f40:	f000 ff30 	bl	8009da4 <__assert_func>
 8008f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f48:	6006      	str	r6, [r0, #0]
 8008f4a:	60c6      	str	r6, [r0, #12]
 8008f4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f4e:	68f3      	ldr	r3, [r6, #12]
 8008f50:	b183      	cbz	r3, 8008f74 <_Balloc+0x50>
 8008f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f5a:	b9b8      	cbnz	r0, 8008f8c <_Balloc+0x68>
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f62:	1d72      	adds	r2, r6, #5
 8008f64:	4620      	mov	r0, r4
 8008f66:	0092      	lsls	r2, r2, #2
 8008f68:	f000 fc94 	bl	8009894 <_calloc_r>
 8008f6c:	b160      	cbz	r0, 8008f88 <_Balloc+0x64>
 8008f6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f72:	e00e      	b.n	8008f92 <_Balloc+0x6e>
 8008f74:	2221      	movs	r2, #33	; 0x21
 8008f76:	2104      	movs	r1, #4
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fc8b 	bl	8009894 <_calloc_r>
 8008f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f80:	60f0      	str	r0, [r6, #12]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e4      	bne.n	8008f52 <_Balloc+0x2e>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	6802      	ldr	r2, [r0, #0]
 8008f8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f92:	2300      	movs	r3, #0
 8008f94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f98:	e7f7      	b.n	8008f8a <_Balloc+0x66>
 8008f9a:	bf00      	nop
 8008f9c:	0800acf6 	.word	0x0800acf6
 8008fa0:	0800adee 	.word	0x0800adee

08008fa4 <_Bfree>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fa8:	4605      	mov	r5, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	b976      	cbnz	r6, 8008fcc <_Bfree+0x28>
 8008fae:	2010      	movs	r0, #16
 8008fb0:	f7ff ff82 	bl	8008eb8 <malloc>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	6268      	str	r0, [r5, #36]	; 0x24
 8008fb8:	b920      	cbnz	r0, 8008fc4 <_Bfree+0x20>
 8008fba:	218a      	movs	r1, #138	; 0x8a
 8008fbc:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <_Bfree+0x3c>)
 8008fbe:	4809      	ldr	r0, [pc, #36]	; (8008fe4 <_Bfree+0x40>)
 8008fc0:	f000 fef0 	bl	8009da4 <__assert_func>
 8008fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc8:	6006      	str	r6, [r0, #0]
 8008fca:	60c6      	str	r6, [r0, #12]
 8008fcc:	b13c      	cbz	r4, 8008fde <_Bfree+0x3a>
 8008fce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fd0:	6862      	ldr	r2, [r4, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fd8:	6021      	str	r1, [r4, #0]
 8008fda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	0800acf6 	.word	0x0800acf6
 8008fe4:	0800adee 	.word	0x0800adee

08008fe8 <__multadd>:
 8008fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fec:	4607      	mov	r7, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	461e      	mov	r6, r3
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	690d      	ldr	r5, [r1, #16]
 8008ff6:	f101 0c14 	add.w	ip, r1, #20
 8008ffa:	f8dc 3000 	ldr.w	r3, [ip]
 8008ffe:	3001      	adds	r0, #1
 8009000:	b299      	uxth	r1, r3
 8009002:	fb02 6101 	mla	r1, r2, r1, r6
 8009006:	0c1e      	lsrs	r6, r3, #16
 8009008:	0c0b      	lsrs	r3, r1, #16
 800900a:	fb02 3306 	mla	r3, r2, r6, r3
 800900e:	b289      	uxth	r1, r1
 8009010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009014:	4285      	cmp	r5, r0
 8009016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800901a:	f84c 1b04 	str.w	r1, [ip], #4
 800901e:	dcec      	bgt.n	8008ffa <__multadd+0x12>
 8009020:	b30e      	cbz	r6, 8009066 <__multadd+0x7e>
 8009022:	68a3      	ldr	r3, [r4, #8]
 8009024:	42ab      	cmp	r3, r5
 8009026:	dc19      	bgt.n	800905c <__multadd+0x74>
 8009028:	6861      	ldr	r1, [r4, #4]
 800902a:	4638      	mov	r0, r7
 800902c:	3101      	adds	r1, #1
 800902e:	f7ff ff79 	bl	8008f24 <_Balloc>
 8009032:	4680      	mov	r8, r0
 8009034:	b928      	cbnz	r0, 8009042 <__multadd+0x5a>
 8009036:	4602      	mov	r2, r0
 8009038:	21b5      	movs	r1, #181	; 0xb5
 800903a:	4b0c      	ldr	r3, [pc, #48]	; (800906c <__multadd+0x84>)
 800903c:	480c      	ldr	r0, [pc, #48]	; (8009070 <__multadd+0x88>)
 800903e:	f000 feb1 	bl	8009da4 <__assert_func>
 8009042:	6922      	ldr	r2, [r4, #16]
 8009044:	f104 010c 	add.w	r1, r4, #12
 8009048:	3202      	adds	r2, #2
 800904a:	0092      	lsls	r2, r2, #2
 800904c:	300c      	adds	r0, #12
 800904e:	f7ff ff5b 	bl	8008f08 <memcpy>
 8009052:	4621      	mov	r1, r4
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff ffa5 	bl	8008fa4 <_Bfree>
 800905a:	4644      	mov	r4, r8
 800905c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009060:	3501      	adds	r5, #1
 8009062:	615e      	str	r6, [r3, #20]
 8009064:	6125      	str	r5, [r4, #16]
 8009066:	4620      	mov	r0, r4
 8009068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800906c:	0800ad68 	.word	0x0800ad68
 8009070:	0800adee 	.word	0x0800adee

08009074 <__s2b>:
 8009074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009078:	4615      	mov	r5, r2
 800907a:	2209      	movs	r2, #9
 800907c:	461f      	mov	r7, r3
 800907e:	3308      	adds	r3, #8
 8009080:	460c      	mov	r4, r1
 8009082:	fb93 f3f2 	sdiv	r3, r3, r2
 8009086:	4606      	mov	r6, r0
 8009088:	2201      	movs	r2, #1
 800908a:	2100      	movs	r1, #0
 800908c:	429a      	cmp	r2, r3
 800908e:	db09      	blt.n	80090a4 <__s2b+0x30>
 8009090:	4630      	mov	r0, r6
 8009092:	f7ff ff47 	bl	8008f24 <_Balloc>
 8009096:	b940      	cbnz	r0, 80090aa <__s2b+0x36>
 8009098:	4602      	mov	r2, r0
 800909a:	21ce      	movs	r1, #206	; 0xce
 800909c:	4b18      	ldr	r3, [pc, #96]	; (8009100 <__s2b+0x8c>)
 800909e:	4819      	ldr	r0, [pc, #100]	; (8009104 <__s2b+0x90>)
 80090a0:	f000 fe80 	bl	8009da4 <__assert_func>
 80090a4:	0052      	lsls	r2, r2, #1
 80090a6:	3101      	adds	r1, #1
 80090a8:	e7f0      	b.n	800908c <__s2b+0x18>
 80090aa:	9b08      	ldr	r3, [sp, #32]
 80090ac:	2d09      	cmp	r5, #9
 80090ae:	6143      	str	r3, [r0, #20]
 80090b0:	f04f 0301 	mov.w	r3, #1
 80090b4:	6103      	str	r3, [r0, #16]
 80090b6:	dd16      	ble.n	80090e6 <__s2b+0x72>
 80090b8:	f104 0909 	add.w	r9, r4, #9
 80090bc:	46c8      	mov	r8, r9
 80090be:	442c      	add	r4, r5
 80090c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090c4:	4601      	mov	r1, r0
 80090c6:	220a      	movs	r2, #10
 80090c8:	4630      	mov	r0, r6
 80090ca:	3b30      	subs	r3, #48	; 0x30
 80090cc:	f7ff ff8c 	bl	8008fe8 <__multadd>
 80090d0:	45a0      	cmp	r8, r4
 80090d2:	d1f5      	bne.n	80090c0 <__s2b+0x4c>
 80090d4:	f1a5 0408 	sub.w	r4, r5, #8
 80090d8:	444c      	add	r4, r9
 80090da:	1b2d      	subs	r5, r5, r4
 80090dc:	1963      	adds	r3, r4, r5
 80090de:	42bb      	cmp	r3, r7
 80090e0:	db04      	blt.n	80090ec <__s2b+0x78>
 80090e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e6:	2509      	movs	r5, #9
 80090e8:	340a      	adds	r4, #10
 80090ea:	e7f6      	b.n	80090da <__s2b+0x66>
 80090ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090f0:	4601      	mov	r1, r0
 80090f2:	220a      	movs	r2, #10
 80090f4:	4630      	mov	r0, r6
 80090f6:	3b30      	subs	r3, #48	; 0x30
 80090f8:	f7ff ff76 	bl	8008fe8 <__multadd>
 80090fc:	e7ee      	b.n	80090dc <__s2b+0x68>
 80090fe:	bf00      	nop
 8009100:	0800ad68 	.word	0x0800ad68
 8009104:	0800adee 	.word	0x0800adee

08009108 <__hi0bits>:
 8009108:	0c02      	lsrs	r2, r0, #16
 800910a:	0412      	lsls	r2, r2, #16
 800910c:	4603      	mov	r3, r0
 800910e:	b9ca      	cbnz	r2, 8009144 <__hi0bits+0x3c>
 8009110:	0403      	lsls	r3, r0, #16
 8009112:	2010      	movs	r0, #16
 8009114:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009118:	bf04      	itt	eq
 800911a:	021b      	lsleq	r3, r3, #8
 800911c:	3008      	addeq	r0, #8
 800911e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009122:	bf04      	itt	eq
 8009124:	011b      	lsleq	r3, r3, #4
 8009126:	3004      	addeq	r0, #4
 8009128:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800912c:	bf04      	itt	eq
 800912e:	009b      	lsleq	r3, r3, #2
 8009130:	3002      	addeq	r0, #2
 8009132:	2b00      	cmp	r3, #0
 8009134:	db05      	blt.n	8009142 <__hi0bits+0x3a>
 8009136:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800913a:	f100 0001 	add.w	r0, r0, #1
 800913e:	bf08      	it	eq
 8009140:	2020      	moveq	r0, #32
 8009142:	4770      	bx	lr
 8009144:	2000      	movs	r0, #0
 8009146:	e7e5      	b.n	8009114 <__hi0bits+0xc>

08009148 <__lo0bits>:
 8009148:	6803      	ldr	r3, [r0, #0]
 800914a:	4602      	mov	r2, r0
 800914c:	f013 0007 	ands.w	r0, r3, #7
 8009150:	d00b      	beq.n	800916a <__lo0bits+0x22>
 8009152:	07d9      	lsls	r1, r3, #31
 8009154:	d421      	bmi.n	800919a <__lo0bits+0x52>
 8009156:	0798      	lsls	r0, r3, #30
 8009158:	bf49      	itett	mi
 800915a:	085b      	lsrmi	r3, r3, #1
 800915c:	089b      	lsrpl	r3, r3, #2
 800915e:	2001      	movmi	r0, #1
 8009160:	6013      	strmi	r3, [r2, #0]
 8009162:	bf5c      	itt	pl
 8009164:	2002      	movpl	r0, #2
 8009166:	6013      	strpl	r3, [r2, #0]
 8009168:	4770      	bx	lr
 800916a:	b299      	uxth	r1, r3
 800916c:	b909      	cbnz	r1, 8009172 <__lo0bits+0x2a>
 800916e:	2010      	movs	r0, #16
 8009170:	0c1b      	lsrs	r3, r3, #16
 8009172:	b2d9      	uxtb	r1, r3
 8009174:	b909      	cbnz	r1, 800917a <__lo0bits+0x32>
 8009176:	3008      	adds	r0, #8
 8009178:	0a1b      	lsrs	r3, r3, #8
 800917a:	0719      	lsls	r1, r3, #28
 800917c:	bf04      	itt	eq
 800917e:	091b      	lsreq	r3, r3, #4
 8009180:	3004      	addeq	r0, #4
 8009182:	0799      	lsls	r1, r3, #30
 8009184:	bf04      	itt	eq
 8009186:	089b      	lsreq	r3, r3, #2
 8009188:	3002      	addeq	r0, #2
 800918a:	07d9      	lsls	r1, r3, #31
 800918c:	d403      	bmi.n	8009196 <__lo0bits+0x4e>
 800918e:	085b      	lsrs	r3, r3, #1
 8009190:	f100 0001 	add.w	r0, r0, #1
 8009194:	d003      	beq.n	800919e <__lo0bits+0x56>
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	4770      	bx	lr
 800919a:	2000      	movs	r0, #0
 800919c:	4770      	bx	lr
 800919e:	2020      	movs	r0, #32
 80091a0:	4770      	bx	lr
	...

080091a4 <__i2b>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	2101      	movs	r1, #1
 80091aa:	f7ff febb 	bl	8008f24 <_Balloc>
 80091ae:	4602      	mov	r2, r0
 80091b0:	b928      	cbnz	r0, 80091be <__i2b+0x1a>
 80091b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091b6:	4b04      	ldr	r3, [pc, #16]	; (80091c8 <__i2b+0x24>)
 80091b8:	4804      	ldr	r0, [pc, #16]	; (80091cc <__i2b+0x28>)
 80091ba:	f000 fdf3 	bl	8009da4 <__assert_func>
 80091be:	2301      	movs	r3, #1
 80091c0:	6144      	str	r4, [r0, #20]
 80091c2:	6103      	str	r3, [r0, #16]
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	bf00      	nop
 80091c8:	0800ad68 	.word	0x0800ad68
 80091cc:	0800adee 	.word	0x0800adee

080091d0 <__multiply>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4691      	mov	r9, r2
 80091d6:	690a      	ldr	r2, [r1, #16]
 80091d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091dc:	460c      	mov	r4, r1
 80091de:	429a      	cmp	r2, r3
 80091e0:	bfbe      	ittt	lt
 80091e2:	460b      	movlt	r3, r1
 80091e4:	464c      	movlt	r4, r9
 80091e6:	4699      	movlt	r9, r3
 80091e8:	6927      	ldr	r7, [r4, #16]
 80091ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	6861      	ldr	r1, [r4, #4]
 80091f2:	eb07 060a 	add.w	r6, r7, sl
 80091f6:	42b3      	cmp	r3, r6
 80091f8:	b085      	sub	sp, #20
 80091fa:	bfb8      	it	lt
 80091fc:	3101      	addlt	r1, #1
 80091fe:	f7ff fe91 	bl	8008f24 <_Balloc>
 8009202:	b930      	cbnz	r0, 8009212 <__multiply+0x42>
 8009204:	4602      	mov	r2, r0
 8009206:	f240 115d 	movw	r1, #349	; 0x15d
 800920a:	4b43      	ldr	r3, [pc, #268]	; (8009318 <__multiply+0x148>)
 800920c:	4843      	ldr	r0, [pc, #268]	; (800931c <__multiply+0x14c>)
 800920e:	f000 fdc9 	bl	8009da4 <__assert_func>
 8009212:	f100 0514 	add.w	r5, r0, #20
 8009216:	462b      	mov	r3, r5
 8009218:	2200      	movs	r2, #0
 800921a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800921e:	4543      	cmp	r3, r8
 8009220:	d321      	bcc.n	8009266 <__multiply+0x96>
 8009222:	f104 0314 	add.w	r3, r4, #20
 8009226:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800922a:	f109 0314 	add.w	r3, r9, #20
 800922e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009232:	9202      	str	r2, [sp, #8]
 8009234:	1b3a      	subs	r2, r7, r4
 8009236:	3a15      	subs	r2, #21
 8009238:	f022 0203 	bic.w	r2, r2, #3
 800923c:	3204      	adds	r2, #4
 800923e:	f104 0115 	add.w	r1, r4, #21
 8009242:	428f      	cmp	r7, r1
 8009244:	bf38      	it	cc
 8009246:	2204      	movcc	r2, #4
 8009248:	9201      	str	r2, [sp, #4]
 800924a:	9a02      	ldr	r2, [sp, #8]
 800924c:	9303      	str	r3, [sp, #12]
 800924e:	429a      	cmp	r2, r3
 8009250:	d80c      	bhi.n	800926c <__multiply+0x9c>
 8009252:	2e00      	cmp	r6, #0
 8009254:	dd03      	ble.n	800925e <__multiply+0x8e>
 8009256:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800925a:	2b00      	cmp	r3, #0
 800925c:	d059      	beq.n	8009312 <__multiply+0x142>
 800925e:	6106      	str	r6, [r0, #16]
 8009260:	b005      	add	sp, #20
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	f843 2b04 	str.w	r2, [r3], #4
 800926a:	e7d8      	b.n	800921e <__multiply+0x4e>
 800926c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009270:	f1ba 0f00 	cmp.w	sl, #0
 8009274:	d023      	beq.n	80092be <__multiply+0xee>
 8009276:	46a9      	mov	r9, r5
 8009278:	f04f 0c00 	mov.w	ip, #0
 800927c:	f104 0e14 	add.w	lr, r4, #20
 8009280:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009284:	f8d9 1000 	ldr.w	r1, [r9]
 8009288:	fa1f fb82 	uxth.w	fp, r2
 800928c:	b289      	uxth	r1, r1
 800928e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009292:	4461      	add	r1, ip
 8009294:	f8d9 c000 	ldr.w	ip, [r9]
 8009298:	0c12      	lsrs	r2, r2, #16
 800929a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800929e:	fb0a c202 	mla	r2, sl, r2, ip
 80092a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092a6:	b289      	uxth	r1, r1
 80092a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092ac:	4577      	cmp	r7, lr
 80092ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092b2:	f849 1b04 	str.w	r1, [r9], #4
 80092b6:	d8e3      	bhi.n	8009280 <__multiply+0xb0>
 80092b8:	9a01      	ldr	r2, [sp, #4]
 80092ba:	f845 c002 	str.w	ip, [r5, r2]
 80092be:	9a03      	ldr	r2, [sp, #12]
 80092c0:	3304      	adds	r3, #4
 80092c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092c6:	f1b9 0f00 	cmp.w	r9, #0
 80092ca:	d020      	beq.n	800930e <__multiply+0x13e>
 80092cc:	46ae      	mov	lr, r5
 80092ce:	f04f 0a00 	mov.w	sl, #0
 80092d2:	6829      	ldr	r1, [r5, #0]
 80092d4:	f104 0c14 	add.w	ip, r4, #20
 80092d8:	f8bc b000 	ldrh.w	fp, [ip]
 80092dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092e0:	b289      	uxth	r1, r1
 80092e2:	fb09 220b 	mla	r2, r9, fp, r2
 80092e6:	4492      	add	sl, r2
 80092e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092ec:	f84e 1b04 	str.w	r1, [lr], #4
 80092f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092f4:	f8be 1000 	ldrh.w	r1, [lr]
 80092f8:	0c12      	lsrs	r2, r2, #16
 80092fa:	fb09 1102 	mla	r1, r9, r2, r1
 80092fe:	4567      	cmp	r7, ip
 8009300:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009304:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009308:	d8e6      	bhi.n	80092d8 <__multiply+0x108>
 800930a:	9a01      	ldr	r2, [sp, #4]
 800930c:	50a9      	str	r1, [r5, r2]
 800930e:	3504      	adds	r5, #4
 8009310:	e79b      	b.n	800924a <__multiply+0x7a>
 8009312:	3e01      	subs	r6, #1
 8009314:	e79d      	b.n	8009252 <__multiply+0x82>
 8009316:	bf00      	nop
 8009318:	0800ad68 	.word	0x0800ad68
 800931c:	0800adee 	.word	0x0800adee

08009320 <__pow5mult>:
 8009320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009324:	4615      	mov	r5, r2
 8009326:	f012 0203 	ands.w	r2, r2, #3
 800932a:	4606      	mov	r6, r0
 800932c:	460f      	mov	r7, r1
 800932e:	d007      	beq.n	8009340 <__pow5mult+0x20>
 8009330:	4c25      	ldr	r4, [pc, #148]	; (80093c8 <__pow5mult+0xa8>)
 8009332:	3a01      	subs	r2, #1
 8009334:	2300      	movs	r3, #0
 8009336:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800933a:	f7ff fe55 	bl	8008fe8 <__multadd>
 800933e:	4607      	mov	r7, r0
 8009340:	10ad      	asrs	r5, r5, #2
 8009342:	d03d      	beq.n	80093c0 <__pow5mult+0xa0>
 8009344:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009346:	b97c      	cbnz	r4, 8009368 <__pow5mult+0x48>
 8009348:	2010      	movs	r0, #16
 800934a:	f7ff fdb5 	bl	8008eb8 <malloc>
 800934e:	4602      	mov	r2, r0
 8009350:	6270      	str	r0, [r6, #36]	; 0x24
 8009352:	b928      	cbnz	r0, 8009360 <__pow5mult+0x40>
 8009354:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009358:	4b1c      	ldr	r3, [pc, #112]	; (80093cc <__pow5mult+0xac>)
 800935a:	481d      	ldr	r0, [pc, #116]	; (80093d0 <__pow5mult+0xb0>)
 800935c:	f000 fd22 	bl	8009da4 <__assert_func>
 8009360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009364:	6004      	str	r4, [r0, #0]
 8009366:	60c4      	str	r4, [r0, #12]
 8009368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800936c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009370:	b94c      	cbnz	r4, 8009386 <__pow5mult+0x66>
 8009372:	f240 2171 	movw	r1, #625	; 0x271
 8009376:	4630      	mov	r0, r6
 8009378:	f7ff ff14 	bl	80091a4 <__i2b>
 800937c:	2300      	movs	r3, #0
 800937e:	4604      	mov	r4, r0
 8009380:	f8c8 0008 	str.w	r0, [r8, #8]
 8009384:	6003      	str	r3, [r0, #0]
 8009386:	f04f 0900 	mov.w	r9, #0
 800938a:	07eb      	lsls	r3, r5, #31
 800938c:	d50a      	bpl.n	80093a4 <__pow5mult+0x84>
 800938e:	4639      	mov	r1, r7
 8009390:	4622      	mov	r2, r4
 8009392:	4630      	mov	r0, r6
 8009394:	f7ff ff1c 	bl	80091d0 <__multiply>
 8009398:	4680      	mov	r8, r0
 800939a:	4639      	mov	r1, r7
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff fe01 	bl	8008fa4 <_Bfree>
 80093a2:	4647      	mov	r7, r8
 80093a4:	106d      	asrs	r5, r5, #1
 80093a6:	d00b      	beq.n	80093c0 <__pow5mult+0xa0>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	b938      	cbnz	r0, 80093bc <__pow5mult+0x9c>
 80093ac:	4622      	mov	r2, r4
 80093ae:	4621      	mov	r1, r4
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7ff ff0d 	bl	80091d0 <__multiply>
 80093b6:	6020      	str	r0, [r4, #0]
 80093b8:	f8c0 9000 	str.w	r9, [r0]
 80093bc:	4604      	mov	r4, r0
 80093be:	e7e4      	b.n	800938a <__pow5mult+0x6a>
 80093c0:	4638      	mov	r0, r7
 80093c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c6:	bf00      	nop
 80093c8:	0800af40 	.word	0x0800af40
 80093cc:	0800acf6 	.word	0x0800acf6
 80093d0:	0800adee 	.word	0x0800adee

080093d4 <__lshift>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	460c      	mov	r4, r1
 80093da:	4607      	mov	r7, r0
 80093dc:	4691      	mov	r9, r2
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	6849      	ldr	r1, [r1, #4]
 80093e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093e6:	68a3      	ldr	r3, [r4, #8]
 80093e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093ec:	f108 0601 	add.w	r6, r8, #1
 80093f0:	42b3      	cmp	r3, r6
 80093f2:	db0b      	blt.n	800940c <__lshift+0x38>
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff fd95 	bl	8008f24 <_Balloc>
 80093fa:	4605      	mov	r5, r0
 80093fc:	b948      	cbnz	r0, 8009412 <__lshift+0x3e>
 80093fe:	4602      	mov	r2, r0
 8009400:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009404:	4b29      	ldr	r3, [pc, #164]	; (80094ac <__lshift+0xd8>)
 8009406:	482a      	ldr	r0, [pc, #168]	; (80094b0 <__lshift+0xdc>)
 8009408:	f000 fccc 	bl	8009da4 <__assert_func>
 800940c:	3101      	adds	r1, #1
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	e7ee      	b.n	80093f0 <__lshift+0x1c>
 8009412:	2300      	movs	r3, #0
 8009414:	f100 0114 	add.w	r1, r0, #20
 8009418:	f100 0210 	add.w	r2, r0, #16
 800941c:	4618      	mov	r0, r3
 800941e:	4553      	cmp	r3, sl
 8009420:	db37      	blt.n	8009492 <__lshift+0xbe>
 8009422:	6920      	ldr	r0, [r4, #16]
 8009424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009428:	f104 0314 	add.w	r3, r4, #20
 800942c:	f019 091f 	ands.w	r9, r9, #31
 8009430:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009434:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009438:	d02f      	beq.n	800949a <__lshift+0xc6>
 800943a:	468a      	mov	sl, r1
 800943c:	f04f 0c00 	mov.w	ip, #0
 8009440:	f1c9 0e20 	rsb	lr, r9, #32
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	fa02 f209 	lsl.w	r2, r2, r9
 800944a:	ea42 020c 	orr.w	r2, r2, ip
 800944e:	f84a 2b04 	str.w	r2, [sl], #4
 8009452:	f853 2b04 	ldr.w	r2, [r3], #4
 8009456:	4298      	cmp	r0, r3
 8009458:	fa22 fc0e 	lsr.w	ip, r2, lr
 800945c:	d8f2      	bhi.n	8009444 <__lshift+0x70>
 800945e:	1b03      	subs	r3, r0, r4
 8009460:	3b15      	subs	r3, #21
 8009462:	f023 0303 	bic.w	r3, r3, #3
 8009466:	3304      	adds	r3, #4
 8009468:	f104 0215 	add.w	r2, r4, #21
 800946c:	4290      	cmp	r0, r2
 800946e:	bf38      	it	cc
 8009470:	2304      	movcc	r3, #4
 8009472:	f841 c003 	str.w	ip, [r1, r3]
 8009476:	f1bc 0f00 	cmp.w	ip, #0
 800947a:	d001      	beq.n	8009480 <__lshift+0xac>
 800947c:	f108 0602 	add.w	r6, r8, #2
 8009480:	3e01      	subs	r6, #1
 8009482:	4638      	mov	r0, r7
 8009484:	4621      	mov	r1, r4
 8009486:	612e      	str	r6, [r5, #16]
 8009488:	f7ff fd8c 	bl	8008fa4 <_Bfree>
 800948c:	4628      	mov	r0, r5
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	f842 0f04 	str.w	r0, [r2, #4]!
 8009496:	3301      	adds	r3, #1
 8009498:	e7c1      	b.n	800941e <__lshift+0x4a>
 800949a:	3904      	subs	r1, #4
 800949c:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a0:	4298      	cmp	r0, r3
 80094a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80094a6:	d8f9      	bhi.n	800949c <__lshift+0xc8>
 80094a8:	e7ea      	b.n	8009480 <__lshift+0xac>
 80094aa:	bf00      	nop
 80094ac:	0800ad68 	.word	0x0800ad68
 80094b0:	0800adee 	.word	0x0800adee

080094b4 <__mcmp>:
 80094b4:	4603      	mov	r3, r0
 80094b6:	690a      	ldr	r2, [r1, #16]
 80094b8:	6900      	ldr	r0, [r0, #16]
 80094ba:	b530      	push	{r4, r5, lr}
 80094bc:	1a80      	subs	r0, r0, r2
 80094be:	d10d      	bne.n	80094dc <__mcmp+0x28>
 80094c0:	3314      	adds	r3, #20
 80094c2:	3114      	adds	r1, #20
 80094c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094d4:	4295      	cmp	r5, r2
 80094d6:	d002      	beq.n	80094de <__mcmp+0x2a>
 80094d8:	d304      	bcc.n	80094e4 <__mcmp+0x30>
 80094da:	2001      	movs	r0, #1
 80094dc:	bd30      	pop	{r4, r5, pc}
 80094de:	42a3      	cmp	r3, r4
 80094e0:	d3f4      	bcc.n	80094cc <__mcmp+0x18>
 80094e2:	e7fb      	b.n	80094dc <__mcmp+0x28>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	e7f8      	b.n	80094dc <__mcmp+0x28>
	...

080094ec <__mdiff>:
 80094ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f0:	460d      	mov	r5, r1
 80094f2:	4607      	mov	r7, r0
 80094f4:	4611      	mov	r1, r2
 80094f6:	4628      	mov	r0, r5
 80094f8:	4614      	mov	r4, r2
 80094fa:	f7ff ffdb 	bl	80094b4 <__mcmp>
 80094fe:	1e06      	subs	r6, r0, #0
 8009500:	d111      	bne.n	8009526 <__mdiff+0x3a>
 8009502:	4631      	mov	r1, r6
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff fd0d 	bl	8008f24 <_Balloc>
 800950a:	4602      	mov	r2, r0
 800950c:	b928      	cbnz	r0, 800951a <__mdiff+0x2e>
 800950e:	f240 2132 	movw	r1, #562	; 0x232
 8009512:	4b3a      	ldr	r3, [pc, #232]	; (80095fc <__mdiff+0x110>)
 8009514:	483a      	ldr	r0, [pc, #232]	; (8009600 <__mdiff+0x114>)
 8009516:	f000 fc45 	bl	8009da4 <__assert_func>
 800951a:	2301      	movs	r3, #1
 800951c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009520:	4610      	mov	r0, r2
 8009522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	bfa4      	itt	ge
 8009528:	4623      	movge	r3, r4
 800952a:	462c      	movge	r4, r5
 800952c:	4638      	mov	r0, r7
 800952e:	6861      	ldr	r1, [r4, #4]
 8009530:	bfa6      	itte	ge
 8009532:	461d      	movge	r5, r3
 8009534:	2600      	movge	r6, #0
 8009536:	2601      	movlt	r6, #1
 8009538:	f7ff fcf4 	bl	8008f24 <_Balloc>
 800953c:	4602      	mov	r2, r0
 800953e:	b918      	cbnz	r0, 8009548 <__mdiff+0x5c>
 8009540:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009544:	4b2d      	ldr	r3, [pc, #180]	; (80095fc <__mdiff+0x110>)
 8009546:	e7e5      	b.n	8009514 <__mdiff+0x28>
 8009548:	f102 0814 	add.w	r8, r2, #20
 800954c:	46c2      	mov	sl, r8
 800954e:	f04f 0c00 	mov.w	ip, #0
 8009552:	6927      	ldr	r7, [r4, #16]
 8009554:	60c6      	str	r6, [r0, #12]
 8009556:	692e      	ldr	r6, [r5, #16]
 8009558:	f104 0014 	add.w	r0, r4, #20
 800955c:	f105 0914 	add.w	r9, r5, #20
 8009560:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009564:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009568:	3410      	adds	r4, #16
 800956a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800956e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009572:	fa1f f18b 	uxth.w	r1, fp
 8009576:	448c      	add	ip, r1
 8009578:	b299      	uxth	r1, r3
 800957a:	0c1b      	lsrs	r3, r3, #16
 800957c:	ebac 0101 	sub.w	r1, ip, r1
 8009580:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009584:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009588:	b289      	uxth	r1, r1
 800958a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800958e:	454e      	cmp	r6, r9
 8009590:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009594:	f84a 3b04 	str.w	r3, [sl], #4
 8009598:	d8e7      	bhi.n	800956a <__mdiff+0x7e>
 800959a:	1b73      	subs	r3, r6, r5
 800959c:	3b15      	subs	r3, #21
 800959e:	f023 0303 	bic.w	r3, r3, #3
 80095a2:	3515      	adds	r5, #21
 80095a4:	3304      	adds	r3, #4
 80095a6:	42ae      	cmp	r6, r5
 80095a8:	bf38      	it	cc
 80095aa:	2304      	movcc	r3, #4
 80095ac:	4418      	add	r0, r3
 80095ae:	4443      	add	r3, r8
 80095b0:	461e      	mov	r6, r3
 80095b2:	4605      	mov	r5, r0
 80095b4:	4575      	cmp	r5, lr
 80095b6:	d30e      	bcc.n	80095d6 <__mdiff+0xea>
 80095b8:	f10e 0103 	add.w	r1, lr, #3
 80095bc:	1a09      	subs	r1, r1, r0
 80095be:	f021 0103 	bic.w	r1, r1, #3
 80095c2:	3803      	subs	r0, #3
 80095c4:	4586      	cmp	lr, r0
 80095c6:	bf38      	it	cc
 80095c8:	2100      	movcc	r1, #0
 80095ca:	4419      	add	r1, r3
 80095cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80095d0:	b18b      	cbz	r3, 80095f6 <__mdiff+0x10a>
 80095d2:	6117      	str	r7, [r2, #16]
 80095d4:	e7a4      	b.n	8009520 <__mdiff+0x34>
 80095d6:	f855 8b04 	ldr.w	r8, [r5], #4
 80095da:	fa1f f188 	uxth.w	r1, r8
 80095de:	4461      	add	r1, ip
 80095e0:	140c      	asrs	r4, r1, #16
 80095e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095e6:	b289      	uxth	r1, r1
 80095e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095ec:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80095f0:	f846 1b04 	str.w	r1, [r6], #4
 80095f4:	e7de      	b.n	80095b4 <__mdiff+0xc8>
 80095f6:	3f01      	subs	r7, #1
 80095f8:	e7e8      	b.n	80095cc <__mdiff+0xe0>
 80095fa:	bf00      	nop
 80095fc:	0800ad68 	.word	0x0800ad68
 8009600:	0800adee 	.word	0x0800adee

08009604 <__ulp>:
 8009604:	4b11      	ldr	r3, [pc, #68]	; (800964c <__ulp+0x48>)
 8009606:	400b      	ands	r3, r1
 8009608:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800960c:	2b00      	cmp	r3, #0
 800960e:	dd02      	ble.n	8009616 <__ulp+0x12>
 8009610:	2000      	movs	r0, #0
 8009612:	4619      	mov	r1, r3
 8009614:	4770      	bx	lr
 8009616:	425b      	negs	r3, r3
 8009618:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800961c:	f04f 0000 	mov.w	r0, #0
 8009620:	f04f 0100 	mov.w	r1, #0
 8009624:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009628:	da04      	bge.n	8009634 <__ulp+0x30>
 800962a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800962e:	fa43 f102 	asr.w	r1, r3, r2
 8009632:	4770      	bx	lr
 8009634:	f1a2 0314 	sub.w	r3, r2, #20
 8009638:	2b1e      	cmp	r3, #30
 800963a:	bfd6      	itet	le
 800963c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009640:	2301      	movgt	r3, #1
 8009642:	fa22 f303 	lsrle.w	r3, r2, r3
 8009646:	4618      	mov	r0, r3
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	7ff00000 	.word	0x7ff00000

08009650 <__b2d>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	6907      	ldr	r7, [r0, #16]
 8009656:	f100 0914 	add.w	r9, r0, #20
 800965a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800965e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009662:	f1a7 0804 	sub.w	r8, r7, #4
 8009666:	4630      	mov	r0, r6
 8009668:	f7ff fd4e 	bl	8009108 <__hi0bits>
 800966c:	f1c0 0320 	rsb	r3, r0, #32
 8009670:	280a      	cmp	r0, #10
 8009672:	600b      	str	r3, [r1, #0]
 8009674:	491f      	ldr	r1, [pc, #124]	; (80096f4 <__b2d+0xa4>)
 8009676:	dc17      	bgt.n	80096a8 <__b2d+0x58>
 8009678:	45c1      	cmp	r9, r8
 800967a:	bf28      	it	cs
 800967c:	2200      	movcs	r2, #0
 800967e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009682:	fa26 f30c 	lsr.w	r3, r6, ip
 8009686:	bf38      	it	cc
 8009688:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800968c:	ea43 0501 	orr.w	r5, r3, r1
 8009690:	f100 0315 	add.w	r3, r0, #21
 8009694:	fa06 f303 	lsl.w	r3, r6, r3
 8009698:	fa22 f20c 	lsr.w	r2, r2, ip
 800969c:	ea43 0402 	orr.w	r4, r3, r2
 80096a0:	4620      	mov	r0, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a8:	45c1      	cmp	r9, r8
 80096aa:	bf2e      	itee	cs
 80096ac:	2200      	movcs	r2, #0
 80096ae:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80096b2:	f1a7 0808 	subcc.w	r8, r7, #8
 80096b6:	f1b0 030b 	subs.w	r3, r0, #11
 80096ba:	d016      	beq.n	80096ea <__b2d+0x9a>
 80096bc:	f1c3 0720 	rsb	r7, r3, #32
 80096c0:	fa22 f107 	lsr.w	r1, r2, r7
 80096c4:	45c8      	cmp	r8, r9
 80096c6:	fa06 f603 	lsl.w	r6, r6, r3
 80096ca:	ea46 0601 	orr.w	r6, r6, r1
 80096ce:	bf94      	ite	ls
 80096d0:	2100      	movls	r1, #0
 80096d2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80096d6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80096da:	fa02 f003 	lsl.w	r0, r2, r3
 80096de:	40f9      	lsrs	r1, r7
 80096e0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80096e4:	ea40 0401 	orr.w	r4, r0, r1
 80096e8:	e7da      	b.n	80096a0 <__b2d+0x50>
 80096ea:	4614      	mov	r4, r2
 80096ec:	ea46 0501 	orr.w	r5, r6, r1
 80096f0:	e7d6      	b.n	80096a0 <__b2d+0x50>
 80096f2:	bf00      	nop
 80096f4:	3ff00000 	.word	0x3ff00000

080096f8 <__d2b>:
 80096f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80096fc:	2101      	movs	r1, #1
 80096fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009702:	4690      	mov	r8, r2
 8009704:	461d      	mov	r5, r3
 8009706:	f7ff fc0d 	bl	8008f24 <_Balloc>
 800970a:	4604      	mov	r4, r0
 800970c:	b930      	cbnz	r0, 800971c <__d2b+0x24>
 800970e:	4602      	mov	r2, r0
 8009710:	f240 310a 	movw	r1, #778	; 0x30a
 8009714:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <__d2b+0xb0>)
 8009716:	4825      	ldr	r0, [pc, #148]	; (80097ac <__d2b+0xb4>)
 8009718:	f000 fb44 	bl	8009da4 <__assert_func>
 800971c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009720:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009724:	bb2d      	cbnz	r5, 8009772 <__d2b+0x7a>
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	f1b8 0300 	subs.w	r3, r8, #0
 800972c:	d026      	beq.n	800977c <__d2b+0x84>
 800972e:	4668      	mov	r0, sp
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	f7ff fd09 	bl	8009148 <__lo0bits>
 8009736:	9900      	ldr	r1, [sp, #0]
 8009738:	b1f0      	cbz	r0, 8009778 <__d2b+0x80>
 800973a:	9a01      	ldr	r2, [sp, #4]
 800973c:	f1c0 0320 	rsb	r3, r0, #32
 8009740:	fa02 f303 	lsl.w	r3, r2, r3
 8009744:	430b      	orrs	r3, r1
 8009746:	40c2      	lsrs	r2, r0
 8009748:	6163      	str	r3, [r4, #20]
 800974a:	9201      	str	r2, [sp, #4]
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	bf14      	ite	ne
 8009752:	2102      	movne	r1, #2
 8009754:	2101      	moveq	r1, #1
 8009756:	61a3      	str	r3, [r4, #24]
 8009758:	6121      	str	r1, [r4, #16]
 800975a:	b1c5      	cbz	r5, 800978e <__d2b+0x96>
 800975c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009760:	4405      	add	r5, r0
 8009762:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009766:	603d      	str	r5, [r7, #0]
 8009768:	6030      	str	r0, [r6, #0]
 800976a:	4620      	mov	r0, r4
 800976c:	b002      	add	sp, #8
 800976e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009776:	e7d6      	b.n	8009726 <__d2b+0x2e>
 8009778:	6161      	str	r1, [r4, #20]
 800977a:	e7e7      	b.n	800974c <__d2b+0x54>
 800977c:	a801      	add	r0, sp, #4
 800977e:	f7ff fce3 	bl	8009148 <__lo0bits>
 8009782:	2101      	movs	r1, #1
 8009784:	9b01      	ldr	r3, [sp, #4]
 8009786:	6121      	str	r1, [r4, #16]
 8009788:	6163      	str	r3, [r4, #20]
 800978a:	3020      	adds	r0, #32
 800978c:	e7e5      	b.n	800975a <__d2b+0x62>
 800978e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009792:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009796:	6038      	str	r0, [r7, #0]
 8009798:	6918      	ldr	r0, [r3, #16]
 800979a:	f7ff fcb5 	bl	8009108 <__hi0bits>
 800979e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80097a2:	6031      	str	r1, [r6, #0]
 80097a4:	e7e1      	b.n	800976a <__d2b+0x72>
 80097a6:	bf00      	nop
 80097a8:	0800ad68 	.word	0x0800ad68
 80097ac:	0800adee 	.word	0x0800adee

080097b0 <__ratio>:
 80097b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	4688      	mov	r8, r1
 80097b6:	4669      	mov	r1, sp
 80097b8:	4681      	mov	r9, r0
 80097ba:	f7ff ff49 	bl	8009650 <__b2d>
 80097be:	460f      	mov	r7, r1
 80097c0:	4604      	mov	r4, r0
 80097c2:	460d      	mov	r5, r1
 80097c4:	4640      	mov	r0, r8
 80097c6:	a901      	add	r1, sp, #4
 80097c8:	f7ff ff42 	bl	8009650 <__b2d>
 80097cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097d4:	468b      	mov	fp, r1
 80097d6:	eba3 0c02 	sub.w	ip, r3, r2
 80097da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097de:	1a9b      	subs	r3, r3, r2
 80097e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bfd5      	itete	le
 80097e8:	460a      	movle	r2, r1
 80097ea:	462a      	movgt	r2, r5
 80097ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097f0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80097f4:	bfd8      	it	le
 80097f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80097fa:	465b      	mov	r3, fp
 80097fc:	4602      	mov	r2, r0
 80097fe:	4639      	mov	r1, r7
 8009800:	4620      	mov	r0, r4
 8009802:	f7f6 ff9d 	bl	8000740 <__aeabi_ddiv>
 8009806:	b003      	add	sp, #12
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800980c <__copybits>:
 800980c:	3901      	subs	r1, #1
 800980e:	b570      	push	{r4, r5, r6, lr}
 8009810:	1149      	asrs	r1, r1, #5
 8009812:	6914      	ldr	r4, [r2, #16]
 8009814:	3101      	adds	r1, #1
 8009816:	f102 0314 	add.w	r3, r2, #20
 800981a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800981e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009822:	1f05      	subs	r5, r0, #4
 8009824:	42a3      	cmp	r3, r4
 8009826:	d30c      	bcc.n	8009842 <__copybits+0x36>
 8009828:	1aa3      	subs	r3, r4, r2
 800982a:	3b11      	subs	r3, #17
 800982c:	f023 0303 	bic.w	r3, r3, #3
 8009830:	3211      	adds	r2, #17
 8009832:	42a2      	cmp	r2, r4
 8009834:	bf88      	it	hi
 8009836:	2300      	movhi	r3, #0
 8009838:	4418      	add	r0, r3
 800983a:	2300      	movs	r3, #0
 800983c:	4288      	cmp	r0, r1
 800983e:	d305      	bcc.n	800984c <__copybits+0x40>
 8009840:	bd70      	pop	{r4, r5, r6, pc}
 8009842:	f853 6b04 	ldr.w	r6, [r3], #4
 8009846:	f845 6f04 	str.w	r6, [r5, #4]!
 800984a:	e7eb      	b.n	8009824 <__copybits+0x18>
 800984c:	f840 3b04 	str.w	r3, [r0], #4
 8009850:	e7f4      	b.n	800983c <__copybits+0x30>

08009852 <__any_on>:
 8009852:	f100 0214 	add.w	r2, r0, #20
 8009856:	6900      	ldr	r0, [r0, #16]
 8009858:	114b      	asrs	r3, r1, #5
 800985a:	4298      	cmp	r0, r3
 800985c:	b510      	push	{r4, lr}
 800985e:	db11      	blt.n	8009884 <__any_on+0x32>
 8009860:	dd0a      	ble.n	8009878 <__any_on+0x26>
 8009862:	f011 011f 	ands.w	r1, r1, #31
 8009866:	d007      	beq.n	8009878 <__any_on+0x26>
 8009868:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800986c:	fa24 f001 	lsr.w	r0, r4, r1
 8009870:	fa00 f101 	lsl.w	r1, r0, r1
 8009874:	428c      	cmp	r4, r1
 8009876:	d10b      	bne.n	8009890 <__any_on+0x3e>
 8009878:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800987c:	4293      	cmp	r3, r2
 800987e:	d803      	bhi.n	8009888 <__any_on+0x36>
 8009880:	2000      	movs	r0, #0
 8009882:	bd10      	pop	{r4, pc}
 8009884:	4603      	mov	r3, r0
 8009886:	e7f7      	b.n	8009878 <__any_on+0x26>
 8009888:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800988c:	2900      	cmp	r1, #0
 800988e:	d0f5      	beq.n	800987c <__any_on+0x2a>
 8009890:	2001      	movs	r0, #1
 8009892:	e7f6      	b.n	8009882 <__any_on+0x30>

08009894 <_calloc_r>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	fba1 5402 	umull	r5, r4, r1, r2
 800989a:	b934      	cbnz	r4, 80098aa <_calloc_r+0x16>
 800989c:	4629      	mov	r1, r5
 800989e:	f000 f875 	bl	800998c <_malloc_r>
 80098a2:	4606      	mov	r6, r0
 80098a4:	b928      	cbnz	r0, 80098b2 <_calloc_r+0x1e>
 80098a6:	4630      	mov	r0, r6
 80098a8:	bd70      	pop	{r4, r5, r6, pc}
 80098aa:	220c      	movs	r2, #12
 80098ac:	2600      	movs	r6, #0
 80098ae:	6002      	str	r2, [r0, #0]
 80098b0:	e7f9      	b.n	80098a6 <_calloc_r+0x12>
 80098b2:	462a      	mov	r2, r5
 80098b4:	4621      	mov	r1, r4
 80098b6:	f7fc fd6d 	bl	8006394 <memset>
 80098ba:	e7f4      	b.n	80098a6 <_calloc_r+0x12>

080098bc <_free_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4605      	mov	r5, r0
 80098c0:	2900      	cmp	r1, #0
 80098c2:	d040      	beq.n	8009946 <_free_r+0x8a>
 80098c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098c8:	1f0c      	subs	r4, r1, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bfb8      	it	lt
 80098ce:	18e4      	addlt	r4, r4, r3
 80098d0:	f000 fa98 	bl	8009e04 <__malloc_lock>
 80098d4:	4a1c      	ldr	r2, [pc, #112]	; (8009948 <_free_r+0x8c>)
 80098d6:	6813      	ldr	r3, [r2, #0]
 80098d8:	b933      	cbnz	r3, 80098e8 <_free_r+0x2c>
 80098da:	6063      	str	r3, [r4, #4]
 80098dc:	6014      	str	r4, [r2, #0]
 80098de:	4628      	mov	r0, r5
 80098e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098e4:	f000 ba94 	b.w	8009e10 <__malloc_unlock>
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	d908      	bls.n	80098fe <_free_r+0x42>
 80098ec:	6820      	ldr	r0, [r4, #0]
 80098ee:	1821      	adds	r1, r4, r0
 80098f0:	428b      	cmp	r3, r1
 80098f2:	bf01      	itttt	eq
 80098f4:	6819      	ldreq	r1, [r3, #0]
 80098f6:	685b      	ldreq	r3, [r3, #4]
 80098f8:	1809      	addeq	r1, r1, r0
 80098fa:	6021      	streq	r1, [r4, #0]
 80098fc:	e7ed      	b.n	80098da <_free_r+0x1e>
 80098fe:	461a      	mov	r2, r3
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	b10b      	cbz	r3, 8009908 <_free_r+0x4c>
 8009904:	42a3      	cmp	r3, r4
 8009906:	d9fa      	bls.n	80098fe <_free_r+0x42>
 8009908:	6811      	ldr	r1, [r2, #0]
 800990a:	1850      	adds	r0, r2, r1
 800990c:	42a0      	cmp	r0, r4
 800990e:	d10b      	bne.n	8009928 <_free_r+0x6c>
 8009910:	6820      	ldr	r0, [r4, #0]
 8009912:	4401      	add	r1, r0
 8009914:	1850      	adds	r0, r2, r1
 8009916:	4283      	cmp	r3, r0
 8009918:	6011      	str	r1, [r2, #0]
 800991a:	d1e0      	bne.n	80098de <_free_r+0x22>
 800991c:	6818      	ldr	r0, [r3, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	4401      	add	r1, r0
 8009922:	6011      	str	r1, [r2, #0]
 8009924:	6053      	str	r3, [r2, #4]
 8009926:	e7da      	b.n	80098de <_free_r+0x22>
 8009928:	d902      	bls.n	8009930 <_free_r+0x74>
 800992a:	230c      	movs	r3, #12
 800992c:	602b      	str	r3, [r5, #0]
 800992e:	e7d6      	b.n	80098de <_free_r+0x22>
 8009930:	6820      	ldr	r0, [r4, #0]
 8009932:	1821      	adds	r1, r4, r0
 8009934:	428b      	cmp	r3, r1
 8009936:	bf01      	itttt	eq
 8009938:	6819      	ldreq	r1, [r3, #0]
 800993a:	685b      	ldreq	r3, [r3, #4]
 800993c:	1809      	addeq	r1, r1, r0
 800993e:	6021      	streq	r1, [r4, #0]
 8009940:	6063      	str	r3, [r4, #4]
 8009942:	6054      	str	r4, [r2, #4]
 8009944:	e7cb      	b.n	80098de <_free_r+0x22>
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	200017ec 	.word	0x200017ec

0800994c <sbrk_aligned>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	4e0e      	ldr	r6, [pc, #56]	; (8009988 <sbrk_aligned+0x3c>)
 8009950:	460c      	mov	r4, r1
 8009952:	6831      	ldr	r1, [r6, #0]
 8009954:	4605      	mov	r5, r0
 8009956:	b911      	cbnz	r1, 800995e <sbrk_aligned+0x12>
 8009958:	f000 f9ee 	bl	8009d38 <_sbrk_r>
 800995c:	6030      	str	r0, [r6, #0]
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	f000 f9e9 	bl	8009d38 <_sbrk_r>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	d00a      	beq.n	8009980 <sbrk_aligned+0x34>
 800996a:	1cc4      	adds	r4, r0, #3
 800996c:	f024 0403 	bic.w	r4, r4, #3
 8009970:	42a0      	cmp	r0, r4
 8009972:	d007      	beq.n	8009984 <sbrk_aligned+0x38>
 8009974:	1a21      	subs	r1, r4, r0
 8009976:	4628      	mov	r0, r5
 8009978:	f000 f9de 	bl	8009d38 <_sbrk_r>
 800997c:	3001      	adds	r0, #1
 800997e:	d101      	bne.n	8009984 <sbrk_aligned+0x38>
 8009980:	f04f 34ff 	mov.w	r4, #4294967295
 8009984:	4620      	mov	r0, r4
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	200017f0 	.word	0x200017f0

0800998c <_malloc_r>:
 800998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009990:	1ccd      	adds	r5, r1, #3
 8009992:	f025 0503 	bic.w	r5, r5, #3
 8009996:	3508      	adds	r5, #8
 8009998:	2d0c      	cmp	r5, #12
 800999a:	bf38      	it	cc
 800999c:	250c      	movcc	r5, #12
 800999e:	2d00      	cmp	r5, #0
 80099a0:	4607      	mov	r7, r0
 80099a2:	db01      	blt.n	80099a8 <_malloc_r+0x1c>
 80099a4:	42a9      	cmp	r1, r5
 80099a6:	d905      	bls.n	80099b4 <_malloc_r+0x28>
 80099a8:	230c      	movs	r3, #12
 80099aa:	2600      	movs	r6, #0
 80099ac:	603b      	str	r3, [r7, #0]
 80099ae:	4630      	mov	r0, r6
 80099b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b4:	4e2e      	ldr	r6, [pc, #184]	; (8009a70 <_malloc_r+0xe4>)
 80099b6:	f000 fa25 	bl	8009e04 <__malloc_lock>
 80099ba:	6833      	ldr	r3, [r6, #0]
 80099bc:	461c      	mov	r4, r3
 80099be:	bb34      	cbnz	r4, 8009a0e <_malloc_r+0x82>
 80099c0:	4629      	mov	r1, r5
 80099c2:	4638      	mov	r0, r7
 80099c4:	f7ff ffc2 	bl	800994c <sbrk_aligned>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	4604      	mov	r4, r0
 80099cc:	d14d      	bne.n	8009a6a <_malloc_r+0xde>
 80099ce:	6834      	ldr	r4, [r6, #0]
 80099d0:	4626      	mov	r6, r4
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	d140      	bne.n	8009a58 <_malloc_r+0xcc>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	4631      	mov	r1, r6
 80099da:	4638      	mov	r0, r7
 80099dc:	eb04 0803 	add.w	r8, r4, r3
 80099e0:	f000 f9aa 	bl	8009d38 <_sbrk_r>
 80099e4:	4580      	cmp	r8, r0
 80099e6:	d13a      	bne.n	8009a5e <_malloc_r+0xd2>
 80099e8:	6821      	ldr	r1, [r4, #0]
 80099ea:	3503      	adds	r5, #3
 80099ec:	1a6d      	subs	r5, r5, r1
 80099ee:	f025 0503 	bic.w	r5, r5, #3
 80099f2:	3508      	adds	r5, #8
 80099f4:	2d0c      	cmp	r5, #12
 80099f6:	bf38      	it	cc
 80099f8:	250c      	movcc	r5, #12
 80099fa:	4638      	mov	r0, r7
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7ff ffa5 	bl	800994c <sbrk_aligned>
 8009a02:	3001      	adds	r0, #1
 8009a04:	d02b      	beq.n	8009a5e <_malloc_r+0xd2>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	442b      	add	r3, r5
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	e00e      	b.n	8009a2c <_malloc_r+0xa0>
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	1b52      	subs	r2, r2, r5
 8009a12:	d41e      	bmi.n	8009a52 <_malloc_r+0xc6>
 8009a14:	2a0b      	cmp	r2, #11
 8009a16:	d916      	bls.n	8009a46 <_malloc_r+0xba>
 8009a18:	1961      	adds	r1, r4, r5
 8009a1a:	42a3      	cmp	r3, r4
 8009a1c:	6025      	str	r5, [r4, #0]
 8009a1e:	bf18      	it	ne
 8009a20:	6059      	strne	r1, [r3, #4]
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	bf08      	it	eq
 8009a26:	6031      	streq	r1, [r6, #0]
 8009a28:	5162      	str	r2, [r4, r5]
 8009a2a:	604b      	str	r3, [r1, #4]
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f104 060b 	add.w	r6, r4, #11
 8009a32:	f000 f9ed 	bl	8009e10 <__malloc_unlock>
 8009a36:	f026 0607 	bic.w	r6, r6, #7
 8009a3a:	1d23      	adds	r3, r4, #4
 8009a3c:	1af2      	subs	r2, r6, r3
 8009a3e:	d0b6      	beq.n	80099ae <_malloc_r+0x22>
 8009a40:	1b9b      	subs	r3, r3, r6
 8009a42:	50a3      	str	r3, [r4, r2]
 8009a44:	e7b3      	b.n	80099ae <_malloc_r+0x22>
 8009a46:	6862      	ldr	r2, [r4, #4]
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	bf0c      	ite	eq
 8009a4c:	6032      	streq	r2, [r6, #0]
 8009a4e:	605a      	strne	r2, [r3, #4]
 8009a50:	e7ec      	b.n	8009a2c <_malloc_r+0xa0>
 8009a52:	4623      	mov	r3, r4
 8009a54:	6864      	ldr	r4, [r4, #4]
 8009a56:	e7b2      	b.n	80099be <_malloc_r+0x32>
 8009a58:	4634      	mov	r4, r6
 8009a5a:	6876      	ldr	r6, [r6, #4]
 8009a5c:	e7b9      	b.n	80099d2 <_malloc_r+0x46>
 8009a5e:	230c      	movs	r3, #12
 8009a60:	4638      	mov	r0, r7
 8009a62:	603b      	str	r3, [r7, #0]
 8009a64:	f000 f9d4 	bl	8009e10 <__malloc_unlock>
 8009a68:	e7a1      	b.n	80099ae <_malloc_r+0x22>
 8009a6a:	6025      	str	r5, [r4, #0]
 8009a6c:	e7de      	b.n	8009a2c <_malloc_r+0xa0>
 8009a6e:	bf00      	nop
 8009a70:	200017ec 	.word	0x200017ec

08009a74 <__ssputs_r>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	688e      	ldr	r6, [r1, #8]
 8009a7a:	4682      	mov	sl, r0
 8009a7c:	429e      	cmp	r6, r3
 8009a7e:	460c      	mov	r4, r1
 8009a80:	4690      	mov	r8, r2
 8009a82:	461f      	mov	r7, r3
 8009a84:	d838      	bhi.n	8009af8 <__ssputs_r+0x84>
 8009a86:	898a      	ldrh	r2, [r1, #12]
 8009a88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a8c:	d032      	beq.n	8009af4 <__ssputs_r+0x80>
 8009a8e:	6825      	ldr	r5, [r4, #0]
 8009a90:	6909      	ldr	r1, [r1, #16]
 8009a92:	3301      	adds	r3, #1
 8009a94:	eba5 0901 	sub.w	r9, r5, r1
 8009a98:	6965      	ldr	r5, [r4, #20]
 8009a9a:	444b      	add	r3, r9
 8009a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009aa4:	106d      	asrs	r5, r5, #1
 8009aa6:	429d      	cmp	r5, r3
 8009aa8:	bf38      	it	cc
 8009aaa:	461d      	movcc	r5, r3
 8009aac:	0553      	lsls	r3, r2, #21
 8009aae:	d531      	bpl.n	8009b14 <__ssputs_r+0xa0>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7ff ff6b 	bl	800998c <_malloc_r>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	b950      	cbnz	r0, 8009ad0 <__ssputs_r+0x5c>
 8009aba:	230c      	movs	r3, #12
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac0:	f8ca 3000 	str.w	r3, [sl]
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aca:	81a3      	strh	r3, [r4, #12]
 8009acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad0:	464a      	mov	r2, r9
 8009ad2:	6921      	ldr	r1, [r4, #16]
 8009ad4:	f7ff fa18 	bl	8008f08 <memcpy>
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	6126      	str	r6, [r4, #16]
 8009ae6:	444e      	add	r6, r9
 8009ae8:	6026      	str	r6, [r4, #0]
 8009aea:	463e      	mov	r6, r7
 8009aec:	6165      	str	r5, [r4, #20]
 8009aee:	eba5 0509 	sub.w	r5, r5, r9
 8009af2:	60a5      	str	r5, [r4, #8]
 8009af4:	42be      	cmp	r6, r7
 8009af6:	d900      	bls.n	8009afa <__ssputs_r+0x86>
 8009af8:	463e      	mov	r6, r7
 8009afa:	4632      	mov	r2, r6
 8009afc:	4641      	mov	r1, r8
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	f7fc fc2e 	bl	8006360 <memmove>
 8009b04:	68a3      	ldr	r3, [r4, #8]
 8009b06:	2000      	movs	r0, #0
 8009b08:	1b9b      	subs	r3, r3, r6
 8009b0a:	60a3      	str	r3, [r4, #8]
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	4433      	add	r3, r6
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	e7db      	b.n	8009acc <__ssputs_r+0x58>
 8009b14:	462a      	mov	r2, r5
 8009b16:	f000 f981 	bl	8009e1c <_realloc_r>
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d1e1      	bne.n	8009ae4 <__ssputs_r+0x70>
 8009b20:	4650      	mov	r0, sl
 8009b22:	6921      	ldr	r1, [r4, #16]
 8009b24:	f7ff feca 	bl	80098bc <_free_r>
 8009b28:	e7c7      	b.n	8009aba <__ssputs_r+0x46>
	...

08009b2c <_svfiprintf_r>:
 8009b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b30:	4698      	mov	r8, r3
 8009b32:	898b      	ldrh	r3, [r1, #12]
 8009b34:	4607      	mov	r7, r0
 8009b36:	061b      	lsls	r3, r3, #24
 8009b38:	460d      	mov	r5, r1
 8009b3a:	4614      	mov	r4, r2
 8009b3c:	b09d      	sub	sp, #116	; 0x74
 8009b3e:	d50e      	bpl.n	8009b5e <_svfiprintf_r+0x32>
 8009b40:	690b      	ldr	r3, [r1, #16]
 8009b42:	b963      	cbnz	r3, 8009b5e <_svfiprintf_r+0x32>
 8009b44:	2140      	movs	r1, #64	; 0x40
 8009b46:	f7ff ff21 	bl	800998c <_malloc_r>
 8009b4a:	6028      	str	r0, [r5, #0]
 8009b4c:	6128      	str	r0, [r5, #16]
 8009b4e:	b920      	cbnz	r0, 8009b5a <_svfiprintf_r+0x2e>
 8009b50:	230c      	movs	r3, #12
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	e0d1      	b.n	8009cfe <_svfiprintf_r+0x1d2>
 8009b5a:	2340      	movs	r3, #64	; 0x40
 8009b5c:	616b      	str	r3, [r5, #20]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9309      	str	r3, [sp, #36]	; 0x24
 8009b62:	2320      	movs	r3, #32
 8009b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b68:	2330      	movs	r3, #48	; 0x30
 8009b6a:	f04f 0901 	mov.w	r9, #1
 8009b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d18 <_svfiprintf_r+0x1ec>
 8009b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b7a:	4623      	mov	r3, r4
 8009b7c:	469a      	mov	sl, r3
 8009b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b82:	b10a      	cbz	r2, 8009b88 <_svfiprintf_r+0x5c>
 8009b84:	2a25      	cmp	r2, #37	; 0x25
 8009b86:	d1f9      	bne.n	8009b7c <_svfiprintf_r+0x50>
 8009b88:	ebba 0b04 	subs.w	fp, sl, r4
 8009b8c:	d00b      	beq.n	8009ba6 <_svfiprintf_r+0x7a>
 8009b8e:	465b      	mov	r3, fp
 8009b90:	4622      	mov	r2, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	4638      	mov	r0, r7
 8009b96:	f7ff ff6d 	bl	8009a74 <__ssputs_r>
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f000 80aa 	beq.w	8009cf4 <_svfiprintf_r+0x1c8>
 8009ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ba2:	445a      	add	r2, fp
 8009ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 80a2 	beq.w	8009cf4 <_svfiprintf_r+0x1c8>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bba:	f10a 0a01 	add.w	sl, sl, #1
 8009bbe:	9304      	str	r3, [sp, #16]
 8009bc0:	9307      	str	r3, [sp, #28]
 8009bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8009bc8:	4654      	mov	r4, sl
 8009bca:	2205      	movs	r2, #5
 8009bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd0:	4851      	ldr	r0, [pc, #324]	; (8009d18 <_svfiprintf_r+0x1ec>)
 8009bd2:	f7ff f98b 	bl	8008eec <memchr>
 8009bd6:	9a04      	ldr	r2, [sp, #16]
 8009bd8:	b9d8      	cbnz	r0, 8009c12 <_svfiprintf_r+0xe6>
 8009bda:	06d0      	lsls	r0, r2, #27
 8009bdc:	bf44      	itt	mi
 8009bde:	2320      	movmi	r3, #32
 8009be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009be4:	0711      	lsls	r1, r2, #28
 8009be6:	bf44      	itt	mi
 8009be8:	232b      	movmi	r3, #43	; 0x2b
 8009bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bee:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8009bf4:	d015      	beq.n	8009c22 <_svfiprintf_r+0xf6>
 8009bf6:	4654      	mov	r4, sl
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	f04f 0c0a 	mov.w	ip, #10
 8009bfe:	9a07      	ldr	r2, [sp, #28]
 8009c00:	4621      	mov	r1, r4
 8009c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c06:	3b30      	subs	r3, #48	; 0x30
 8009c08:	2b09      	cmp	r3, #9
 8009c0a:	d94e      	bls.n	8009caa <_svfiprintf_r+0x17e>
 8009c0c:	b1b0      	cbz	r0, 8009c3c <_svfiprintf_r+0x110>
 8009c0e:	9207      	str	r2, [sp, #28]
 8009c10:	e014      	b.n	8009c3c <_svfiprintf_r+0x110>
 8009c12:	eba0 0308 	sub.w	r3, r0, r8
 8009c16:	fa09 f303 	lsl.w	r3, r9, r3
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	46a2      	mov	sl, r4
 8009c1e:	9304      	str	r3, [sp, #16]
 8009c20:	e7d2      	b.n	8009bc8 <_svfiprintf_r+0x9c>
 8009c22:	9b03      	ldr	r3, [sp, #12]
 8009c24:	1d19      	adds	r1, r3, #4
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	9103      	str	r1, [sp, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bfbb      	ittet	lt
 8009c2e:	425b      	neglt	r3, r3
 8009c30:	f042 0202 	orrlt.w	r2, r2, #2
 8009c34:	9307      	strge	r3, [sp, #28]
 8009c36:	9307      	strlt	r3, [sp, #28]
 8009c38:	bfb8      	it	lt
 8009c3a:	9204      	strlt	r2, [sp, #16]
 8009c3c:	7823      	ldrb	r3, [r4, #0]
 8009c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c40:	d10c      	bne.n	8009c5c <_svfiprintf_r+0x130>
 8009c42:	7863      	ldrb	r3, [r4, #1]
 8009c44:	2b2a      	cmp	r3, #42	; 0x2a
 8009c46:	d135      	bne.n	8009cb4 <_svfiprintf_r+0x188>
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	3402      	adds	r4, #2
 8009c4c:	1d1a      	adds	r2, r3, #4
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	9203      	str	r2, [sp, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfb8      	it	lt
 8009c56:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c5a:	9305      	str	r3, [sp, #20]
 8009c5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009d1c <_svfiprintf_r+0x1f0>
 8009c60:	2203      	movs	r2, #3
 8009c62:	4650      	mov	r0, sl
 8009c64:	7821      	ldrb	r1, [r4, #0]
 8009c66:	f7ff f941 	bl	8008eec <memchr>
 8009c6a:	b140      	cbz	r0, 8009c7e <_svfiprintf_r+0x152>
 8009c6c:	2340      	movs	r3, #64	; 0x40
 8009c6e:	eba0 000a 	sub.w	r0, r0, sl
 8009c72:	fa03 f000 	lsl.w	r0, r3, r0
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	3401      	adds	r4, #1
 8009c7a:	4303      	orrs	r3, r0
 8009c7c:	9304      	str	r3, [sp, #16]
 8009c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c82:	2206      	movs	r2, #6
 8009c84:	4826      	ldr	r0, [pc, #152]	; (8009d20 <_svfiprintf_r+0x1f4>)
 8009c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c8a:	f7ff f92f 	bl	8008eec <memchr>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d038      	beq.n	8009d04 <_svfiprintf_r+0x1d8>
 8009c92:	4b24      	ldr	r3, [pc, #144]	; (8009d24 <_svfiprintf_r+0x1f8>)
 8009c94:	bb1b      	cbnz	r3, 8009cde <_svfiprintf_r+0x1b2>
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	3307      	adds	r3, #7
 8009c9a:	f023 0307 	bic.w	r3, r3, #7
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	9303      	str	r3, [sp, #12]
 8009ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca4:	4433      	add	r3, r6
 8009ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca8:	e767      	b.n	8009b7a <_svfiprintf_r+0x4e>
 8009caa:	460c      	mov	r4, r1
 8009cac:	2001      	movs	r0, #1
 8009cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cb2:	e7a5      	b.n	8009c00 <_svfiprintf_r+0xd4>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f04f 0c0a 	mov.w	ip, #10
 8009cba:	4619      	mov	r1, r3
 8009cbc:	3401      	adds	r4, #1
 8009cbe:	9305      	str	r3, [sp, #20]
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cc6:	3a30      	subs	r2, #48	; 0x30
 8009cc8:	2a09      	cmp	r2, #9
 8009cca:	d903      	bls.n	8009cd4 <_svfiprintf_r+0x1a8>
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d0c5      	beq.n	8009c5c <_svfiprintf_r+0x130>
 8009cd0:	9105      	str	r1, [sp, #20]
 8009cd2:	e7c3      	b.n	8009c5c <_svfiprintf_r+0x130>
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cdc:	e7f0      	b.n	8009cc0 <_svfiprintf_r+0x194>
 8009cde:	ab03      	add	r3, sp, #12
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	462a      	mov	r2, r5
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <_svfiprintf_r+0x1fc>)
 8009ce8:	a904      	add	r1, sp, #16
 8009cea:	f7fc fbf9 	bl	80064e0 <_printf_float>
 8009cee:	1c42      	adds	r2, r0, #1
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	d1d6      	bne.n	8009ca2 <_svfiprintf_r+0x176>
 8009cf4:	89ab      	ldrh	r3, [r5, #12]
 8009cf6:	065b      	lsls	r3, r3, #25
 8009cf8:	f53f af2c 	bmi.w	8009b54 <_svfiprintf_r+0x28>
 8009cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cfe:	b01d      	add	sp, #116	; 0x74
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	ab03      	add	r3, sp, #12
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	462a      	mov	r2, r5
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <_svfiprintf_r+0x1fc>)
 8009d0e:	a904      	add	r1, sp, #16
 8009d10:	f7fc fe82 	bl	8006a18 <_printf_i>
 8009d14:	e7eb      	b.n	8009cee <_svfiprintf_r+0x1c2>
 8009d16:	bf00      	nop
 8009d18:	0800af4c 	.word	0x0800af4c
 8009d1c:	0800af52 	.word	0x0800af52
 8009d20:	0800af56 	.word	0x0800af56
 8009d24:	080064e1 	.word	0x080064e1
 8009d28:	08009a75 	.word	0x08009a75

08009d2c <nan>:
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	4901      	ldr	r1, [pc, #4]	; (8009d34 <nan+0x8>)
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	7ff80000 	.word	0x7ff80000

08009d38 <_sbrk_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4d05      	ldr	r5, [pc, #20]	; (8009d54 <_sbrk_r+0x1c>)
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	f7f7 f926 	bl	8000f94 <_sbrk>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_sbrk_r+0x1a>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_sbrk_r+0x1a>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	200017f4 	.word	0x200017f4

08009d58 <nanf>:
 8009d58:	4800      	ldr	r0, [pc, #0]	; (8009d5c <nanf+0x4>)
 8009d5a:	4770      	bx	lr
 8009d5c:	7fc00000 	.word	0x7fc00000

08009d60 <strncmp>:
 8009d60:	4603      	mov	r3, r0
 8009d62:	b510      	push	{r4, lr}
 8009d64:	b172      	cbz	r2, 8009d84 <strncmp+0x24>
 8009d66:	3901      	subs	r1, #1
 8009d68:	1884      	adds	r4, r0, r2
 8009d6a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d72:	4290      	cmp	r0, r2
 8009d74:	d101      	bne.n	8009d7a <strncmp+0x1a>
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	d101      	bne.n	8009d7e <strncmp+0x1e>
 8009d7a:	1a80      	subs	r0, r0, r2
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d1f3      	bne.n	8009d6a <strncmp+0xa>
 8009d82:	e7fa      	b.n	8009d7a <strncmp+0x1a>
 8009d84:	4610      	mov	r0, r2
 8009d86:	e7f9      	b.n	8009d7c <strncmp+0x1c>

08009d88 <__ascii_wctomb>:
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4608      	mov	r0, r1
 8009d8c:	b141      	cbz	r1, 8009da0 <__ascii_wctomb+0x18>
 8009d8e:	2aff      	cmp	r2, #255	; 0xff
 8009d90:	d904      	bls.n	8009d9c <__ascii_wctomb+0x14>
 8009d92:	228a      	movs	r2, #138	; 0x8a
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	4770      	bx	lr
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	700a      	strb	r2, [r1, #0]
 8009da0:	4770      	bx	lr
	...

08009da4 <__assert_func>:
 8009da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009da6:	4614      	mov	r4, r2
 8009da8:	461a      	mov	r2, r3
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <__assert_func+0x2c>)
 8009dac:	4605      	mov	r5, r0
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68d8      	ldr	r0, [r3, #12]
 8009db2:	b14c      	cbz	r4, 8009dc8 <__assert_func+0x24>
 8009db4:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <__assert_func+0x30>)
 8009db6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dba:	9100      	str	r1, [sp, #0]
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	4906      	ldr	r1, [pc, #24]	; (8009dd8 <__assert_func+0x34>)
 8009dc0:	f000 f80e 	bl	8009de0 <fiprintf>
 8009dc4:	f000 fa70 	bl	800a2a8 <abort>
 8009dc8:	4b04      	ldr	r3, [pc, #16]	; (8009ddc <__assert_func+0x38>)
 8009dca:	461c      	mov	r4, r3
 8009dcc:	e7f3      	b.n	8009db6 <__assert_func+0x12>
 8009dce:	bf00      	nop
 8009dd0:	200001d0 	.word	0x200001d0
 8009dd4:	0800af5d 	.word	0x0800af5d
 8009dd8:	0800af6a 	.word	0x0800af6a
 8009ddc:	0800a9c1 	.word	0x0800a9c1

08009de0 <fiprintf>:
 8009de0:	b40e      	push	{r1, r2, r3}
 8009de2:	b503      	push	{r0, r1, lr}
 8009de4:	4601      	mov	r1, r0
 8009de6:	ab03      	add	r3, sp, #12
 8009de8:	4805      	ldr	r0, [pc, #20]	; (8009e00 <fiprintf+0x20>)
 8009dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dee:	6800      	ldr	r0, [r0, #0]
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	f000 f869 	bl	8009ec8 <_vfiprintf_r>
 8009df6:	b002      	add	sp, #8
 8009df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dfc:	b003      	add	sp, #12
 8009dfe:	4770      	bx	lr
 8009e00:	200001d0 	.word	0x200001d0

08009e04 <__malloc_lock>:
 8009e04:	4801      	ldr	r0, [pc, #4]	; (8009e0c <__malloc_lock+0x8>)
 8009e06:	f000 bc0b 	b.w	800a620 <__retarget_lock_acquire_recursive>
 8009e0a:	bf00      	nop
 8009e0c:	200017f8 	.word	0x200017f8

08009e10 <__malloc_unlock>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__malloc_unlock+0x8>)
 8009e12:	f000 bc06 	b.w	800a622 <__retarget_lock_release_recursive>
 8009e16:	bf00      	nop
 8009e18:	200017f8 	.word	0x200017f8

08009e1c <_realloc_r>:
 8009e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e20:	4680      	mov	r8, r0
 8009e22:	4614      	mov	r4, r2
 8009e24:	460e      	mov	r6, r1
 8009e26:	b921      	cbnz	r1, 8009e32 <_realloc_r+0x16>
 8009e28:	4611      	mov	r1, r2
 8009e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	f7ff bdad 	b.w	800998c <_malloc_r>
 8009e32:	b92a      	cbnz	r2, 8009e40 <_realloc_r+0x24>
 8009e34:	f7ff fd42 	bl	80098bc <_free_r>
 8009e38:	4625      	mov	r5, r4
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e40:	f000 fc56 	bl	800a6f0 <_malloc_usable_size_r>
 8009e44:	4284      	cmp	r4, r0
 8009e46:	4607      	mov	r7, r0
 8009e48:	d802      	bhi.n	8009e50 <_realloc_r+0x34>
 8009e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e4e:	d812      	bhi.n	8009e76 <_realloc_r+0x5a>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4640      	mov	r0, r8
 8009e54:	f7ff fd9a 	bl	800998c <_malloc_r>
 8009e58:	4605      	mov	r5, r0
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d0ed      	beq.n	8009e3a <_realloc_r+0x1e>
 8009e5e:	42bc      	cmp	r4, r7
 8009e60:	4622      	mov	r2, r4
 8009e62:	4631      	mov	r1, r6
 8009e64:	bf28      	it	cs
 8009e66:	463a      	movcs	r2, r7
 8009e68:	f7ff f84e 	bl	8008f08 <memcpy>
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4640      	mov	r0, r8
 8009e70:	f7ff fd24 	bl	80098bc <_free_r>
 8009e74:	e7e1      	b.n	8009e3a <_realloc_r+0x1e>
 8009e76:	4635      	mov	r5, r6
 8009e78:	e7df      	b.n	8009e3a <_realloc_r+0x1e>

08009e7a <__sfputc_r>:
 8009e7a:	6893      	ldr	r3, [r2, #8]
 8009e7c:	b410      	push	{r4}
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	6093      	str	r3, [r2, #8]
 8009e84:	da07      	bge.n	8009e96 <__sfputc_r+0x1c>
 8009e86:	6994      	ldr	r4, [r2, #24]
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	db01      	blt.n	8009e90 <__sfputc_r+0x16>
 8009e8c:	290a      	cmp	r1, #10
 8009e8e:	d102      	bne.n	8009e96 <__sfputc_r+0x1c>
 8009e90:	bc10      	pop	{r4}
 8009e92:	f000 b949 	b.w	800a128 <__swbuf_r>
 8009e96:	6813      	ldr	r3, [r2, #0]
 8009e98:	1c58      	adds	r0, r3, #1
 8009e9a:	6010      	str	r0, [r2, #0]
 8009e9c:	7019      	strb	r1, [r3, #0]
 8009e9e:	4608      	mov	r0, r1
 8009ea0:	bc10      	pop	{r4}
 8009ea2:	4770      	bx	lr

08009ea4 <__sfputs_r>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460f      	mov	r7, r1
 8009eaa:	4614      	mov	r4, r2
 8009eac:	18d5      	adds	r5, r2, r3
 8009eae:	42ac      	cmp	r4, r5
 8009eb0:	d101      	bne.n	8009eb6 <__sfputs_r+0x12>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e007      	b.n	8009ec6 <__sfputs_r+0x22>
 8009eb6:	463a      	mov	r2, r7
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ebe:	f7ff ffdc 	bl	8009e7a <__sfputc_r>
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	d1f3      	bne.n	8009eae <__sfputs_r+0xa>
 8009ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ec8 <_vfiprintf_r>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	460d      	mov	r5, r1
 8009ece:	4614      	mov	r4, r2
 8009ed0:	4698      	mov	r8, r3
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	b09d      	sub	sp, #116	; 0x74
 8009ed6:	b118      	cbz	r0, 8009ee0 <_vfiprintf_r+0x18>
 8009ed8:	6983      	ldr	r3, [r0, #24]
 8009eda:	b90b      	cbnz	r3, 8009ee0 <_vfiprintf_r+0x18>
 8009edc:	f000 fb02 	bl	800a4e4 <__sinit>
 8009ee0:	4b89      	ldr	r3, [pc, #548]	; (800a108 <_vfiprintf_r+0x240>)
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	d11b      	bne.n	8009f1e <_vfiprintf_r+0x56>
 8009ee6:	6875      	ldr	r5, [r6, #4]
 8009ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eea:	07d9      	lsls	r1, r3, #31
 8009eec:	d405      	bmi.n	8009efa <_vfiprintf_r+0x32>
 8009eee:	89ab      	ldrh	r3, [r5, #12]
 8009ef0:	059a      	lsls	r2, r3, #22
 8009ef2:	d402      	bmi.n	8009efa <_vfiprintf_r+0x32>
 8009ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ef6:	f000 fb93 	bl	800a620 <__retarget_lock_acquire_recursive>
 8009efa:	89ab      	ldrh	r3, [r5, #12]
 8009efc:	071b      	lsls	r3, r3, #28
 8009efe:	d501      	bpl.n	8009f04 <_vfiprintf_r+0x3c>
 8009f00:	692b      	ldr	r3, [r5, #16]
 8009f02:	b9eb      	cbnz	r3, 8009f40 <_vfiprintf_r+0x78>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4630      	mov	r0, r6
 8009f08:	f000 f960 	bl	800a1cc <__swsetup_r>
 8009f0c:	b1c0      	cbz	r0, 8009f40 <_vfiprintf_r+0x78>
 8009f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f10:	07dc      	lsls	r4, r3, #31
 8009f12:	d50e      	bpl.n	8009f32 <_vfiprintf_r+0x6a>
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	b01d      	add	sp, #116	; 0x74
 8009f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1e:	4b7b      	ldr	r3, [pc, #492]	; (800a10c <_vfiprintf_r+0x244>)
 8009f20:	429d      	cmp	r5, r3
 8009f22:	d101      	bne.n	8009f28 <_vfiprintf_r+0x60>
 8009f24:	68b5      	ldr	r5, [r6, #8]
 8009f26:	e7df      	b.n	8009ee8 <_vfiprintf_r+0x20>
 8009f28:	4b79      	ldr	r3, [pc, #484]	; (800a110 <_vfiprintf_r+0x248>)
 8009f2a:	429d      	cmp	r5, r3
 8009f2c:	bf08      	it	eq
 8009f2e:	68f5      	ldreq	r5, [r6, #12]
 8009f30:	e7da      	b.n	8009ee8 <_vfiprintf_r+0x20>
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	0598      	lsls	r0, r3, #22
 8009f36:	d4ed      	bmi.n	8009f14 <_vfiprintf_r+0x4c>
 8009f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f3a:	f000 fb72 	bl	800a622 <__retarget_lock_release_recursive>
 8009f3e:	e7e9      	b.n	8009f14 <_vfiprintf_r+0x4c>
 8009f40:	2300      	movs	r3, #0
 8009f42:	9309      	str	r3, [sp, #36]	; 0x24
 8009f44:	2320      	movs	r3, #32
 8009f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f4a:	2330      	movs	r3, #48	; 0x30
 8009f4c:	f04f 0901 	mov.w	r9, #1
 8009f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a114 <_vfiprintf_r+0x24c>
 8009f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	469a      	mov	sl, r3
 8009f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f64:	b10a      	cbz	r2, 8009f6a <_vfiprintf_r+0xa2>
 8009f66:	2a25      	cmp	r2, #37	; 0x25
 8009f68:	d1f9      	bne.n	8009f5e <_vfiprintf_r+0x96>
 8009f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f6e:	d00b      	beq.n	8009f88 <_vfiprintf_r+0xc0>
 8009f70:	465b      	mov	r3, fp
 8009f72:	4622      	mov	r2, r4
 8009f74:	4629      	mov	r1, r5
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7ff ff94 	bl	8009ea4 <__sfputs_r>
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	f000 80aa 	beq.w	800a0d6 <_vfiprintf_r+0x20e>
 8009f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f84:	445a      	add	r2, fp
 8009f86:	9209      	str	r2, [sp, #36]	; 0x24
 8009f88:	f89a 3000 	ldrb.w	r3, [sl]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80a2 	beq.w	800a0d6 <_vfiprintf_r+0x20e>
 8009f92:	2300      	movs	r3, #0
 8009f94:	f04f 32ff 	mov.w	r2, #4294967295
 8009f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f9c:	f10a 0a01 	add.w	sl, sl, #1
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	9307      	str	r3, [sp, #28]
 8009fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8009faa:	4654      	mov	r4, sl
 8009fac:	2205      	movs	r2, #5
 8009fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb2:	4858      	ldr	r0, [pc, #352]	; (800a114 <_vfiprintf_r+0x24c>)
 8009fb4:	f7fe ff9a 	bl	8008eec <memchr>
 8009fb8:	9a04      	ldr	r2, [sp, #16]
 8009fba:	b9d8      	cbnz	r0, 8009ff4 <_vfiprintf_r+0x12c>
 8009fbc:	06d1      	lsls	r1, r2, #27
 8009fbe:	bf44      	itt	mi
 8009fc0:	2320      	movmi	r3, #32
 8009fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fc6:	0713      	lsls	r3, r2, #28
 8009fc8:	bf44      	itt	mi
 8009fca:	232b      	movmi	r3, #43	; 0x2b
 8009fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fd6:	d015      	beq.n	800a004 <_vfiprintf_r+0x13c>
 8009fd8:	4654      	mov	r4, sl
 8009fda:	2000      	movs	r0, #0
 8009fdc:	f04f 0c0a 	mov.w	ip, #10
 8009fe0:	9a07      	ldr	r2, [sp, #28]
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fe8:	3b30      	subs	r3, #48	; 0x30
 8009fea:	2b09      	cmp	r3, #9
 8009fec:	d94e      	bls.n	800a08c <_vfiprintf_r+0x1c4>
 8009fee:	b1b0      	cbz	r0, 800a01e <_vfiprintf_r+0x156>
 8009ff0:	9207      	str	r2, [sp, #28]
 8009ff2:	e014      	b.n	800a01e <_vfiprintf_r+0x156>
 8009ff4:	eba0 0308 	sub.w	r3, r0, r8
 8009ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	46a2      	mov	sl, r4
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	e7d2      	b.n	8009faa <_vfiprintf_r+0xe2>
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	1d19      	adds	r1, r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	9103      	str	r1, [sp, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	bfbb      	ittet	lt
 800a010:	425b      	neglt	r3, r3
 800a012:	f042 0202 	orrlt.w	r2, r2, #2
 800a016:	9307      	strge	r3, [sp, #28]
 800a018:	9307      	strlt	r3, [sp, #28]
 800a01a:	bfb8      	it	lt
 800a01c:	9204      	strlt	r2, [sp, #16]
 800a01e:	7823      	ldrb	r3, [r4, #0]
 800a020:	2b2e      	cmp	r3, #46	; 0x2e
 800a022:	d10c      	bne.n	800a03e <_vfiprintf_r+0x176>
 800a024:	7863      	ldrb	r3, [r4, #1]
 800a026:	2b2a      	cmp	r3, #42	; 0x2a
 800a028:	d135      	bne.n	800a096 <_vfiprintf_r+0x1ce>
 800a02a:	9b03      	ldr	r3, [sp, #12]
 800a02c:	3402      	adds	r4, #2
 800a02e:	1d1a      	adds	r2, r3, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	9203      	str	r2, [sp, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	bfb8      	it	lt
 800a038:	f04f 33ff 	movlt.w	r3, #4294967295
 800a03c:	9305      	str	r3, [sp, #20]
 800a03e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a118 <_vfiprintf_r+0x250>
 800a042:	2203      	movs	r2, #3
 800a044:	4650      	mov	r0, sl
 800a046:	7821      	ldrb	r1, [r4, #0]
 800a048:	f7fe ff50 	bl	8008eec <memchr>
 800a04c:	b140      	cbz	r0, 800a060 <_vfiprintf_r+0x198>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	eba0 000a 	sub.w	r0, r0, sl
 800a054:	fa03 f000 	lsl.w	r0, r3, r0
 800a058:	9b04      	ldr	r3, [sp, #16]
 800a05a:	3401      	adds	r4, #1
 800a05c:	4303      	orrs	r3, r0
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a064:	2206      	movs	r2, #6
 800a066:	482d      	ldr	r0, [pc, #180]	; (800a11c <_vfiprintf_r+0x254>)
 800a068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a06c:	f7fe ff3e 	bl	8008eec <memchr>
 800a070:	2800      	cmp	r0, #0
 800a072:	d03f      	beq.n	800a0f4 <_vfiprintf_r+0x22c>
 800a074:	4b2a      	ldr	r3, [pc, #168]	; (800a120 <_vfiprintf_r+0x258>)
 800a076:	bb1b      	cbnz	r3, 800a0c0 <_vfiprintf_r+0x1f8>
 800a078:	9b03      	ldr	r3, [sp, #12]
 800a07a:	3307      	adds	r3, #7
 800a07c:	f023 0307 	bic.w	r3, r3, #7
 800a080:	3308      	adds	r3, #8
 800a082:	9303      	str	r3, [sp, #12]
 800a084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a086:	443b      	add	r3, r7
 800a088:	9309      	str	r3, [sp, #36]	; 0x24
 800a08a:	e767      	b.n	8009f5c <_vfiprintf_r+0x94>
 800a08c:	460c      	mov	r4, r1
 800a08e:	2001      	movs	r0, #1
 800a090:	fb0c 3202 	mla	r2, ip, r2, r3
 800a094:	e7a5      	b.n	8009fe2 <_vfiprintf_r+0x11a>
 800a096:	2300      	movs	r3, #0
 800a098:	f04f 0c0a 	mov.w	ip, #10
 800a09c:	4619      	mov	r1, r3
 800a09e:	3401      	adds	r4, #1
 800a0a0:	9305      	str	r3, [sp, #20]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a8:	3a30      	subs	r2, #48	; 0x30
 800a0aa:	2a09      	cmp	r2, #9
 800a0ac:	d903      	bls.n	800a0b6 <_vfiprintf_r+0x1ee>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0c5      	beq.n	800a03e <_vfiprintf_r+0x176>
 800a0b2:	9105      	str	r1, [sp, #20]
 800a0b4:	e7c3      	b.n	800a03e <_vfiprintf_r+0x176>
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0be:	e7f0      	b.n	800a0a2 <_vfiprintf_r+0x1da>
 800a0c0:	ab03      	add	r3, sp, #12
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	462a      	mov	r2, r5
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4b16      	ldr	r3, [pc, #88]	; (800a124 <_vfiprintf_r+0x25c>)
 800a0ca:	a904      	add	r1, sp, #16
 800a0cc:	f7fc fa08 	bl	80064e0 <_printf_float>
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	1c78      	adds	r0, r7, #1
 800a0d4:	d1d6      	bne.n	800a084 <_vfiprintf_r+0x1bc>
 800a0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0d8:	07d9      	lsls	r1, r3, #31
 800a0da:	d405      	bmi.n	800a0e8 <_vfiprintf_r+0x220>
 800a0dc:	89ab      	ldrh	r3, [r5, #12]
 800a0de:	059a      	lsls	r2, r3, #22
 800a0e0:	d402      	bmi.n	800a0e8 <_vfiprintf_r+0x220>
 800a0e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0e4:	f000 fa9d 	bl	800a622 <__retarget_lock_release_recursive>
 800a0e8:	89ab      	ldrh	r3, [r5, #12]
 800a0ea:	065b      	lsls	r3, r3, #25
 800a0ec:	f53f af12 	bmi.w	8009f14 <_vfiprintf_r+0x4c>
 800a0f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0f2:	e711      	b.n	8009f18 <_vfiprintf_r+0x50>
 800a0f4:	ab03      	add	r3, sp, #12
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	4b09      	ldr	r3, [pc, #36]	; (800a124 <_vfiprintf_r+0x25c>)
 800a0fe:	a904      	add	r1, sp, #16
 800a100:	f7fc fc8a 	bl	8006a18 <_printf_i>
 800a104:	e7e4      	b.n	800a0d0 <_vfiprintf_r+0x208>
 800a106:	bf00      	nop
 800a108:	0800afbc 	.word	0x0800afbc
 800a10c:	0800afdc 	.word	0x0800afdc
 800a110:	0800af9c 	.word	0x0800af9c
 800a114:	0800af4c 	.word	0x0800af4c
 800a118:	0800af52 	.word	0x0800af52
 800a11c:	0800af56 	.word	0x0800af56
 800a120:	080064e1 	.word	0x080064e1
 800a124:	08009ea5 	.word	0x08009ea5

0800a128 <__swbuf_r>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	460e      	mov	r6, r1
 800a12c:	4614      	mov	r4, r2
 800a12e:	4605      	mov	r5, r0
 800a130:	b118      	cbz	r0, 800a13a <__swbuf_r+0x12>
 800a132:	6983      	ldr	r3, [r0, #24]
 800a134:	b90b      	cbnz	r3, 800a13a <__swbuf_r+0x12>
 800a136:	f000 f9d5 	bl	800a4e4 <__sinit>
 800a13a:	4b21      	ldr	r3, [pc, #132]	; (800a1c0 <__swbuf_r+0x98>)
 800a13c:	429c      	cmp	r4, r3
 800a13e:	d12b      	bne.n	800a198 <__swbuf_r+0x70>
 800a140:	686c      	ldr	r4, [r5, #4]
 800a142:	69a3      	ldr	r3, [r4, #24]
 800a144:	60a3      	str	r3, [r4, #8]
 800a146:	89a3      	ldrh	r3, [r4, #12]
 800a148:	071a      	lsls	r2, r3, #28
 800a14a:	d52f      	bpl.n	800a1ac <__swbuf_r+0x84>
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	b36b      	cbz	r3, 800a1ac <__swbuf_r+0x84>
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	6820      	ldr	r0, [r4, #0]
 800a154:	b2f6      	uxtb	r6, r6
 800a156:	1ac0      	subs	r0, r0, r3
 800a158:	6963      	ldr	r3, [r4, #20]
 800a15a:	4637      	mov	r7, r6
 800a15c:	4283      	cmp	r3, r0
 800a15e:	dc04      	bgt.n	800a16a <__swbuf_r+0x42>
 800a160:	4621      	mov	r1, r4
 800a162:	4628      	mov	r0, r5
 800a164:	f000 f92a 	bl	800a3bc <_fflush_r>
 800a168:	bb30      	cbnz	r0, 800a1b8 <__swbuf_r+0x90>
 800a16a:	68a3      	ldr	r3, [r4, #8]
 800a16c:	3001      	adds	r0, #1
 800a16e:	3b01      	subs	r3, #1
 800a170:	60a3      	str	r3, [r4, #8]
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	6022      	str	r2, [r4, #0]
 800a178:	701e      	strb	r6, [r3, #0]
 800a17a:	6963      	ldr	r3, [r4, #20]
 800a17c:	4283      	cmp	r3, r0
 800a17e:	d004      	beq.n	800a18a <__swbuf_r+0x62>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	07db      	lsls	r3, r3, #31
 800a184:	d506      	bpl.n	800a194 <__swbuf_r+0x6c>
 800a186:	2e0a      	cmp	r6, #10
 800a188:	d104      	bne.n	800a194 <__swbuf_r+0x6c>
 800a18a:	4621      	mov	r1, r4
 800a18c:	4628      	mov	r0, r5
 800a18e:	f000 f915 	bl	800a3bc <_fflush_r>
 800a192:	b988      	cbnz	r0, 800a1b8 <__swbuf_r+0x90>
 800a194:	4638      	mov	r0, r7
 800a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a198:	4b0a      	ldr	r3, [pc, #40]	; (800a1c4 <__swbuf_r+0x9c>)
 800a19a:	429c      	cmp	r4, r3
 800a19c:	d101      	bne.n	800a1a2 <__swbuf_r+0x7a>
 800a19e:	68ac      	ldr	r4, [r5, #8]
 800a1a0:	e7cf      	b.n	800a142 <__swbuf_r+0x1a>
 800a1a2:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <__swbuf_r+0xa0>)
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	bf08      	it	eq
 800a1a8:	68ec      	ldreq	r4, [r5, #12]
 800a1aa:	e7ca      	b.n	800a142 <__swbuf_r+0x1a>
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f000 f80c 	bl	800a1cc <__swsetup_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d0cb      	beq.n	800a150 <__swbuf_r+0x28>
 800a1b8:	f04f 37ff 	mov.w	r7, #4294967295
 800a1bc:	e7ea      	b.n	800a194 <__swbuf_r+0x6c>
 800a1be:	bf00      	nop
 800a1c0:	0800afbc 	.word	0x0800afbc
 800a1c4:	0800afdc 	.word	0x0800afdc
 800a1c8:	0800af9c 	.word	0x0800af9c

0800a1cc <__swsetup_r>:
 800a1cc:	4b32      	ldr	r3, [pc, #200]	; (800a298 <__swsetup_r+0xcc>)
 800a1ce:	b570      	push	{r4, r5, r6, lr}
 800a1d0:	681d      	ldr	r5, [r3, #0]
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	b125      	cbz	r5, 800a1e2 <__swsetup_r+0x16>
 800a1d8:	69ab      	ldr	r3, [r5, #24]
 800a1da:	b913      	cbnz	r3, 800a1e2 <__swsetup_r+0x16>
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f000 f981 	bl	800a4e4 <__sinit>
 800a1e2:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <__swsetup_r+0xd0>)
 800a1e4:	429c      	cmp	r4, r3
 800a1e6:	d10f      	bne.n	800a208 <__swsetup_r+0x3c>
 800a1e8:	686c      	ldr	r4, [r5, #4]
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1f0:	0719      	lsls	r1, r3, #28
 800a1f2:	d42c      	bmi.n	800a24e <__swsetup_r+0x82>
 800a1f4:	06dd      	lsls	r5, r3, #27
 800a1f6:	d411      	bmi.n	800a21c <__swsetup_r+0x50>
 800a1f8:	2309      	movs	r3, #9
 800a1fa:	6033      	str	r3, [r6, #0]
 800a1fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	81a3      	strh	r3, [r4, #12]
 800a206:	e03e      	b.n	800a286 <__swsetup_r+0xba>
 800a208:	4b25      	ldr	r3, [pc, #148]	; (800a2a0 <__swsetup_r+0xd4>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d101      	bne.n	800a212 <__swsetup_r+0x46>
 800a20e:	68ac      	ldr	r4, [r5, #8]
 800a210:	e7eb      	b.n	800a1ea <__swsetup_r+0x1e>
 800a212:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <__swsetup_r+0xd8>)
 800a214:	429c      	cmp	r4, r3
 800a216:	bf08      	it	eq
 800a218:	68ec      	ldreq	r4, [r5, #12]
 800a21a:	e7e6      	b.n	800a1ea <__swsetup_r+0x1e>
 800a21c:	0758      	lsls	r0, r3, #29
 800a21e:	d512      	bpl.n	800a246 <__swsetup_r+0x7a>
 800a220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a222:	b141      	cbz	r1, 800a236 <__swsetup_r+0x6a>
 800a224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a228:	4299      	cmp	r1, r3
 800a22a:	d002      	beq.n	800a232 <__swsetup_r+0x66>
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7ff fb45 	bl	80098bc <_free_r>
 800a232:	2300      	movs	r3, #0
 800a234:	6363      	str	r3, [r4, #52]	; 0x34
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	2300      	movs	r3, #0
 800a240:	6063      	str	r3, [r4, #4]
 800a242:	6923      	ldr	r3, [r4, #16]
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	f043 0308 	orr.w	r3, r3, #8
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	6923      	ldr	r3, [r4, #16]
 800a250:	b94b      	cbnz	r3, 800a266 <__swsetup_r+0x9a>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a25c:	d003      	beq.n	800a266 <__swsetup_r+0x9a>
 800a25e:	4621      	mov	r1, r4
 800a260:	4630      	mov	r0, r6
 800a262:	f000 fa05 	bl	800a670 <__smakebuf_r>
 800a266:	89a0      	ldrh	r0, [r4, #12]
 800a268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a26c:	f010 0301 	ands.w	r3, r0, #1
 800a270:	d00a      	beq.n	800a288 <__swsetup_r+0xbc>
 800a272:	2300      	movs	r3, #0
 800a274:	60a3      	str	r3, [r4, #8]
 800a276:	6963      	ldr	r3, [r4, #20]
 800a278:	425b      	negs	r3, r3
 800a27a:	61a3      	str	r3, [r4, #24]
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	b943      	cbnz	r3, 800a292 <__swsetup_r+0xc6>
 800a280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a284:	d1ba      	bne.n	800a1fc <__swsetup_r+0x30>
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	0781      	lsls	r1, r0, #30
 800a28a:	bf58      	it	pl
 800a28c:	6963      	ldrpl	r3, [r4, #20]
 800a28e:	60a3      	str	r3, [r4, #8]
 800a290:	e7f4      	b.n	800a27c <__swsetup_r+0xb0>
 800a292:	2000      	movs	r0, #0
 800a294:	e7f7      	b.n	800a286 <__swsetup_r+0xba>
 800a296:	bf00      	nop
 800a298:	200001d0 	.word	0x200001d0
 800a29c:	0800afbc 	.word	0x0800afbc
 800a2a0:	0800afdc 	.word	0x0800afdc
 800a2a4:	0800af9c 	.word	0x0800af9c

0800a2a8 <abort>:
 800a2a8:	2006      	movs	r0, #6
 800a2aa:	b508      	push	{r3, lr}
 800a2ac:	f000 fa50 	bl	800a750 <raise>
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	f7f6 fe41 	bl	8000f38 <_exit>
	...

0800a2b8 <__sflush_r>:
 800a2b8:	898a      	ldrh	r2, [r1, #12]
 800a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2bc:	4605      	mov	r5, r0
 800a2be:	0710      	lsls	r0, r2, #28
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	d457      	bmi.n	800a374 <__sflush_r+0xbc>
 800a2c4:	684b      	ldr	r3, [r1, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	dc04      	bgt.n	800a2d4 <__sflush_r+0x1c>
 800a2ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	dc01      	bgt.n	800a2d4 <__sflush_r+0x1c>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2d6:	2e00      	cmp	r6, #0
 800a2d8:	d0fa      	beq.n	800a2d0 <__sflush_r+0x18>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2e0:	682f      	ldr	r7, [r5, #0]
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	d032      	beq.n	800a34c <__sflush_r+0x94>
 800a2e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	075a      	lsls	r2, r3, #29
 800a2ec:	d505      	bpl.n	800a2fa <__sflush_r+0x42>
 800a2ee:	6863      	ldr	r3, [r4, #4]
 800a2f0:	1ac0      	subs	r0, r0, r3
 800a2f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2f4:	b10b      	cbz	r3, 800a2fa <__sflush_r+0x42>
 800a2f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2f8:	1ac0      	subs	r0, r0, r3
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a300:	4628      	mov	r0, r5
 800a302:	6a21      	ldr	r1, [r4, #32]
 800a304:	47b0      	blx	r6
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	d106      	bne.n	800a31a <__sflush_r+0x62>
 800a30c:	6829      	ldr	r1, [r5, #0]
 800a30e:	291d      	cmp	r1, #29
 800a310:	d82c      	bhi.n	800a36c <__sflush_r+0xb4>
 800a312:	4a29      	ldr	r2, [pc, #164]	; (800a3b8 <__sflush_r+0x100>)
 800a314:	40ca      	lsrs	r2, r1
 800a316:	07d6      	lsls	r6, r2, #31
 800a318:	d528      	bpl.n	800a36c <__sflush_r+0xb4>
 800a31a:	2200      	movs	r2, #0
 800a31c:	6062      	str	r2, [r4, #4]
 800a31e:	6922      	ldr	r2, [r4, #16]
 800a320:	04d9      	lsls	r1, r3, #19
 800a322:	6022      	str	r2, [r4, #0]
 800a324:	d504      	bpl.n	800a330 <__sflush_r+0x78>
 800a326:	1c42      	adds	r2, r0, #1
 800a328:	d101      	bne.n	800a32e <__sflush_r+0x76>
 800a32a:	682b      	ldr	r3, [r5, #0]
 800a32c:	b903      	cbnz	r3, 800a330 <__sflush_r+0x78>
 800a32e:	6560      	str	r0, [r4, #84]	; 0x54
 800a330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a332:	602f      	str	r7, [r5, #0]
 800a334:	2900      	cmp	r1, #0
 800a336:	d0cb      	beq.n	800a2d0 <__sflush_r+0x18>
 800a338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a33c:	4299      	cmp	r1, r3
 800a33e:	d002      	beq.n	800a346 <__sflush_r+0x8e>
 800a340:	4628      	mov	r0, r5
 800a342:	f7ff fabb 	bl	80098bc <_free_r>
 800a346:	2000      	movs	r0, #0
 800a348:	6360      	str	r0, [r4, #52]	; 0x34
 800a34a:	e7c2      	b.n	800a2d2 <__sflush_r+0x1a>
 800a34c:	6a21      	ldr	r1, [r4, #32]
 800a34e:	2301      	movs	r3, #1
 800a350:	4628      	mov	r0, r5
 800a352:	47b0      	blx	r6
 800a354:	1c41      	adds	r1, r0, #1
 800a356:	d1c7      	bne.n	800a2e8 <__sflush_r+0x30>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d0c4      	beq.n	800a2e8 <__sflush_r+0x30>
 800a35e:	2b1d      	cmp	r3, #29
 800a360:	d001      	beq.n	800a366 <__sflush_r+0xae>
 800a362:	2b16      	cmp	r3, #22
 800a364:	d101      	bne.n	800a36a <__sflush_r+0xb2>
 800a366:	602f      	str	r7, [r5, #0]
 800a368:	e7b2      	b.n	800a2d0 <__sflush_r+0x18>
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a370:	81a3      	strh	r3, [r4, #12]
 800a372:	e7ae      	b.n	800a2d2 <__sflush_r+0x1a>
 800a374:	690f      	ldr	r7, [r1, #16]
 800a376:	2f00      	cmp	r7, #0
 800a378:	d0aa      	beq.n	800a2d0 <__sflush_r+0x18>
 800a37a:	0793      	lsls	r3, r2, #30
 800a37c:	bf18      	it	ne
 800a37e:	2300      	movne	r3, #0
 800a380:	680e      	ldr	r6, [r1, #0]
 800a382:	bf08      	it	eq
 800a384:	694b      	ldreq	r3, [r1, #20]
 800a386:	1bf6      	subs	r6, r6, r7
 800a388:	600f      	str	r7, [r1, #0]
 800a38a:	608b      	str	r3, [r1, #8]
 800a38c:	2e00      	cmp	r6, #0
 800a38e:	dd9f      	ble.n	800a2d0 <__sflush_r+0x18>
 800a390:	4633      	mov	r3, r6
 800a392:	463a      	mov	r2, r7
 800a394:	4628      	mov	r0, r5
 800a396:	6a21      	ldr	r1, [r4, #32]
 800a398:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a39c:	47e0      	blx	ip
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	dc06      	bgt.n	800a3b0 <__sflush_r+0xf8>
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	e790      	b.n	800a2d2 <__sflush_r+0x1a>
 800a3b0:	4407      	add	r7, r0
 800a3b2:	1a36      	subs	r6, r6, r0
 800a3b4:	e7ea      	b.n	800a38c <__sflush_r+0xd4>
 800a3b6:	bf00      	nop
 800a3b8:	20400001 	.word	0x20400001

0800a3bc <_fflush_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	690b      	ldr	r3, [r1, #16]
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	b913      	cbnz	r3, 800a3cc <_fflush_r+0x10>
 800a3c6:	2500      	movs	r5, #0
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	b118      	cbz	r0, 800a3d6 <_fflush_r+0x1a>
 800a3ce:	6983      	ldr	r3, [r0, #24]
 800a3d0:	b90b      	cbnz	r3, 800a3d6 <_fflush_r+0x1a>
 800a3d2:	f000 f887 	bl	800a4e4 <__sinit>
 800a3d6:	4b14      	ldr	r3, [pc, #80]	; (800a428 <_fflush_r+0x6c>)
 800a3d8:	429c      	cmp	r4, r3
 800a3da:	d11b      	bne.n	800a414 <_fflush_r+0x58>
 800a3dc:	686c      	ldr	r4, [r5, #4]
 800a3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d0ef      	beq.n	800a3c6 <_fflush_r+0xa>
 800a3e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3e8:	07d0      	lsls	r0, r2, #31
 800a3ea:	d404      	bmi.n	800a3f6 <_fflush_r+0x3a>
 800a3ec:	0599      	lsls	r1, r3, #22
 800a3ee:	d402      	bmi.n	800a3f6 <_fflush_r+0x3a>
 800a3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f2:	f000 f915 	bl	800a620 <__retarget_lock_acquire_recursive>
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	f7ff ff5d 	bl	800a2b8 <__sflush_r>
 800a3fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a400:	4605      	mov	r5, r0
 800a402:	07da      	lsls	r2, r3, #31
 800a404:	d4e0      	bmi.n	800a3c8 <_fflush_r+0xc>
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	059b      	lsls	r3, r3, #22
 800a40a:	d4dd      	bmi.n	800a3c8 <_fflush_r+0xc>
 800a40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a40e:	f000 f908 	bl	800a622 <__retarget_lock_release_recursive>
 800a412:	e7d9      	b.n	800a3c8 <_fflush_r+0xc>
 800a414:	4b05      	ldr	r3, [pc, #20]	; (800a42c <_fflush_r+0x70>)
 800a416:	429c      	cmp	r4, r3
 800a418:	d101      	bne.n	800a41e <_fflush_r+0x62>
 800a41a:	68ac      	ldr	r4, [r5, #8]
 800a41c:	e7df      	b.n	800a3de <_fflush_r+0x22>
 800a41e:	4b04      	ldr	r3, [pc, #16]	; (800a430 <_fflush_r+0x74>)
 800a420:	429c      	cmp	r4, r3
 800a422:	bf08      	it	eq
 800a424:	68ec      	ldreq	r4, [r5, #12]
 800a426:	e7da      	b.n	800a3de <_fflush_r+0x22>
 800a428:	0800afbc 	.word	0x0800afbc
 800a42c:	0800afdc 	.word	0x0800afdc
 800a430:	0800af9c 	.word	0x0800af9c

0800a434 <std>:
 800a434:	2300      	movs	r3, #0
 800a436:	b510      	push	{r4, lr}
 800a438:	4604      	mov	r4, r0
 800a43a:	e9c0 3300 	strd	r3, r3, [r0]
 800a43e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a442:	6083      	str	r3, [r0, #8]
 800a444:	8181      	strh	r1, [r0, #12]
 800a446:	6643      	str	r3, [r0, #100]	; 0x64
 800a448:	81c2      	strh	r2, [r0, #14]
 800a44a:	6183      	str	r3, [r0, #24]
 800a44c:	4619      	mov	r1, r3
 800a44e:	2208      	movs	r2, #8
 800a450:	305c      	adds	r0, #92	; 0x5c
 800a452:	f7fb ff9f 	bl	8006394 <memset>
 800a456:	4b05      	ldr	r3, [pc, #20]	; (800a46c <std+0x38>)
 800a458:	6224      	str	r4, [r4, #32]
 800a45a:	6263      	str	r3, [r4, #36]	; 0x24
 800a45c:	4b04      	ldr	r3, [pc, #16]	; (800a470 <std+0x3c>)
 800a45e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a460:	4b04      	ldr	r3, [pc, #16]	; (800a474 <std+0x40>)
 800a462:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a464:	4b04      	ldr	r3, [pc, #16]	; (800a478 <std+0x44>)
 800a466:	6323      	str	r3, [r4, #48]	; 0x30
 800a468:	bd10      	pop	{r4, pc}
 800a46a:	bf00      	nop
 800a46c:	0800a789 	.word	0x0800a789
 800a470:	0800a7ab 	.word	0x0800a7ab
 800a474:	0800a7e3 	.word	0x0800a7e3
 800a478:	0800a807 	.word	0x0800a807

0800a47c <_cleanup_r>:
 800a47c:	4901      	ldr	r1, [pc, #4]	; (800a484 <_cleanup_r+0x8>)
 800a47e:	f000 b8af 	b.w	800a5e0 <_fwalk_reent>
 800a482:	bf00      	nop
 800a484:	0800a3bd 	.word	0x0800a3bd

0800a488 <__sfmoreglue>:
 800a488:	2268      	movs	r2, #104	; 0x68
 800a48a:	b570      	push	{r4, r5, r6, lr}
 800a48c:	1e4d      	subs	r5, r1, #1
 800a48e:	4355      	muls	r5, r2
 800a490:	460e      	mov	r6, r1
 800a492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a496:	f7ff fa79 	bl	800998c <_malloc_r>
 800a49a:	4604      	mov	r4, r0
 800a49c:	b140      	cbz	r0, 800a4b0 <__sfmoreglue+0x28>
 800a49e:	2100      	movs	r1, #0
 800a4a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a4a4:	300c      	adds	r0, #12
 800a4a6:	60a0      	str	r0, [r4, #8]
 800a4a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4ac:	f7fb ff72 	bl	8006394 <memset>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}

0800a4b4 <__sfp_lock_acquire>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	; (800a4bc <__sfp_lock_acquire+0x8>)
 800a4b6:	f000 b8b3 	b.w	800a620 <__retarget_lock_acquire_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	200017f9 	.word	0x200017f9

0800a4c0 <__sfp_lock_release>:
 800a4c0:	4801      	ldr	r0, [pc, #4]	; (800a4c8 <__sfp_lock_release+0x8>)
 800a4c2:	f000 b8ae 	b.w	800a622 <__retarget_lock_release_recursive>
 800a4c6:	bf00      	nop
 800a4c8:	200017f9 	.word	0x200017f9

0800a4cc <__sinit_lock_acquire>:
 800a4cc:	4801      	ldr	r0, [pc, #4]	; (800a4d4 <__sinit_lock_acquire+0x8>)
 800a4ce:	f000 b8a7 	b.w	800a620 <__retarget_lock_acquire_recursive>
 800a4d2:	bf00      	nop
 800a4d4:	200017fa 	.word	0x200017fa

0800a4d8 <__sinit_lock_release>:
 800a4d8:	4801      	ldr	r0, [pc, #4]	; (800a4e0 <__sinit_lock_release+0x8>)
 800a4da:	f000 b8a2 	b.w	800a622 <__retarget_lock_release_recursive>
 800a4de:	bf00      	nop
 800a4e0:	200017fa 	.word	0x200017fa

0800a4e4 <__sinit>:
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	f7ff fff0 	bl	800a4cc <__sinit_lock_acquire>
 800a4ec:	69a3      	ldr	r3, [r4, #24]
 800a4ee:	b11b      	cbz	r3, 800a4f8 <__sinit+0x14>
 800a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f4:	f7ff bff0 	b.w	800a4d8 <__sinit_lock_release>
 800a4f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4fc:	6523      	str	r3, [r4, #80]	; 0x50
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <__sinit+0x68>)
 800a500:	4a13      	ldr	r2, [pc, #76]	; (800a550 <__sinit+0x6c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	62a2      	str	r2, [r4, #40]	; 0x28
 800a506:	42a3      	cmp	r3, r4
 800a508:	bf08      	it	eq
 800a50a:	2301      	moveq	r3, #1
 800a50c:	4620      	mov	r0, r4
 800a50e:	bf08      	it	eq
 800a510:	61a3      	streq	r3, [r4, #24]
 800a512:	f000 f81f 	bl	800a554 <__sfp>
 800a516:	6060      	str	r0, [r4, #4]
 800a518:	4620      	mov	r0, r4
 800a51a:	f000 f81b 	bl	800a554 <__sfp>
 800a51e:	60a0      	str	r0, [r4, #8]
 800a520:	4620      	mov	r0, r4
 800a522:	f000 f817 	bl	800a554 <__sfp>
 800a526:	2200      	movs	r2, #0
 800a528:	2104      	movs	r1, #4
 800a52a:	60e0      	str	r0, [r4, #12]
 800a52c:	6860      	ldr	r0, [r4, #4]
 800a52e:	f7ff ff81 	bl	800a434 <std>
 800a532:	2201      	movs	r2, #1
 800a534:	2109      	movs	r1, #9
 800a536:	68a0      	ldr	r0, [r4, #8]
 800a538:	f7ff ff7c 	bl	800a434 <std>
 800a53c:	2202      	movs	r2, #2
 800a53e:	2112      	movs	r1, #18
 800a540:	68e0      	ldr	r0, [r4, #12]
 800a542:	f7ff ff77 	bl	800a434 <std>
 800a546:	2301      	movs	r3, #1
 800a548:	61a3      	str	r3, [r4, #24]
 800a54a:	e7d1      	b.n	800a4f0 <__sinit+0xc>
 800a54c:	0800ab5c 	.word	0x0800ab5c
 800a550:	0800a47d 	.word	0x0800a47d

0800a554 <__sfp>:
 800a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a556:	4607      	mov	r7, r0
 800a558:	f7ff ffac 	bl	800a4b4 <__sfp_lock_acquire>
 800a55c:	4b1e      	ldr	r3, [pc, #120]	; (800a5d8 <__sfp+0x84>)
 800a55e:	681e      	ldr	r6, [r3, #0]
 800a560:	69b3      	ldr	r3, [r6, #24]
 800a562:	b913      	cbnz	r3, 800a56a <__sfp+0x16>
 800a564:	4630      	mov	r0, r6
 800a566:	f7ff ffbd 	bl	800a4e4 <__sinit>
 800a56a:	3648      	adds	r6, #72	; 0x48
 800a56c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a570:	3b01      	subs	r3, #1
 800a572:	d503      	bpl.n	800a57c <__sfp+0x28>
 800a574:	6833      	ldr	r3, [r6, #0]
 800a576:	b30b      	cbz	r3, 800a5bc <__sfp+0x68>
 800a578:	6836      	ldr	r6, [r6, #0]
 800a57a:	e7f7      	b.n	800a56c <__sfp+0x18>
 800a57c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a580:	b9d5      	cbnz	r5, 800a5b8 <__sfp+0x64>
 800a582:	4b16      	ldr	r3, [pc, #88]	; (800a5dc <__sfp+0x88>)
 800a584:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a588:	60e3      	str	r3, [r4, #12]
 800a58a:	6665      	str	r5, [r4, #100]	; 0x64
 800a58c:	f000 f847 	bl	800a61e <__retarget_lock_init_recursive>
 800a590:	f7ff ff96 	bl	800a4c0 <__sfp_lock_release>
 800a594:	2208      	movs	r2, #8
 800a596:	4629      	mov	r1, r5
 800a598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a59c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5a0:	6025      	str	r5, [r4, #0]
 800a5a2:	61a5      	str	r5, [r4, #24]
 800a5a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5a8:	f7fb fef4 	bl	8006394 <memset>
 800a5ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5b8:	3468      	adds	r4, #104	; 0x68
 800a5ba:	e7d9      	b.n	800a570 <__sfp+0x1c>
 800a5bc:	2104      	movs	r1, #4
 800a5be:	4638      	mov	r0, r7
 800a5c0:	f7ff ff62 	bl	800a488 <__sfmoreglue>
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	6030      	str	r0, [r6, #0]
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d1d5      	bne.n	800a578 <__sfp+0x24>
 800a5cc:	f7ff ff78 	bl	800a4c0 <__sfp_lock_release>
 800a5d0:	230c      	movs	r3, #12
 800a5d2:	603b      	str	r3, [r7, #0]
 800a5d4:	e7ee      	b.n	800a5b4 <__sfp+0x60>
 800a5d6:	bf00      	nop
 800a5d8:	0800ab5c 	.word	0x0800ab5c
 800a5dc:	ffff0001 	.word	0xffff0001

0800a5e0 <_fwalk_reent>:
 800a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	4688      	mov	r8, r1
 800a5e8:	2700      	movs	r7, #0
 800a5ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5f2:	f1b9 0901 	subs.w	r9, r9, #1
 800a5f6:	d505      	bpl.n	800a604 <_fwalk_reent+0x24>
 800a5f8:	6824      	ldr	r4, [r4, #0]
 800a5fa:	2c00      	cmp	r4, #0
 800a5fc:	d1f7      	bne.n	800a5ee <_fwalk_reent+0xe>
 800a5fe:	4638      	mov	r0, r7
 800a600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a604:	89ab      	ldrh	r3, [r5, #12]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d907      	bls.n	800a61a <_fwalk_reent+0x3a>
 800a60a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a60e:	3301      	adds	r3, #1
 800a610:	d003      	beq.n	800a61a <_fwalk_reent+0x3a>
 800a612:	4629      	mov	r1, r5
 800a614:	4630      	mov	r0, r6
 800a616:	47c0      	blx	r8
 800a618:	4307      	orrs	r7, r0
 800a61a:	3568      	adds	r5, #104	; 0x68
 800a61c:	e7e9      	b.n	800a5f2 <_fwalk_reent+0x12>

0800a61e <__retarget_lock_init_recursive>:
 800a61e:	4770      	bx	lr

0800a620 <__retarget_lock_acquire_recursive>:
 800a620:	4770      	bx	lr

0800a622 <__retarget_lock_release_recursive>:
 800a622:	4770      	bx	lr

0800a624 <__swhatbuf_r>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	460e      	mov	r6, r1
 800a628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62c:	4614      	mov	r4, r2
 800a62e:	2900      	cmp	r1, #0
 800a630:	461d      	mov	r5, r3
 800a632:	b096      	sub	sp, #88	; 0x58
 800a634:	da08      	bge.n	800a648 <__swhatbuf_r+0x24>
 800a636:	2200      	movs	r2, #0
 800a638:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	061a      	lsls	r2, r3, #24
 800a640:	d410      	bmi.n	800a664 <__swhatbuf_r+0x40>
 800a642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a646:	e00e      	b.n	800a666 <__swhatbuf_r+0x42>
 800a648:	466a      	mov	r2, sp
 800a64a:	f000 f903 	bl	800a854 <_fstat_r>
 800a64e:	2800      	cmp	r0, #0
 800a650:	dbf1      	blt.n	800a636 <__swhatbuf_r+0x12>
 800a652:	9a01      	ldr	r2, [sp, #4]
 800a654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a65c:	425a      	negs	r2, r3
 800a65e:	415a      	adcs	r2, r3
 800a660:	602a      	str	r2, [r5, #0]
 800a662:	e7ee      	b.n	800a642 <__swhatbuf_r+0x1e>
 800a664:	2340      	movs	r3, #64	; 0x40
 800a666:	2000      	movs	r0, #0
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	b016      	add	sp, #88	; 0x58
 800a66c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a670 <__smakebuf_r>:
 800a670:	898b      	ldrh	r3, [r1, #12]
 800a672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a674:	079d      	lsls	r5, r3, #30
 800a676:	4606      	mov	r6, r0
 800a678:	460c      	mov	r4, r1
 800a67a:	d507      	bpl.n	800a68c <__smakebuf_r+0x1c>
 800a67c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	6123      	str	r3, [r4, #16]
 800a684:	2301      	movs	r3, #1
 800a686:	6163      	str	r3, [r4, #20]
 800a688:	b002      	add	sp, #8
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	466a      	mov	r2, sp
 800a68e:	ab01      	add	r3, sp, #4
 800a690:	f7ff ffc8 	bl	800a624 <__swhatbuf_r>
 800a694:	9900      	ldr	r1, [sp, #0]
 800a696:	4605      	mov	r5, r0
 800a698:	4630      	mov	r0, r6
 800a69a:	f7ff f977 	bl	800998c <_malloc_r>
 800a69e:	b948      	cbnz	r0, 800a6b4 <__smakebuf_r+0x44>
 800a6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a4:	059a      	lsls	r2, r3, #22
 800a6a6:	d4ef      	bmi.n	800a688 <__smakebuf_r+0x18>
 800a6a8:	f023 0303 	bic.w	r3, r3, #3
 800a6ac:	f043 0302 	orr.w	r3, r3, #2
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	e7e3      	b.n	800a67c <__smakebuf_r+0xc>
 800a6b4:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <__smakebuf_r+0x7c>)
 800a6b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	6020      	str	r0, [r4, #0]
 800a6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	6120      	str	r0, [r4, #16]
 800a6c6:	6163      	str	r3, [r4, #20]
 800a6c8:	9b01      	ldr	r3, [sp, #4]
 800a6ca:	b15b      	cbz	r3, 800a6e4 <__smakebuf_r+0x74>
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6d2:	f000 f8d1 	bl	800a878 <_isatty_r>
 800a6d6:	b128      	cbz	r0, 800a6e4 <__smakebuf_r+0x74>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	89a0      	ldrh	r0, [r4, #12]
 800a6e6:	4305      	orrs	r5, r0
 800a6e8:	81a5      	strh	r5, [r4, #12]
 800a6ea:	e7cd      	b.n	800a688 <__smakebuf_r+0x18>
 800a6ec:	0800a47d 	.word	0x0800a47d

0800a6f0 <_malloc_usable_size_r>:
 800a6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6f4:	1f18      	subs	r0, r3, #4
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bfbc      	itt	lt
 800a6fa:	580b      	ldrlt	r3, [r1, r0]
 800a6fc:	18c0      	addlt	r0, r0, r3
 800a6fe:	4770      	bx	lr

0800a700 <_raise_r>:
 800a700:	291f      	cmp	r1, #31
 800a702:	b538      	push	{r3, r4, r5, lr}
 800a704:	4604      	mov	r4, r0
 800a706:	460d      	mov	r5, r1
 800a708:	d904      	bls.n	800a714 <_raise_r+0x14>
 800a70a:	2316      	movs	r3, #22
 800a70c:	6003      	str	r3, [r0, #0]
 800a70e:	f04f 30ff 	mov.w	r0, #4294967295
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a716:	b112      	cbz	r2, 800a71e <_raise_r+0x1e>
 800a718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a71c:	b94b      	cbnz	r3, 800a732 <_raise_r+0x32>
 800a71e:	4620      	mov	r0, r4
 800a720:	f000 f830 	bl	800a784 <_getpid_r>
 800a724:	462a      	mov	r2, r5
 800a726:	4601      	mov	r1, r0
 800a728:	4620      	mov	r0, r4
 800a72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a72e:	f000 b817 	b.w	800a760 <_kill_r>
 800a732:	2b01      	cmp	r3, #1
 800a734:	d00a      	beq.n	800a74c <_raise_r+0x4c>
 800a736:	1c59      	adds	r1, r3, #1
 800a738:	d103      	bne.n	800a742 <_raise_r+0x42>
 800a73a:	2316      	movs	r3, #22
 800a73c:	6003      	str	r3, [r0, #0]
 800a73e:	2001      	movs	r0, #1
 800a740:	e7e7      	b.n	800a712 <_raise_r+0x12>
 800a742:	2400      	movs	r4, #0
 800a744:	4628      	mov	r0, r5
 800a746:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a74a:	4798      	blx	r3
 800a74c:	2000      	movs	r0, #0
 800a74e:	e7e0      	b.n	800a712 <_raise_r+0x12>

0800a750 <raise>:
 800a750:	4b02      	ldr	r3, [pc, #8]	; (800a75c <raise+0xc>)
 800a752:	4601      	mov	r1, r0
 800a754:	6818      	ldr	r0, [r3, #0]
 800a756:	f7ff bfd3 	b.w	800a700 <_raise_r>
 800a75a:	bf00      	nop
 800a75c:	200001d0 	.word	0x200001d0

0800a760 <_kill_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	2300      	movs	r3, #0
 800a764:	4d06      	ldr	r5, [pc, #24]	; (800a780 <_kill_r+0x20>)
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	4611      	mov	r1, r2
 800a76c:	602b      	str	r3, [r5, #0]
 800a76e:	f7f6 fbdb 	bl	8000f28 <_kill>
 800a772:	1c43      	adds	r3, r0, #1
 800a774:	d102      	bne.n	800a77c <_kill_r+0x1c>
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	b103      	cbz	r3, 800a77c <_kill_r+0x1c>
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	bd38      	pop	{r3, r4, r5, pc}
 800a77e:	bf00      	nop
 800a780:	200017f4 	.word	0x200017f4

0800a784 <_getpid_r>:
 800a784:	f7f6 bbce 	b.w	8000f24 <_getpid>

0800a788 <__sread>:
 800a788:	b510      	push	{r4, lr}
 800a78a:	460c      	mov	r4, r1
 800a78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a790:	f000 f894 	bl	800a8bc <_read_r>
 800a794:	2800      	cmp	r0, #0
 800a796:	bfab      	itete	ge
 800a798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a79a:	89a3      	ldrhlt	r3, [r4, #12]
 800a79c:	181b      	addge	r3, r3, r0
 800a79e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7a2:	bfac      	ite	ge
 800a7a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7a6:	81a3      	strhlt	r3, [r4, #12]
 800a7a8:	bd10      	pop	{r4, pc}

0800a7aa <__swrite>:
 800a7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ae:	461f      	mov	r7, r3
 800a7b0:	898b      	ldrh	r3, [r1, #12]
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	05db      	lsls	r3, r3, #23
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	4616      	mov	r6, r2
 800a7ba:	d505      	bpl.n	800a7c8 <__swrite+0x1e>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c4:	f000 f868 	bl	800a898 <_lseek_r>
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	4632      	mov	r2, r6
 800a7cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	463b      	mov	r3, r7
 800a7d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7de:	f000 b817 	b.w	800a810 <_write_r>

0800a7e2 <__sseek>:
 800a7e2:	b510      	push	{r4, lr}
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ea:	f000 f855 	bl	800a898 <_lseek_r>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	bf15      	itete	ne
 800a7f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7fe:	81a3      	strheq	r3, [r4, #12]
 800a800:	bf18      	it	ne
 800a802:	81a3      	strhne	r3, [r4, #12]
 800a804:	bd10      	pop	{r4, pc}

0800a806 <__sclose>:
 800a806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a80a:	f000 b813 	b.w	800a834 <_close_r>
	...

0800a810 <_write_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4604      	mov	r4, r0
 800a814:	4608      	mov	r0, r1
 800a816:	4611      	mov	r1, r2
 800a818:	2200      	movs	r2, #0
 800a81a:	4d05      	ldr	r5, [pc, #20]	; (800a830 <_write_r+0x20>)
 800a81c:	602a      	str	r2, [r5, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f7f6 fb9e 	bl	8000f60 <_write>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_write_r+0x1e>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_write_r+0x1e>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	200017f4 	.word	0x200017f4

0800a834 <_close_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	2300      	movs	r3, #0
 800a838:	4d05      	ldr	r5, [pc, #20]	; (800a850 <_close_r+0x1c>)
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	602b      	str	r3, [r5, #0]
 800a840:	f7f6 fb9c 	bl	8000f7c <_close>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_close_r+0x1a>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_close_r+0x1a>
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	200017f4 	.word	0x200017f4

0800a854 <_fstat_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	2300      	movs	r3, #0
 800a858:	4d06      	ldr	r5, [pc, #24]	; (800a874 <_fstat_r+0x20>)
 800a85a:	4604      	mov	r4, r0
 800a85c:	4608      	mov	r0, r1
 800a85e:	4611      	mov	r1, r2
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	f7f6 fb8e 	bl	8000f82 <_fstat>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	d102      	bne.n	800a870 <_fstat_r+0x1c>
 800a86a:	682b      	ldr	r3, [r5, #0]
 800a86c:	b103      	cbz	r3, 800a870 <_fstat_r+0x1c>
 800a86e:	6023      	str	r3, [r4, #0]
 800a870:	bd38      	pop	{r3, r4, r5, pc}
 800a872:	bf00      	nop
 800a874:	200017f4 	.word	0x200017f4

0800a878 <_isatty_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	2300      	movs	r3, #0
 800a87c:	4d05      	ldr	r5, [pc, #20]	; (800a894 <_isatty_r+0x1c>)
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f7f6 fb82 	bl	8000f8c <_isatty>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_isatty_r+0x1a>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_isatty_r+0x1a>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	200017f4 	.word	0x200017f4

0800a898 <_lseek_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	4611      	mov	r1, r2
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	4d05      	ldr	r5, [pc, #20]	; (800a8b8 <_lseek_r+0x20>)
 800a8a4:	602a      	str	r2, [r5, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f7f6 fb72 	bl	8000f90 <_lseek>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_lseek_r+0x1e>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_lseek_r+0x1e>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	200017f4 	.word	0x200017f4

0800a8bc <_read_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4604      	mov	r4, r0
 800a8c0:	4608      	mov	r0, r1
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4d05      	ldr	r5, [pc, #20]	; (800a8dc <_read_r+0x20>)
 800a8c8:	602a      	str	r2, [r5, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f7f6 fb3a 	bl	8000f44 <_read>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d102      	bne.n	800a8da <_read_r+0x1e>
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	b103      	cbz	r3, 800a8da <_read_r+0x1e>
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	bd38      	pop	{r3, r4, r5, pc}
 800a8dc:	200017f4 	.word	0x200017f4

0800a8e0 <_init>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	bf00      	nop
 800a8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e6:	bc08      	pop	{r3}
 800a8e8:	469e      	mov	lr, r3
 800a8ea:	4770      	bx	lr

0800a8ec <_fini>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr
