
stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  080092e8  080092e8  000192e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098ec  080098ec  00020398  2**0
                  CONTENTS
  4 .ARM          00000000  080098ec  080098ec  00020398  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098ec  080098ec  00020398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098f0  080098f0  000198f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  080098f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f0  20000398  08009c8c  00020398  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b88  08009c8c  00021b88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000221fa  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006233  00000000  00000000  000425fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000d1f9  00000000  00000000  00048831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014e0  00000000  00000000  00055a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016d1  00000000  00000000  00056f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f21e  00000000  00000000  000585e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b0f6  00000000  00000000  000777ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009a398  00000000  00000000  000a28f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004fc8  00000000  00000000  0013cc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00141c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000398 	.word	0x20000398
 800012c:	00000000 	.word	0x00000000
 8000130:	080092cc 	.word	0x080092cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000039c 	.word	0x2000039c
 800014c:	080092cc 	.word	0x080092cc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__gedf2>:
 8000900:	f04f 3cff 	mov.w	ip, #4294967295
 8000904:	e006      	b.n	8000914 <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__ledf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	e002      	b.n	8000914 <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__cmpdf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800092a:	d01b      	beq.n	8000964 <__cmpdf2+0x54>
 800092c:	b001      	add	sp, #4
 800092e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000932:	bf0c      	ite	eq
 8000934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000938:	ea91 0f03 	teqne	r1, r3
 800093c:	bf02      	ittt	eq
 800093e:	ea90 0f02 	teqeq	r0, r2
 8000942:	2000      	moveq	r0, #0
 8000944:	4770      	bxeq	lr
 8000946:	f110 0f00 	cmn.w	r0, #0
 800094a:	ea91 0f03 	teq	r1, r3
 800094e:	bf58      	it	pl
 8000950:	4299      	cmppl	r1, r3
 8000952:	bf08      	it	eq
 8000954:	4290      	cmpeq	r0, r2
 8000956:	bf2c      	ite	cs
 8000958:	17d8      	asrcs	r0, r3, #31
 800095a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095e:	f040 0001 	orr.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d102      	bne.n	8000974 <__cmpdf2+0x64>
 800096e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000972:	d107      	bne.n	8000984 <__cmpdf2+0x74>
 8000974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d1d6      	bne.n	800092c <__cmpdf2+0x1c>
 800097e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000982:	d0d3      	beq.n	800092c <__cmpdf2+0x1c>
 8000984:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_cdrcmple>:
 800098c:	4684      	mov	ip, r0
 800098e:	4610      	mov	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	468c      	mov	ip, r1
 8000994:	4619      	mov	r1, r3
 8000996:	4663      	mov	r3, ip
 8000998:	e000      	b.n	800099c <__aeabi_cdcmpeq>
 800099a:	bf00      	nop

0800099c <__aeabi_cdcmpeq>:
 800099c:	b501      	push	{r0, lr}
 800099e:	f7ff ffb7 	bl	8000910 <__cmpdf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd01      	pop	{r0, pc}

080009ac <__aeabi_dcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cdcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cdcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cdcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffce 	bl	800098c <__aeabi_cdrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc4 	bl	800098c <__aeabi_cdrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpun>:
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__aeabi_dcmpun+0x10>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d10a      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x20>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0001 	mov.w	r0, #1
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__gesf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpsf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__lesf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpsf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpsf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b46:	d011      	beq.n	8000b6c <__cmpsf2+0x40>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b4e:	bf18      	it	ne
 8000b50:	ea90 0f01 	teqne	r0, r1
 8000b54:	bf58      	it	pl
 8000b56:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b5a:	bf88      	it	hi
 8000b5c:	17c8      	asrhi	r0, r1, #31
 8000b5e:	bf38      	it	cc
 8000b60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b64:	bf18      	it	ne
 8000b66:	f040 0001 	orrne.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b70:	d102      	bne.n	8000b78 <__cmpsf2+0x4c>
 8000b72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b76:	d105      	bne.n	8000b84 <__cmpsf2+0x58>
 8000b78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b7c:	d1e4      	bne.n	8000b48 <__cmpsf2+0x1c>
 8000b7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b82:	d0e1      	beq.n	8000b48 <__cmpsf2+0x1c>
 8000b84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_cfrcmple>:
 8000b8c:	4684      	mov	ip, r0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	4661      	mov	r1, ip
 8000b92:	e7ff      	b.n	8000b94 <__aeabi_cfcmpeq>

08000b94 <__aeabi_cfcmpeq>:
 8000b94:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b96:	f7ff ffc9 	bl	8000b2c <__cmpsf2>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	bf48      	it	mi
 8000b9e:	f110 0f00 	cmnmi.w	r0, #0
 8000ba2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ba4 <__aeabi_fcmpeq>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff fff4 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bac:	bf0c      	ite	eq
 8000bae:	2001      	moveq	r0, #1
 8000bb0:	2000      	movne	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmplt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffea 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmple>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffe0 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bd4:	bf94      	ite	ls
 8000bd6:	2001      	movls	r0, #1
 8000bd8:	2000      	movhi	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmpge>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffd2 	bl	8000b8c <__aeabi_cfrcmple>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_fcmpgt>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffc8 	bl	8000b8c <__aeabi_cfrcmple>
 8000bfc:	bf34      	ite	cc
 8000bfe:	2001      	movcc	r0, #1
 8000c00:	2000      	movcs	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_fcmpun>:
 8000c08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	d102      	bne.n	8000c1c <__aeabi_fcmpun+0x14>
 8000c16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1a:	d108      	bne.n	8000c2e <__aeabi_fcmpun+0x26>
 8000c1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c20:	d102      	bne.n	8000c28 <__aeabi_fcmpun+0x20>
 8000c22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c26:	d102      	bne.n	8000c2e <__aeabi_fcmpun+0x26>
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	f04f 0001 	mov.w	r0, #1
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_d2lz>:
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	4605      	mov	r5, r0
 8000c38:	460c      	mov	r4, r1
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4628      	mov	r0, r5
 8000c40:	4621      	mov	r1, r4
 8000c42:	f7ff febd 	bl	80009c0 <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x20>
 8000c48:	4628      	mov	r0, r5
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4628      	mov	r0, r5
 8000c56:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fc33 	bl	80004dc <__aeabi_dmul>
 8000c76:	f7ff fee1 	bl	8000a3c <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fbb4 	bl	80003e8 <__aeabi_ui2d>
 8000c80:	2200      	movs	r2, #0
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c84:	f7ff fc2a 	bl	80004dc <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fa6c 	bl	800016c <__aeabi_dsub>
 8000c94:	f7ff fed2 	bl	8000a3c <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <apInit>:

#include "ap.h"


void apInit(void)
{
 8000ca4:	b508      	push	{r3, lr}
//  uartOpen(_DEF_UART1, 57600); // USB_CDC
  uartOpen(_DEF_UART2, 57600);  // UART
 8000ca6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000caa:	2001      	movs	r0, #1
 8000cac:	f001 f8a2 	bl	8001df4 <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 8000cb0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 fab5 	bl	8001224 <cliOpen>
//  cliOpenLog(_DEF_UART2, 57600);

// motorOpen(_DEF_MOTOR1, 57600);
  HAL_TIM_Base_Start(&htim1);
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <apInit+0x28>)
 8000cbc:	f003 f822 	bl	8003d04 <HAL_TIM_Base_Start>

  //  spiBegin(_DEF_SPI1);
  spiBegin(_DEF_SPI2);
}
 8000cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  spiBegin(_DEF_SPI2);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 bfc5 	b.w	8001c54 <spiBegin>
 8000cca:	bf00      	nop
 8000ccc:	200003b4 	.word	0x200003b4

08000cd0 <apMain>:



void apMain(void)
{
 8000cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    {
      if (millis()-pre_time >=500)
        {
          pre_time=millis();
          //setVoltageDAC_Polling(voltage);   //setVoltageDAC_DMA(voltage);
          voltage+=0.2;
 8000cd4:	a712      	add	r7, pc, #72	; (adr r7, 8000d20 <apMain+0x50>)
 8000cd6:	e9d7 6700 	ldrd	r6, r7, [r7]
  pre_time=millis();
 8000cda:	f000 f827 	bl	8000d2c <millis>
  float voltage=0;
 8000cde:	2500      	movs	r5, #0
  pre_time=millis();
 8000ce0:	4604      	mov	r4, r0
          if (voltage > 4)
 8000ce2:	f04f 4881 	mov.w	r8, #1082130432	; 0x40800000
            {
              voltage= 0;
 8000ce6:	46a9      	mov	r9, r5
      if (millis()-pre_time >=500)
 8000ce8:	f000 f820 	bl	8000d2c <millis>
 8000cec:	1b00      	subs	r0, r0, r4
 8000cee:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cf2:	d311      	bcc.n	8000d18 <apMain+0x48>
          pre_time=millis();
 8000cf4:	f000 f81a 	bl	8000d2c <millis>
 8000cf8:	4604      	mov	r4, r0
          voltage+=0.2;
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	f7ff fb96 	bl	800042c <__aeabi_f2d>
 8000d00:	4632      	mov	r2, r6
 8000d02:	463b      	mov	r3, r7
 8000d04:	f7ff fa34 	bl	8000170 <__adddf3>
 8000d08:	f7ff feb8 	bl	8000a7c <__aeabi_d2f>
          if (voltage > 4)
 8000d0c:	4641      	mov	r1, r8
          voltage+=0.2;
 8000d0e:	4605      	mov	r5, r0
          if (voltage > 4)
 8000d10:	f7ff ff70 	bl	8000bf4 <__aeabi_fcmpgt>
 8000d14:	b100      	cbz	r0, 8000d18 <apMain+0x48>
              voltage= 0;
 8000d16:	464d      	mov	r5, r9
            }
        }


//      motorGUIRun();
      cliMain();
 8000d18:	f000 fb9a 	bl	8001450 <cliMain>
      if (millis()-pre_time >=500)
 8000d1c:	e7e4      	b.n	8000ce8 <apMain+0x18>
 8000d1e:	bf00      	nop
 8000d20:	9999999a 	.word	0x9999999a
 8000d24:	3fc99999 	.word	0x3fc99999

08000d28 <delay>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
  HAL_Delay(ms);
 8000d28:	f001 ba14 	b.w	8002154 <HAL_Delay>

08000d2c <millis>:



uint32_t millis(void)
{
 return HAL_GetTick();
 8000d2c:	f001 ba0c 	b.w	8002148 <HAL_GetTick>

08000d30 <__io_putchar>:
}

int __io_putchar(int ch)
{
 8000d30:	b507      	push	{r0, r1, r2, lr}
  //USB로 printf 캐릭터 전송
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000d32:	2201      	movs	r2, #1
{
 8000d34:	9001      	str	r0, [sp, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000d36:	a901      	add	r1, sp, #4
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f001 f8e3 	bl	8001f04 <uartWrite>
  return 1;
}
 8000d3e:	2001      	movs	r0, #1
 8000d40:	b003      	add	sp, #12
 8000d42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000d48 <tim1Init>:


/* TIM1 init function */
void tim1Init(void)
{
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	2100      	movs	r1, #0
 8000d50:	a802      	add	r0, sp, #8
 8000d52:	f006 f9fb 	bl	800714c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72-1;
 8000d56:	2247      	movs	r2, #71	; 0x47
  htim1.Instance = TIM1;
 8000d58:	4c14      	ldr	r4, [pc, #80]	; (8000dac <tim1Init+0x64>)
  htim1.Init.Prescaler = 72-1;
 8000d5a:	4915      	ldr	r1, [pc, #84]	; (8000db0 <tim1Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 72-1;
 8000d5e:	e9c4 1200 	strd	r1, r2, [r4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 8000d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d66:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	e9c4 2303 	strd	r2, r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	e9c4 3305 	strd	r3, r3, [r4, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d76:	f003 f823 	bl	8003dc0 <HAL_TIM_Base_Init>
 8000d7a:	b108      	cbz	r0, 8000d80 <tim1Init+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <tim1Init+0x36>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d84:	4620      	mov	r0, r4
 8000d86:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f003 f84f 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 8000d8e:	b108      	cbz	r0, 8000d94 <tim1Init+0x4c>
 8000d90:	b672      	cpsid	i
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <tim1Init+0x4a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	e9cd 0000 	strd	r0, r0, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d98:	4669      	mov	r1, sp
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f003 f8e0 	bl	8003f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	b108      	cbz	r0, 8000da6 <tim1Init+0x5e>
 8000da2:	b672      	cpsid	i
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <tim1Init+0x5c>
}
 8000da6:	b006      	add	sp, #24
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	bf00      	nop
 8000dac:	200003b4 	.word	0x200003b4
 8000db0:	40012c00 	.word	0x40012c00

08000db4 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 8000db4:	6802      	ldr	r2, [r0, #0]
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_TIM_Base_MspInit+0x24>)
{
 8000db8:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d10a      	bne.n	8000dd4 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dbe:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000dc2:	699a      	ldr	r2, [r3, #24]
 8000dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dc8:	619a      	str	r2, [r3, #24]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	9b01      	ldr	r3, [sp, #4]
}
 8000dd4:	b002      	add	sp, #8
 8000dd6:	4770      	bx	lr
 8000dd8:	40012c00 	.word	0x40012c00

08000ddc <SystemClock_Config>:
{
 8000ddc:	b510      	push	{r4, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de0:	2214      	movs	r2, #20
 8000de2:	2100      	movs	r1, #0
 8000de4:	a80c      	add	r0, sp, #48	; 0x30
 8000de6:	f006 f9b1 	bl	800714c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dea:	2214      	movs	r2, #20
 8000dec:	2100      	movs	r1, #0
 8000dee:	eb0d 0002 	add.w	r0, sp, r2
 8000df2:	f006 f9ab 	bl	800714c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df6:	2210      	movs	r2, #16
 8000df8:	2100      	movs	r1, #0
 8000dfa:	a801      	add	r0, sp, #4
 8000dfc:	f006 f9a6 	bl	800714c <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e06:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e08:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0a:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e1c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f002 fba5 	bl	800356c <HAL_RCC_OscConfig>
 8000e22:	b108      	cbz	r0, 8000e28 <SystemClock_Config+0x4c>
 8000e24:	b672      	cpsid	i
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e38:	4621      	mov	r1, r4
 8000e3a:	a805      	add	r0, sp, #20
 8000e3c:	f002 fd58 	bl	80038f0 <HAL_RCC_ClockConfig>
 8000e40:	b108      	cbz	r0, 8000e46 <SystemClock_Config+0x6a>
 8000e42:	b672      	cpsid	i
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e46:	2211      	movs	r2, #17
 8000e48:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e4c:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4e:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e50:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f002 fe08 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	b108      	cbz	r0, 8000e5e <SystemClock_Config+0x82>
 8000e5a:	b672      	cpsid	i
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <SystemClock_Config+0x80>
}
 8000e5e:	b014      	add	sp, #80	; 0x50
 8000e60:	bd10      	pop	{r4, pc}
	...

08000e64 <bspInit>:
{
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	b086      	sub	sp, #24
  HAL_Init();
 8000e68:	f001 f950 	bl	800210c <HAL_Init>
  SystemClock_Config();
 8000e6c:	f7ff ffb6 	bl	8000ddc <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <bspInit+0x5c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e72:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	699a      	ldr	r2, [r3, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	619a      	str	r2, [r3, #24]
 8000e80:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	4c10      	ldr	r4, [pc, #64]	; (8000ec4 <bspInit+0x60>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	f002 0220 	and.w	r2, r2, #32
 8000e88:	9200      	str	r2, [sp, #0]
 8000e8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	f042 0204 	orr.w	r2, r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
 8000e96:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	a902      	add	r1, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ea2:	2311      	movs	r3, #17
 8000ea4:	e9cd 5302 	strd	r5, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f001 fb6f 	bl	8002590 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eb2:	4632      	mov	r2, r6
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f001 fcb8 	bl	800282c <HAL_GPIO_WritePin>
}
 8000ebc:	b006      	add	sp, #24
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <Error_Handler>:
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <Error_Handler+0x2>

08000ecc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_MspInit+0x3c>)
{
 8000ece:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	f042 0201 	orr.w	r2, r2, #1
 8000ed6:	619a      	str	r2, [r3, #24]
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	f002 0201 	and.w	r2, r2, #1
 8000ede:	9200      	str	r2, [sp, #0]
 8000ee0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ee8:	61da      	str	r2, [r3, #28]
 8000eea:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ef6:	6853      	ldr	r3, [r2, #4]
 8000ef8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	b002      	add	sp, #8
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000

08000f10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler>

08000f12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler>

08000f14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler>

08000f16 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler>

08000f18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler>

08000f1a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f001 b906 	b.w	8002130 <HAL_IncTick>

08000f24 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f24:	4801      	ldr	r0, [pc, #4]	; (8000f2c <DMA1_Channel1_IRQHandler+0x8>)
 8000f26:	f001 ba9f 	b.w	8002468 <HAL_DMA_IRQHandler>
 8000f2a:	bf00      	nop
 8000f2c:	20000400 	.word	0x20000400

08000f30 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f30:	4801      	ldr	r0, [pc, #4]	; (8000f38 <DMA1_Channel3_IRQHandler+0x8>)
 8000f32:	f001 ba99 	b.w	8002468 <HAL_DMA_IRQHandler>
 8000f36:	bf00      	nop
 8000f38:	200007e8 	.word	0x200007e8

08000f3c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f3c:	4801      	ldr	r0, [pc, #4]	; (8000f44 <DMA1_Channel5_IRQHandler+0x8>)
 8000f3e:	f001 ba93 	b.w	8002468 <HAL_DMA_IRQHandler>
 8000f42:	bf00      	nop
 8000f44:	200008a4 	.word	0x200008a4

08000f48 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f48:	4801      	ldr	r0, [pc, #4]	; (8000f50 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000f4a:	f001 bd23 	b.w	8002994 <HAL_PCD_IRQHandler>
 8000f4e:	bf00      	nop
 8000f50:	2000152c 	.word	0x2000152c

08000f54 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f54:	4801      	ldr	r0, [pc, #4]	; (8000f5c <SPI1_IRQHandler+0x8>)
 8000f56:	f002 be5b 	b.w	8003c10 <HAL_SPI_IRQHandler>
 8000f5a:	bf00      	nop
 8000f5c:	2000082c 	.word	0x2000082c

08000f60 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f60:	4801      	ldr	r0, [pc, #4]	; (8000f68 <USART1_IRQHandler+0x8>)
 8000f62:	f003 ba4b 	b.w	80043fc <HAL_UART_IRQHandler>
 8000f66:	bf00      	nop
 8000f68:	200008e8 	.word	0x200008e8

08000f6c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	4770      	bx	lr

08000f70 <_kill>:

int _kill(int pid, int sig)
{
 8000f70:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f72:	f006 f977 	bl	8007264 <__errno>
 8000f76:	2316      	movs	r3, #22
 8000f78:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7e:	bd08      	pop	{r3, pc}

08000f80 <_exit>:

void _exit (int status)
{
 8000f80:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000f82:	f006 f96f 	bl	8007264 <__errno>
 8000f86:	2316      	movs	r3, #22
 8000f88:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000f8a:	e7fe      	b.n	8000f8a <_exit+0xa>

08000f8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	460d      	mov	r5, r1
 8000f90:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	460e      	mov	r6, r1
 8000f94:	1b73      	subs	r3, r6, r5
 8000f96:	429c      	cmp	r4, r3
 8000f98:	dc01      	bgt.n	8000f9e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000f9e:	f3af 8000 	nop.w
 8000fa2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	e7f5      	b.n	8000f94 <_read+0x8>

08000fa8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	460d      	mov	r5, r1
 8000fac:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	460e      	mov	r6, r1
 8000fb0:	1b73      	subs	r3, r6, r5
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	dc01      	bgt.n	8000fba <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000fba:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000fbe:	f7ff feb7 	bl	8000d30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	e7f5      	b.n	8000fb0 <_write+0x8>

08000fc4 <_close>:

int _close(int file)
{
	return -1;
}
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	4770      	bx	lr

08000fca <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000fce:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000fd0:	604b      	str	r3, [r1, #4]
}
 8000fd2:	4770      	bx	lr

08000fd4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	4770      	bx	lr

08000fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000fd8:	2000      	movs	r0, #0
 8000fda:	4770      	bx	lr

08000fdc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <_sbrk+0x30>)
{
 8000fde:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000fe0:	6811      	ldr	r1, [r2, #0]
{
 8000fe2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000fe4:	b909      	cbnz	r1, 8000fea <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000fe6:	490a      	ldr	r1, [pc, #40]	; (8001010 <_sbrk+0x34>)
 8000fe8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	6810      	ldr	r0, [r2, #0]
 8000fec:	4909      	ldr	r1, [pc, #36]	; (8001014 <_sbrk+0x38>)
 8000fee:	4c0a      	ldr	r4, [pc, #40]	; (8001018 <_sbrk+0x3c>)
 8000ff0:	4403      	add	r3, r0
 8000ff2:	1b09      	subs	r1, r1, r4
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	d906      	bls.n	8001006 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000ff8:	f006 f934 	bl	8007264 <__errno>
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001000:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001004:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001006:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001008:	e7fc      	b.n	8001004 <_sbrk+0x28>
 800100a:	bf00      	nop
 800100c:	200003fc 	.word	0x200003fc
 8001010:	20001b88 	.word	0x20001b88
 8001014:	20005000 	.word	0x20005000
 8001018:	00000400 	.word	0x00000400

0800101c <SystemInit>:
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800101c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <SystemInit+0xc>)
 8001022:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	; (8001070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001052:	f7ff ffe3 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f006 f90b 	bl	8007270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105a:	f005 f83d 	bl	80060d8 <main>
  bx lr
 800105e:	4770      	bx	lr
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 8001068:	080098f4 	.word	0x080098f4
  ldr r2, =_sbss
 800106c:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 8001070:	20001b88 	.word	0x20001b88

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>

08001076 <qbufferCreate>:


  bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
  {
    bool ret= true;
    p_node->head=0;
 8001076:	2300      	movs	r3, #0
    p_node->tail=0;
    p_node->len=length;
    p_node->p_buf=p_buf;
 8001078:	e9c0 2102 	strd	r2, r1, [r0, #8]
    p_node->tail=0;
 800107c:	e9c0 3300 	strd	r3, r3, [r0]
    return ret;
  }
 8001080:	2001      	movs	r0, #1
 8001082:	4770      	bx	lr

08001084 <qbufferRead>:
    return ret;
  }


  bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
  {
 8001084:	b530      	push	{r4, r5, lr}
 8001086:	440a      	add	r2, r1
    bool ret= true;

    for (int i=0; i<length ; i++)
 8001088:	4291      	cmp	r1, r2
 800108a:	d101      	bne.n	8001090 <qbufferRead+0xc>
    bool ret= true;
 800108c:	2001      	movs	r0, #1
            ret=false;
            break;
          }
      }
    return ret;
  }
 800108e:	bd30      	pop	{r4, r5, pc}
        if (p_node->p_buf != NULL)
 8001090:	68c3      	ldr	r3, [r0, #12]
 8001092:	b113      	cbz	r3, 800109a <qbufferRead+0x16>
            p_data[i]=p_node->p_buf[p_node->tail];
 8001094:	6844      	ldr	r4, [r0, #4]
 8001096:	5d1b      	ldrb	r3, [r3, r4]
 8001098:	700b      	strb	r3, [r1, #0]
        if (p_node->tail != p_node->head)
 800109a:	6843      	ldr	r3, [r0, #4]
 800109c:	6804      	ldr	r4, [r0, #0]
 800109e:	3101      	adds	r1, #1
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d007      	beq.n	80010b4 <qbufferRead+0x30>
            p_node->tail = (p_node->tail+1) % p_node->len;
 80010a4:	6884      	ldr	r4, [r0, #8]
 80010a6:	3301      	adds	r3, #1
 80010a8:	fbb3 f5f4 	udiv	r5, r3, r4
 80010ac:	fb04 3315 	mls	r3, r4, r5, r3
 80010b0:	6043      	str	r3, [r0, #4]
    for (int i=0; i<length ; i++)
 80010b2:	e7e9      	b.n	8001088 <qbufferRead+0x4>
            ret=false;
 80010b4:	2000      	movs	r0, #0
 80010b6:	e7ea      	b.n	800108e <qbufferRead+0xa>

080010b8 <qbufferAvailable>:


  uint32_t qbufferAvailable(qbuffer_t *p_node)
  {
    uint32_t ret;
    ret= (p_node->head - p_node->tail) % p_node->len;
 80010b8:	e9d0 3200 	ldrd	r3, r2, [r0]
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	6882      	ldr	r2, [r0, #8]
 80010c0:	fbb3 f0f2 	udiv	r0, r3, r2
    return ret;
  }
 80010c4:	fb02 3010 	mls	r0, r2, r0, r3
 80010c8:	4770      	bx	lr

080010ca <cliToUpper>:

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
}

void cliToUpper(char *str)
{
 80010ca:	b510      	push	{r4, lr}
 80010cc:	1e42      	subs	r2, r0, #1
 80010ce:	f100 010f 	add.w	r1, r0, #15
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
  {
    str_ch = str[i];
 80010d2:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 80010d6:	b153      	cbz	r3, 80010ee <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80010d8:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 80010dc:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 80010de:	bf9c      	itt	ls
 80010e0:	3b20      	subls	r3, #32
 80010e2:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80010e4:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 80010e6:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80010e8:	d1f3      	bne.n	80010d2 <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73c3      	strb	r3, [r0, #15]
  }
}
 80010ee:	bd10      	pop	{r4, pc}

080010f0 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <cliArgsGetStr+0x18>)
 80010f2:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 80010f6:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 80010f8:	bf86      	itte	hi
 80010fa:	f8d3 3390 	ldrhi.w	r3, [r3, #912]	; 0x390
 80010fe:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 8001102:	2000      	movls	r0, #0

  return ret;
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000444 	.word	0x20000444

0800110c <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800110c:	b508      	push	{r3, lr}
 800110e:	4603      	mov	r3, r0
  bool ret = false;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <cliArgsIsStr+0x28>)
{
 8001112:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 8001114:	f8b2 138c 	ldrh.w	r1, [r2, #908]	; 0x38c
 8001118:	4299      	cmp	r1, r3
 800111a:	d909      	bls.n	8001130 <cliArgsIsStr+0x24>
  {
    return 0;
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800111c:	f8d2 2390 	ldr.w	r2, [r2, #912]	; 0x390
 8001120:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001124:	f7ff f814 	bl	8000150 <strcmp>
 8001128:	fab0 f080 	clz	r0, r0
 800112c:	0940      	lsrs	r0, r0, #5
  {
    ret = true;
  }

  return ret;
}
 800112e:	bd08      	pop	{r3, pc}
    return 0;
 8001130:	2000      	movs	r0, #0
 8001132:	e7fc      	b.n	800112e <cliArgsIsStr+0x22>
 8001134:	20000444 	.word	0x20000444

08001138 <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <cliArgsGetFloat+0x1c>)
 800113a:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 800113e:	4282      	cmp	r2, r0
 8001140:	d906      	bls.n	8001150 <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001142:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8001146:	2100      	movs	r1, #0
 8001148:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800114c:	f005 bde4 	b.w	8006d18 <strtof>
}
 8001150:	2000      	movs	r0, #0
 8001152:	4770      	bx	lr
 8001154:	20000444 	.word	0x20000444

08001158 <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <cliArgsGetData+0x20>)
 800115a:	f8b3 238c 	ldrh.w	r2, [r3, #908]	; 0x38c
 800115e:	4282      	cmp	r2, r0
 8001160:	d907      	bls.n	8001172 <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001162:	2200      	movs	r2, #0
 8001164:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8001168:	4611      	mov	r1, r2
 800116a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800116e:	f005 be9d 	b.w	8006eac <strtoul>
}
 8001172:	2000      	movs	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000444 	.word	0x20000444

0800117c <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 800117c:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->hist_line_count == 0)
 800117e:	4c25      	ldr	r4, [pc, #148]	; (8001214 <cliLineChange.constprop.0+0x98>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8001180:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 8001182:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 8001186:	2b00      	cmp	r3, #0
 8001188:	d03f      	beq.n	800120a <cliLineChange.constprop.0+0x8e>
  if (p_cli->line.cursor > 0)
 800118a:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 800118e:	b11a      	cbz	r2, 8001198 <cliLineChange.constprop.0+0x1c>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001190:	4921      	ldr	r1, [pc, #132]	; (8001218 <cliLineChange.constprop.0+0x9c>)
 8001192:	7820      	ldrb	r0, [r4, #0]
 8001194:	f000 fed4 	bl	8001f40 <uartPrintf>
  if (p_cli->line.count > 0)
 8001198:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 800119c:	b11a      	cbz	r2, 80011a6 <cliLineChange.constprop.0+0x2a>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800119e:	491f      	ldr	r1, [pc, #124]	; (800121c <cliLineChange.constprop.0+0xa0>)
 80011a0:	7820      	ldrb	r0, [r4, #0]
 80011a2:	f000 fecd 	bl	8001f40 <uartPrintf>
  if (key_up == true)
 80011a6:	2d01      	cmp	r5, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80011a8:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
  if (key_up == true)
 80011ac:	d12e      	bne.n	800120c <cliLineChange.constprop.0+0x90>
    if (p_cli->hist_line_new == true)
 80011ae:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 80011b2:	b11b      	cbz	r3, 80011bc <cliLineChange.constprop.0+0x40>
      p_cli->hist_line_i = p_cli->hist_line_last;
 80011b4:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
 80011b8:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80011bc:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 80011c0:	4413      	add	r3, r2
 80011c2:	3b01      	subs	r3, #1
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80011c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80011c8:	fb02 3311 	mls	r3, r2, r1, r3
 80011cc:	b25a      	sxtb	r2, r3
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80011ce:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
  p_cli->line = p_cli->line_buf[change_i];
 80011d2:	2223      	movs	r2, #35	; 0x23
    change_i = p_cli->hist_line_i;
 80011d4:	b2db      	uxtb	r3, r3
  p_cli->line = p_cli->line_buf[change_i];
 80011d6:	fb02 4303 	mla	r3, r2, r3, r4
 80011da:	4d11      	ldr	r5, [pc, #68]	; (8001220 <cliLineChange.constprop.0+0xa4>)
 80011dc:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80011e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011e4:	462e      	mov	r6, r5
 80011e6:	6810      	ldr	r0, [r2, #0]
 80011e8:	6851      	ldr	r1, [r2, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	c603      	stmia	r6!, {r0, r1}
 80011ee:	429a      	cmp	r2, r3
 80011f0:	4635      	mov	r5, r6
 80011f2:	d1f7      	bne.n	80011e4 <cliLineChange.constprop.0+0x68>
 80011f4:	7893      	ldrb	r3, [r2, #2]
 80011f6:	8811      	ldrh	r1, [r2, #0]
 80011f8:	70b3      	strb	r3, [r6, #2]
 80011fa:	8031      	strh	r1, [r6, #0]
  p_cli->line.cursor = p_cli->line.count;
 80011fc:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8001200:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
  p_cli->hist_line_new = false;
 8001204:	2300      	movs	r3, #0
 8001206:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
}
 800120a:	bd70      	pop	{r4, r5, r6, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800120c:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 8001210:	3301      	adds	r3, #1
 8001212:	e7d7      	b.n	80011c4 <cliLineChange.constprop.0+0x48>
 8001214:	20000444 	.word	0x20000444
 8001218:	08009300 	.word	0x08009300
 800121c:	08009306 	.word	0x08009306
 8001220:	20000668 	.word	0x20000668

08001224 <cliOpen>:
{
 8001224:	b510      	push	{r4, lr}
  cli_node.ch = ch;
 8001226:	4c03      	ldr	r4, [pc, #12]	; (8001234 <cliOpen+0x10>)
 8001228:	7020      	strb	r0, [r4, #0]
  cli_node.baud = baud;
 800122a:	6061      	str	r1, [r4, #4]
  cli_node.is_open = uartOpen(ch, baud);
 800122c:	f000 fde2 	bl	8001df4 <uartOpen>
 8001230:	7220      	strb	r0, [r4, #8]
}
 8001232:	bd10      	pop	{r4, pc}
 8001234:	20000444 	.word	0x20000444

08001238 <cliShowLog>:
{
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_node.is_log == true)
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <cliShowLog+0x90>)
{
 800123c:	4604      	mov	r4, r0
  if (cli_node.is_log == true)
 800123e:	7a5b      	ldrb	r3, [r3, #9]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d03f      	beq.n	80012c4 <cliShowLog+0x8c>
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001244:	f890 2245 	ldrb.w	r2, [r0, #581]	; 0x245
 8001248:	4920      	ldr	r1, [pc, #128]	; (80012cc <cliShowLog+0x94>)
 800124a:	7a80      	ldrb	r0, [r0, #10]
 800124c:	f000 fe78 	bl	8001f40 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001250:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 8001254:	491e      	ldr	r1, [pc, #120]	; (80012d0 <cliShowLog+0x98>)
 8001256:	7aa0      	ldrb	r0, [r4, #10]
 8001258:	f000 fe72 	bl	8001f40 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800125c:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 8001260:	491c      	ldr	r1, [pc, #112]	; (80012d4 <cliShowLog+0x9c>)
 8001262:	7aa0      	ldrb	r0, [r4, #10]
 8001264:	f000 fe6c 	bl	8001f40 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001268:	491b      	ldr	r1, [pc, #108]	; (80012d8 <cliShowLog+0xa0>)
 800126a:	f504 7209 	add.w	r2, r4, #548	; 0x224
 800126e:	7aa0      	ldrb	r0, [r4, #10]
 8001270:	f000 fe66 	bl	8001f40 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001274:	f994 2195 	ldrsb.w	r2, [r4, #405]	; 0x195
 8001278:	4918      	ldr	r1, [pc, #96]	; (80012dc <cliShowLog+0xa4>)
 800127a:	7aa0      	ldrb	r0, [r4, #10]
 800127c:	f000 fe60 	bl	8001f40 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001280:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8001284:	4916      	ldr	r1, [pc, #88]	; (80012e0 <cliShowLog+0xa8>)
 8001286:	7aa0      	ldrb	r0, [r4, #10]
 8001288:	f000 fe5a 	bl	8001f40 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800128c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
 8001290:	4914      	ldr	r1, [pc, #80]	; (80012e4 <cliShowLog+0xac>)
 8001292:	7aa0      	ldrb	r0, [r4, #10]
 8001294:	f000 fe54 	bl	8001f40 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001298:	2500      	movs	r5, #0
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800129a:	4f13      	ldr	r7, [pc, #76]	; (80012e8 <cliShowLog+0xb0>)
 800129c:	f504 76cc 	add.w	r6, r4, #408	; 0x198
    for (int i=0; i<p_cli->hist_line_count; i++)
 80012a0:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80012a4:	7aa0      	ldrb	r0, [r4, #10]
    for (int i=0; i<p_cli->hist_line_count; i++)
 80012a6:	429d      	cmp	r5, r3
 80012a8:	db04      	blt.n	80012b4 <cliShowLog+0x7c>
}
 80012aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uartPrintf(p_cli->log_ch, "\n");
 80012ae:	490f      	ldr	r1, [pc, #60]	; (80012ec <cliShowLog+0xb4>)
 80012b0:	f000 be46 	b.w	8001f40 <uartPrintf>
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80012b4:	4633      	mov	r3, r6
 80012b6:	462a      	mov	r2, r5
 80012b8:	4639      	mov	r1, r7
 80012ba:	f000 fe41 	bl	8001f40 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80012be:	3501      	adds	r5, #1
 80012c0:	3623      	adds	r6, #35	; 0x23
 80012c2:	e7ed      	b.n	80012a0 <cliShowLog+0x68>
}
 80012c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000444 	.word	0x20000444
 80012cc:	0800930c 	.word	0x0800930c
 80012d0:	0800931a 	.word	0x0800931a
 80012d4:	08009328 	.word	0x08009328
 80012d8:	08009336 	.word	0x08009336
 80012dc:	08009344 	.word	0x08009344
 80012e0:	08009352 	.word	0x08009352
 80012e4:	08009360 	.word	0x08009360
 80012e8:	0800936e 	.word	0x0800936e
 80012ec:	0800939b 	.word	0x0800939b

080012f0 <cliPrintf>:
{
 80012f0:	b40f      	push	{r0, r1, r2, r3}
 80012f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80012f4:	4c0a      	ldr	r4, [pc, #40]	; (8001320 <cliPrintf+0x30>)
{
 80012f6:	ab06      	add	r3, sp, #24
 80012f8:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80012fc:	f104 0511 	add.w	r5, r4, #17
 8001300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001304:	4628      	mov	r0, r5
  va_start (arg, fmt);
 8001306:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001308:	f005 fef8 	bl	80070fc <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800130c:	4629      	mov	r1, r5
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800130e:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001310:	7820      	ldrb	r0, [r4, #0]
 8001312:	f000 fdf7 	bl	8001f04 <uartWrite>
}
 8001316:	b003      	add	sp, #12
 8001318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr
 8001320:	20000444 	.word	0x20000444

08001324 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8001324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cli_t *p_cli = &cli_node;


  cliPrintf("\r\n");
 8001326:	480e      	ldr	r0, [pc, #56]	; (8001360 <cliShowList+0x3c>)
 8001328:	f7ff ffe2 	bl	80012f0 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <cliShowList+0x40>)
 800132e:	f7ff ffdf 	bl	80012f0 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8001332:	2500      	movs	r5, #0
 8001334:	4c0c      	ldr	r4, [pc, #48]	; (8001368 <cliShowList+0x44>)
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
    cliPrintf("\r\n");
 8001336:	4f0a      	ldr	r7, [pc, #40]	; (8001360 <cliShowList+0x3c>)
  for (int i=0; i<p_cli->cmd_count; i++)
 8001338:	f5a4 7613 	sub.w	r6, r4, #588	; 0x24c
 800133c:	f8b6 3248 	ldrh.w	r3, [r6, #584]	; 0x248
 8001340:	42ab      	cmp	r3, r5
 8001342:	dc04      	bgt.n	800134e <cliShowList+0x2a>
  }

  cliPrintf("-----------------------------\r\n");
}
 8001344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cliPrintf("-----------------------------\r\n");
 8001348:	4808      	ldr	r0, [pc, #32]	; (800136c <cliShowList+0x48>)
 800134a:	f7ff bfd1 	b.w	80012f0 <cliPrintf>
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800134e:	4620      	mov	r0, r4
 8001350:	f7ff ffce 	bl	80012f0 <cliPrintf>
    cliPrintf("\r\n");
 8001354:	4638      	mov	r0, r7
 8001356:	f7ff ffcb 	bl	80012f0 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800135a:	3501      	adds	r5, #1
 800135c:	3414      	adds	r4, #20
 800135e:	e7ed      	b.n	800133c <cliShowList+0x18>
 8001360:	0800939a 	.word	0x0800939a
 8001364:	0800937d 	.word	0x0800937d
 8001368:	20000690 	.word	0x20000690
 800136c:	0800939d 	.word	0x0800939d

08001370 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8001370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8001374:	8803      	ldrh	r3, [r0, #0]
  char **argv = args->argv;
 8001376:	6844      	ldr	r4, [r0, #4]
{
 8001378:	b085      	sub	sp, #20


  if(args->argc < 1)
 800137a:	b92b      	cbnz	r3, 8001388 <cliMemoryDump+0x18>
  {
    cliPrintf(">> md addr [size] \n");
 800137c:	482c      	ldr	r0, [pc, #176]	; (8001430 <cliMemoryDump+0xc0>)
      }
      cliPrintf("|\n   ");
    }
    addr++;
  }
}
 800137e:	b005      	add	sp, #20
 8001380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 8001384:	f7ff bfb4 	b.w	80012f0 <cliPrintf>
  if(argc > 1)
 8001388:	2b01      	cmp	r3, #1
 800138a:	d015      	beq.n	80013b8 <cliMemoryDump+0x48>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800138c:	2200      	movs	r2, #0
 800138e:	6860      	ldr	r0, [r4, #4]
 8001390:	4611      	mov	r1, r2
 8001392:	f005 fd8b 	bl	8006eac <strtoul>
 8001396:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001398:	2200      	movs	r2, #0
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	4611      	mov	r1, r2
 800139e:	f005 fd85 	bl	8006eac <strtoul>
 80013a2:	4604      	mov	r4, r0
  cliPrintf("\n   ");
 80013a4:	4823      	ldr	r0, [pc, #140]	; (8001434 <cliMemoryDump+0xc4>)
 80013a6:	f7ff ffa3 	bl	80012f0 <cliPrintf>
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80013aa:	4627      	mov	r7, r4
  for (idx = 0; idx<size; idx++)
 80013ac:	2500      	movs	r5, #0
 80013ae:	42b5      	cmp	r5, r6
 80013b0:	db04      	blt.n	80013bc <cliMemoryDump+0x4c>
}
 80013b2:	b005      	add	sp, #20
 80013b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 80013b8:	2610      	movs	r6, #16
 80013ba:	e7ed      	b.n	8001398 <cliMemoryDump+0x28>
    if((idx%4) == 0)
 80013bc:	f015 0803 	ands.w	r8, r5, #3
 80013c0:	d103      	bne.n	80013ca <cliMemoryDump+0x5a>
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80013c2:	4639      	mov	r1, r7
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <cliMemoryDump+0xc8>)
 80013c6:	f7ff ff93 	bl	80012f0 <cliPrintf>
    cliPrintf(" 0x%08X", *(addr));
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	481b      	ldr	r0, [pc, #108]	; (800143c <cliMemoryDump+0xcc>)
 80013ce:	f7ff ff8f 	bl	80012f0 <cliPrintf>
    if ((idx%4) == 3)
 80013d2:	f1b8 0f03 	cmp.w	r8, #3
 80013d6:	d124      	bne.n	8001422 <cliMemoryDump+0xb2>
      cliPrintf ("  |");
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <cliMemoryDump+0xd0>)
 80013da:	f7ff ff89 	bl	80012f0 <cliPrintf>
            cliPrintf(".");
 80013de:	f8df a064 	ldr.w	sl, [pc, #100]	; 8001444 <cliMemoryDump+0xd4>
 80013e2:	f104 0310 	add.w	r3, r4, #16
            cliPrintf("%c", asc[i]);
 80013e6:	f8df b060 	ldr.w	fp, [pc, #96]	; 8001448 <cliMemoryDump+0xd8>
 80013ea:	9301      	str	r3, [sp, #4]
        for (i=0;i<4;i++)
 80013ec:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	f10d 080c 	add.w	r8, sp, #12
 80013f6:	9303      	str	r3, [sp, #12]
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80013f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80013fc:	f1a1 0220 	sub.w	r2, r1, #32
 8001400:	2a5e      	cmp	r2, #94	; 0x5e
 8001402:	d811      	bhi.n	8001428 <cliMemoryDump+0xb8>
            cliPrintf("%c", asc[i]);
 8001404:	4658      	mov	r0, fp
 8001406:	f7ff ff73 	bl	80012f0 <cliPrintf>
        for (i=0;i<4;i++)
 800140a:	f109 0901 	add.w	r9, r9, #1
 800140e:	f1b9 0f04 	cmp.w	r9, #4
 8001412:	d1f1      	bne.n	80013f8 <cliMemoryDump+0x88>
      for (idx1= 0; idx1< 4; idx1++)
 8001414:	9b01      	ldr	r3, [sp, #4]
        ascptr+=1;
 8001416:	3404      	adds	r4, #4
      for (idx1= 0; idx1< 4; idx1++)
 8001418:	429c      	cmp	r4, r3
 800141a:	d1e7      	bne.n	80013ec <cliMemoryDump+0x7c>
      cliPrintf("|\n   ");
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <cliMemoryDump+0xdc>)
 800141e:	f7ff ff67 	bl	80012f0 <cliPrintf>
    addr++;
 8001422:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 8001424:	3501      	adds	r5, #1
 8001426:	e7c2      	b.n	80013ae <cliMemoryDump+0x3e>
            cliPrintf(".");
 8001428:	4650      	mov	r0, sl
 800142a:	f7ff ff61 	bl	80012f0 <cliPrintf>
 800142e:	e7ec      	b.n	800140a <cliMemoryDump+0x9a>
 8001430:	080093bd 	.word	0x080093bd
 8001434:	080093ed 	.word	0x080093ed
 8001438:	080093d1 	.word	0x080093d1
 800143c:	080093db 	.word	0x080093db
 8001440:	080093e3 	.word	0x080093e3
 8001444:	080093ea 	.word	0x080093ea
 8001448:	080093e7 	.word	0x080093e7
 800144c:	080093ec 	.word	0x080093ec

08001450 <cliMain>:
{
 8001450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 8001454:	4ca7      	ldr	r4, [pc, #668]	; (80016f4 <cliMain+0x2a4>)
{
 8001456:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 8001458:	7a27      	ldrb	r7, [r4, #8]
 800145a:	2f00      	cmp	r7, #0
 800145c:	f000 8143 	beq.w	80016e6 <cliMain+0x296>
  if (uartAvailable(cli_node.ch) > 0)
 8001460:	7820      	ldrb	r0, [r4, #0]
 8001462:	f000 fd1f 	bl	8001ea4 <uartAvailable>
 8001466:	2800      	cmp	r0, #0
 8001468:	f000 813d 	beq.w	80016e6 <cliMain+0x296>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800146c:	7820      	ldrb	r0, [r4, #0]
 800146e:	f000 fd2f 	bl	8001ed0 <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 8001472:	f894 8010 	ldrb.w	r8, [r4, #16]
 8001476:	f88d 0007 	strb.w	r0, [sp, #7]
 800147a:	f1b8 0f00 	cmp.w	r8, #0
 800147e:	f040 80ea 	bne.w	8001656 <cliMain+0x206>
    switch(rx_data)
 8001482:	281b      	cmp	r0, #27
 8001484:	f000 812a 	beq.w	80016dc <cliMain+0x28c>
 8001488:	d852      	bhi.n	8001530 <cliMain+0xe0>
 800148a:	2808      	cmp	r0, #8
 800148c:	f000 80fa 	beq.w	8001684 <cliMain+0x234>
 8001490:	280d      	cmp	r0, #13
 8001492:	d06a      	beq.n	800156a <cliMain+0x11a>
        if ((line->count + 1) < line->buf_len)
 8001494:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8001498:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
 800149c:	1c59      	adds	r1, r3, #1
 800149e:	4291      	cmp	r1, r2
 80014a0:	f280 811e 	bge.w	80016e0 <cliMain+0x290>
          if (line->cursor == line->count)
 80014a4:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d119      	bne.n	80014e0 <cliMain+0x90>
            uartWrite(p_cli->ch, &rx_data, 1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f10d 0107 	add.w	r1, sp, #7
 80014b2:	7820      	ldrb	r0, [r4, #0]
 80014b4:	f000 fd26 	bl	8001f04 <uartWrite>
            line->buf[line->cursor] = rx_data;
 80014b8:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80014bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80014c0:	18a3      	adds	r3, r4, r2
            line->cursor++;
 80014c2:	3201      	adds	r2, #1
 80014c4:	f884 2245 	strb.w	r2, [r4, #581]	; 0x245
            line->buf[line->count] = 0;
 80014c8:	2200      	movs	r2, #0
            line->buf[line->cursor] = rx_data;
 80014ca:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            line->count++;
 80014ce:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 80014da:	4423      	add	r3, r4
 80014dc:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 80014e0:	f894 6245 	ldrb.w	r6, [r4, #581]	; 0x245
 80014e4:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 80014e8:	42ae      	cmp	r6, r5
 80014ea:	f080 80b4 	bcs.w	8001656 <cliMain+0x206>
            mov_len = line->count - line->cursor;
 80014ee:	1baa      	subs	r2, r5, r6
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	f505 7109 	add.w	r1, r5, #548	; 0x224
 80014f6:	f205 2025 	addw	r0, r5, #549	; 0x225
 80014fa:	1a89      	subs	r1, r1, r2
 80014fc:	1a80      	subs	r0, r0, r2
 80014fe:	4421      	add	r1, r4
 8001500:	4420      	add	r0, r4
 8001502:	f005 fe09 	bl	8007118 <memmove>
            line->buf[line->count] = 0;
 8001506:	2100      	movs	r1, #0
            line->buf[line->cursor] = rx_data;
 8001508:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800150c:	19a3      	adds	r3, r4, r6
 800150e:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
            line->count++;
 8001512:	1c6b      	adds	r3, r5, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 800151a:	4423      	add	r3, r4
            line->cursor++;
 800151c:	3601      	adds	r6, #1
            line->buf[line->count] = 0;
 800151e:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001522:	7820      	ldrb	r0, [r4, #0]
 8001524:	4974      	ldr	r1, [pc, #464]	; (80016f8 <cliMain+0x2a8>)
            line->cursor++;
 8001526:	f884 6245 	strb.w	r6, [r4, #581]	; 0x245
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800152a:	f000 fd09 	bl	8001f40 <uartPrintf>
 800152e:	e092      	b.n	8001656 <cliMain+0x206>
    switch(rx_data)
 8001530:	287f      	cmp	r0, #127	; 0x7f
 8001532:	d1af      	bne.n	8001494 <cliMain+0x44>
        if (line->cursor < line->count)
 8001534:	f894 0245 	ldrb.w	r0, [r4, #581]	; 0x245
 8001538:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 800153c:	42a8      	cmp	r0, r5
 800153e:	f080 80cf 	bcs.w	80016e0 <cliMain+0x290>
          mov_len = line->count - line->cursor;
 8001542:	1a2a      	subs	r2, r5, r0
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001544:	f200 2125 	addw	r1, r0, #549	; 0x225
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f500 7009 	add.w	r0, r0, #548	; 0x224
          line->count--;
 800154e:	3d01      	subs	r5, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001550:	4421      	add	r1, r4
          line->count--;
 8001552:	b2ed      	uxtb	r5, r5
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001554:	3a01      	subs	r2, #1
 8001556:	4420      	add	r0, r4
 8001558:	f005 fdde 	bl	8007118 <memmove>
          line->count--;
 800155c:	f884 5246 	strb.w	r5, [r4, #582]	; 0x246
          line->buf[line->count] = 0; // 마지막 버퍼에 Null 문자 넣기
 8001560:	4425      	add	r5, r4
          uartPrintf(p_cli->ch, "\x1B[1P"); //teraterm에서 오른쪽 문자하나를 삭제해줌
 8001562:	4966      	ldr	r1, [pc, #408]	; (80016fc <cliMain+0x2ac>)
          line->buf[line->count] = 0; // 마지막 버퍼에 Null 문자 넣기
 8001564:	f885 8224 	strb.w	r8, [r5, #548]	; 0x224
          uartPrintf(p_cli->ch, "\x1B[1P"); //teraterm에서 오른쪽 문자하나를 삭제해줌
 8001568:	e072      	b.n	8001650 <cliMain+0x200>
        if (line->count > 0)
 800156a:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 800156e:	2b00      	cmp	r3, #0
 8001570:	d062      	beq.n	8001638 <cliMain+0x1e8>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001572:	2323      	movs	r3, #35	; 0x23
 8001574:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
 8001578:	f504 7509 	add.w	r5, r4, #548	; 0x224
 800157c:	fb03 4302 	mla	r3, r3, r2, r4
 8001580:	f504 7c11 	add.w	ip, r4, #580	; 0x244
 8001584:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001588:	462e      	mov	r6, r5
 800158a:	ce03      	ldmia	r6!, {r0, r1}
 800158c:	4566      	cmp	r6, ip
 800158e:	6018      	str	r0, [r3, #0]
 8001590:	6059      	str	r1, [r3, #4]
 8001592:	4635      	mov	r5, r6
 8001594:	f103 0308 	add.w	r3, r3, #8
 8001598:	d1f6      	bne.n	8001588 <cliMain+0x138>
 800159a:	8830      	ldrh	r0, [r6, #0]
 800159c:	78b1      	ldrb	r1, [r6, #2]
 800159e:	8018      	strh	r0, [r3, #0]
 80015a0:	7099      	strb	r1, [r3, #2]
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80015a2:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  p_cli->argc = 0;
 80015a6:	2600      	movs	r6, #0
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80015a8:	2b03      	cmp	r3, #3
    p_cli->hist_line_count++;
 80015aa:	bf9c      	itt	ls
 80015ac:	3301      	addls	r3, #1
 80015ae:	f884 3197 	strbls.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_new  = true;
 80015b2:	2301      	movs	r3, #1
  p_cli->hist_line_i    = p_cli->hist_line_last;
 80015b4:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80015b8:	3201      	adds	r2, #1
 80015ba:	f002 0203 	and.w	r2, r2, #3
 80015be:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80015c2:	494f      	ldr	r1, [pc, #316]	; (8001700 <cliMain+0x2b0>)
 80015c4:	484f      	ldr	r0, [pc, #316]	; (8001704 <cliMain+0x2b4>)
 80015c6:	aa02      	add	r2, sp, #8
  p_cli->hist_line_new  = true;
 80015c8:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
  p_cli->argc = 0;
 80015cc:	f8a4 6112 	strh.w	r6, [r4, #274]	; 0x112
  argv[argc] = NULL;
 80015d0:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80015d4:	f005 fdfc 	bl	80071d0 <strtok_r>
 80015d8:	4633      	mov	r3, r6
 80015da:	4605      	mov	r5, r0
 80015dc:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8001700 <cliMain+0x2b0>
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	1c5e      	adds	r6, r3, #1
 80015e4:	2d00      	cmp	r5, #0
 80015e6:	d13e      	bne.n	8001666 <cliMain+0x216>
  p_cli->argc = argc;
 80015e8:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
  if (argc > 0)
 80015ec:	b322      	cbz	r2, 8001638 <cliMain+0x1e8>
    cliPrintf("\r\n");
 80015ee:	4846      	ldr	r0, [pc, #280]	; (8001708 <cliMain+0x2b8>)
 80015f0:	f7ff fe7e 	bl	80012f0 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 80015f4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 80015f8:	f7ff fd67 	bl	80010ca <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 80015fc:	4e43      	ldr	r6, [pc, #268]	; (800170c <cliMain+0x2bc>)
 80015fe:	f8b4 8248 	ldrh.w	r8, [r4, #584]	; 0x248
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001602:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 8001606:	4545      	cmp	r5, r8
 8001608:	da16      	bge.n	8001638 <cliMain+0x1e8>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800160a:	4631      	mov	r1, r6
 800160c:	4648      	mov	r0, r9
 800160e:	f7fe fd9f 	bl	8000150 <strcmp>
 8001612:	3614      	adds	r6, #20
 8001614:	2800      	cmp	r0, #0
 8001616:	d133      	bne.n	8001680 <cliMain+0x230>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001618:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800161c:	483c      	ldr	r0, [pc, #240]	; (8001710 <cliMain+0x2c0>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800161e:	3b01      	subs	r3, #1
 8001620:	f8a4 338c 	strh.w	r3, [r4, #908]	; 0x38c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001624:	2314      	movs	r3, #20
 8001626:	fb03 4305 	mla	r3, r3, r5, r4
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800162a:	f8c4 0390 	str.w	r0, [r4, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800162e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8001632:	f500 701d 	add.w	r0, r0, #628	; 0x274
 8001636:	4798      	blx	r3
        line->count = 0;
 8001638:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 800163a:	4936      	ldr	r1, [pc, #216]	; (8001714 <cliMain+0x2c4>)
 800163c:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 800163e:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
        line->cursor = 0;
 8001642:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        line->buf[0] = 0;
 8001646:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
  uartPrintf(p_cli->ch, "\n\r");
 800164a:	f000 fc79 	bl	8001f40 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800164e:	4932      	ldr	r1, [pc, #200]	; (8001718 <cliMain+0x2c8>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001650:	7820      	ldrb	r0, [r4, #0]
 8001652:	f000 fc75 	bl	8001f40 <uartPrintf>
  switch(p_cli->state)
 8001656:	7c23      	ldrb	r3, [r4, #16]
 8001658:	3b01      	subs	r3, #1
 800165a:	2b03      	cmp	r3, #3
 800165c:	d840      	bhi.n	80016e0 <cliMain+0x290>
 800165e:	e8df f003 	tbb	[pc, r3]
 8001662:	463d      	.short	0x463d
 8001664:	d65f      	.short	0xd65f
    argv[argc++] = tok;
 8001666:	b29b      	uxth	r3, r3
 8001668:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800166c:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001670:	4641      	mov	r1, r8
 8001672:	2000      	movs	r0, #0
 8001674:	aa02      	add	r2, sp, #8
 8001676:	f005 fdab 	bl	80071d0 <strtok_r>
 800167a:	4633      	mov	r3, r6
 800167c:	4605      	mov	r5, r0
 800167e:	e7af      	b.n	80015e0 <cliMain+0x190>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001680:	3501      	adds	r5, #1
 8001682:	e7c0      	b.n	8001606 <cliMain+0x1b6>
        if (line->count > 0 && line->cursor > 0)
 8001684:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
        if (line->cursor < line->count)
 8001688:	f894 6245 	ldrb.w	r6, [r4, #581]	; 0x245
        if (line->count > 0 && line->cursor > 0)
 800168c:	b92b      	cbnz	r3, 800169a <cliMain+0x24a>
        if (line->cursor > 0)
 800168e:	b33e      	cbz	r6, 80016e0 <cliMain+0x290>
          line->cursor--;
 8001690:	1e73      	subs	r3, r6, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001692:	4922      	ldr	r1, [pc, #136]	; (800171c <cliMain+0x2cc>)
          line->cursor--;
 8001694:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001698:	e7da      	b.n	8001650 <cliMain+0x200>
        if (line->count > 0 && line->cursor > 0)
 800169a:	b30e      	cbz	r6, 80016e0 <cliMain+0x290>
          if (line->cursor == line->count)
 800169c:	42b3      	cmp	r3, r6
 800169e:	d106      	bne.n	80016ae <cliMain+0x25e>
            line->count--;
 80016a0:	1e73      	subs	r3, r6, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f884 3246 	strb.w	r3, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 80016a8:	4423      	add	r3, r4
 80016aa:	f883 8224 	strb.w	r8, [r3, #548]	; 0x224
          if (line->cursor < line->count)
 80016ae:	f894 5246 	ldrb.w	r5, [r4, #582]	; 0x246
 80016b2:	42b5      	cmp	r5, r6
 80016b4:	d9ec      	bls.n	8001690 <cliMain+0x240>
            mov_len = line->count - line->cursor;
 80016b6:	1baa      	subs	r2, r5, r6
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80016b8:	f506 7109 	add.w	r1, r6, #548	; 0x224
 80016bc:	f206 2023 	addw	r0, r6, #547	; 0x223
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	4421      	add	r1, r4
 80016c4:	4420      	add	r0, r4
 80016c6:	f005 fd27 	bl	8007118 <memmove>
            line->buf[line->count] = 0;
 80016ca:	2300      	movs	r3, #0
            line->count--;
 80016cc:	3d01      	subs	r5, #1
 80016ce:	b2ed      	uxtb	r5, r5
 80016d0:	f884 5246 	strb.w	r5, [r4, #582]	; 0x246
            line->buf[line->count] = 0;
 80016d4:	4425      	add	r5, r4
 80016d6:	f885 3224 	strb.w	r3, [r5, #548]	; 0x224
        if (line->cursor > 0)
 80016da:	e7d9      	b.n	8001690 <cliMain+0x240>
      p_cli->state = CLI_RX_SP2;
 80016dc:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 80016de:	7423      	strb	r3, [r4, #16]
  cliShowLog(p_cli);
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <cliMain+0x2a4>)
 80016e2:	f7ff fda9 	bl	8001238 <cliShowLog>
}
 80016e6:	4638      	mov	r0, r7
 80016e8:	b005      	add	sp, #20
 80016ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_cli->state = CLI_RX_SP3;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e7f5      	b.n	80016de <cliMain+0x28e>
 80016f2:	bf00      	nop
 80016f4:	20000444 	.word	0x20000444
 80016f8:	0800940a 	.word	0x0800940a
 80016fc:	08009405 	.word	0x08009405
 8001700:	080093f2 	.word	0x080093f2
 8001704:	20000668 	.word	0x20000668
 8001708:	0800939a 	.word	0x0800939a
 800170c:	20000690 	.word	0x20000690
 8001710:	2000055c 	.word	0x2000055c
 8001714:	080093f9 	.word	0x080093f9
 8001718:	080093fc 	.word	0x080093fc
 800171c:	08009402 	.word	0x08009402
      p_cli->state = CLI_RX_IDLE;
 8001720:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 8001722:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 8001726:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8001728:	2a44      	cmp	r2, #68	; 0x44
 800172a:	d110      	bne.n	800174e <cliMain+0x2fe>
        if (line->cursor > 0)
 800172c:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 8001730:	b38b      	cbz	r3, 8001796 <cliMain+0x346>
          line->cursor--;
 8001732:	3b01      	subs	r3, #1
 8001734:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
          tx_buf[0] = 0x1B;
 8001738:	f645 331b 	movw	r3, #23323	; 0x5b1b
          tx_buf[2] = rx_data;
 800173c:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001740:	7820      	ldrb	r0, [r4, #0]
 8001742:	2203      	movs	r2, #3
 8001744:	a902      	add	r1, sp, #8
          tx_buf[0] = 0x1B;
 8001746:	f8ad 3008 	strh.w	r3, [sp, #8]
          uartWrite(p_cli->ch, tx_buf, 3);
 800174a:	f000 fbdb 	bl	8001f04 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 800174e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001752:	2b43      	cmp	r3, #67	; 0x43
 8001754:	d114      	bne.n	8001780 <cliMain+0x330>
        if (line->cursor < line->buf_len)
 8001756:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 800175a:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
        uartWrite(p_cli->ch, tx_buf, 3);
 800175e:	7820      	ldrb	r0, [r4, #0]
        if (line->cursor < line->buf_len)
 8001760:	429a      	cmp	r2, r3
          line->cursor++;
 8001762:	bf84      	itt	hi
 8001764:	3301      	addhi	r3, #1
 8001766:	f884 3245 	strbhi.w	r3, [r4, #581]	; 0x245
        tx_buf[0] = 0x1B;
 800176a:	f645 331b 	movw	r3, #23323	; 0x5b1b
 800176e:	f8ad 3008 	strh.w	r3, [sp, #8]
        tx_buf[2] = rx_data;
 8001772:	2343      	movs	r3, #67	; 0x43
        uartWrite(p_cli->ch, tx_buf, 3);
 8001774:	2203      	movs	r2, #3
 8001776:	a902      	add	r1, sp, #8
        tx_buf[2] = rx_data;
 8001778:	f88d 300a 	strb.w	r3, [sp, #10]
        uartWrite(p_cli->ch, tx_buf, 3);
 800177c:	f000 fbc2 	bl	8001f04 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 8001780:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001784:	2b41      	cmp	r3, #65	; 0x41
 8001786:	d106      	bne.n	8001796 <cliMain+0x346>
        cliLineChange(p_cli, true);
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff fcf7 	bl	800117c <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800178e:	4921      	ldr	r1, [pc, #132]	; (8001814 <cliMain+0x3c4>)
 8001790:	7820      	ldrb	r0, [r4, #0]
 8001792:	f000 fbd5 	bl	8001f40 <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 8001796:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800179a:	2b42      	cmp	r3, #66	; 0x42
 800179c:	d106      	bne.n	80017ac <cliMain+0x35c>
        cliLineChange(p_cli, false);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fcec 	bl	800117c <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80017a4:	491b      	ldr	r1, [pc, #108]	; (8001814 <cliMain+0x3c4>)
 80017a6:	7820      	ldrb	r0, [r4, #0]
 80017a8:	f000 fbca 	bl	8001f40 <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 80017ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017b0:	2b31      	cmp	r3, #49	; 0x31
 80017b2:	d10a      	bne.n	80017ca <cliMain+0x37a>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80017b4:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80017b8:	4917      	ldr	r1, [pc, #92]	; (8001818 <cliMain+0x3c8>)
 80017ba:	7820      	ldrb	r0, [r4, #0]
 80017bc:	f000 fbc0 	bl	8001f40 <uartPrintf>
        line->cursor = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 80017c6:	2304      	movs	r3, #4
 80017c8:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 80017ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017ce:	2b34      	cmp	r3, #52	; 0x34
 80017d0:	d186      	bne.n	80016e0 <cliMain+0x290>
        if (line->cursor < line->count)
 80017d2:	f894 3245 	ldrb.w	r3, [r4, #581]	; 0x245
 80017d6:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
 80017da:	4293      	cmp	r3, r2
 80017dc:	d205      	bcs.n	80017ea <cliMain+0x39a>
          mov_len = line->count - line->cursor;
 80017de:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <cliMain+0x3cc>)
 80017e2:	7820      	ldrb	r0, [r4, #0]
 80017e4:	b292      	uxth	r2, r2
 80017e6:	f000 fbab 	bl	8001f40 <uartPrintf>
        if (line->cursor > line->count)
 80017ea:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80017ee:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d905      	bls.n	8001802 <cliMain+0x3b2>
          mov_len = line->cursor - line->count;
 80017f6:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <cliMain+0x3c8>)
 80017fa:	7820      	ldrb	r0, [r4, #0]
 80017fc:	b292      	uxth	r2, r2
 80017fe:	f000 fb9f 	bl	8001f40 <uartPrintf>
        line->cursor = line->count;
 8001802:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8001806:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
        p_cli->state = CLI_RX_SP4;
 800180a:	2304      	movs	r3, #4
 800180c:	e767      	b.n	80016de <cliMain+0x28e>
      p_cli->state = CLI_RX_IDLE;
 800180e:	2300      	movs	r3, #0
 8001810:	e765      	b.n	80016de <cliMain+0x28e>
 8001812:	bf00      	nop
 8001814:	20000668 	.word	0x20000668
 8001818:	08009300 	.word	0x08009300
 800181c:	08009415 	.word	0x08009415

08001820 <cliKeepLoop>:
{
 8001820:	b508      	push	{r3, lr}
  if (uartAvailable(p_cli->ch) == 0)
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <cliKeepLoop+0x14>)
 8001824:	7818      	ldrb	r0, [r3, #0]
 8001826:	f000 fb3d 	bl	8001ea4 <uartAvailable>
}
 800182a:	fab0 f080 	clz	r0, r0
 800182e:	0940      	lsrs	r0, r0, #5
 8001830:	bd08      	pop	{r3, pc}
 8001832:	bf00      	nop
 8001834:	20000444 	.word	0x20000444

08001838 <cliAdd>:
{
 8001838:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800183a:	4d0e      	ldr	r5, [pc, #56]	; (8001874 <cliAdd+0x3c>)
{
 800183c:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800183e:	f8b5 4248 	ldrh.w	r4, [r5, #584]	; 0x248
 8001842:	2c0f      	cmp	r4, #15
 8001844:	d814      	bhi.n	8001870 <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001846:	2314      	movs	r3, #20
 8001848:	435c      	muls	r4, r3
 800184a:	f504 7313 	add.w	r3, r4, #588	; 0x24c
 800184e:	442b      	add	r3, r5
 8001850:	4601      	mov	r1, r0
  p_cli->cmd_list[index].cmd_func = p_func;
 8001852:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001854:	4618      	mov	r0, r3
 8001856:	f005 fd31 	bl	80072bc <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800185a:	f8c4 625c 	str.w	r6, [r4, #604]	; 0x25c
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800185e:	f7ff fc34 	bl	80010ca <cliToUpper>
  return ret;
 8001862:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 8001864:	f8b5 3248 	ldrh.w	r3, [r5, #584]	; 0x248
 8001868:	3301      	adds	r3, #1
 800186a:	f8a5 3248 	strh.w	r3, [r5, #584]	; 0x248
}
 800186e:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8001870:	2000      	movs	r0, #0
 8001872:	e7fc      	b.n	800186e <cliAdd+0x36>
 8001874:	20000444 	.word	0x20000444

08001878 <cliInit>:
{
 8001878:	b508      	push	{r3, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 800187a:	4911      	ldr	r1, [pc, #68]	; (80018c0 <cliInit+0x48>)
  cli_node.is_open = false;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <cliInit+0x4c>)
 800187e:	2200      	movs	r2, #0
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001880:	f8c3 1394 	str.w	r1, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001884:	4910      	ldr	r1, [pc, #64]	; (80018c8 <cliInit+0x50>)
  cli_node.is_open = false;
 8001886:	811a      	strh	r2, [r3, #8]
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001888:	f8c3 1398 	str.w	r1, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800188c:	490f      	ldr	r1, [pc, #60]	; (80018cc <cliInit+0x54>)
  cli_node.hist_line_new   = false;
 800188e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001892:	f8c3 139c 	str.w	r1, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001896:	490e      	ldr	r1, [pc, #56]	; (80018d0 <cliInit+0x58>)
  p_cli->line.buf[0]  = 0;
 8001898:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800189c:	f8c3 13a0 	str.w	r1, [r3, #928]	; 0x3a0
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80018a0:	211f      	movs	r1, #31
  cliAdd("help", cliShowList);
 80018a2:	480c      	ldr	r0, [pc, #48]	; (80018d4 <cliInit+0x5c>)
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80018a4:	f8a3 1244 	strh.w	r1, [r3, #580]	; 0x244
  cliAdd("help", cliShowList);
 80018a8:	490b      	ldr	r1, [pc, #44]	; (80018d8 <cliInit+0x60>)
  cli_node.state   = CLI_RX_IDLE;
 80018aa:	741a      	strb	r2, [r3, #16]
  p_cli->line.count   = 0;
 80018ac:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  cliAdd("help", cliShowList);
 80018b0:	f7ff ffc2 	bl	8001838 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80018b4:	4909      	ldr	r1, [pc, #36]	; (80018dc <cliInit+0x64>)
 80018b6:	480a      	ldr	r0, [pc, #40]	; (80018e0 <cliInit+0x68>)
 80018b8:	f7ff ffbe 	bl	8001838 <cliAdd>
}
 80018bc:	2001      	movs	r0, #1
 80018be:	bd08      	pop	{r3, pc}
 80018c0:	08001159 	.word	0x08001159
 80018c4:	20000444 	.word	0x20000444
 80018c8:	08001139 	.word	0x08001139
 80018cc:	080010f1 	.word	0x080010f1
 80018d0:	0800110d 	.word	0x0800110d
 80018d4:	0800941b 	.word	0x0800941b
 80018d8:	08001325 	.word	0x08001325
 80018dc:	08001371 	.word	0x08001371
 80018e0:	08009420 	.word	0x08009420

080018e4 <gpioPinMode>:
  return ret;
}


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80018e4:	b530      	push	{r4, r5, lr}
 80018e6:	460d      	mov	r5, r1
 80018e8:	b085      	sub	sp, #20
bool ret= true;

GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	2100      	movs	r1, #0
{
 80018ec:	4604      	mov	r4, r0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	2210      	movs	r2, #16
 80018f0:	4668      	mov	r0, sp
 80018f2:	f005 fc2b 	bl	800714c <memset>

switch (mode)
 80018f6:	1e69      	subs	r1, r5, #1
 80018f8:	2904      	cmp	r1, #4
 80018fa:	d809      	bhi.n	8001910 <gpioPinMode+0x2c>
 80018fc:	e8df f001 	tbb	[pc, r1]
 8001900:	15061a03 	.word	0x15061a03
 8001904:	18          	.byte	0x18
 8001905:	00          	.byte	0x00
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    break;
  case _DEF_INPUT_PULLUP:
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001906:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_PULLUP;

    break;
  case _DEF_OUTPUT_PULLDOWN:
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001908:	9302      	str	r3, [sp, #8]
    break;
 800190a:	e001      	b.n	8001910 <gpioPinMode+0x2c>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	9301      	str	r3, [sp, #4]
}

GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
GPIO_InitStruct.Pin = gpio_tbl[ch].speed;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <gpioPinMode+0x54>)
 8001912:	0122      	lsls	r2, r4, #4
 8001914:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8001918:	7a61      	ldrb	r1, [r4, #9]
HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800191a:	5898      	ldr	r0, [r3, r2]
GPIO_InitStruct.Pin = gpio_tbl[ch].speed;
 800191c:	9100      	str	r1, [sp, #0]
HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800191e:	4669      	mov	r1, sp
 8001920:	f000 fe36 	bl	8002590 <HAL_GPIO_Init>

return ret;
}
 8001924:	2001      	movs	r0, #1
 8001926:	b005      	add	sp, #20
 8001928:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192e:	e7eb      	b.n	8001908 <gpioPinMode+0x24>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001934:	2302      	movs	r3, #2
 8001936:	e7e7      	b.n	8001908 <gpioPinMode+0x24>
 8001938:	20000004 	.word	0x20000004

0800193c <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
  if (ch >= GPIO_MAX_CH)
 800193c:	2803      	cmp	r0, #3
{
 800193e:	460a      	mov	r2, r1
 8001940:	b410      	push	{r4}
  if (ch >= GPIO_MAX_CH)
 8001942:	d80c      	bhi.n	800195e <gpioPinWrite+0x22>
      return;
    }

  if (value == true)
    {
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <gpioPinWrite+0x28>)
 8001946:	0104      	lsls	r4, r0, #4
 8001948:	eb01 1300 	add.w	r3, r1, r0, lsl #4
 800194c:	5908      	ldr	r0, [r1, r4]
 800194e:	8899      	ldrh	r1, [r3, #4]
  if (value == true)
 8001950:	b11a      	cbz	r2, 800195a <gpioPinWrite+0x1e>
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001952:	7a9a      	ldrb	r2, [r3, #10]
    }
  else
    {
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
    }
}
 8001954:	bc10      	pop	{r4}
      HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8001956:	f000 bf69 	b.w	800282c <HAL_GPIO_WritePin>
 800195a:	7ada      	ldrb	r2, [r3, #11]
 800195c:	e7fa      	b.n	8001954 <gpioPinWrite+0x18>
}
 800195e:	bc10      	pop	{r4}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000004 	.word	0x20000004

08001968 <gpioInit>:
{
 8001968:	b573      	push	{r0, r1, r4, r5, r6, lr}
  for (int i =0; i<GPIO_MAX_CH; i++)
 800196a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <gpioInit+0x58>)
 800196e:	4d15      	ldr	r5, [pc, #84]	; (80019c4 <gpioInit+0x5c>)
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	f042 0204 	orr.w	r2, r2, #4
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	f002 0204 	and.w	r2, r2, #4
 800197e:	9200      	str	r2, [sp, #0]
 8001980:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	f042 0208 	orr.w	r2, r2, #8
 8001988:	619a      	str	r2, [r3, #24]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	9b01      	ldr	r3, [sp, #4]
      gpioPinMode(i, gpio_tbl[i].mode);
 8001994:	b2e6      	uxtb	r6, r4
 8001996:	7a29      	ldrb	r1, [r5, #8]
 8001998:	4630      	mov	r0, r6
 800199a:	f7ff ffa3 	bl	80018e4 <gpioPinMode>
  for (int i =0; i<GPIO_MAX_CH; i++)
 800199e:	3401      	adds	r4, #1
      gpioPinWrite(i, gpio_tbl[i].init_value);
 80019a0:	7b29      	ldrb	r1, [r5, #12]
 80019a2:	4630      	mov	r0, r6
 80019a4:	f7ff ffca 	bl	800193c <gpioPinWrite>
  for (int i =0; i<GPIO_MAX_CH; i++)
 80019a8:	2c04      	cmp	r4, #4
 80019aa:	f105 0510 	add.w	r5, r5, #16
 80019ae:	d1f1      	bne.n	8001994 <gpioInit+0x2c>
  cliAdd("gpio", cliGpio);
 80019b0:	4905      	ldr	r1, [pc, #20]	; (80019c8 <gpioInit+0x60>)
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <gpioInit+0x64>)
 80019b4:	f7ff ff40 	bl	8001838 <cliAdd>
}
 80019b8:	2001      	movs	r0, #1
 80019ba:	b002      	add	sp, #8
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	20000004 	.word	0x20000004
 80019c8:	080019f9 	.word	0x080019f9
 80019cc:	08009423 	.word	0x08009423

080019d0 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
bool ret =false;

if (ch >= GPIO_MAX_CH)
 80019d0:	2803      	cmp	r0, #3
{
 80019d2:	b510      	push	{r4, lr}
if (ch >= GPIO_MAX_CH)
 80019d4:	d80c      	bhi.n	80019f0 <gpioPinRead+0x20>
  {
    return ret;
  }

if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin)== gpio_tbl[ch].on_state)
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <gpioPinRead+0x24>)
 80019d8:	0102      	lsls	r2, r0, #4
 80019da:	eb03 1400 	add.w	r4, r3, r0, lsl #4
 80019de:	88a1      	ldrh	r1, [r4, #4]
 80019e0:	5898      	ldr	r0, [r3, r2]
 80019e2:	f000 ff1d 	bl	8002820 <HAL_GPIO_ReadPin>
 80019e6:	7aa3      	ldrb	r3, [r4, #10]
 80019e8:	1a1b      	subs	r3, r3, r0
 80019ea:	4258      	negs	r0, r3
 80019ec:	4158      	adcs	r0, r3
  {
    ret= true;
  }

return ret;
}
 80019ee:	bd10      	pop	{r4, pc}
    return ret;
 80019f0:	2000      	movs	r0, #0
 80019f2:	e7fc      	b.n	80019ee <gpioPinRead+0x1e>
 80019f4:	20000004 	.word	0x20000004

080019f8 <cliGpio>:
#ifdef _USE_HW_CLI
void cliGpio(cli_args_t* args)
{
  bool ret =false;

  if(args->argc ==1 && args-> isStr(0, "show") == true)
 80019f8:	8803      	ldrh	r3, [r0, #0]
{
 80019fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 80019fe:	2b01      	cmp	r3, #1
{
 8001a00:	4604      	mov	r4, r0
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001a02:	d034      	beq.n	8001a6e <cliGpio+0x76>
  bool ret =false;
 8001a04:	2500      	movs	r5, #0
	  delay(100);
	}
      ret = true;
    }

  if (args->argc == 2 && args->isStr (0, "read") == true)
 8001a06:	8823      	ldrh	r3, [r4, #0]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d10f      	bne.n	8001a2c <cliGpio+0x34>
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	6963      	ldr	r3, [r4, #20]
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <cliGpio+0xf0>)
 8001a12:	4798      	blx	r3
 8001a14:	4606      	mov	r6, r0
 8001a16:	b148      	cbz	r0, 8001a2c <cliGpio+0x34>
    {
      uint8_t ch;

      ch = (uint8_t)args->getData(1);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	68a3      	ldr	r3, [r4, #8]
 8001a1c:	4798      	blx	r3
      while (cliKeepLoop())
	{
	  cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8001a1e:	4f33      	ldr	r7, [pc, #204]	; (8001aec <cliGpio+0xf4>)
      ch = (uint8_t)args->getData(1);
 8001a20:	b2c5      	uxtb	r5, r0
      while (cliKeepLoop())
 8001a22:	f7ff fefd 	bl	8001820 <cliKeepLoop>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d141      	bne.n	8001aae <cliGpio+0xb6>
	  delay(100);
	}
      ret =true;
 8001a2a:	4635      	mov	r5, r6
    }

  if (args->argc == 3 && args->isStr (0, "write") == true)
 8001a2c:	8823      	ldrh	r3, [r4, #0]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d149      	bne.n	8001ac6 <cliGpio+0xce>
 8001a32:	2000      	movs	r0, #0
 8001a34:	6963      	ldr	r3, [r4, #20]
 8001a36:	492e      	ldr	r1, [pc, #184]	; (8001af0 <cliGpio+0xf8>)
 8001a38:	4798      	blx	r3
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d043      	beq.n	8001ac6 <cliGpio+0xce>
    {
      uint8_t ch;
      uint8_t value;
      ch = (uint8_t)args->getData(1);
 8001a3e:	68a3      	ldr	r3, [r4, #8]
 8001a40:	2001      	movs	r0, #1
 8001a42:	4798      	blx	r3
      value = (uint8_t)args->getData(2);
 8001a44:	68a3      	ldr	r3, [r4, #8]
      ch = (uint8_t)args->getData(1);
 8001a46:	4605      	mov	r5, r0
      value = (uint8_t)args->getData(2);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	4798      	blx	r3
      gpioPinWrite(ch, value);
 8001a4c:	b2ed      	uxtb	r5, r5
 8001a4e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8001a52:	bf18      	it	ne
 8001a54:	2101      	movne	r1, #1
 8001a56:	4628      	mov	r0, r5
 8001a58:	bf08      	it	eq
 8001a5a:	2100      	moveq	r1, #0
 8001a5c:	f7ff ff6e 	bl	800193c <gpioPinWrite>
      cliPrintf("gpio write %d : %d\n", ch, value);
 8001a60:	4632      	mov	r2, r6
 8001a62:	4629      	mov	r1, r5
    {
      cliPrintf("gpio show\n");
      cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
      cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
    }
}
 8001a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      cliPrintf("gpio write %d : %d\n", ch, value);
 8001a68:	4822      	ldr	r0, [pc, #136]	; (8001af4 <cliGpio+0xfc>)
 8001a6a:	f7ff bc41 	b.w	80012f0 <cliPrintf>
  if(args->argc ==1 && args-> isStr(0, "show") == true)
 8001a6e:	6943      	ldr	r3, [r0, #20]
 8001a70:	4921      	ldr	r1, [pc, #132]	; (8001af8 <cliGpio+0x100>)
 8001a72:	2000      	movs	r0, #0
 8001a74:	4798      	blx	r3
 8001a76:	4605      	mov	r5, r0
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d0c3      	beq.n	8001a04 <cliGpio+0xc>
	      cliPrintf("%d", gpioPinRead(i));
 8001a7c:	4f1f      	ldr	r7, [pc, #124]	; (8001afc <cliGpio+0x104>)
	  cliPrintf("\n");
 8001a7e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001b00 <cliGpio+0x108>
      while(cliKeepLoop())
 8001a82:	f7ff fecd 	bl	8001820 <cliKeepLoop>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d0bd      	beq.n	8001a06 <cliGpio+0xe>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001a8a:	2600      	movs	r6, #0
	      cliPrintf("%d", gpioPinRead(i));
 8001a8c:	b2f0      	uxtb	r0, r6
 8001a8e:	f7ff ff9f 	bl	80019d0 <gpioPinRead>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001a92:	3601      	adds	r6, #1
	      cliPrintf("%d", gpioPinRead(i));
 8001a94:	4601      	mov	r1, r0
 8001a96:	4638      	mov	r0, r7
 8001a98:	f7ff fc2a 	bl	80012f0 <cliPrintf>
	  for (int i=0; i<GPIO_MAX_CH; i++)
 8001a9c:	2e04      	cmp	r6, #4
 8001a9e:	d1f5      	bne.n	8001a8c <cliGpio+0x94>
	  cliPrintf("\n");
 8001aa0:	4640      	mov	r0, r8
 8001aa2:	f7ff fc25 	bl	80012f0 <cliPrintf>
	  delay(100);
 8001aa6:	2064      	movs	r0, #100	; 0x64
 8001aa8:	f7ff f93e 	bl	8000d28 <delay>
 8001aac:	e7e9      	b.n	8001a82 <cliGpio+0x8a>
	  cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f7ff ff8e 	bl	80019d0 <gpioPinRead>
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4638      	mov	r0, r7
 8001aba:	f7ff fc19 	bl	80012f0 <cliPrintf>
	  delay(100);
 8001abe:	2064      	movs	r0, #100	; 0x64
 8001ac0:	f7ff f932 	bl	8000d28 <delay>
 8001ac4:	e7ad      	b.n	8001a22 <cliGpio+0x2a>
  if (ret !=true)
 8001ac6:	b965      	cbnz	r5, 8001ae2 <cliGpio+0xea>
      cliPrintf("gpio show\n");
 8001ac8:	480e      	ldr	r0, [pc, #56]	; (8001b04 <cliGpio+0x10c>)
 8001aca:	f7ff fc11 	bl	80012f0 <cliPrintf>
      cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8001ace:	2103      	movs	r1, #3
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <cliGpio+0x110>)
 8001ad2:	f7ff fc0d 	bl	80012f0 <cliPrintf>
}
 8001ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8001ada:	2103      	movs	r1, #3
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <cliGpio+0x114>)
 8001ade:	f7ff bc07 	b.w	80012f0 <cliPrintf>
}
 8001ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ae6:	bf00      	nop
 8001ae8:	08009430 	.word	0x08009430
 8001aec:	08009435 	.word	0x08009435
 8001af0:	08009448 	.word	0x08009448
 8001af4:	0800944e 	.word	0x0800944e
 8001af8:	08009428 	.word	0x08009428
 8001afc:	0800942d 	.word	0x0800942d
 8001b00:	0800939b 	.word	0x0800939b
 8001b04:	08009462 	.word	0x08009462
 8001b08:	0800946d 	.word	0x0800946d
 8001b0c:	08009481 	.word	0x08009481

08001b10 <ledOff.part.0>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
  }
void ledOff(uint8_t ch)
{
  if (ch >=LED_MAX_CH ) return;
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <ledOff.part.0+0xc>)
 8001b12:	79da      	ldrb	r2, [r3, #7]
 8001b14:	8899      	ldrh	r1, [r3, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	f000 be88 	b.w	800282c <HAL_GPIO_WritePin>
 8001b1c:	20000044 	.word	0x20000044

08001b20 <ledInit>:
{
 8001b20:	b510      	push	{r4, lr}
 8001b22:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	2210      	movs	r2, #16
 8001b26:	2100      	movs	r1, #0
 8001b28:	a802      	add	r0, sp, #8
 8001b2a:	f005 fb0f 	bl	800714c <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <ledInit+0x5c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b36:	4812      	ldr	r0, [pc, #72]	; (8001b80 <ledInit+0x60>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	f042 0208 	orr.w	r2, r2, #8
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b4c:	f000 fe6e 	bl	800282c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e9cd 4303 	strd	r4, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2302      	movs	r3, #2
 8001b58:	9305      	str	r3, [sp, #20]
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <ledInit+0x64>)
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001b5c:	a902      	add	r1, sp, #8
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001b5e:	889a      	ldrh	r2, [r3, #4]
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001b60:	6818      	ldr	r0, [r3, #0]
      GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001b62:	9202      	str	r2, [sp, #8]
      HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001b64:	f000 fd14 	bl	8002590 <HAL_GPIO_Init>
  if (ch >=LED_MAX_CH ) return;
 8001b68:	f7ff ffd2 	bl	8001b10 <ledOff.part.0>
  cliAdd("led", cliLED);
 8001b6c:	4906      	ldr	r1, [pc, #24]	; (8001b88 <ledInit+0x68>)
 8001b6e:	4807      	ldr	r0, [pc, #28]	; (8001b8c <ledInit+0x6c>)
 8001b70:	f7ff fe62 	bl	8001838 <cliAdd>
}
 8001b74:	4620      	mov	r0, r4
 8001b76:	b006      	add	sp, #24
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	20000044 	.word	0x20000044
 8001b88:	08001ba5 	.word	0x08001ba5
 8001b8c:	0800949a 	.word	0x0800949a

08001b90 <ledToggle>:
  }
void ledToggle(uint8_t ch)
{
  if (ch >=LED_MAX_CH ) return;
 8001b90:	b920      	cbnz	r0, 8001b9c <ledToggle+0xc>
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8001b92:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <ledToggle+0x10>)
 8001b94:	8899      	ldrh	r1, [r3, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	f000 be4d 	b.w	8002836 <HAL_GPIO_TogglePin>
  }
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000044 	.word	0x20000044

08001ba4 <cliLED>:

#ifdef _USE_HW_CLI
void cliLED(cli_args_t *args)
{
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool ret = false;

  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001ba6:	8803      	ldrh	r3, [r0, #0]
{
 8001ba8:	4604      	mov	r4, r0
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d01c      	beq.n	8001be8 <cliLED+0x44>
            }
        }
    }


  if (args->argc == 2 && args->isStr(0, "switch") == true) // led toggle ch on
 8001bae:	8823      	ldrh	r3, [r4, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d10f      	bne.n	8001bd4 <cliLED+0x30>
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	6963      	ldr	r3, [r4, #20]
 8001bb8:	491d      	ldr	r1, [pc, #116]	; (8001c30 <cliLED+0x8c>)
 8001bba:	4798      	blx	r3
 8001bbc:	b150      	cbz	r0, 8001bd4 <cliLED+0x30>
    {
      uint8_t led_ch;

      led_ch = (uint8_t)args->getData(1);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	68a3      	ldr	r3, [r4, #8]
 8001bc2:	4798      	blx	r3

      if (led_ch >0)
 8001bc4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        {
          led_ch--;
 8001bc8:	bf1c      	itt	ne
 8001bca:	f100 30ff 	addne.w	r0, r0, #4294967295
 8001bce:	b2c0      	uxtbne	r0, r0
        }
      ledToggle(led_ch);
 8001bd0:	f7ff ffde 	bl	8001b90 <ledToggle>
    }


  if (ret != true)
    {
      cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4817      	ldr	r0, [pc, #92]	; (8001c34 <cliLED+0x90>)
 8001bd8:	f7ff fb8a 	bl	80012f0 <cliPrintf>
      cliPrintf("led switch ch[1~%d] \n", LED_MAX_CH);
    }
}
 8001bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cliPrintf("led switch ch[1~%d] \n", LED_MAX_CH);
 8001be0:	2101      	movs	r1, #1
 8001be2:	4815      	ldr	r0, [pc, #84]	; (8001c38 <cliLED+0x94>)
 8001be4:	f7ff bb84 	b.w	80012f0 <cliPrintf>
  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8001be8:	6943      	ldr	r3, [r0, #20]
 8001bea:	4914      	ldr	r1, [pc, #80]	; (8001c3c <cliLED+0x98>)
 8001bec:	2000      	movs	r0, #0
 8001bee:	4798      	blx	r3
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d0dc      	beq.n	8001bae <cliLED+0xa>
      led_ch = (uint8_t)args->getData(1);
 8001bf4:	68a3      	ldr	r3, [r4, #8]
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	4798      	blx	r3
      toggle_time = (uint32_t)args->getData(2);
 8001bfa:	68a3      	ldr	r3, [r4, #8]
      led_ch = (uint8_t)args->getData(1);
 8001bfc:	b2c5      	uxtb	r5, r0
      toggle_time = (uint32_t)args->getData(2);
 8001bfe:	2002      	movs	r0, #2
 8001c00:	4798      	blx	r3
 8001c02:	4607      	mov	r7, r0
      if (led_ch >0)
 8001c04:	b10d      	cbz	r5, 8001c0a <cliLED+0x66>
          led_ch--;
 8001c06:	3d01      	subs	r5, #1
 8001c08:	b2ed      	uxtb	r5, r5
      pre_time=millis();
 8001c0a:	f7ff f88f 	bl	8000d2c <millis>
 8001c0e:	4606      	mov	r6, r0
      while (cliKeepLoop())
 8001c10:	f7ff fe06 	bl	8001820 <cliKeepLoop>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d0ca      	beq.n	8001bae <cliLED+0xa>
          if (millis()-pre_time >= toggle_time)
 8001c18:	f7ff f888 	bl	8000d2c <millis>
 8001c1c:	1b80      	subs	r0, r0, r6
 8001c1e:	42b8      	cmp	r0, r7
 8001c20:	d3f6      	bcc.n	8001c10 <cliLED+0x6c>
              pre_time = millis();
 8001c22:	f7ff f883 	bl	8000d2c <millis>
 8001c26:	4606      	mov	r6, r0
              ledToggle(led_ch);
 8001c28:	4628      	mov	r0, r5
 8001c2a:	f7ff ffb1 	bl	8001b90 <ledToggle>
 8001c2e:	e7ef      	b.n	8001c10 <cliLED+0x6c>
 8001c30:	080094a5 	.word	0x080094a5
 8001c34:	080094ac 	.word	0x080094ac
 8001c38:	080094c9 	.word	0x080094c9
 8001c3c:	0800949e 	.word	0x0800949e

08001c40 <spiInit>:

bool spiInit(void) {
	bool ret = true;

	for (int i = 0; i < SPI_MAX_CH; i++) {
		spi_tbl[i].is_open = false;
 8001c40:	2200      	movs	r2, #0
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <spiInit+0x10>)
		spi_tbl[i].is_tx_done = false;
		spi_tbl[i].func_tx = NULL;
	}

	return ret;
}
 8001c44:	2001      	movs	r0, #1
		spi_tbl[i].is_open = false;
 8001c46:	801a      	strh	r2, [r3, #0]
		spi_tbl[i].func_tx = NULL;
 8001c48:	605a      	str	r2, [r3, #4]
		spi_tbl[i].is_open = false;
 8001c4a:	821a      	strh	r2, [r3, #16]
		spi_tbl[i].func_tx = NULL;
 8001c4c:	615a      	str	r2, [r3, #20]
}
 8001c4e:	4770      	bx	lr
 8001c50:	20000884 	.word	0x20000884

08001c54 <spiBegin>:

bool spiBegin(uint8_t ch) {
 8001c54:	b538      	push	{r3, r4, r5, lr}
	bool ret = false;
	spi_t *p_spi = &spi_tbl[ch];

	switch (ch) {
 8001c56:	4604      	mov	r4, r0
 8001c58:	b118      	cbz	r0, 8001c62 <spiBegin+0xe>
 8001c5a:	2801      	cmp	r0, #1
 8001c5c:	d022      	beq.n	8001ca4 <spiBegin+0x50>
	bool ret = false;
 8001c5e:	2000      	movs	r0, #0
		}
		break;

	}
	return ret;
}
 8001c60:	bd38      	pop	{r3, r4, r5, pc}
		p_spi->h_spi = &hspi1;
 8001c62:	4d1f      	ldr	r5, [pc, #124]	; (8001ce0 <spiBegin+0x8c>)
		p_spi->h_dma = &hdma_spi1_tx;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <spiBegin+0x90>)
		p_spi->h_spi = &hspi1;
 8001c66:	4820      	ldr	r0, [pc, #128]	; (8001ce8 <spiBegin+0x94>)
		p_spi->h_dma = &hdma_spi1_tx;
 8001c68:	60eb      	str	r3, [r5, #12]
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001c6a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c6e:	491f      	ldr	r1, [pc, #124]	; (8001cec <spiBegin+0x98>)
		p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c70:	f44f 7c00 	mov.w	ip, #512	; 0x200
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001c74:	e9c0 1300 	strd	r1, r3, [r0]
		p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8001c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
		p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7c:	e9c0 3403 	strd	r3, r4, [r0, #12]
		p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c80:	2308      	movs	r3, #8
 8001c82:	e9c0 c306 	strd	ip, r3, [r0, #24]
		p_spi->h_spi->Init.CRCPolynomial = 10;
 8001c86:	230a      	movs	r3, #10
		p_spi->h_spi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001c88:	e9c0 4408 	strd	r4, r4, [r0, #32]
		p_spi->h_spi = &hspi1;
 8001c8c:	60a8      	str	r0, [r5, #8]
		p_spi->h_spi->Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	6084      	str	r4, [r0, #8]
		p_spi->h_spi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c90:	6144      	str	r4, [r0, #20]
		p_spi->h_spi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c92:	6284      	str	r4, [r0, #40]	; 0x28
		p_spi->h_spi->Init.CRCPolynomial = 10;
 8001c94:	62c3      	str	r3, [r0, #44]	; 0x2c
		if (HAL_SPI_Init(p_spi->h_spi) == HAL_OK) {
 8001c96:	f001 ff61 	bl	8003b5c <HAL_SPI_Init>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d1df      	bne.n	8001c5e <spiBegin+0xa>
			p_spi->is_open = true;
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	7028      	strb	r0, [r5, #0]
			ret = true;
 8001ca2:	e7dd      	b.n	8001c60 <spiBegin+0xc>
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001ca4:	f44f 7382 	mov.w	r3, #260	; 0x104
		p_spi->h_spi = &hspi1;
 8001ca8:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <spiBegin+0x94>)
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001caa:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <spiBegin+0x9c>)
		p_spi->h_spi = &hspi1;
 8001cac:	4d0c      	ldr	r5, [pc, #48]	; (8001ce0 <spiBegin+0x8c>)
		p_spi->h_spi->Init.Mode = SPI_MODE_MASTER;
 8001cae:	e9c0 2300 	strd	r2, r3, [r0]
		p_spi->h_spi->Init.Direction = SPI_DIRECTION_2LINES;
 8001cb2:	2300      	movs	r3, #0
		p_spi->h_spi->Init.NSS = SPI_NSS_SOFT;
 8001cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
		p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb8:	e9c0 3302 	strd	r3, r3, [r0, #8]
		p_spi->h_spi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cbc:	e9c0 3304 	strd	r3, r3, [r0, #16]
		p_spi->h_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cc0:	e9c0 2306 	strd	r2, r3, [r0, #24]
		p_spi->h_spi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc4:	e9c0 3308 	strd	r3, r3, [r0, #32]
		p_spi->h_spi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc8:	6283      	str	r3, [r0, #40]	; 0x28
		p_spi->h_spi->Init.CRCPolynomial = 10;
 8001cca:	230a      	movs	r3, #10
		p_spi->h_spi = &hspi1;
 8001ccc:	61a8      	str	r0, [r5, #24]
		p_spi->h_spi->Init.CRCPolynomial = 10;
 8001cce:	62c3      	str	r3, [r0, #44]	; 0x2c
		if (HAL_SPI_Init(p_spi->h_spi) != HAL_OK) {
 8001cd0:	f001 ff44 	bl	8003b5c <HAL_SPI_Init>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	d0c2      	beq.n	8001c5e <spiBegin+0xa>
			ret = true;
 8001cd8:	4620      	mov	r0, r4
			p_spi->is_open = true;
 8001cda:	742c      	strb	r4, [r5, #16]
			ret = true;
 8001cdc:	e7c0      	b.n	8001c60 <spiBegin+0xc>
 8001cde:	bf00      	nop
 8001ce0:	20000884 	.word	0x20000884
 8001ce4:	200007e8 	.word	0x200007e8
 8001ce8:	2000082c 	.word	0x2000082c
 8001cec:	40013000 	.word	0x40013000
 8001cf0:	40003800 	.word	0x40003800

08001cf4 <HAL_SPI_MspInit>:
			p_spi->func_tx();
		}
	}
}

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001cf4:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cf6:	2610      	movs	r6, #16
void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cfc:	4632      	mov	r2, r6
 8001cfe:	2100      	movs	r1, #0
 8001d00:	eb0d 0006 	add.w	r0, sp, r6
 8001d04:	f005 fa22 	bl	800714c <memset>
	if (spiHandle->Instance == SPI1) {
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <HAL_SPI_MspInit+0xe0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d13f      	bne.n	8001d90 <HAL_SPI_MspInit+0x9c>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* SPI1 clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_SPI_MspInit+0xe4>)
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	4832      	ldr	r0, [pc, #200]	; (8001ddc <HAL_SPI_MspInit+0xe8>)
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001d14:	699a      	ldr	r2, [r3, #24]

		/* SPI1 DMA Init */
		/* SPI1_TX Init */
		hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d16:	4c32      	ldr	r4, [pc, #200]	; (8001de0 <HAL_SPI_MspInit+0xec>)
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001d18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d1c:	619a      	str	r2, [r3, #24]
 8001d1e:	6999      	ldr	r1, [r3, #24]
 8001d20:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8001d24:	9100      	str	r1, [sp, #0]
 8001d26:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	6999      	ldr	r1, [r3, #24]
 8001d2a:	f041 0104 	orr.w	r1, r1, #4
 8001d2e:	6199      	str	r1, [r3, #24]
 8001d30:	699b      	ldr	r3, [r3, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	21a0      	movs	r1, #160	; 0xa0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e9cd 1304 	strd	r1, r3, [sp, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d42:	2303      	movs	r3, #3
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	eb0d 0106 	add.w	r1, sp, r6
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d48:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f000 fc21 	bl	8002590 <HAL_GPIO_Init>
		hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_SPI_MspInit+0xf0>)
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
		hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d50:	2280      	movs	r2, #128	; 0x80
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d52:	e9c4 3600 	strd	r3, r6, [r4]
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d56:	2300      	movs	r3, #0
		hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d58:	f44f 7080 	mov.w	r0, #256	; 0x100
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5c:	e9c4 3202 	strd	r3, r2, [r4, #8]
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d64:	e9c4 0204 	strd	r0, r2, [r4, #16]
		hdma_spi1_tx.Init.Mode = DMA_NORMAL;
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK) {
 8001d68:	4620      	mov	r0, r4
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d6a:	e9c4 3306 	strd	r3, r3, [r4, #24]
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK) {
 8001d6e:	f000 fa79 	bl	8002264 <HAL_DMA_Init>
 8001d72:	b108      	cbz	r0, 8001d78 <HAL_SPI_MspInit+0x84>
			Error_Handler();
 8001d74:	f7ff f8a8 	bl	8000ec8 <Error_Handler>
		}

		__HAL_LINKDMA(spiHandle, hdmatx, hdma_spi1_tx);

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2023      	movs	r0, #35	; 0x23
 8001d7c:	4611      	mov	r1, r2
		__HAL_LINKDMA(spiHandle, hdmatx, hdma_spi1_tx);
 8001d7e:	64ac      	str	r4, [r5, #72]	; 0x48
 8001d80:	6265      	str	r5, [r4, #36]	; 0x24
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d82:	f000 fa0b 	bl	800219c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d86:	2023      	movs	r0, #35	; 0x23
 8001d88:	f000 fa38 	bl	80021fc <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	}
}
 8001d8c:	b008      	add	sp, #32
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (spiHandle->Instance == SPI2) {
 8001d90:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <HAL_SPI_MspInit+0xf4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d1fa      	bne.n	8001d8c <HAL_SPI_MspInit+0x98>
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_SPI_MspInit+0xe4>)
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	4814      	ldr	r0, [pc, #80]	; (8001dec <HAL_SPI_MspInit+0xf8>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001d9a:	69da      	ldr	r2, [r3, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	a904      	add	r1, sp, #16
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da2:	61da      	str	r2, [r3, #28]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001daa:	9202      	str	r2, [sp, #8]
 8001dac:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	f042 0208 	orr.w	r2, r2, #8
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	699b      	ldr	r3, [r3, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	9303      	str	r3, [sp, #12]
 8001dc2:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f000 fbdf 	bl	8002590 <HAL_GPIO_Init>
}
 8001dd2:	e7db      	b.n	8001d8c <HAL_SPI_MspInit+0x98>
 8001dd4:	40013000 	.word	0x40013000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	200007e8 	.word	0x200007e8
 8001de4:	40020030 	.word	0x40020030
 8001de8:	40003800 	.word	0x40003800
 8001dec:	40010c00 	.word	0x40010c00

08001df0 <uartInit>:
  for (int i=0; i<UART_MAX_CH;i++)
    {
      is_open[i] = false;
    }
  return true;
}
 8001df0:	2001      	movs	r0, #1
 8001df2:	4770      	bx	lr

08001df4 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;

  switch(ch)
 8001df4:	2801      	cmp	r0, #1
{
 8001df6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dfa:	4605      	mov	r5, r0
  switch(ch)
 8001dfc:	d903      	bls.n	8001e06 <uartOpen+0x12>
  bool ret = false;
 8001dfe:	2000      	movs	r0, #0
          qbuffer[ch].tail = qbuffer[ch].head; //Flash
        }
    break;
  }
  return ret;
}
 8001e00:	b002      	add	sp, #8
 8001e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart1.Instance          = USART1;
 8001e06:	4c21      	ldr	r4, [pc, #132]	; (8001e8c <uartOpen+0x98>)
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <uartOpen+0x9c>)
      huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8001e0a:	2600      	movs	r6, #0
      huart1.Init.BaudRate     = baud;
 8001e0c:	e9c4 3100 	strd	r3, r1, [r4]
      huart1.Init.Mode         = UART_MODE_TX_RX;
 8001e10:	230c      	movs	r3, #12
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001e12:	4f20      	ldr	r7, [pc, #128]	; (8001e94 <uartOpen+0xa0>)
      HAL_UART_DeInit(&huart1);
 8001e14:	4620      	mov	r0, r4
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001e16:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001e1a:	eb07 1505 	add.w	r5, r7, r5, lsl #4
      huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001e1e:	e9c4 3605 	strd	r3, r6, [r4, #20]
      huart1.Init.StopBits     = UART_STOPBITS_1;
 8001e22:	e9c4 6602 	strd	r6, r6, [r4, #8]
      huart1.Init.Parity       = UART_PARITY_NONE;
 8001e26:	6126      	str	r6, [r4, #16]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	61e6      	str	r6, [r4, #28]
      HAL_UART_DeInit(&huart1);
 8001e2a:	f002 f994 	bl	8004156 <HAL_UART_DeInit>
      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256); // 256 길이의 &rx_buf[0](=rx_buf)을 주소를 갖는 qbuffer 구조체 생성
 8001e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e32:	4919      	ldr	r1, [pc, #100]	; (8001e98 <uartOpen+0xa4>)
 8001e34:	4628      	mov	r0, r5
 8001e36:	f7ff f91e 	bl	8001076 <qbufferCreate>
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <uartOpen+0xa8>)
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e3c:	4631      	mov	r1, r6
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3e:	695a      	ldr	r2, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e40:	200f      	movs	r0, #15
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	615a      	str	r2, [r3, #20]
 8001e48:	695b      	ldr	r3, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e4a:	4632      	mov	r2, r6
        __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e54:	f000 f9a2 	bl	800219c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f000 f9cf 	bl	80021fc <HAL_NVIC_EnableIRQ>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f002 f94a 	bl	80040f8 <HAL_UART_Init>
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d1ca      	bne.n	8001dfe <uartOpen+0xa>
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	490a      	ldr	r1, [pc, #40]	; (8001e98 <uartOpen+0xa4>)
 8001e70:	f002 fc5a 	bl	8004728 <HAL_UART_Receive_DMA>
 8001e74:	fab0 f080 	clz	r0, r0
          qbuffer[ch].head = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR; //256-256= 0, 256-255= 1, ...
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <uartOpen+0xac>)
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001e7a:	0940      	lsrs	r0, r0, #5
          qbuffer[ch].head = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR; //256-256= 0, 256-255= 1, ...
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	68ab      	ldr	r3, [r5, #8]
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	f847 3008 	str.w	r3, [r7, r8]
          qbuffer[ch].tail = qbuffer[ch].head; //Flash
 8001e88:	606b      	str	r3, [r5, #4]
 8001e8a:	e7b9      	b.n	8001e00 <uartOpen+0xc>
 8001e8c:	200008e8 	.word	0x200008e8
 8001e90:	40013800 	.word	0x40013800
 8001e94:	20000930 	.word	0x20000930
 8001e98:	20000950 	.word	0x20000950
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	200008a4 	.word	0x200008a4

08001ea4 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8001ea4:	b118      	cbz	r0, 8001eae <uartAvailable+0xa>
 8001ea6:	2801      	cmp	r0, #1
 8001ea8:	d003      	beq.n	8001eb2 <uartAvailable+0xe>
      qbuffer[ch].head=qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
      ret = qbufferAvailable(&qbuffer[ch]);
      break;
  }
  return ret;
}
 8001eaa:	2000      	movs	r0, #0
 8001eac:	4770      	bx	lr
      ret= cdcAvailable();
 8001eae:	f003 beeb 	b.w	8005c88 <cdcAvailable>
      qbuffer[ch].head=qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <uartAvailable+0x24>)
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <uartAvailable+0x28>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	6983      	ldr	r3, [r0, #24]
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	f840 3f10 	str.w	r3, [r0, #16]!
      ret = qbufferAvailable(&qbuffer[ch]);
 8001ec2:	f7ff b8f9 	b.w	80010b8 <qbufferAvailable>
 8001ec6:	bf00      	nop
 8001ec8:	200008a4 	.word	0x200008a4
 8001ecc:	20000930 	.word	0x20000930

08001ed0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret=0;
 8001ed0:	2300      	movs	r3, #0
{
 8001ed2:	b507      	push	{r0, r1, r2, lr}
  switch(ch)
 8001ed4:	4602      	mov	r2, r0
  uint8_t ret=0;
 8001ed6:	f88d 3007 	strb.w	r3, [sp, #7]
  switch(ch)
 8001eda:	b130      	cbz	r0, 8001eea <uartRead+0x1a>
 8001edc:	2801      	cmp	r0, #1
 8001ede:	d009      	beq.n	8001ef4 <uartRead+0x24>
      qbufferRead(&qbuffer[ch], &ret ,1);
      break;

  }
  return ret;
}
 8001ee0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001ee4:	b003      	add	sp, #12
 8001ee6:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = cdcRead();
 8001eea:	f003 ff21 	bl	8005d30 <cdcRead>
 8001eee:	f88d 0007 	strb.w	r0, [sp, #7]
      break;
 8001ef2:	e7f5      	b.n	8001ee0 <uartRead+0x10>
      qbufferRead(&qbuffer[ch], &ret ,1);
 8001ef4:	f10d 0107 	add.w	r1, sp, #7
 8001ef8:	4801      	ldr	r0, [pc, #4]	; (8001f00 <uartRead+0x30>)
 8001efa:	f7ff f8c3 	bl	8001084 <qbufferRead>
      break;
 8001efe:	e7ef      	b.n	8001ee0 <uartRead+0x10>
 8001f00:	20000940 	.word	0x20000940

08001f04 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001f04:	4603      	mov	r3, r0
 8001f06:	b510      	push	{r4, lr}
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4614      	mov	r4, r2
  uint32_t ret= 0;

  switch(ch)
 8001f0c:	b123      	cbz	r3, 8001f18 <uartWrite+0x14>
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d007      	beq.n	8001f22 <uartWrite+0x1e>
 8001f12:	2400      	movs	r4, #0
          ret= length;
        }
      break;
  }
  return ret;
}
 8001f14:	4620      	mov	r0, r4
 8001f16:	bd10      	pop	{r4, pc}
      ret =cdcWrite(p_data, length);
 8001f18:	4611      	mov	r1, r2
 8001f1a:	f003 ff39 	bl	8005d90 <cdcWrite>
 8001f1e:	4604      	mov	r4, r0
      break;
 8001f20:	e7f8      	b.n	8001f14 <uartWrite+0x10>
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001f22:	2364      	movs	r3, #100	; 0x64
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <uartWrite+0x34>)
 8001f26:	b292      	uxth	r2, r2
 8001f28:	f002 f92f 	bl	800418a <HAL_UART_Transmit>
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <uartWrite+0x38>)
  uint32_t ret= 0;
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	bf18      	it	ne
 8001f32:	2400      	movne	r4, #0
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001f34:	7018      	strb	r0, [r3, #0]
      if (status==HAL_OK)
 8001f36:	e7ed      	b.n	8001f14 <uartWrite+0x10>
 8001f38:	200008e8 	.word	0x200008e8
 8001f3c:	20000a50 	.word	0x20000a50

08001f40 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char*fmt, ...)
{
 8001f40:	b40e      	push	{r1, r2, r3}
 8001f42:	b510      	push	{r4, lr}
 8001f44:	b0c3      	sub	sp, #268	; 0x10c
 8001f46:	ab45      	add	r3, sp, #276	; 0x114
 8001f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f4c:	4604      	mov	r4, r0
  int len;
  uint32_t ret;
  va_start(args, fmt);


  len = vsnprintf(buf, 256, fmt, args);
 8001f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f52:	a802      	add	r0, sp, #8
  va_start(args, fmt);
 8001f54:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8001f56:	f005 f8d1 	bl	80070fc <vsniprintf>
  ret=uartWrite(ch, (uint8_t *)buf, len);
 8001f5a:	a902      	add	r1, sp, #8
  len = vsnprintf(buf, 256, fmt, args);
 8001f5c:	4602      	mov	r2, r0
  ret=uartWrite(ch, (uint8_t *)buf, len);
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff ffd0 	bl	8001f04 <uartWrite>


  va_end(args);
  return ret;
}
 8001f64:	b043      	add	sp, #268	; 0x10c
 8001f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f6a:	b003      	add	sp, #12
 8001f6c:	4770      	bx	lr

08001f6e <HAL_UART_ErrorCallback>:
 8001f6e:	4770      	bx	lr

08001f70 <HAL_UART_RxCpltCallback>:

      HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
    }
#endif

}
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f74:	b570      	push	{r4, r5, r6, lr}
 8001f76:	4606      	mov	r6, r0
 8001f78:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	a802      	add	r0, sp, #8
 8001f80:	f005 f8e4 	bl	800714c <memset>
  if(uartHandle->Instance==USART1)
 8001f84:	6832      	ldr	r2, [r6, #0]
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_UART_MspInit+0xa8>)
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d144      	bne.n	8002016 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001f90:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	4823      	ldr	r0, [pc, #140]	; (8002020 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f98:	619a      	str	r2, [r3, #24]
 8001f9a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001fa2:	9200      	str	r2, [sp, #0]
 8001fa4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	f042 0204 	orr.w	r2, r2, #4
 8001fae:	619a      	str	r2, [r3, #24]
 8001fb0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f000 fae2 	bl	8002590 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	4813      	ldr	r0, [pc, #76]	; (8002020 <HAL_UART_MspInit+0xac>)
 8001fd2:	a902      	add	r1, sp, #8

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001fd4:	4c13      	ldr	r4, [pc, #76]	; (8002024 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd6:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f000 fad8 	bl	8002590 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_UART_MspInit+0xb4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fe2:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe4:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe8:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fea:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001fee:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff0:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff2:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff6:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ff8:	f000 f934 	bl	8002264 <HAL_DMA_Init>
 8001ffc:	b108      	cbz	r0, 8002002 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8001ffe:	f7fe ff63 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2025      	movs	r0, #37	; 0x25
 8002006:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002008:	63f4      	str	r4, [r6, #60]	; 0x3c
 800200a:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800200c:	f000 f8c6 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002010:	2025      	movs	r0, #37	; 0x25
 8002012:	f000 f8f3 	bl	80021fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002016:	b006      	add	sp, #24
 8002018:	bd70      	pop	{r4, r5, r6, pc}
 800201a:	bf00      	nop
 800201c:	40013800 	.word	0x40013800
 8002020:	40010800 	.word	0x40010800
 8002024:	200008a4 	.word	0x200008a4
 8002028:	40020058 	.word	0x40020058

0800202c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 800202c:	6802      	ldr	r2, [r0, #0]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_UART_MspDeInit+0x34>)
{
 8002030:	b510      	push	{r4, lr}
  if(uartHandle->Instance==USART1)
 8002032:	429a      	cmp	r2, r3
{
 8002034:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART1)
 8002036:	d111      	bne.n	800205c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_UART_MspDeInit+0x38>)

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800203a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 800203e:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8002042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002046:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002048:	f000 fb7c 	bl	8002744 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800204c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800204e:	f000 f93b 	bl	80022c8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002056:	2025      	movs	r0, #37	; 0x25
 8002058:	f000 b8de 	b.w	8002218 <HAL_NVIC_DisableIRQ>
}
 800205c:	bd10      	pop	{r4, pc}
 800205e:	bf00      	nop
 8002060:	40013800 	.word	0x40013800
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800

0800206c <usbInit>:
#include "usb_device.h"

#ifdef _USB_HW_USB

bool usbInit(void)
{
 800206c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool ret = true;

  GPIO_InitTypeDef GPIO_InitStruct;
  delay(200);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800206e:	4c0a      	ldr	r4, [pc, #40]	; (8002098 <usbInit+0x2c>)
  delay(200);
 8002070:	20c8      	movs	r0, #200	; 0xc8
 8002072:	f7fe fe59 	bl	8000d28 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	4620      	mov	r0, r4
 800207a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207e:	f000 fbd5 	bl	800282c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002082:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	4620      	mov	r0, r4
 8002086:	4669      	mov	r1, sp
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f000 fa81 	bl	8002590 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 800208e:	f003 fd8d 	bl	8005bac <MX_USB_DEVICE_Init>

  return ret;
}
 8002092:	2001      	movs	r0, #1
 8002094:	b004      	add	sp, #16
 8002096:	bd10      	pop	{r4, pc}
 8002098:	40010800 	.word	0x40010800

0800209c <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 800209c:	b508      	push	{r3, lr}
  bspInit();
 800209e:	f7fe fee1 	bl	8000e64 <bspInit>
  cliInit();
 80020a2:	f7ff fbe9 	bl	8001878 <cliInit>
//  resetInit();
  usbInit();
 80020a6:	f7ff ffe1 	bl	800206c <usbInit>
//  rtcInit();
  tim1Init();
 80020aa:	f7fe fe4d 	bl	8000d48 <tim1Init>
  gpioInit();
 80020ae:	f7ff fc5b 	bl	8001968 <gpioInit>
  ledInit();
 80020b2:	f7ff fd35 	bl	8001b20 <ledInit>
//  motorInit();
  spiInit();
 80020b6:	f7ff fdc3 	bl	8001c40 <spiInit>
  uartInit();
//  flashInit();
//  DACInit();
}
 80020ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  uartInit();
 80020be:	f7ff be97 	b.w	8001df0 <uartInit>
	...

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_InitTick+0x3c>)
{
 80020c8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_InitTick+0x40>)
 80020d6:	6810      	ldr	r0, [r2, #0]
 80020d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80020dc:	f000 f8ae 	bl	800223c <HAL_SYSTICK_Config>
 80020e0:	4604      	mov	r4, r0
 80020e2:	b958      	cbnz	r0, 80020fc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e4:	2d0f      	cmp	r5, #15
 80020e6:	d809      	bhi.n	80020fc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	4602      	mov	r2, r0
 80020ea:	4629      	mov	r1, r5
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f000 f854 	bl	800219c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4620      	mov	r0, r4
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <HAL_InitTick+0x44>)
 80020f8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80020fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
 80020fe:	e7fc      	b.n	80020fa <HAL_InitTick+0x36>
 8002100:	2000004c 	.word	0x2000004c
 8002104:	20000000 	.word	0x20000000
 8002108:	20000050 	.word	0x20000050

0800210c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_Init+0x20>)
{
 800210e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002112:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211a:	f000 f82d 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800211e:	200f      	movs	r0, #15
 8002120:	f7ff ffd0 	bl	80020c4 <HAL_InitTick>
  HAL_MspInit();
 8002124:	f7fe fed2 	bl	8000ecc <HAL_MspInit>
}
 8002128:	2000      	movs	r0, #0
 800212a:	bd08      	pop	{r3, pc}
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002130:	4a03      	ldr	r2, [pc, #12]	; (8002140 <HAL_IncTick+0x10>)
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <HAL_IncTick+0x14>)
 8002134:	6811      	ldr	r1, [r2, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	440b      	add	r3, r1
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000a54 	.word	0x20000a54
 8002144:	2000004c 	.word	0x2000004c

08002148 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002148:	4b01      	ldr	r3, [pc, #4]	; (8002150 <HAL_GetTick+0x8>)
 800214a:	6818      	ldr	r0, [r3, #0]
}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000a54 	.word	0x20000a54

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b538      	push	{r3, r4, r5, lr}
 8002156:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff fff6 	bl	8002148 <HAL_GetTick>
 800215c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002160:	bf1e      	ittt	ne
 8002162:	4b04      	ldrne	r3, [pc, #16]	; (8002174 <HAL_Delay+0x20>)
 8002164:	781b      	ldrbne	r3, [r3, #0]
 8002166:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	1b43      	subs	r3, r0, r5
 800216e:	42a3      	cmp	r3, r4
 8002170:	d3fa      	bcc.n	8002168 <HAL_Delay+0x14>
  {
  }
}
 8002172:	bd38      	pop	{r3, r4, r5, pc}
 8002174:	2000004c 	.word	0x2000004c

08002178 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800217a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800217e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002186:	0412      	lsls	r2, r2, #16
 8002188:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002194:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b530      	push	{r4, r5, lr}
 80021a0:	68dc      	ldr	r4, [r3, #12]
 80021a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	bf28      	it	cs
 80021b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b8:	bf94      	ite	ls
 80021ba:	2400      	movls	r4, #0
 80021bc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021be:	fa05 f303 	lsl.w	r3, r5, r3
 80021c2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c6:	40a5      	lsls	r5, r4
 80021c8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80021ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	bfac      	ite	ge
 80021d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	4a07      	ldrlt	r2, [pc, #28]	; (80021f8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	bfab      	itete	ge
 80021e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021f2:	bd30      	pop	{r4, r5, pc}
 80021f4:	e000ed00 	.word	0xe000ed00
 80021f8:	e000ed14 	.word	0xe000ed14

080021fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021fc:	2800      	cmp	r0, #0
 80021fe:	db07      	blt.n	8002210 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002200:	2301      	movs	r3, #1
 8002202:	0941      	lsrs	r1, r0, #5
 8002204:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_NVIC_EnableIRQ+0x18>)
 8002206:	f000 001f 	and.w	r0, r0, #31
 800220a:	4083      	lsls	r3, r0
 800220c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100

08002218 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002218:	2800      	cmp	r0, #0
 800221a:	db0c      	blt.n	8002236 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221c:	2201      	movs	r2, #1
 800221e:	4906      	ldr	r1, [pc, #24]	; (8002238 <HAL_NVIC_DisableIRQ+0x20>)
 8002220:	0943      	lsrs	r3, r0, #5
 8002222:	f000 001f 	and.w	r0, r0, #31
 8002226:	4082      	lsls	r2, r0
 8002228:	3320      	adds	r3, #32
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800222e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002232:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100

0800223c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	3801      	subs	r0, #1
 800223e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002242:	d20b      	bcs.n	800225c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002244:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	21f0      	movs	r1, #240	; 0xf0
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002252:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002254:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002256:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002258:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800225c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002264:	4603      	mov	r3, r0
{
 8002266:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8002268:	b340      	cbz	r0, 80022bc <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800226a:	2114      	movs	r1, #20
 800226c:	6800      	ldr	r0, [r0, #0]
 800226e:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <HAL_DMA_Init+0x5c>)
 8002270:	4402      	add	r2, r0
 8002272:	fbb2 f2f1 	udiv	r2, r2, r1
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_DMA_Init+0x60>)
 800227c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800227e:	2202      	movs	r2, #2
 8002280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002284:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8002288:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 800228c:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228e:	4322      	orrs	r2, r4
 8002290:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002292:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002296:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800229a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	4322      	orrs	r2, r4
 80022a0:	699c      	ldr	r4, [r3, #24]
 80022a2:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a4:	69dc      	ldr	r4, [r3, #28]
 80022a6:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80022a8:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022aa:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ac:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022ae:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b0:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022b2:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80022b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 80022ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
 80022be:	e7fc      	b.n	80022ba <HAL_DMA_Init+0x56>
 80022c0:	bffdfff8 	.word	0xbffdfff8
 80022c4:	40020000 	.word	0x40020000

080022c8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80022c8:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022ca:	b308      	cbz	r0, 8002310 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80022cc:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022ce:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 80022d0:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022d2:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 80022de:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 80022e0:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 80022e2:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022e4:	2114      	movs	r1, #20
 80022e6:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80022ea:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 80022ec:	4c0a      	ldr	r4, [pc, #40]	; (8002318 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 80022f6:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80022f8:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fa:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferHalfCpltCallback = NULL;
 80022fc:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8002300:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002304:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002308:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800230c:	4618      	mov	r0, r3
}
 800230e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002310:	2001      	movs	r0, #1
 8002312:	e7fc      	b.n	800230e <HAL_DMA_DeInit+0x46>
 8002314:	bffdfff8 	.word	0xbffdfff8
 8002318:	40020000 	.word	0x40020000

0800231c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231e:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002320:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002324:	2801      	cmp	r0, #1
 8002326:	d036      	beq.n	8002396 <HAL_DMA_Start_IT+0x7a>
 8002328:	2001      	movs	r0, #1
 800232a:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800232e:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 8002332:	2400      	movs	r4, #0
 8002334:	2801      	cmp	r0, #1
 8002336:	b2c6      	uxtb	r6, r0
 8002338:	f04f 0002 	mov.w	r0, #2
 800233c:	d128      	bne.n	8002390 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800233e:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002342:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002344:	682c      	ldr	r4, [r5, #0]
 8002346:	6820      	ldr	r0, [r4, #0]
 8002348:	f020 0001 	bic.w	r0, r0, #1
 800234c:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800234e:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 8002352:	fa06 f000 	lsl.w	r0, r6, r0
 8002356:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002358:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800235a:	686b      	ldr	r3, [r5, #4]
 800235c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800235e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002360:	bf0b      	itete	eq
 8002362:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002364:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002366:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002368:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800236a:	b14b      	cbz	r3, 8002380 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002374:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6023      	str	r3, [r4, #0]
}
 800237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	f023 0304 	bic.w	r3, r3, #4
 8002386:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	f043 030a 	orr.w	r3, r3, #10
 800238e:	e7f0      	b.n	8002372 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8002390:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 8002394:	e7f3      	b.n	800237e <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8002396:	2002      	movs	r0, #2
 8002398:	e7f1      	b.n	800237e <HAL_DMA_Start_IT+0x62>

0800239a <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800239a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800239e:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a0:	2a02      	cmp	r2, #2
 80023a2:	d006      	beq.n	80023b2 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	2204      	movs	r2, #4
 80023a6:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2020 	strb.w	r2, [r3, #32]
}
 80023b0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b2:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023b4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b6:	6811      	ldr	r1, [r2, #0]
 80023b8:	f021 010e 	bic.w	r1, r1, #14
 80023bc:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80023be:	6811      	ldr	r1, [r2, #0]
 80023c0:	f021 0101 	bic.w	r1, r1, #1
 80023c4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023c6:	2101      	movs	r1, #1
 80023c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	6042      	str	r2, [r0, #4]
  return status; 
 80023d0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80023d2:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 80023d6:	e7e8      	b.n	80023aa <HAL_DMA_Abort+0x10>

080023d8 <HAL_DMA_Abort_IT>:
{  
 80023d8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023da:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	2304      	movs	r3, #4
 80023e4:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
}
 80023e8:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	f022 020e 	bic.w	r2, r2, #14
 80023f2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_DMA_Abort_IT+0x88>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_DMA_Abort_IT+0x6a>
 8002402:	3214      	adds	r2, #20
 8002404:	4293      	cmp	r3, r2
 8002406:	d01e      	beq.n	8002446 <HAL_DMA_Abort_IT+0x6e>
 8002408:	3214      	adds	r2, #20
 800240a:	4293      	cmp	r3, r2
 800240c:	d01d      	beq.n	800244a <HAL_DMA_Abort_IT+0x72>
 800240e:	3214      	adds	r2, #20
 8002410:	4293      	cmp	r3, r2
 8002412:	d01d      	beq.n	8002450 <HAL_DMA_Abort_IT+0x78>
 8002414:	3214      	adds	r2, #20
 8002416:	4293      	cmp	r3, r2
 8002418:	d01d      	beq.n	8002456 <HAL_DMA_Abort_IT+0x7e>
 800241a:	3214      	adds	r2, #20
 800241c:	4293      	cmp	r3, r2
 800241e:	bf0c      	ite	eq
 8002420:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002424:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800242a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800242c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800242e:	2301      	movs	r3, #1
 8002430:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002434:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002436:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800243a:	b17b      	cbz	r3, 800245c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 800243c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	4620      	mov	r0, r4
 8002440:	e7d2      	b.n	80023e8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002442:	2301      	movs	r3, #1
 8002444:	e7f0      	b.n	8002428 <HAL_DMA_Abort_IT+0x50>
 8002446:	2310      	movs	r3, #16
 8002448:	e7ee      	b.n	8002428 <HAL_DMA_Abort_IT+0x50>
 800244a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244e:	e7eb      	b.n	8002428 <HAL_DMA_Abort_IT+0x50>
 8002450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002454:	e7e8      	b.n	8002428 <HAL_DMA_Abort_IT+0x50>
 8002456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245a:	e7e5      	b.n	8002428 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800245c:	4618      	mov	r0, r3
 800245e:	e7c3      	b.n	80023e8 <HAL_DMA_Abort_IT+0x10>
 8002460:	40020008 	.word	0x40020008
 8002464:	40020000 	.word	0x40020000

08002468 <HAL_DMA_IRQHandler>:
{
 8002468:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800246a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800246c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800246e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002470:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002472:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002474:	4095      	lsls	r5, r2
 8002476:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002478:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800247a:	d032      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x7a>
 800247c:	074d      	lsls	r5, r1, #29
 800247e:	d530      	bpl.n	80024e2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002484:	bf5e      	ittt	pl
 8002486:	681a      	ldrpl	r2, [r3, #0]
 8002488:	f022 0204 	bicpl.w	r2, r2, #4
 800248c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800248e:	4a3e      	ldr	r2, [pc, #248]	; (8002588 <HAL_DMA_IRQHandler+0x120>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d019      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x60>
 8002494:	3214      	adds	r2, #20
 8002496:	4293      	cmp	r3, r2
 8002498:	d018      	beq.n	80024cc <HAL_DMA_IRQHandler+0x64>
 800249a:	3214      	adds	r2, #20
 800249c:	4293      	cmp	r3, r2
 800249e:	d017      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x68>
 80024a0:	3214      	adds	r2, #20
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d017      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x6e>
 80024a6:	3214      	adds	r2, #20
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d017      	beq.n	80024dc <HAL_DMA_IRQHandler+0x74>
 80024ac:	3214      	adds	r2, #20
 80024ae:	4293      	cmp	r3, r2
 80024b0:	bf0c      	ite	eq
 80024b2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80024b6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80024ba:	4a34      	ldr	r2, [pc, #208]	; (800258c <HAL_DMA_IRQHandler+0x124>)
 80024bc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80024be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05e      	beq.n	8002582 <HAL_DMA_IRQHandler+0x11a>
}
 80024c4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80024c6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024c8:	2304      	movs	r3, #4
 80024ca:	e7f6      	b.n	80024ba <HAL_DMA_IRQHandler+0x52>
 80024cc:	2340      	movs	r3, #64	; 0x40
 80024ce:	e7f4      	b.n	80024ba <HAL_DMA_IRQHandler+0x52>
 80024d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d4:	e7f1      	b.n	80024ba <HAL_DMA_IRQHandler+0x52>
 80024d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024da:	e7ee      	b.n	80024ba <HAL_DMA_IRQHandler+0x52>
 80024dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024e0:	e7eb      	b.n	80024ba <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024e2:	2502      	movs	r5, #2
 80024e4:	4095      	lsls	r5, r2
 80024e6:	4225      	tst	r5, r4
 80024e8:	d035      	beq.n	8002556 <HAL_DMA_IRQHandler+0xee>
 80024ea:	078d      	lsls	r5, r1, #30
 80024ec:	d533      	bpl.n	8002556 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	0694      	lsls	r4, r2, #26
 80024f2:	d406      	bmi.n	8002502 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	f022 020a 	bic.w	r2, r2, #10
 80024fa:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80024fc:	2201      	movs	r2, #1
 80024fe:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002502:	4a21      	ldr	r2, [pc, #132]	; (8002588 <HAL_DMA_IRQHandler+0x120>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d019      	beq.n	800253c <HAL_DMA_IRQHandler+0xd4>
 8002508:	3214      	adds	r2, #20
 800250a:	4293      	cmp	r3, r2
 800250c:	d018      	beq.n	8002540 <HAL_DMA_IRQHandler+0xd8>
 800250e:	3214      	adds	r2, #20
 8002510:	4293      	cmp	r3, r2
 8002512:	d017      	beq.n	8002544 <HAL_DMA_IRQHandler+0xdc>
 8002514:	3214      	adds	r2, #20
 8002516:	4293      	cmp	r3, r2
 8002518:	d017      	beq.n	800254a <HAL_DMA_IRQHandler+0xe2>
 800251a:	3214      	adds	r2, #20
 800251c:	4293      	cmp	r3, r2
 800251e:	d017      	beq.n	8002550 <HAL_DMA_IRQHandler+0xe8>
 8002520:	3214      	adds	r2, #20
 8002522:	4293      	cmp	r3, r2
 8002524:	bf0c      	ite	eq
 8002526:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800252a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_DMA_IRQHandler+0x124>)
 8002530:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002532:	2300      	movs	r3, #0
 8002534:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002538:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800253a:	e7c1      	b.n	80024c0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800253c:	2302      	movs	r3, #2
 800253e:	e7f6      	b.n	800252e <HAL_DMA_IRQHandler+0xc6>
 8002540:	2320      	movs	r3, #32
 8002542:	e7f4      	b.n	800252e <HAL_DMA_IRQHandler+0xc6>
 8002544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002548:	e7f1      	b.n	800252e <HAL_DMA_IRQHandler+0xc6>
 800254a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800254e:	e7ee      	b.n	800252e <HAL_DMA_IRQHandler+0xc6>
 8002550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002554:	e7eb      	b.n	800252e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002556:	2508      	movs	r5, #8
 8002558:	4095      	lsls	r5, r2
 800255a:	4225      	tst	r5, r4
 800255c:	d011      	beq.n	8002582 <HAL_DMA_IRQHandler+0x11a>
 800255e:	0709      	lsls	r1, r1, #28
 8002560:	d50f      	bpl.n	8002582 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	f021 010e 	bic.w	r1, r1, #14
 8002568:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800256a:	2301      	movs	r3, #1
 800256c:	fa03 f202 	lsl.w	r2, r3, r2
 8002570:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002572:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002574:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002578:	2300      	movs	r3, #0
 800257a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800257e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002580:	e79e      	b.n	80024c0 <HAL_DMA_IRQHandler+0x58>
}
 8002582:	bc70      	pop	{r4, r5, r6}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40020008 	.word	0x40020008
 800258c:	40020000 	.word	0x40020000

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002594:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002596:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002598:	4f64      	ldr	r7, [pc, #400]	; (800272c <HAL_GPIO_Init+0x19c>)
 800259a:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 800259c:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002734 <HAL_GPIO_Init+0x1a4>
 80025a0:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002738 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a4:	680d      	ldr	r5, [r1, #0]
 80025a6:	fa35 f406 	lsrs.w	r4, r5, r6
 80025aa:	d102      	bne.n	80025b2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80025ac:	b003      	add	sp, #12
 80025ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80025b2:	f04f 0801 	mov.w	r8, #1
 80025b6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80025be:	ea38 0505 	bics.w	r5, r8, r5
 80025c2:	d17a      	bne.n	80026ba <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 80025c4:	684d      	ldr	r5, [r1, #4]
 80025c6:	2d03      	cmp	r5, #3
 80025c8:	d807      	bhi.n	80025da <HAL_GPIO_Init+0x4a>
 80025ca:	3d01      	subs	r5, #1
 80025cc:	2d02      	cmp	r5, #2
 80025ce:	f200 8087 	bhi.w	80026e0 <HAL_GPIO_Init+0x150>
 80025d2:	e8df f005 	tbb	[pc, r5]
 80025d6:	9a95      	.short	0x9a95
 80025d8:	a0          	.byte	0xa0
 80025d9:	00          	.byte	0x00
 80025da:	2d12      	cmp	r5, #18
 80025dc:	f000 8098 	beq.w	8002710 <HAL_GPIO_Init+0x180>
 80025e0:	d86d      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025e2:	2d11      	cmp	r5, #17
 80025e4:	f000 808e 	beq.w	8002704 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025e8:	2cff      	cmp	r4, #255	; 0xff
 80025ea:	bf98      	it	ls
 80025ec:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ee:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025f2:	bf88      	it	hi
 80025f4:	f100 0a04 	addhi.w	sl, r0, #4
 80025f8:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025fc:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002600:	bf88      	it	hi
 8002602:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002604:	fa09 fb05 	lsl.w	fp, r9, r5
 8002608:	ea28 080b 	bic.w	r8, r8, fp
 800260c:	fa02 f505 	lsl.w	r5, r2, r5
 8002610:	ea48 0505 	orr.w	r5, r8, r5
 8002614:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002618:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800261c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002620:	d04b      	beq.n	80026ba <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002622:	69bd      	ldr	r5, [r7, #24]
 8002624:	f026 0803 	bic.w	r8, r6, #3
 8002628:	f045 0501 	orr.w	r5, r5, #1
 800262c:	61bd      	str	r5, [r7, #24]
 800262e:	69bd      	ldr	r5, [r7, #24]
 8002630:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002634:	f005 0501 	and.w	r5, r5, #1
 8002638:	9501      	str	r5, [sp, #4]
 800263a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002642:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002644:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002648:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800264c:	fa09 f90b 	lsl.w	r9, r9, fp
 8002650:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002654:	4d39      	ldr	r5, [pc, #228]	; (800273c <HAL_GPIO_Init+0x1ac>)
 8002656:	42a8      	cmp	r0, r5
 8002658:	d061      	beq.n	800271e <HAL_GPIO_Init+0x18e>
 800265a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800265e:	42a8      	cmp	r0, r5
 8002660:	d05f      	beq.n	8002722 <HAL_GPIO_Init+0x192>
 8002662:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002666:	42a8      	cmp	r0, r5
 8002668:	d05d      	beq.n	8002726 <HAL_GPIO_Init+0x196>
 800266a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800266e:	42a8      	cmp	r0, r5
 8002670:	bf0c      	ite	eq
 8002672:	2503      	moveq	r5, #3
 8002674:	2504      	movne	r5, #4
 8002676:	fa05 f50b 	lsl.w	r5, r5, fp
 800267a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800267e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002682:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002684:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002688:	bf14      	ite	ne
 800268a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800268c:	43a5      	biceq	r5, r4
 800268e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002690:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002692:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002696:	bf14      	ite	ne
 8002698:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800269a:	43a5      	biceq	r5, r4
 800269c:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800269e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80026a4:	bf14      	ite	ne
 80026a6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026a8:	43a5      	biceq	r5, r4
 80026aa:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80026ac:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ae:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80026b2:	bf14      	ite	ne
 80026b4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026b6:	43a5      	biceq	r5, r4
 80026b8:	601d      	str	r5, [r3, #0]
	position++;
 80026ba:	3601      	adds	r6, #1
 80026bc:	e772      	b.n	80025a4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80026be:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8002740 <HAL_GPIO_Init+0x1b0>
 80026c2:	454d      	cmp	r5, r9
 80026c4:	d00c      	beq.n	80026e0 <HAL_GPIO_Init+0x150>
 80026c6:	d817      	bhi.n	80026f8 <HAL_GPIO_Init+0x168>
 80026c8:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80026cc:	454d      	cmp	r5, r9
 80026ce:	d007      	beq.n	80026e0 <HAL_GPIO_Init+0x150>
 80026d0:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80026d4:	454d      	cmp	r5, r9
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x150>
 80026d8:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80026dc:	454d      	cmp	r5, r9
 80026de:	d183      	bne.n	80025e8 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026e0:	688a      	ldr	r2, [r1, #8]
 80026e2:	b1d2      	cbz	r2, 800271a <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026e4:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80026e6:	bf08      	it	eq
 80026e8:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ec:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80026f0:	bf18      	it	ne
 80026f2:	f8c0 8014 	strne.w	r8, [r0, #20]
 80026f6:	e777      	b.n	80025e8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80026f8:	4565      	cmp	r5, ip
 80026fa:	d0f1      	beq.n	80026e0 <HAL_GPIO_Init+0x150>
 80026fc:	4575      	cmp	r5, lr
 80026fe:	e7ee      	b.n	80026de <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002700:	68ca      	ldr	r2, [r1, #12]
          break;
 8002702:	e771      	b.n	80025e8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002704:	68ca      	ldr	r2, [r1, #12]
 8002706:	3204      	adds	r2, #4
          break;
 8002708:	e76e      	b.n	80025e8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800270a:	68ca      	ldr	r2, [r1, #12]
 800270c:	3208      	adds	r2, #8
          break;
 800270e:	e76b      	b.n	80025e8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002710:	68ca      	ldr	r2, [r1, #12]
 8002712:	320c      	adds	r2, #12
          break;
 8002714:	e768      	b.n	80025e8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002716:	2200      	movs	r2, #0
 8002718:	e766      	b.n	80025e8 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800271a:	2204      	movs	r2, #4
 800271c:	e764      	b.n	80025e8 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800271e:	2500      	movs	r5, #0
 8002720:	e7a9      	b.n	8002676 <HAL_GPIO_Init+0xe6>
 8002722:	2501      	movs	r5, #1
 8002724:	e7a7      	b.n	8002676 <HAL_GPIO_Init+0xe6>
 8002726:	2502      	movs	r5, #2
 8002728:	e7a5      	b.n	8002676 <HAL_GPIO_Init+0xe6>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40010400 	.word	0x40010400
 8002734:	10310000 	.word	0x10310000
 8002738:	10320000 	.word	0x10320000
 800273c:	40010800 	.word	0x40010800
 8002740:	10220000 	.word	0x10220000

08002744 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002748:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 800274c:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 800274e:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002752:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002756:	eb00 030b 	add.w	r3, r0, fp
 800275a:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800275c:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 800275e:	fa31 f402 	lsrs.w	r4, r1, r2
 8002762:	d102      	bne.n	800276a <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8002764:	b003      	add	sp, #12
 8002766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800276a:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 800276e:	400f      	ands	r7, r1
 8002770:	d049      	beq.n	8002806 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8002772:	f022 0403 	bic.w	r4, r2, #3
 8002776:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800277a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800277e:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8002782:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002784:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002788:	fa08 f90c 	lsl.w	r9, r8, ip
 800278c:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002790:	4d22      	ldr	r5, [pc, #136]	; (800281c <HAL_GPIO_DeInit+0xd8>)
 8002792:	42a8      	cmp	r0, r5
 8002794:	d039      	beq.n	800280a <HAL_GPIO_DeInit+0xc6>
 8002796:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800279a:	42a8      	cmp	r0, r5
 800279c:	d037      	beq.n	800280e <HAL_GPIO_DeInit+0xca>
 800279e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027a2:	42a8      	cmp	r0, r5
 80027a4:	d035      	beq.n	8002812 <HAL_GPIO_DeInit+0xce>
 80027a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027aa:	42a8      	cmp	r0, r5
 80027ac:	bf0c      	ite	eq
 80027ae:	2503      	moveq	r5, #3
 80027b0:	2504      	movne	r5, #4
 80027b2:	fa05 f50c 	lsl.w	r5, r5, ip
 80027b6:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80027b8:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80027bc:	d10f      	bne.n	80027de <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80027be:	681d      	ldr	r5, [r3, #0]
 80027c0:	4035      	ands	r5, r6
 80027c2:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80027c4:	685d      	ldr	r5, [r3, #4]
 80027c6:	4035      	ands	r5, r6
 80027c8:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80027ca:	68dd      	ldr	r5, [r3, #12]
 80027cc:	4035      	ands	r5, r6
 80027ce:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80027d0:	689d      	ldr	r5, [r3, #8]
 80027d2:	4035      	ands	r5, r6
 80027d4:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80027d6:	68a5      	ldr	r5, [r4, #8]
 80027d8:	ea25 0509 	bic.w	r5, r5, r9
 80027dc:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027de:	2fff      	cmp	r7, #255	; 0xff
 80027e0:	bf94      	ite	ls
 80027e2:	4607      	movls	r7, r0
 80027e4:	9f01      	ldrhi	r7, [sp, #4]
 80027e6:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80027ea:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027ec:	bf88      	it	hi
 80027ee:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80027f0:	fa08 fc04 	lsl.w	ip, r8, r4
 80027f4:	ea25 050c 	bic.w	r5, r5, ip
 80027f8:	fa0b f404 	lsl.w	r4, fp, r4
 80027fc:	4325      	orrs	r5, r4
 80027fe:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002800:	68c4      	ldr	r4, [r0, #12]
 8002802:	4034      	ands	r4, r6
 8002804:	60c4      	str	r4, [r0, #12]
    position++;
 8002806:	3201      	adds	r2, #1
 8002808:	e7a9      	b.n	800275e <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800280a:	2500      	movs	r5, #0
 800280c:	e7d1      	b.n	80027b2 <HAL_GPIO_DeInit+0x6e>
 800280e:	2501      	movs	r5, #1
 8002810:	e7cf      	b.n	80027b2 <HAL_GPIO_DeInit+0x6e>
 8002812:	2502      	movs	r5, #2
 8002814:	e7cd      	b.n	80027b2 <HAL_GPIO_DeInit+0x6e>
 8002816:	bf00      	nop
 8002818:	40010400 	.word	0x40010400
 800281c:	40010800 	.word	0x40010800

08002820 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002820:	6883      	ldr	r3, [r0, #8]
 8002822:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002824:	bf14      	ite	ne
 8002826:	2001      	movne	r0, #1
 8002828:	2000      	moveq	r0, #0
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800282c:	b10a      	cbz	r2, 8002832 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800282e:	6101      	str	r1, [r0, #16]
  }
}
 8002830:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002832:	0409      	lsls	r1, r1, #16
 8002834:	e7fb      	b.n	800282e <HAL_GPIO_WritePin+0x2>

08002836 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002836:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002838:	ea01 0203 	and.w	r2, r1, r3
 800283c:	ea21 0103 	bic.w	r1, r1, r3
 8002840:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002844:	6101      	str	r1, [r0, #16]
}
 8002846:	4770      	bx	lr

08002848 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002848:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800284a:	4604      	mov	r4, r0
{
 800284c:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800284e:	b310      	cbz	r0, 8002896 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002850:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002854:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002858:	b91b      	cbnz	r3, 8002862 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800285a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800285e:	f003 fb2f 	bl	8005ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002862:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002864:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002866:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002868:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800286c:	f855 0b10 	ldr.w	r0, [r5], #16
 8002870:	f001 ff7b 	bl	800476a <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002876:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	1d27      	adds	r7, r4, #4
 800287c:	6033      	str	r3, [r6, #0]
 800287e:	4626      	mov	r6, r4
 8002880:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002884:	f856 0b10 	ldr.w	r0, [r6], #16
 8002888:	f001 ff5f 	bl	800474a <USB_CoreInit>
 800288c:	4605      	mov	r5, r0
 800288e:	b120      	cbz	r0, 800289a <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002890:	2302      	movs	r3, #2
 8002892:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002896:	2501      	movs	r5, #1
 8002898:	e04b      	b.n	8002932 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800289a:	4601      	mov	r1, r0
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	f001 ff6e 	bl	800477e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a4:	f04f 0e01 	mov.w	lr, #1
 80028a8:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028aa:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ac:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80028b0:	b2c8      	uxtb	r0, r1
 80028b2:	4584      	cmp	ip, r0
 80028b4:	f101 0101 	add.w	r1, r1, #1
 80028b8:	d81b      	bhi.n	80028f2 <HAL_PCD_Init+0xaa>
 80028ba:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028bc:	2528      	movs	r5, #40	; 0x28
 80028be:	4619      	mov	r1, r3
 80028c0:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	4584      	cmp	ip, r0
 80028c4:	f103 0301 	add.w	r3, r3, #1
 80028c8:	d81f      	bhi.n	800290a <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ca:	46ec      	mov	ip, sp
 80028cc:	4635      	mov	r5, r6
 80028ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80028d4:	682b      	ldr	r3, [r5, #0]
 80028d6:	f8cc 3000 	str.w	r3, [ip]
 80028da:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80028de:	6820      	ldr	r0, [r4, #0]
 80028e0:	f001 ff4f 	bl	8004782 <USB_DevInit>
 80028e4:	2301      	movs	r3, #1
 80028e6:	4605      	mov	r5, r0
 80028e8:	b1e0      	cbz	r0, 8002924 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ea:	2202      	movs	r2, #2
 80028ec:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80028f0:	e7d1      	b.n	8002896 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80028f2:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f6:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80028fa:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80028fe:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002902:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002908:	e7d2      	b.n	80028b0 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 800290a:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800290e:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8002912:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8002916:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800291a:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800291e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002922:	e7cd      	b.n	80028c0 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8002924:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8002928:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 800292a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800292e:	f002 f9e1 	bl	8004cf4 <USB_DevDisconnect>

  return HAL_OK;
}
 8002932:	4628      	mov	r0, r5
 8002934:	b007      	add	sp, #28
 8002936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002938 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002938:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800293a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 800293e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002940:	2b01      	cmp	r3, #1
 8002942:	d010      	beq.n	8002966 <HAL_PCD_Start+0x2e>
 8002944:	2501      	movs	r5, #1
 8002946:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800294a:	6800      	ldr	r0, [r0, #0]
 800294c:	f001 ff04 	bl	8004758 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002950:	4629      	mov	r1, r5
 8002952:	4620      	mov	r0, r4
 8002954:	f003 fbbf 	bl	80060d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002958:	6820      	ldr	r0, [r4, #0]
 800295a:	f002 f9c9 	bl	8004cf0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800295e:	2000      	movs	r0, #0
 8002960:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002964:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002966:	2002      	movs	r0, #2
 8002968:	e7fc      	b.n	8002964 <HAL_PCD_Start+0x2c>

0800296a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800296a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800296c:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8002970:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002972:	2a01      	cmp	r2, #1
 8002974:	d00b      	beq.n	800298e <HAL_PCD_SetAddress+0x24>
 8002976:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8002978:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800297c:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002980:	6800      	ldr	r0, [r0, #0]
 8002982:	f002 f9af 	bl	8004ce4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002986:	2000      	movs	r0, #0
 8002988:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800298c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800298e:	2002      	movs	r0, #2
 8002990:	e7fc      	b.n	800298c <HAL_PCD_SetAddress+0x22>
	...

08002994 <HAL_PCD_IRQHandler>:
{
 8002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002998:	4604      	mov	r4, r0
 800299a:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800299c:	6800      	ldr	r0, [r0, #0]
 800299e:	f002 f9ab 	bl	8004cf8 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80029a2:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 80029a6:	f000 8424 	beq.w	80031f2 <HAL_PCD_IRQHandler+0x85e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029aa:	f8df 931c 	ldr.w	r9, [pc, #796]	; 8002cc8 <HAL_PCD_IRQHandler+0x334>
 80029ae:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8002ccc <HAL_PCD_IRQHandler+0x338>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029b2:	6820      	ldr	r0, [r4, #0]
 80029b4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80029b8:	041f      	lsls	r7, r3, #16
 80029ba:	d402      	bmi.n	80029c2 <HAL_PCD_IRQHandler+0x2e>
}
 80029bc:	b005      	add	sp, #20
 80029be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80029c2:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 80029c6:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 80029c8:	f016 060f 	ands.w	r6, r6, #15
 80029cc:	f040 80c6 	bne.w	8002b5c <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029d0:	f011 0110 	ands.w	r1, r1, #16
 80029d4:	d12b      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029d6:	8803      	ldrh	r3, [r0, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	ea03 0309 	and.w	r3, r3, r9
 80029de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029e4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80029e8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80029f6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80029fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8002a00:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a02:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a04:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8002a06:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a08:	f003 fa89 	bl	8005f1e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a0c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ce      	beq.n	80029b2 <HAL_PCD_IRQHandler+0x1e>
 8002a14:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a16:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d1ca      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a1c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a24:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a28:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002a2c:	e7c1      	b.n	80029b2 <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a2e:	8805      	ldrh	r5, [r0, #0]
 8002a30:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a32:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8002a36:	d021      	beq.n	8002a7c <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a3c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a4a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a4e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a56:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a5a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002a5e:	f002 fb79 	bl	8005154 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a62:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002a64:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a66:	8813      	ldrh	r3, [r2, #0]
 8002a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6c:	051b      	lsls	r3, r3, #20
 8002a6e:	0d1b      	lsrs	r3, r3, #20
 8002a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a74:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002a76:	f003 fa43 	bl	8005f00 <HAL_PCD_SetupStageCallback>
 8002a7a:	e79a      	b.n	80029b2 <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a7c:	0419      	lsls	r1, r3, #16
 8002a7e:	d598      	bpl.n	80029b2 <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a80:	8803      	ldrh	r3, [r0, #0]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	0d1b      	lsrs	r3, r3, #20
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a90:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a94:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002aa2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aaa:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002aae:	b18b      	cbz	r3, 8002ad4 <HAL_PCD_IRQHandler+0x140>
 8002ab0:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002ab4:	b171      	cbz	r1, 8002ad4 <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ab6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002aba:	f002 fb4b 	bl	8005154 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002abe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002ac2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ac6:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002ac8:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002aca:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8002acc:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ad0:	f003 fa1c 	bl	8005f0c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ad4:	6821      	ldr	r1, [r4, #0]
 8002ad6:	880a      	ldrh	r2, [r1, #0]
 8002ad8:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002ada:	0512      	lsls	r2, r2, #20
 8002adc:	f53f af69 	bmi.w	80029b2 <HAL_PCD_IRQHandler+0x1e>
 8002ae0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ae8:	f43f af63 	beq.w	80029b2 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002aec:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002af0:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	5ac2      	ldrh	r2, [r0, r3]
 8002af8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002afc:	52c2      	strh	r2, [r0, r3]
 8002afe:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8002b02:	2a3e      	cmp	r2, #62	; 0x3e
 8002b04:	d90c      	bls.n	8002b20 <HAL_PCD_IRQHandler+0x18c>
 8002b06:	0955      	lsrs	r5, r2, #5
 8002b08:	06d7      	lsls	r7, r2, #27
 8002b0a:	5ac2      	ldrh	r2, [r0, r3]
 8002b0c:	bf08      	it	eq
 8002b0e:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8002b12:	b292      	uxth	r2, r2
 8002b14:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002b18:	ea42 0208 	orr.w	r2, r2, r8
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	e004      	b.n	8002b2a <HAL_PCD_IRQHandler+0x196>
 8002b20:	b99a      	cbnz	r2, 8002b4a <HAL_PCD_IRQHandler+0x1b6>
 8002b22:	5ac2      	ldrh	r2, [r0, r3]
 8002b24:	b292      	uxth	r2, r2
 8002b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b2a:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b2c:	880b      	ldrh	r3, [r1, #0]
 8002b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	0c1b      	lsrs	r3, r3, #16
 8002b3a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	800b      	strh	r3, [r1, #0]
 8002b48:	e733      	b.n	80029b2 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b4a:	0855      	lsrs	r5, r2, #1
 8002b4c:	07d6      	lsls	r6, r2, #31
 8002b4e:	5ac2      	ldrh	r2, [r0, r3]
 8002b50:	bf48      	it	mi
 8002b52:	3501      	addmi	r5, #1
 8002b54:	b292      	uxth	r2, r2
 8002b56:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002b5a:	e7df      	b.n	8002b1c <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b5c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b60:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b62:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b64:	f140 80f1 	bpl.w	8002d4a <HAL_PCD_IRQHandler+0x3b6>
        if (ep->doublebuffer == 0U)
 8002b68:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b6a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b6e:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	0d1b      	lsrs	r3, r3, #20
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b82:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002b86:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8002b8a:	b9b3      	cbnz	r3, 8002bba <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b8c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b90:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3306      	adds	r3, #6
 8002b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b9c:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002ba0:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8002ba4:	2d00      	cmp	r5, #0
 8002ba6:	f000 80b4 	beq.w	8002d12 <HAL_PCD_IRQHandler+0x37e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002baa:	462b      	mov	r3, r5
 8002bac:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bb0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002bb4:	f002 face 	bl	8005154 <USB_ReadPMA>
 8002bb8:	e0ab      	b.n	8002d12 <HAL_PCD_IRQHandler+0x37e>
          if (ep->type == EP_TYPE_BULK)
 8002bba:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bbe:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 8002bc2:	2a02      	cmp	r2, #2
 8002bc4:	f040 8084 	bne.w	8002cd0 <HAL_PCD_IRQHandler+0x33c>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bc8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bcc:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd0:	b2ad      	uxth	r5, r5
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bd2:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8002bd6:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bda:	445d      	add	r5, fp
 8002bdc:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002be0:	d039      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x2c2>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002be2:	3502      	adds	r5, #2
 8002be4:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002be8:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 8002bec:	4295      	cmp	r5, r2
 8002bee:	d913      	bls.n	8002c18 <HAL_PCD_IRQHandler+0x284>
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bf6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002bfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c02:	0412      	lsls	r2, r2, #16
 8002c04:	0c12      	lsrs	r2, r2, #16
 8002c06:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c12:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002c16:	e004      	b.n	8002c22 <HAL_PCD_IRQHandler+0x28e>
      ep->xfer_len -= count;
 8002c18:	1b52      	subs	r2, r2, r5
 8002c1a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002c1e:	2a00      	cmp	r2, #0
 8002c20:	d0e9      	beq.n	8002bf6 <HAL_PCD_IRQHandler+0x262>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c22:	f1be 0f00 	cmp.w	lr, #0
 8002c26:	d00d      	beq.n	8002c44 <HAL_PCD_IRQHandler+0x2b0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c28:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c2c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002c30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c34:	0412      	lsls	r2, r2, #16
 8002c36:	0c12      	lsrs	r2, r2, #16
 8002c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002c40:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8002c44:	2d00      	cmp	r5, #0
 8002c46:	d064      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x37e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c48:	2128      	movs	r1, #40	; 0x28
 8002c4a:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c4e:	462b      	mov	r3, r5
 8002c50:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002c54:	e7ac      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c56:	3506      	adds	r5, #6
 8002c58:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002c5c:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002c60:	4295      	cmp	r5, r2
 8002c62:	d912      	bls.n	8002c8a <HAL_PCD_IRQHandler+0x2f6>
 8002c64:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c68:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c74:	0412      	lsls	r2, r2, #16
 8002c76:	0c12      	lsrs	r2, r2, #16
 8002c78:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8002c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c84:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002c88:	e004      	b.n	8002c94 <HAL_PCD_IRQHandler+0x300>
      ep->xfer_len -= count;
 8002c8a:	1b52      	subs	r2, r2, r5
 8002c8c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	d0e9      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x2d4>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c94:	f1be 0f00 	cmp.w	lr, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x322>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002c9e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002ca2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ca6:	0412      	lsls	r2, r2, #16
 8002ca8:	0c12      	lsrs	r2, r2, #16
 8002caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cae:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002cb2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8002cb6:	b365      	cbz	r5, 8002d12 <HAL_PCD_IRQHandler+0x37e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cb8:	2128      	movs	r1, #40	; 0x28
 8002cba:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002cc4:	e774      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x21c>
 8002cc6:	bf00      	nop
 8002cc8:	ffff8f0f 	.word	0xffff8f0f
 8002ccc:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cd0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002cd4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002cd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cdc:	0412      	lsls	r2, r2, #16
 8002cde:	0c12      	lsrs	r2, r2, #16
 8002ce0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002ce8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002cec:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002cf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cf4:	00d2      	lsls	r2, r2, #3
 8002cf6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cfa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d00:	d055      	beq.n	8002dae <HAL_PCD_IRQHandler+0x41a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d02:	3302      	adds	r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002d0a:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002d0e:	2d00      	cmp	r5, #0
 8002d10:	d19d      	bne.n	8002c4e <HAL_PCD_IRQHandler+0x2ba>
        ep->xfer_count += count;
 8002d12:	2128      	movs	r1, #40	; 0x28
 8002d14:	4371      	muls	r1, r6
 8002d16:	1863      	adds	r3, r4, r1
 8002d18:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002d1c:	442a      	add	r2, r5
 8002d1e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002d22:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002d26:	442a      	add	r2, r5
 8002d28:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d2c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002d30:	b11a      	cbz	r2, 8002d3a <HAL_PCD_IRQHandler+0x3a6>
 8002d32:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002d36:	429d      	cmp	r5, r3
 8002d38:	d242      	bcs.n	8002dc0 <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d3a:	2328      	movs	r3, #40	; 0x28
 8002d3c:	fb03 4306 	mla	r3, r3, r6, r4
 8002d40:	4620      	mov	r0, r4
 8002d42:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002d46:	f003 f8e1 	bl	8005f0c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d4a:	063b      	lsls	r3, r7, #24
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d4c:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d4e:	f57f ae30 	bpl.w	80029b2 <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d52:	2228      	movs	r2, #40	; 0x28
 8002d54:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002d58:	fb02 4506 	mla	r5, r2, r6, r4
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	ea03 0309 	and.w	r3, r3, r9
 8002d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d66:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8002d6a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d150      	bne.n	8002e14 <HAL_PCD_IRQHandler+0x480>
          ep->xfer_len = 0U;
 8002d72:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 8002d74:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8002d78:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8002d7a:	b393      	cbz	r3, 8002de2 <HAL_PCD_IRQHandler+0x44e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d7c:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002d80:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002d84:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002d88:	d031      	beq.n	8002dee <HAL_PCD_IRQHandler+0x45a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8a:	bb02      	cbnz	r2, 8002dce <HAL_PCD_IRQHandler+0x43a>
 8002d8c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	b292      	uxth	r2, r2
 8002d94:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d98:	4410      	add	r0, r2
 8002d9a:	5a1a      	ldrh	r2, [r3, r0]
 8002d9c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002da0:	521a      	strh	r2, [r3, r0]
 8002da2:	5a1a      	ldrh	r2, [r3, r0]
 8002da4:	b292      	uxth	r2, r2
 8002da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002daa:	521a      	strh	r2, [r3, r0]
 8002dac:	e019      	b.n	8002de2 <HAL_PCD_IRQHandler+0x44e>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dae:	3306      	adds	r3, #6
 8002db0:	441a      	add	r2, r3
 8002db2:	f83c 5012 	ldrh.w	r5, [ip, r2, lsl #1]
 8002db6:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002dba:	2d00      	cmp	r5, #0
 8002dbc:	d0a9      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x37e>
 8002dbe:	e77e      	b.n	8002cbe <HAL_PCD_IRQHandler+0x32a>
        ep = &hpcd->OUT_ep[epindex];
 8002dc0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dc4:	6820      	ldr	r0, [r4, #0]
 8002dc6:	4421      	add	r1, r4
 8002dc8:	f001 ffac 	bl	8004d24 <USB_EPStartXfer>
 8002dcc:	e7bd      	b.n	8002d4a <HAL_PCD_IRQHandler+0x3b6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dce:	2a01      	cmp	r2, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x44e>
 8002dd2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002dd6:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8002dda:	b292      	uxth	r2, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4410      	add	r0, r2
 8002de0:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002de2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f003 f899 	bl	8005f1e <HAL_PCD_DataInStageCallback>
 8002dec:	e5e1      	b.n	80029b2 <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dee:	b932      	cbnz	r2, 8002dfe <HAL_PCD_IRQHandler+0x46a>
 8002df0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	b292      	uxth	r2, r2
 8002df8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002dfc:	e7cc      	b.n	8002d98 <HAL_PCD_IRQHandler+0x404>
 8002dfe:	2a01      	cmp	r2, #1
 8002e00:	d1ef      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x44e>
 8002e02:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002e06:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4410      	add	r0, r2
 8002e10:	521f      	strh	r7, [r3, r0]
 8002e12:	e7e6      	b.n	8002de2 <HAL_PCD_IRQHandler+0x44e>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e14:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e18:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8002e1c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e1e:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8002e22:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e26:	d11b      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x4cc>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e28:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002e2c:	b2bf      	uxth	r7, r7
 8002e2e:	4457      	add	r7, sl
 8002e30:	3702      	adds	r7, #2
 8002e32:	f83e 7017 	ldrh.w	r7, [lr, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8002e36:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8002e3a:	429f      	cmp	r7, r3
 8002e3c:	d302      	bcc.n	8002e44 <HAL_PCD_IRQHandler+0x4b0>
 8002e3e:	f8c5 c040 	str.w	ip, [r5, #64]	; 0x40
 8002e42:	e7d0      	b.n	8002de6 <HAL_PCD_IRQHandler+0x452>
              ep->xfer_len -= TxPctSize;
 8002e44:	1bdb      	subs	r3, r3, r7
 8002e46:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8002e48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8002e4a:	fb06 2202 	mla	r2, r6, r2, r2
              ep->xfer_buff += TxPctSize;
 8002e4e:	443b      	add	r3, r7
 8002e50:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8002e52:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e54:	18a1      	adds	r1, r4, r2
              ep->xfer_count += TxPctSize;
 8002e56:	443b      	add	r3, r7
 8002e58:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e5a:	f001 ff63 	bl	8004d24 <USB_EPStartXfer>
 8002e5e:	e5a8      	b.n	80029b2 <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e60:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e64:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	4452      	add	r2, sl
 8002e6c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e70:	f000 80dc 	beq.w	800302c <HAL_PCD_IRQHandler+0x698>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e74:	3202      	adds	r2, #2
 8002e76:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8002e7a:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 8002e7e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002e82:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8002e84:	bf28      	it	cs
 8002e86:	2300      	movcs	r3, #0
 8002e88:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8002e8c:	bf38      	it	cc
 8002e8e:	1a9b      	subcc	r3, r3, r2
 8002e90:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e94:	b2bf      	uxth	r7, r7
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d14d      	bne.n	8002f36 <HAL_PCD_IRQHandler+0x5a2>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e9a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	d136      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x57c>
 8002ea2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ea6:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	010b      	lsls	r3, r1, #4
 8002eae:	4416      	add	r6, r2
 8002eb0:	5af2      	ldrh	r2, [r6, r3]
 8002eb2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002eb6:	52f2      	strh	r2, [r6, r3]
 8002eb8:	5af2      	ldrh	r2, [r6, r3]
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec0:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ec2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ec6:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	4410      	add	r0, r2
 8002ece:	5ac2      	ldrh	r2, [r0, r3]
 8002ed0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002ed4:	52c2      	strh	r2, [r0, r3]
 8002ed6:	5ac2      	ldrh	r2, [r0, r3]
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ede:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f003 f81c 	bl	8005f1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ee6:	2f00      	cmp	r7, #0
 8002ee8:	f000 80dc 	beq.w	80030a4 <HAL_PCD_IRQHandler+0x710>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eec:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002ef0:	6822      	ldr	r2, [r4, #0]
 8002ef2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002f0e:	e0c9      	b.n	80030a4 <HAL_PCD_IRQHandler+0x710>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f10:	2a01      	cmp	r2, #1
 8002f12:	d1e5      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x54c>
 8002f14:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8002f18:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002f1c:	fa1f fc8c 	uxth.w	ip, ip
 8002f20:	010a      	lsls	r2, r1, #4
 8002f22:	4466      	add	r6, ip
 8002f24:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f26:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002f2a:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002f2e:	b2b6      	uxth	r6, r6
 8002f30:	4430      	add	r0, r6
 8002f32:	5283      	strh	r3, [r0, r2]
 8002f34:	e7d4      	b.n	8002ee0 <HAL_PCD_IRQHandler+0x54c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f36:	b16f      	cbz	r7, 8002f54 <HAL_PCD_IRQHandler+0x5c0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f38:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f50:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002f54:	2728      	movs	r7, #40	; 0x28
 8002f56:	fb07 4706 	mla	r7, r7, r6, r4
 8002f5a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	f040 80a0 	bne.w	80030a4 <HAL_PCD_IRQHandler+0x710>
        ep->xfer_buff += TxPctSize;
 8002f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f66:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002f6a:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 8002f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8002f70:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8002f74:	4413      	add	r3, r2
 8002f76:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	459e      	cmp	lr, r3
 8002f7c:	d32c      	bcc.n	8002fd8 <HAL_PCD_IRQHandler+0x644>
          ep->xfer_len_db -= len;
 8002f7e:	ebae 0203 	sub.w	r2, lr, r3
 8002f82:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f84:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002f88:	fa1f fe83 	uxth.w	lr, r3
 8002f8c:	2a00      	cmp	r2, #0
 8002f8e:	d141      	bne.n	8003014 <HAL_PCD_IRQHandler+0x680>
 8002f90:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002f94:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002f98:	b2bf      	uxth	r7, r7
 8002f9a:	443a      	add	r2, r7
 8002f9c:	0109      	lsls	r1, r1, #4
 8002f9e:	5a57      	ldrh	r7, [r2, r1]
 8002fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8002fa2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8002fa6:	5257      	strh	r7, [r2, r1]
 8002fa8:	d923      	bls.n	8002ff2 <HAL_PCD_IRQHandler+0x65e>
 8002faa:	06df      	lsls	r7, r3, #27
 8002fac:	5a57      	ldrh	r7, [r2, r1]
 8002fae:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 8002fb2:	bf08      	it	eq
 8002fb4:	f10a 3aff 	addeq.w	sl, sl, #4294967295
 8002fb8:	b2bf      	uxth	r7, r7
 8002fba:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 8002fbe:	ea47 0708 	orr.w	r7, r7, r8
 8002fc2:	b2bf      	uxth	r7, r7
 8002fc4:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fc6:	2228      	movs	r2, #40	; 0x28
 8002fc8:	4673      	mov	r3, lr
 8002fca:	4661      	mov	r1, ip
 8002fcc:	fb02 4206 	mla	r2, r2, r6, r4
 8002fd0:	8e12      	ldrh	r2, [r2, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fd2:	f001 fe97 	bl	8004d04 <USB_WritePMA>
 8002fd6:	e065      	b.n	80030a4 <HAL_PCD_IRQHandler+0x710>
        else if (ep->xfer_len_db == 0U)
 8002fd8:	f1be 0f00 	cmp.w	lr, #0
 8002fdc:	d103      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x652>
    if (ep->xfer_len > TxPctSize)
 8002fde:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8002fe0:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 8002fe4:	e7ce      	b.n	8002f84 <HAL_PCD_IRQHandler+0x5f0>
          ep->xfer_fill_db = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fee:	4673      	mov	r3, lr
 8002ff0:	e7c8      	b.n	8002f84 <HAL_PCD_IRQHandler+0x5f0>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ff2:	b92b      	cbnz	r3, 8003000 <HAL_PCD_IRQHandler+0x66c>
 8002ff4:	5a53      	ldrh	r3, [r2, r1]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffc:	5253      	strh	r3, [r2, r1]
 8002ffe:	e7e2      	b.n	8002fc6 <HAL_PCD_IRQHandler+0x632>
 8003000:	085f      	lsrs	r7, r3, #1
 8003002:	07db      	lsls	r3, r3, #31
 8003004:	5a53      	ldrh	r3, [r2, r1]
 8003006:	bf48      	it	mi
 8003008:	3701      	addmi	r7, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003010:	b29b      	uxth	r3, r3
 8003012:	e7f3      	b.n	8002ffc <HAL_PCD_IRQHandler+0x668>
 8003014:	2a01      	cmp	r2, #1
 8003016:	d1d6      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x632>
 8003018:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800301c:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8003020:	b292      	uxth	r2, r2
 8003022:	4413      	add	r3, r2
 8003024:	0109      	lsls	r1, r1, #4
 8003026:	f823 e001 	strh.w	lr, [r3, r1]
 800302a:	e7cc      	b.n	8002fc6 <HAL_PCD_IRQHandler+0x632>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800302c:	3206      	adds	r2, #6
 800302e:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003032:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 8003034:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003038:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800303a:	bf88      	it	hi
 800303c:	4663      	movhi	r3, ip
 800303e:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003042:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8003046:	bf98      	it	ls
 8003048:	1a9b      	subls	r3, r3, r2
 800304a:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800304e:	2b00      	cmp	r3, #0
 8003050:	d14e      	bne.n	80030f0 <HAL_PCD_IRQHandler+0x75c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003052:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003056:	2a00      	cmp	r2, #0
 8003058:	d137      	bne.n	80030ca <HAL_PCD_IRQHandler+0x736>
 800305a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800305e:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003062:	b292      	uxth	r2, r2
 8003064:	010b      	lsls	r3, r1, #4
 8003066:	4416      	add	r6, r2
 8003068:	5af2      	ldrh	r2, [r6, r3]
 800306a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800306e:	52f2      	strh	r2, [r6, r3]
 8003070:	5af2      	ldrh	r2, [r6, r3]
 8003072:	b292      	uxth	r2, r2
 8003074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003078:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800307a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800307e:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003082:	b292      	uxth	r2, r2
 8003084:	4410      	add	r0, r2
 8003086:	5ac2      	ldrh	r2, [r0, r3]
 8003088:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800308c:	52c2      	strh	r2, [r0, r3]
 800308e:	5ac2      	ldrh	r2, [r0, r3]
 8003090:	b292      	uxth	r2, r2
 8003092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003096:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003098:	4620      	mov	r0, r4
 800309a:	f002 ff40 	bl	8005f1e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800309e:	2f00      	cmp	r7, #0
 80030a0:	f43f af24 	beq.w	8002eec <HAL_PCD_IRQHandler+0x558>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030a4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80030bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80030c8:	e473      	b.n	80029b2 <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ca:	2a01      	cmp	r2, #1
 80030cc:	d1e4      	bne.n	8003098 <HAL_PCD_IRQHandler+0x704>
 80030ce:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 80030d2:	f200 4604 	addw	r6, r0, #1028	; 0x404
 80030d6:	fa1f fc8c 	uxth.w	ip, ip
 80030da:	010a      	lsls	r2, r1, #4
 80030dc:	4466      	add	r6, ip
 80030de:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030e0:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80030e4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80030e8:	b2b6      	uxth	r6, r6
 80030ea:	4430      	add	r0, r6
 80030ec:	5283      	strh	r3, [r0, r2]
 80030ee:	e7d3      	b.n	8003098 <HAL_PCD_IRQHandler+0x704>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030f0:	b96f      	cbnz	r7, 800310e <HAL_PCD_IRQHandler+0x77a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030f2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80030f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800310e:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003112:	fb0c 4c06 	mla	ip, ip, r6, r4
 8003116:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d1c2      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x710>
        ep->xfer_count += TxPctSize;
 800311e:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8003122:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8003126:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8003128:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 800312c:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003130:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8003134:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8003136:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 8003138:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800313c:	d327      	bcc.n	800318e <HAL_PCD_IRQHandler+0x7fa>
          ep->xfer_len_db -= len;
 800313e:	ebae 0203 	sub.w	r2, lr, r3
 8003142:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003146:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800314a:	fa1f fc83 	uxth.w	ip, r3
 800314e:	2a00      	cmp	r2, #0
 8003150:	d143      	bne.n	80031da <HAL_PCD_IRQHandler+0x846>
 8003152:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8003156:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800315a:	fa1f fe8e 	uxth.w	lr, lr
 800315e:	4472      	add	r2, lr
 8003160:	0109      	lsls	r1, r1, #4
 8003162:	f832 e001 	ldrh.w	lr, [r2, r1]
 8003166:	2b3e      	cmp	r3, #62	; 0x3e
 8003168:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800316c:	f822 e001 	strh.w	lr, [r2, r1]
 8003170:	d91b      	bls.n	80031aa <HAL_PCD_IRQHandler+0x816>
 8003172:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8003176:	06db      	lsls	r3, r3, #27
 8003178:	5a53      	ldrh	r3, [r2, r1]
 800317a:	bf08      	it	eq
 800317c:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8003180:	b29b      	uxth	r3, r3
 8003182:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8003186:	ea43 0308 	orr.w	r3, r3, r8
 800318a:	b29b      	uxth	r3, r3
 800318c:	e012      	b.n	80031b4 <HAL_PCD_IRQHandler+0x820>
        else if (ep->xfer_len_db == 0U)
 800318e:	f1be 0f00 	cmp.w	lr, #0
 8003192:	d103      	bne.n	800319c <HAL_PCD_IRQHandler+0x808>
    if (ep->xfer_len >= TxPctSize)
 8003194:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8003196:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 800319a:	e7d4      	b.n	8003146 <HAL_PCD_IRQHandler+0x7b2>
          ep->xfer_len_db = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80031a2:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 80031a6:	4673      	mov	r3, lr
 80031a8:	e7cd      	b.n	8003146 <HAL_PCD_IRQHandler+0x7b2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031aa:	b95b      	cbnz	r3, 80031c4 <HAL_PCD_IRQHandler+0x830>
 80031ac:	5a53      	ldrh	r3, [r2, r1]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b4:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031b6:	2328      	movs	r3, #40	; 0x28
 80031b8:	fb03 4606 	mla	r6, r3, r6, r4
 80031bc:	4639      	mov	r1, r7
 80031be:	4663      	mov	r3, ip
 80031c0:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80031c2:	e706      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x63e>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031c4:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 80031c8:	07db      	lsls	r3, r3, #31
 80031ca:	5a53      	ldrh	r3, [r2, r1]
 80031cc:	bf48      	it	mi
 80031ce:	f10e 0e01 	addmi.w	lr, lr, #1
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 80031d8:	e7d7      	b.n	800318a <HAL_PCD_IRQHandler+0x7f6>
 80031da:	2a01      	cmp	r2, #1
 80031dc:	d1eb      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x822>
 80031de:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80031e2:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 80031e6:	b292      	uxth	r2, r2
 80031e8:	4413      	add	r3, r2
 80031ea:	010a      	lsls	r2, r1, #4
 80031ec:	f823 c002 	strh.w	ip, [r3, r2]
 80031f0:	e7e1      	b.n	80031b6 <HAL_PCD_IRQHandler+0x822>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80031f2:	0546      	lsls	r6, r0, #21
 80031f4:	d512      	bpl.n	800321c <HAL_PCD_IRQHandler+0x888>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031f6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80031f8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031fa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80031fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800320a:	f002 fe94 	bl	8005f36 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800320e:	4629      	mov	r1, r5
 8003210:	4620      	mov	r0, r4
}
 8003212:	b005      	add	sp, #20
 8003214:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003218:	f7ff bba7 	b.w	800296a <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800321c:	0441      	lsls	r1, r0, #17
 800321e:	d50a      	bpl.n	8003236 <HAL_PCD_IRQHandler+0x8a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8003232:	f7ff bbc3 	b.w	80029bc <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003236:	0482      	lsls	r2, r0, #18
 8003238:	d505      	bpl.n	8003246 <HAL_PCD_IRQHandler+0x8b2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800323a:	6822      	ldr	r2, [r4, #0]
 800323c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003244:	e7f1      	b.n	800322a <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003246:	04c3      	lsls	r3, r0, #19
 8003248:	d519      	bpl.n	800327e <HAL_PCD_IRQHandler+0x8ea>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800324a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800324c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800324e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	041b      	lsls	r3, r3, #16
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800325e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003262:	f023 0308 	bic.w	r3, r3, #8
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800326e:	f002 fe85 	bl	8005f7c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800327c:	e7d5      	b.n	800322a <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800327e:	0507      	lsls	r7, r0, #20
 8003280:	d548      	bpl.n	8003314 <HAL_PCD_IRQHandler+0x980>
 8003282:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	4606      	mov	r6, r0
 8003288:	4611      	mov	r1, r2
 800328a:	4613      	mov	r3, r2
 800328c:	f102 0520 	add.w	r5, r2, #32
 8003290:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 8003294:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003296:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 800329a:	d1f9      	bne.n	8003290 <HAL_PCD_IRQHandler+0x8fc>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800329c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032aa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80032ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032be:	055e      	lsls	r6, r3, #21
 80032c0:	d5fb      	bpl.n	80032ba <HAL_PCD_IRQHandler+0x926>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80032d2:	f830 3b02 	ldrh.w	r3, [r0], #2
 80032d6:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 80032da:	428d      	cmp	r5, r1
 80032dc:	d1f9      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x93e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032de:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80032e2:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f043 0308 	orr.w	r3, r3, #8
 80032ea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032f6:	041b      	lsls	r3, r3, #16
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80032fe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003302:	b29b      	uxth	r3, r3
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800330c:	f002 fe26 	bl	8005f5c <HAL_PCD_SuspendCallback>
    return;
 8003310:	f7ff bb54 	b.w	80029bc <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003314:	0582      	lsls	r2, r0, #22
 8003316:	d50d      	bpl.n	8003334 <HAL_PCD_IRQHandler+0x9a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003318:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800331a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800331c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	0c1b      	lsrs	r3, r3, #16
 8003328:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800332c:	f002 fdff 	bl	8005f2e <HAL_PCD_SOFCallback>
    return;
 8003330:	f7ff bb44 	b.w	80029bc <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003334:	05c3      	lsls	r3, r0, #23
 8003336:	f57f ab41 	bpl.w	80029bc <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003344:	e771      	b.n	800322a <HAL_PCD_IRQHandler+0x896>
 8003346:	bf00      	nop

08003348 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003348:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4605      	mov	r5, r0
 8003350:	f001 0007 	and.w	r0, r1, #7
 8003354:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8003358:	d01a      	beq.n	8003390 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 800335a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	fb00 1101 	mla	r1, r0, r1, r1
 8003360:	4429      	add	r1, r5
    ep->is_in = 1U;
 8003362:	704c      	strb	r4, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 8003364:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8003366:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8003368:	bf08      	it	eq
 800336a:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800336c:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800336e:	bf08      	it	eq
 8003370:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8003372:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8003374:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8003378:	2b01      	cmp	r3, #1
 800337a:	d013      	beq.n	80033a4 <HAL_PCD_EP_Open+0x5c>
 800337c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800337e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8003380:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003384:	f001 fa12 	bl	80047ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003388:	2000      	movs	r0, #0
 800338a:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 800338e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8003390:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003392:	fb01 f400 	mul.w	r4, r1, r0
 8003396:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 800339a:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800339c:	4429      	add	r1, r5
    ep->is_in = 0U;
 800339e:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 80033a2:	e7df      	b.n	8003364 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80033a4:	2002      	movs	r0, #2
 80033a6:	e7f2      	b.n	800338e <HAL_PCD_EP_Open+0x46>

080033a8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80033a8:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80033ac:	b510      	push	{r4, lr}
 80033ae:	f001 0207 	and.w	r2, r1, #7
 80033b2:	4604      	mov	r4, r0
 80033b4:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80033b8:	d013      	beq.n	80033e2 <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 80033ba:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033bc:	fb02 1101 	mla	r1, r2, r1, r1
 80033c0:	4401      	add	r1, r0
    ep->is_in = 1U;
 80033c2:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80033c6:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d013      	beq.n	80033f6 <HAL_PCD_EP_Close+0x4e>
 80033ce:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033d0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80033d2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033d6:	f001 fb49 	bl	8004a6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033da:	2000      	movs	r0, #0
 80033dc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80033e0:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e2:	fb01 f302 	mul.w	r3, r1, r2
 80033e6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80033ea:	4401      	add	r1, r0
    ep->is_in = 0U;
 80033ec:	4403      	add	r3, r0
 80033ee:	2000      	movs	r0, #0
 80033f0:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80033f4:	e7e6      	b.n	80033c4 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 80033f6:	2002      	movs	r0, #2
 80033f8:	e7f2      	b.n	80033e0 <HAL_PCD_EP_Close+0x38>

080033fa <HAL_PCD_EP_Receive>:
{
 80033fa:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80033fc:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 80033fe:	2600      	movs	r6, #0
 8003400:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8003404:	434c      	muls	r4, r1
 8003406:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8003408:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340c:	f504 71b4 	add.w	r1, r4, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003410:	4401      	add	r1, r0
  ep->xfer_len = len;
 8003412:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 8003416:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 800341a:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800341e:	6800      	ldr	r0, [r0, #0]
 8003420:	f001 fc80 	bl	8004d24 <USB_EPStartXfer>
}
 8003424:	4630      	mov	r0, r6
 8003426:	bd70      	pop	{r4, r5, r6, pc}

08003428 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003428:	2328      	movs	r3, #40	; 0x28
 800342a:	f001 0107 	and.w	r1, r1, #7
 800342e:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003432:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8003436:	4770      	bx	lr

08003438 <HAL_PCD_EP_Transmit>:
{
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800343e:	2128      	movs	r1, #40	; 0x28
 8003440:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8003444:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8003446:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 800344a:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344c:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8003450:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003454:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8003456:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8003458:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800345a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800345e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003462:	6800      	ldr	r0, [r0, #0]
 8003464:	f001 fc5e 	bl	8004d24 <USB_EPStartXfer>
}
 8003468:	4630      	mov	r0, r6
 800346a:	bd70      	pop	{r4, r5, r6, pc}

0800346c <HAL_PCD_EP_SetStall>:
{
 800346c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800346e:	6843      	ldr	r3, [r0, #4]
 8003470:	f001 0507 	and.w	r5, r1, #7
 8003474:	429d      	cmp	r5, r3
{
 8003476:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003478:	d828      	bhi.n	80034cc <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800347a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800347e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8003482:	d01a      	beq.n	80034ba <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003484:	fb05 3303 	mla	r3, r5, r3, r3
 8003488:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 800348a:	2301      	movs	r3, #1
 800348c:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 800348e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003490:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003492:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8003494:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8003498:	429a      	cmp	r2, r3
 800349a:	d019      	beq.n	80034d0 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800349c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800349e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034a2:	f001 fbb6 	bl	8004c12 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034a6:	b925      	cbnz	r5, 80034b2 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80034ae:	f001 fc27 	bl	8004d00 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80034b8:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80034ba:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80034bc:	434b      	muls	r3, r1
 80034be:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80034c2:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80034c4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80034c6:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80034ca:	e7e0      	b.n	800348e <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80034cc:	2001      	movs	r0, #1
 80034ce:	e7f3      	b.n	80034b8 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80034d0:	2002      	movs	r0, #2
 80034d2:	e7f1      	b.n	80034b8 <HAL_PCD_EP_SetStall+0x4c>

080034d4 <HAL_PCD_EP_ClrStall>:
{
 80034d4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034d6:	6843      	ldr	r3, [r0, #4]
 80034d8:	f001 020f 	and.w	r2, r1, #15
 80034dc:	429a      	cmp	r2, r3
{
 80034de:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034e0:	d826      	bhi.n	8003530 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80034e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034e6:	f001 0207 	and.w	r2, r1, #7
 80034ea:	f04f 0128 	mov.w	r1, #40	; 0x28
 80034ee:	d015      	beq.n	800351c <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 80034f0:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f2:	fb02 1101 	mla	r1, r2, r1, r1
 80034f6:	4401      	add	r1, r0
    ep->is_in = 1U;
 80034f8:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 80034fa:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80034fc:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80034fe:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003500:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003504:	2b01      	cmp	r3, #1
 8003506:	d015      	beq.n	8003534 <HAL_PCD_EP_ClrStall+0x60>
 8003508:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800350a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800350c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003510:	f001 fb9f 	bl	8004c52 <USB_EPClearStall>
  return HAL_OK;
 8003514:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8003516:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 800351a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351c:	fb01 f302 	mul.w	r3, r1, r2
 8003520:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8003524:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003526:	4403      	add	r3, r0
 8003528:	2000      	movs	r0, #0
 800352a:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800352e:	e7e4      	b.n	80034fa <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8003530:	2001      	movs	r0, #1
 8003532:	e7f2      	b.n	800351a <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8003534:	2002      	movs	r0, #2
 8003536:	e7f0      	b.n	800351a <HAL_PCD_EP_ClrStall+0x46>

08003538 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003538:	b510      	push	{r4, lr}
 800353a:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800353c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003540:	bf1b      	ittet	ne
 8003542:	f001 0107 	andne.w	r1, r1, #7
 8003546:	fb01 4404 	mlane	r4, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800354a:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354e:	1900      	addne	r0, r0, r4
    ep = &hpcd->OUT_ep[ep_addr];
 8003550:	bf08      	it	eq
 8003552:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003556:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8003558:	b91a      	cbnz	r2, 8003562 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 800355a:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800355c:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800355e:	2000      	movs	r0, #0
 8003560:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8003562:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003564:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8003566:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003568:	e7f9      	b.n	800355e <HAL_PCDEx_PMAConfig+0x26>
	...

0800356c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800356c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003570:	4605      	mov	r5, r0
 8003572:	b338      	cbz	r0, 80035c4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003574:	6803      	ldr	r3, [r0, #0]
 8003576:	07db      	lsls	r3, r3, #31
 8003578:	d410      	bmi.n	800359c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	682b      	ldr	r3, [r5, #0]
 800357c:	079f      	lsls	r7, r3, #30
 800357e:	d45e      	bmi.n	800363e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	0719      	lsls	r1, r3, #28
 8003584:	f100 8095 	bmi.w	80036b2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	075a      	lsls	r2, r3, #29
 800358c:	f100 80c1 	bmi.w	8003712 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003590:	69e8      	ldr	r0, [r5, #28]
 8003592:	2800      	cmp	r0, #0
 8003594:	f040 812c 	bne.w	80037f0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8003598:	2000      	movs	r0, #0
 800359a:	e029      	b.n	80035f0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800359c:	4c90      	ldr	r4, [pc, #576]	; (80037e0 <HAL_RCC_OscConfig+0x274>)
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d007      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035a8:	6863      	ldr	r3, [r4, #4]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d10a      	bne.n	80035c8 <HAL_RCC_OscConfig+0x5c>
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	03de      	lsls	r6, r3, #15
 80035b6:	d507      	bpl.n	80035c8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	039c      	lsls	r4, r3, #14
 80035bc:	d5dd      	bpl.n	800357a <HAL_RCC_OscConfig+0xe>
 80035be:	686b      	ldr	r3, [r5, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1da      	bne.n	800357a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80035c4:	2001      	movs	r0, #1
 80035c6:	e013      	b.n	80035f0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c8:	686b      	ldr	r3, [r5, #4]
 80035ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ce:	d112      	bne.n	80035f6 <HAL_RCC_OscConfig+0x8a>
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035d8:	f7fe fdb6 	bl	8002148 <HAL_GetTick>
 80035dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	0398      	lsls	r0, r3, #14
 80035e2:	d4ca      	bmi.n	800357a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fe fdb0 	bl	8002148 <HAL_GetTick>
 80035e8:	1b80      	subs	r0, r0, r6
 80035ea:	2864      	cmp	r0, #100	; 0x64
 80035ec:	d9f7      	bls.n	80035de <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80035ee:	2003      	movs	r0, #3
}
 80035f0:	b002      	add	sp, #8
 80035f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f6:	b99b      	cbnz	r3, 8003620 <HAL_RCC_OscConfig+0xb4>
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003606:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003608:	f7fe fd9e 	bl	8002148 <HAL_GetTick>
 800360c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	0399      	lsls	r1, r3, #14
 8003612:	d5b2      	bpl.n	800357a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fd98 	bl	8002148 <HAL_GetTick>
 8003618:	1b80      	subs	r0, r0, r6
 800361a:	2864      	cmp	r0, #100	; 0x64
 800361c:	d9f7      	bls.n	800360e <HAL_RCC_OscConfig+0xa2>
 800361e:	e7e6      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	d103      	bne.n	8003630 <HAL_RCC_OscConfig+0xc4>
 8003628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	e7cf      	b.n	80035d0 <HAL_RCC_OscConfig+0x64>
 8003630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363c:	e7cb      	b.n	80035d6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800363e:	4c68      	ldr	r4, [pc, #416]	; (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003640:	6863      	ldr	r3, [r4, #4]
 8003642:	f013 0f0c 	tst.w	r3, #12
 8003646:	d007      	beq.n	8003658 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b08      	cmp	r3, #8
 8003650:	d110      	bne.n	8003674 <HAL_RCC_OscConfig+0x108>
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	03da      	lsls	r2, r3, #15
 8003656:	d40d      	bmi.n	8003674 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	079b      	lsls	r3, r3, #30
 800365c:	d502      	bpl.n	8003664 <HAL_RCC_OscConfig+0xf8>
 800365e:	692b      	ldr	r3, [r5, #16]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d1af      	bne.n	80035c4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	696a      	ldr	r2, [r5, #20]
 8003668:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800366c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	e785      	b.n	8003580 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003674:	692a      	ldr	r2, [r5, #16]
 8003676:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <HAL_RCC_OscConfig+0x278>)
 8003678:	b16a      	cbz	r2, 8003696 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800367e:	f7fe fd63 	bl	8002148 <HAL_GetTick>
 8003682:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	079f      	lsls	r7, r3, #30
 8003688:	d4ec      	bmi.n	8003664 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368a:	f7fe fd5d 	bl	8002148 <HAL_GetTick>
 800368e:	1b80      	subs	r0, r0, r6
 8003690:	2802      	cmp	r0, #2
 8003692:	d9f7      	bls.n	8003684 <HAL_RCC_OscConfig+0x118>
 8003694:	e7ab      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003696:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003698:	f7fe fd56 	bl	8002148 <HAL_GetTick>
 800369c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	0798      	lsls	r0, r3, #30
 80036a2:	f57f af6d 	bpl.w	8003580 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fe fd4f 	bl	8002148 <HAL_GetTick>
 80036aa:	1b80      	subs	r0, r0, r6
 80036ac:	2802      	cmp	r0, #2
 80036ae:	d9f6      	bls.n	800369e <HAL_RCC_OscConfig+0x132>
 80036b0:	e79d      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b2:	69aa      	ldr	r2, [r5, #24]
 80036b4:	4e4a      	ldr	r6, [pc, #296]	; (80037e0 <HAL_RCC_OscConfig+0x274>)
 80036b6:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_RCC_OscConfig+0x278>)
 80036b8:	b1e2      	cbz	r2, 80036f4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80036ba:	2201      	movs	r2, #1
 80036bc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80036c0:	f7fe fd42 	bl	8002148 <HAL_GetTick>
 80036c4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036c8:	079b      	lsls	r3, r3, #30
 80036ca:	d50d      	bpl.n	80036e8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80036d0:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <HAL_RCC_OscConfig+0x27c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80036da:	bf00      	nop
  }
  while (Delay --);
 80036dc:	9b01      	ldr	r3, [sp, #4]
 80036de:	1e5a      	subs	r2, r3, #1
 80036e0:	9201      	str	r2, [sp, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f9      	bne.n	80036da <HAL_RCC_OscConfig+0x16e>
 80036e6:	e74f      	b.n	8003588 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe fd2e 	bl	8002148 <HAL_GetTick>
 80036ec:	1b00      	subs	r0, r0, r4
 80036ee:	2802      	cmp	r0, #2
 80036f0:	d9e9      	bls.n	80036c6 <HAL_RCC_OscConfig+0x15a>
 80036f2:	e77c      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80036f4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80036f8:	f7fe fd26 	bl	8002148 <HAL_GetTick>
 80036fc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003700:	079f      	lsls	r7, r3, #30
 8003702:	f57f af41 	bpl.w	8003588 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003706:	f7fe fd1f 	bl	8002148 <HAL_GetTick>
 800370a:	1b00      	subs	r0, r0, r4
 800370c:	2802      	cmp	r0, #2
 800370e:	d9f6      	bls.n	80036fe <HAL_RCC_OscConfig+0x192>
 8003710:	e76d      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003712:	4c33      	ldr	r4, [pc, #204]	; (80037e0 <HAL_RCC_OscConfig+0x274>)
 8003714:	69e3      	ldr	r3, [r4, #28]
 8003716:	00d8      	lsls	r0, r3, #3
 8003718:	d424      	bmi.n	8003764 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800371a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	69e3      	ldr	r3, [r4, #28]
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	61e3      	str	r3, [r4, #28]
 8003724:	69e3      	ldr	r3, [r4, #28]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4e2f      	ldr	r6, [pc, #188]	; (80037ec <HAL_RCC_OscConfig+0x280>)
 8003730:	6833      	ldr	r3, [r6, #0]
 8003732:	05d9      	lsls	r1, r3, #23
 8003734:	d518      	bpl.n	8003768 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003736:	68eb      	ldr	r3, [r5, #12]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d126      	bne.n	800378a <HAL_RCC_OscConfig+0x21e>
 800373c:	6a23      	ldr	r3, [r4, #32]
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003744:	f7fe fd00 	bl	8002148 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800374c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	6a23      	ldr	r3, [r4, #32]
 8003750:	079b      	lsls	r3, r3, #30
 8003752:	d53f      	bpl.n	80037d4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003754:	2f00      	cmp	r7, #0
 8003756:	f43f af1b 	beq.w	8003590 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	69e3      	ldr	r3, [r4, #28]
 800375c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003760:	61e3      	str	r3, [r4, #28]
 8003762:	e715      	b.n	8003590 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003764:	2700      	movs	r7, #0
 8003766:	e7e2      	b.n	800372e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003768:	6833      	ldr	r3, [r6, #0]
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003770:	f7fe fcea 	bl	8002148 <HAL_GetTick>
 8003774:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	6833      	ldr	r3, [r6, #0]
 8003778:	05da      	lsls	r2, r3, #23
 800377a:	d4dc      	bmi.n	8003736 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe fce4 	bl	8002148 <HAL_GetTick>
 8003780:	eba0 0008 	sub.w	r0, r0, r8
 8003784:	2864      	cmp	r0, #100	; 0x64
 8003786:	d9f6      	bls.n	8003776 <HAL_RCC_OscConfig+0x20a>
 8003788:	e731      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378a:	b9ab      	cbnz	r3, 80037b8 <HAL_RCC_OscConfig+0x24c>
 800378c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	6223      	str	r3, [r4, #32]
 8003798:	6a23      	ldr	r3, [r4, #32]
 800379a:	f023 0304 	bic.w	r3, r3, #4
 800379e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80037a0:	f7fe fcd2 	bl	8002148 <HAL_GetTick>
 80037a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	6a23      	ldr	r3, [r4, #32]
 80037a8:	0798      	lsls	r0, r3, #30
 80037aa:	d5d3      	bpl.n	8003754 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fe fccc 	bl	8002148 <HAL_GetTick>
 80037b0:	1b80      	subs	r0, r0, r6
 80037b2:	4540      	cmp	r0, r8
 80037b4:	d9f7      	bls.n	80037a6 <HAL_RCC_OscConfig+0x23a>
 80037b6:	e71a      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	6a23      	ldr	r3, [r4, #32]
 80037bc:	d103      	bne.n	80037c6 <HAL_RCC_OscConfig+0x25a>
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	6223      	str	r3, [r4, #32]
 80037c4:	e7ba      	b.n	800373c <HAL_RCC_OscConfig+0x1d0>
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6223      	str	r3, [r4, #32]
 80037cc:	6a23      	ldr	r3, [r4, #32]
 80037ce:	f023 0304 	bic.w	r3, r3, #4
 80037d2:	e7b6      	b.n	8003742 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe fcb8 	bl	8002148 <HAL_GetTick>
 80037d8:	1b80      	subs	r0, r0, r6
 80037da:	4540      	cmp	r0, r8
 80037dc:	d9b7      	bls.n	800374e <HAL_RCC_OscConfig+0x1e2>
 80037de:	e706      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	42420000 	.word	0x42420000
 80037e8:	20000000 	.word	0x20000000
 80037ec:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f0:	4c2a      	ldr	r4, [pc, #168]	; (800389c <HAL_RCC_OscConfig+0x330>)
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d03e      	beq.n	800387a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fc:	2200      	movs	r2, #0
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_RCC_OscConfig+0x334>)
 8003800:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003802:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003804:	d12c      	bne.n	8003860 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8003806:	f7fe fc9f 	bl	8002148 <HAL_GetTick>
 800380a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	0199      	lsls	r1, r3, #6
 8003810:	d420      	bmi.n	8003854 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003812:	6a2b      	ldr	r3, [r5, #32]
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003818:	d105      	bne.n	8003826 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800381a:	6862      	ldr	r2, [r4, #4]
 800381c:	68a9      	ldr	r1, [r5, #8]
 800381e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003822:	430a      	orrs	r2, r1
 8003824:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003826:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003828:	6862      	ldr	r2, [r4, #4]
 800382a:	430b      	orrs	r3, r1
 800382c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003830:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8003832:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003834:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003836:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_RCC_OscConfig+0x334>)
 8003838:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800383a:	f7fe fc85 	bl	8002148 <HAL_GetTick>
 800383e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	019a      	lsls	r2, r3, #6
 8003844:	f53f aea8 	bmi.w	8003598 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe fc7e 	bl	8002148 <HAL_GetTick>
 800384c:	1b40      	subs	r0, r0, r5
 800384e:	2802      	cmp	r0, #2
 8003850:	d9f6      	bls.n	8003840 <HAL_RCC_OscConfig+0x2d4>
 8003852:	e6cc      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe fc78 	bl	8002148 <HAL_GetTick>
 8003858:	1b80      	subs	r0, r0, r6
 800385a:	2802      	cmp	r0, #2
 800385c:	d9d6      	bls.n	800380c <HAL_RCC_OscConfig+0x2a0>
 800385e:	e6c6      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003860:	f7fe fc72 	bl	8002148 <HAL_GetTick>
 8003864:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	f57f ae95 	bpl.w	8003598 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386e:	f7fe fc6b 	bl	8002148 <HAL_GetTick>
 8003872:	1b40      	subs	r0, r0, r5
 8003874:	2802      	cmp	r0, #2
 8003876:	d9f6      	bls.n	8003866 <HAL_RCC_OscConfig+0x2fa>
 8003878:	e6b9      	b.n	80035ee <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800387a:	2801      	cmp	r0, #1
 800387c:	f43f aeb8 	beq.w	80035f0 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003880:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	6a2a      	ldr	r2, [r5, #32]
 8003884:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003888:	4291      	cmp	r1, r2
 800388a:	f47f ae9b 	bne.w	80035c4 <HAL_RCC_OscConfig+0x58>
 800388e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003890:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003894:	4293      	cmp	r3, r2
 8003896:	f43f ae7f 	beq.w	8003598 <HAL_RCC_OscConfig+0x2c>
 800389a:	e693      	b.n	80035c4 <HAL_RCC_OscConfig+0x58>
 800389c:	40021000 	.word	0x40021000
 80038a0:	42420000 	.word	0x42420000

080038a4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80038a4:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <HAL_RCC_GetSysClockFreq+0x38>)
 80038a6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80038a8:	f003 010c 	and.w	r1, r3, #12
 80038ac:	2908      	cmp	r1, #8
 80038ae:	d112      	bne.n	80038d6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b0:	480b      	ldr	r0, [pc, #44]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038b2:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b6:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b8:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ba:	d509      	bpl.n	80038d0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038bc:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x44>)
 80038c8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80038ce:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_RCC_GetSysClockFreq+0x48>)
 80038d2:	4358      	muls	r0, r3
 80038d4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80038d6:	4803      	ldr	r0, [pc, #12]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	080094df 	.word	0x080094df
 80038e4:	007a1200 	.word	0x007a1200
 80038e8:	080094ef 	.word	0x080094ef
 80038ec:	003d0900 	.word	0x003d0900

080038f0 <HAL_RCC_ClockConfig>:
{
 80038f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80038f6:	4604      	mov	r4, r0
 80038f8:	b910      	cbnz	r0, 8003900 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80038fa:	2001      	movs	r0, #1
}
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4a44      	ldr	r2, [pc, #272]	; (8003a14 <HAL_RCC_ClockConfig+0x124>)
 8003902:	6813      	ldr	r3, [r2, #0]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	428b      	cmp	r3, r1
 800390a:	d328      	bcc.n	800395e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390c:	6821      	ldr	r1, [r4, #0]
 800390e:	078e      	lsls	r6, r1, #30
 8003910:	d430      	bmi.n	8003974 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003912:	07ca      	lsls	r2, r1, #31
 8003914:	d443      	bmi.n	800399e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003916:	4a3f      	ldr	r2, [pc, #252]	; (8003a14 <HAL_RCC_ClockConfig+0x124>)
 8003918:	6813      	ldr	r3, [r2, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	42ab      	cmp	r3, r5
 8003920:	d865      	bhi.n	80039ee <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	4d3c      	ldr	r5, [pc, #240]	; (8003a18 <HAL_RCC_ClockConfig+0x128>)
 8003926:	f012 0f04 	tst.w	r2, #4
 800392a:	d16c      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	0713      	lsls	r3, r2, #28
 800392e:	d506      	bpl.n	800393e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003930:	686b      	ldr	r3, [r5, #4]
 8003932:	6922      	ldr	r2, [r4, #16]
 8003934:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003938:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800393c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800393e:	f7ff ffb1 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003942:	686b      	ldr	r3, [r5, #4]
 8003944:	4a35      	ldr	r2, [pc, #212]	; (8003a1c <HAL_RCC_ClockConfig+0x12c>)
 8003946:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	40d8      	lsrs	r0, r3
 800394e:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <HAL_RCC_ClockConfig+0x130>)
 8003950:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <HAL_RCC_ClockConfig+0x134>)
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	f7fe fbb5 	bl	80020c4 <HAL_InitTick>
  return HAL_OK;
 800395a:	2000      	movs	r0, #0
 800395c:	e7ce      	b.n	80038fc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	6813      	ldr	r3, [r2, #0]
 8003960:	f023 0307 	bic.w	r3, r3, #7
 8003964:	430b      	orrs	r3, r1
 8003966:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003968:	6813      	ldr	r3, [r2, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	428b      	cmp	r3, r1
 8003970:	d1c3      	bne.n	80038fa <HAL_RCC_ClockConfig+0xa>
 8003972:	e7cb      	b.n	800390c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	4b28      	ldr	r3, [pc, #160]	; (8003a18 <HAL_RCC_ClockConfig+0x128>)
 8003976:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397a:	bf1e      	ittt	ne
 800397c:	685a      	ldrne	r2, [r3, #4]
 800397e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003982:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003986:	bf42      	ittt	mi
 8003988:	685a      	ldrmi	r2, [r3, #4]
 800398a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800398e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68a0      	ldr	r0, [r4, #8]
 8003994:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003998:	4302      	orrs	r2, r0
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	e7b9      	b.n	8003912 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399e:	6862      	ldr	r2, [r4, #4]
 80039a0:	4e1d      	ldr	r6, [pc, #116]	; (8003a18 <HAL_RCC_ClockConfig+0x128>)
 80039a2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	d11a      	bne.n	80039de <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ac:	d0a5      	beq.n	80038fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b4:	f023 0303 	bic.w	r3, r3, #3
 80039b8:	4313      	orrs	r3, r2
 80039ba:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80039bc:	f7fe fbc4 	bl	8002148 <HAL_GetTick>
 80039c0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	6873      	ldr	r3, [r6, #4]
 80039c4:	6862      	ldr	r2, [r4, #4]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039ce:	d0a2      	beq.n	8003916 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe fbba 	bl	8002148 <HAL_GetTick>
 80039d4:	1bc0      	subs	r0, r0, r7
 80039d6:	4540      	cmp	r0, r8
 80039d8:	d9f3      	bls.n	80039c2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80039da:	2003      	movs	r0, #3
 80039dc:	e78e      	b.n	80038fc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039de:	2a02      	cmp	r2, #2
 80039e0:	d102      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039e6:	e7e1      	b.n	80039ac <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	f013 0f02 	tst.w	r3, #2
 80039ec:	e7de      	b.n	80039ac <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	f023 0307 	bic.w	r3, r3, #7
 80039f4:	432b      	orrs	r3, r5
 80039f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f8:	6813      	ldr	r3, [r2, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	42ab      	cmp	r3, r5
 8003a00:	f47f af7b 	bne.w	80038fa <HAL_RCC_ClockConfig+0xa>
 8003a04:	e78d      	b.n	8003922 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a06:	686b      	ldr	r3, [r5, #4]
 8003a08:	68e1      	ldr	r1, [r4, #12]
 8003a0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	606b      	str	r3, [r5, #4]
 8003a12:	e78b      	b.n	800392c <HAL_RCC_ClockConfig+0x3c>
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	080092e8 	.word	0x080092e8
 8003a20:	20000000 	.word	0x20000000
 8003a24:	20000050 	.word	0x20000050

08003a28 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	4a03      	ldr	r2, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a36:	6810      	ldr	r0, [r2, #0]
}
 8003a38:	40d8      	lsrs	r0, r3
 8003a3a:	4770      	bx	lr
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	080092f8 	.word	0x080092f8
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <HAL_RCC_GetPCLK2Freq+0x14>)
 8003a4a:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	4a03      	ldr	r2, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a56:	6810      	ldr	r0, [r2, #0]
}
 8003a58:	40d8      	lsrs	r0, r3
 8003a5a:	4770      	bx	lr
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	080092f8 	.word	0x080092f8
 8003a64:	20000000 	.word	0x20000000

08003a68 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a68:	6803      	ldr	r3, [r0, #0]
{
 8003a6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a6e:	07d9      	lsls	r1, r3, #31
{
 8003a70:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a72:	d521      	bpl.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a74:	4c36      	ldr	r4, [pc, #216]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a76:	69e3      	ldr	r3, [r4, #28]
 8003a78:	00da      	lsls	r2, r3, #3
 8003a7a:	d433      	bmi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003a7c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	69e3      	ldr	r3, [r4, #28]
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a84:	61e3      	str	r3, [r4, #28]
 8003a86:	69e3      	ldr	r3, [r4, #28]
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4f30      	ldr	r7, [pc, #192]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	05db      	lsls	r3, r3, #23
 8003a96:	d527      	bpl.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a98:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a9a:	686a      	ldr	r2, [r5, #4]
 8003a9c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003aa0:	d136      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa2:	6a23      	ldr	r3, [r4, #32]
 8003aa4:	686a      	ldr	r2, [r5, #4]
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aae:	b11e      	cbz	r6, 8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	69e3      	ldr	r3, [r4, #28]
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab8:	6828      	ldr	r0, [r5, #0]
 8003aba:	0783      	lsls	r3, r0, #30
 8003abc:	d506      	bpl.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003abe:	4924      	ldr	r1, [pc, #144]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ac0:	68ab      	ldr	r3, [r5, #8]
 8003ac2:	684a      	ldr	r2, [r1, #4]
 8003ac4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003acc:	f010 0010 	ands.w	r0, r0, #16
 8003ad0:	d01b      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ad4:	68e9      	ldr	r1, [r5, #12]
 8003ad6:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ad8:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ada:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	6053      	str	r3, [r2, #4]
 8003ae2:	e012      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8003ae4:	2600      	movs	r6, #0
 8003ae6:	e7d3      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003af0:	f7fe fb2a 	bl	8002148 <HAL_GetTick>
 8003af4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	05d8      	lsls	r0, r3, #23
 8003afa:	d4cd      	bmi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afc:	f7fe fb24 	bl	8002148 <HAL_GetTick>
 8003b00:	eba0 0008 	sub.w	r0, r0, r8
 8003b04:	2864      	cmp	r0, #100	; 0x64
 8003b06:	d9f6      	bls.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8003b08:	2003      	movs	r0, #3
}
 8003b0a:	b002      	add	sp, #8
 8003b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b10:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d0c4      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b18:	2001      	movs	r0, #1
 8003b1a:	4a0f      	ldr	r2, [pc, #60]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b1c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b1e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b22:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b28:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8003b2c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b2e:	07d9      	lsls	r1, r3, #31
 8003b30:	d5b7      	bpl.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8003b32:	f7fe fb09 	bl	8002148 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003b3a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3c:	6a23      	ldr	r3, [r4, #32]
 8003b3e:	079a      	lsls	r2, r3, #30
 8003b40:	d4af      	bmi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fe fb01 	bl	8002148 <HAL_GetTick>
 8003b46:	1bc0      	subs	r0, r0, r7
 8003b48:	4540      	cmp	r0, r8
 8003b4a:	d9f7      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b4c:	e7dc      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42420000 	.word	0x42420000

08003b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b5c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b5e:	4604      	mov	r4, r0
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d051      	beq.n	8003c08 <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d14a      	bne.n	8003c00 <HAL_SPI_Init+0xa4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6a:	6842      	ldr	r2, [r0, #4]
 8003b6c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003b70:	d000      	beq.n	8003b74 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b72:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b78:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003b7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b80:	b923      	cbnz	r3, 8003b8c <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b82:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003b84:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003b88:	f7fe f8b4 	bl	8001cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b8c:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b8e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003b94:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b96:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b9e:	6863      	ldr	r3, [r4, #4]
 8003ba0:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003ba4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003ba8:	4303      	orrs	r3, r0
 8003baa:	68e0      	ldr	r0, [r4, #12]
 8003bac:	69a1      	ldr	r1, [r4, #24]
 8003bae:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8003bb2:	4303      	orrs	r3, r0
 8003bb4:	6920      	ldr	r0, [r4, #16]
 8003bb6:	f000 0002 	and.w	r0, r0, #2
 8003bba:	4303      	orrs	r3, r0
 8003bbc:	6960      	ldr	r0, [r4, #20]
 8003bbe:	f000 0001 	and.w	r0, r0, #1
 8003bc2:	4303      	orrs	r3, r0
 8003bc4:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8003bc8:	4303      	orrs	r3, r0
 8003bca:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bcc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bce:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003bd2:	4303      	orrs	r3, r0
 8003bd4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bd6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bda:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003bde:	4303      	orrs	r3, r0
 8003be0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003be2:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003be6:	4303      	orrs	r3, r0
 8003be8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bea:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bec:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bee:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8003bfe:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c00:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c06:	e7b5      	b.n	8003b74 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003c08:	2001      	movs	r0, #1
 8003c0a:	e7f8      	b.n	8003bfe <HAL_SPI_Init+0xa2>

08003c0c <HAL_SPI_ErrorCallback>:
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8003c10:	6803      	ldr	r3, [r0, #0]
{
 8003c12:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003c14:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003c16:	689a      	ldr	r2, [r3, #8]
{
 8003c18:	4604      	mov	r4, r0

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c1a:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8003c1e:	2d01      	cmp	r5, #1
{
 8003c20:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c22:	d106      	bne.n	8003c32 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c24:	064d      	lsls	r5, r1, #25
 8003c26:	d504      	bpl.n	8003c32 <HAL_SPI_IRQHandler+0x22>
  {
    hspi->RxISR(hspi);
 8003c28:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 8003c2a:	b005      	add	sp, #20
 8003c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 8003c30:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c32:	0790      	lsls	r0, r2, #30
 8003c34:	d504      	bpl.n	8003c40 <HAL_SPI_IRQHandler+0x30>
 8003c36:	060d      	lsls	r5, r1, #24
 8003c38:	d502      	bpl.n	8003c40 <HAL_SPI_IRQHandler+0x30>
    hspi->TxISR(hspi);
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c3e:	e7f4      	b.n	8003c2a <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003c40:	f012 0f60 	tst.w	r2, #96	; 0x60
 8003c44:	d04d      	beq.n	8003ce2 <HAL_SPI_IRQHandler+0xd2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c46:	0688      	lsls	r0, r1, #26
 8003c48:	d54b      	bpl.n	8003ce2 <HAL_SPI_IRQHandler+0xd2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c4a:	0655      	lsls	r5, r2, #25
 8003c4c:	d50e      	bpl.n	8003c6c <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c4e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8003c52:	2500      	movs	r5, #0
 8003c54:	2803      	cmp	r0, #3
 8003c56:	d03e      	beq.n	8003cd6 <HAL_SPI_IRQHandler+0xc6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c5a:	f040 0004 	orr.w	r0, r0, #4
 8003c5e:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c60:	9501      	str	r5, [sp, #4]
 8003c62:	68d8      	ldr	r0, [r3, #12]
 8003c64:	9001      	str	r0, [sp, #4]
 8003c66:	6898      	ldr	r0, [r3, #8]
 8003c68:	9001      	str	r0, [sp, #4]
 8003c6a:	9801      	ldr	r0, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c6c:	0690      	lsls	r0, r2, #26
 8003c6e:	d50c      	bpl.n	8003c8a <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c70:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	9203      	str	r2, [sp, #12]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	9203      	str	r2, [sp, #12]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c8c:	b34a      	cbz	r2, 8003ce2 <HAL_SPI_IRQHandler+0xd2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c94:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003c96:	2201      	movs	r2, #1
 8003c98:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c9c:	078a      	lsls	r2, r1, #30
 8003c9e:	d022      	beq.n	8003ce6 <HAL_SPI_IRQHandler+0xd6>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ca0:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003ca2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ca4:	f022 0203 	bic.w	r2, r2, #3
 8003ca8:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003caa:	b140      	cbz	r0, 8003cbe <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_SPI_IRQHandler+0xe0>)
 8003cae:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cb0:	f7fe fb92 	bl	80023d8 <HAL_DMA_Abort_IT>
 8003cb4:	b118      	cbz	r0, 8003cbe <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cbc:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003cbe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003cc0:	b178      	cbz	r0, 8003ce2 <HAL_SPI_IRQHandler+0xd2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_SPI_IRQHandler+0xe0>)
 8003cc4:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003cc6:	f7fe fb87 	bl	80023d8 <HAL_DMA_Abort_IT>
 8003cca:	b150      	cbz	r0, 8003ce2 <HAL_SPI_IRQHandler+0xd2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd2:	6563      	str	r3, [r4, #84]	; 0x54
 8003cd4:	e005      	b.n	8003ce2 <HAL_SPI_IRQHandler+0xd2>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cd6:	9502      	str	r5, [sp, #8]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	9202      	str	r2, [sp, #8]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	9302      	str	r3, [sp, #8]
 8003ce0:	9b02      	ldr	r3, [sp, #8]
}
 8003ce2:	b005      	add	sp, #20
 8003ce4:	bd30      	pop	{r4, r5, pc}
        HAL_SPI_ErrorCallback(hspi);
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f7ff ff90 	bl	8003c0c <HAL_SPI_ErrorCallback>
 8003cec:	e7f9      	b.n	8003ce2 <HAL_SPI_IRQHandler+0xd2>
 8003cee:	bf00      	nop
 8003cf0:	08003cf5 	.word	0x08003cf5

08003cf4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 8003cf6:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cf8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003cfa:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003cfc:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cfe:	f7ff ff85 	bl	8003c0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d02:	bd08      	pop	{r3, pc}

08003d04 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d11c      	bne.n	8003d46 <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0e:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d14:	6803      	ldr	r3, [r0, #0]
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00a      	beq.n	8003d30 <HAL_TIM_Base_Start+0x2c>
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1e:	d007      	beq.n	8003d30 <HAL_TIM_Base_Start+0x2c>
 8003d20:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <HAL_TIM_Base_Start+0x2c>
 8003d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d36:	2a06      	cmp	r2, #6
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d42:	2000      	movs	r0, #0
}
 8003d44:	4770      	bx	lr
    return HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00

08003d50 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d50:	4a1a      	ldr	r2, [pc, #104]	; (8003dbc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003d52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d54:	4290      	cmp	r0, r2
 8003d56:	d00a      	beq.n	8003d6e <TIM_Base_SetConfig+0x1e>
 8003d58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d5c:	d007      	beq.n	8003d6e <TIM_Base_SetConfig+0x1e>
 8003d5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d62:	4290      	cmp	r0, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_Base_SetConfig+0x1e>
 8003d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d6a:	4290      	cmp	r0, r2
 8003d6c:	d115      	bne.n	8003d9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003d6e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d74:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d76:	4a11      	ldr	r2, [pc, #68]	; (8003dbc <TIM_Base_SetConfig+0x6c>)
 8003d78:	4290      	cmp	r0, r2
 8003d7a:	d00a      	beq.n	8003d92 <TIM_Base_SetConfig+0x42>
 8003d7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d80:	d007      	beq.n	8003d92 <TIM_Base_SetConfig+0x42>
 8003d82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d86:	4290      	cmp	r0, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_Base_SetConfig+0x42>
 8003d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d8e:	4290      	cmp	r0, r2
 8003d90:	d103      	bne.n	8003d9a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d92:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d98:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d9a:	694a      	ldr	r2, [r1, #20]
 8003d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003da2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da4:	688b      	ldr	r3, [r1, #8]
 8003da6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da8:	680b      	ldr	r3, [r1, #0]
 8003daa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <TIM_Base_SetConfig+0x6c>)
 8003dae:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	bf04      	itt	eq
 8003db2:	690b      	ldreq	r3, [r1, #16]
 8003db4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db6:	2301      	movs	r3, #1
 8003db8:	6143      	str	r3, [r0, #20]
}
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00

08003dc0 <HAL_TIM_Base_Init>:
{
 8003dc0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	b330      	cbz	r0, 8003e14 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003dca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dce:	b91b      	cbnz	r3, 8003dd8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003dd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003dd4:	f7fc ffee 	bl	8000db4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dda:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de0:	1d21      	adds	r1, r4, #4
 8003de2:	f7ff ffb5 	bl	8003d50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de6:	2301      	movs	r3, #1
  return HAL_OK;
 8003de8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003df2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003df6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003dfa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003e12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e14:	2001      	movs	r0, #1
 8003e16:	e7fc      	b.n	8003e12 <HAL_TIM_Base_Init+0x52>

08003e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e18:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e22:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003e26:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e28:	6082      	str	r2, [r0, #8]
}
 8003e2a:	bd10      	pop	{r4, pc}

08003e2c <HAL_TIM_ConfigClockSource>:
{
 8003e2c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003e2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003e32:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f04f 0002 	mov.w	r0, #2
 8003e3a:	f000 808e 	beq.w	8003f5a <HAL_TIM_ConfigClockSource+0x12e>
 8003e3e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003e44:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003e46:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003e4a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003e54:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003e56:	680b      	ldr	r3, [r1, #0]
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d04f      	beq.n	8003efc <HAL_TIM_ConfigClockSource+0xd0>
 8003e5c:	d832      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x98>
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d064      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x100>
 8003e62:	d816      	bhi.n	8003e92 <HAL_TIM_ConfigClockSource+0x66>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d00d      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x58>
 8003e68:	d80a      	bhi.n	8003e80 <HAL_TIM_ConfigClockSource+0x54>
 8003e6a:	f033 0110 	bics.w	r1, r3, #16
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e76:	2300      	movs	r3, #0
 8003e78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d1f5      	bne.n	8003e70 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8003e84:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f043 0307 	orr.w	r3, r3, #7
 8003e90:	e028      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003e92:	2b50      	cmp	r3, #80	; 0x50
 8003e94:	d1ec      	bne.n	8003e70 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8003e96:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003e98:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003e9a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9c:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e9e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003eaa:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003eb4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003eb6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003eb8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ebe:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003ec2:	e00f      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xba>
 8003eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ece:	d00c      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0xbe>
 8003ed0:	2b70      	cmp	r3, #112	; 0x70
 8003ed2:	d1cd      	bne.n	8003e70 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003ed4:	68cb      	ldr	r3, [r1, #12]
 8003ed6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003eda:	f7ff ff9d 	bl	8003e18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ede:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8003ee4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	e7c2      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003eea:	68cb      	ldr	r3, [r1, #12]
 8003eec:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003ef0:	f7ff ff92 	bl	8003e18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef4:	6883      	ldr	r3, [r0, #8]
 8003ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003efa:	e7f3      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8003efc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efe:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8003f00:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f02:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8003f06:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f08:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f10:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f18:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003f1c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f1e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003f20:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f26:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003f2a:	e7db      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8003f2c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003f2e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003f30:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f32:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f34:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003f40:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f46:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003f4a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f4c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003f4e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f54:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003f58:	e7c4      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	e78e      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x50>
	...

08003f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f60:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003f66:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f04f 0002 	mov.w	r0, #2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f70:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f72:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003f76:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f78:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f7a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f82:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f84:	4c0c      	ldr	r4, [pc, #48]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003f86:	42a3      	cmp	r3, r4
 8003f88:	d00a      	beq.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8e:	d007      	beq.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003f90:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003f94:	42a3      	cmp	r3, r4
 8003f96:	d003      	beq.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003f98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f9c:	42a3      	cmp	r3, r4
 8003f9e:	d104      	bne.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa8:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003faa:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003fac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fae:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fb2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003fb6:	bd30      	pop	{r4, r5, pc}
 8003fb8:	40012c00 	.word	0x40012c00

08003fbc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fbc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	f102 030c 	add.w	r3, r2, #12
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	320c      	adds	r2, #12
 8003fcc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003fd0:	6802      	ldr	r2, [r0, #0]
 8003fd2:	2900      	cmp	r1, #0
 8003fd4:	d1f2      	bne.n	8003fbc <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	f102 0314 	add.w	r3, r2, #20
 8003fda:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	f102 0c14 	add.w	ip, r2, #20
 8003fe6:	e84c 3100 	strex	r1, r3, [ip]
 8003fea:	2900      	cmp	r1, #0
 8003fec:	d1f3      	bne.n	8003fd6 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d10b      	bne.n	800400c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	f102 030c 	add.w	r3, r2, #12
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	f102 0c0c 	add.w	ip, r2, #12
 8004004:	e84c 3100 	strex	r1, r3, [ip]
 8004008:	2900      	cmp	r1, #0
 800400a:	d1f3      	bne.n	8003ff4 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	2320      	movs	r3, #32
 800400e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004012:	2300      	movs	r3, #0
 8004014:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004016:	4770      	bx	lr

08004018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	b510      	push	{r4, lr}
 800401a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401c:	6803      	ldr	r3, [r0, #0]
 800401e:	68c1      	ldr	r1, [r0, #12]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004026:	430a      	orrs	r2, r1
 8004028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800402a:	6882      	ldr	r2, [r0, #8]
 800402c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800402e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004030:	4302      	orrs	r2, r0
 8004032:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004034:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004038:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800403c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800403e:	430a      	orrs	r2, r1
 8004040:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	69a1      	ldr	r1, [r4, #24]
 8004046:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800404a:	430a      	orrs	r2, r1
 800404c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800404e:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <UART_SetConfig+0x70>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d115      	bne.n	8004080 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004054:	f7ff fcf8 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004058:	2319      	movs	r3, #25
 800405a:	4343      	muls	r3, r0
 800405c:	6862      	ldr	r2, [r4, #4]
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	0092      	lsls	r2, r2, #2
 8004062:	fbb3 f3f2 	udiv	r3, r3, r2
 8004066:	2264      	movs	r2, #100	; 0x64
 8004068:	fbb3 f1f2 	udiv	r1, r3, r2
 800406c:	fb02 3311 	mls	r3, r2, r1, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	; 0x32
 8004074:	fbb3 f3f2 	udiv	r3, r3, r2
 8004078:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800407c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800407e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7ff fcd2 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8004084:	e7e8      	b.n	8004058 <UART_SetConfig+0x40>
 8004086:	bf00      	nop
 8004088:	40013800 	.word	0x40013800

0800408c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	4604      	mov	r4, r0
 8004090:	460e      	mov	r6, r1
 8004092:	4617      	mov	r7, r2
 8004094:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	6813      	ldr	r3, [r2, #0]
 800409a:	ea36 0303 	bics.w	r3, r6, r3
 800409e:	d101      	bne.n	80040a4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80040a0:	2000      	movs	r0, #0
 80040a2:	e028      	b.n	80040f6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	1c6b      	adds	r3, r5, #1
 80040a6:	d0f7      	beq.n	8004098 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040a8:	b125      	cbz	r5, 80040b4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80040aa:	f7fe f84d 	bl	8002148 <HAL_GetTick>
 80040ae:	1bc0      	subs	r0, r0, r7
 80040b0:	4285      	cmp	r5, r0
 80040b2:	d2f0      	bcs.n	8004096 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	f102 030c 	add.w	r3, r2, #12
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	320c      	adds	r2, #12
 80040c4:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80040c8:	6821      	ldr	r1, [r4, #0]
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d1f2      	bne.n	80040b4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	f101 0314 	add.w	r3, r1, #20
 80040d2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	f101 0014 	add.w	r0, r1, #20
 80040de:	e840 3200 	strex	r2, r3, [r0]
 80040e2:	2a00      	cmp	r2, #0
 80040e4:	d1f3      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80040e6:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80040e8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80040ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80040ee:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80040f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80040f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040f8 <HAL_UART_Init>:
{
 80040f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80040fa:	4604      	mov	r4, r0
 80040fc:	b348      	cbz	r0, 8004152 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80040fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004102:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004106:	b91b      	cbnz	r3, 8004110 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004108:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800410c:	f7fd ff32 	bl	8001f74 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004110:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004112:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004114:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8004118:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800411a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800411c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004120:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004122:	f7ff ff79 	bl	8004018 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004126:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004138:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004140:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004142:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004144:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004146:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800414a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800414e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8004150:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004152:	2001      	movs	r0, #1
 8004154:	e7fc      	b.n	8004150 <HAL_UART_Init+0x58>

08004156 <HAL_UART_DeInit>:
{
 8004156:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004158:	4604      	mov	r4, r0
 800415a:	b1a0      	cbz	r0, 8004186 <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 800415c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800415e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8004164:	68d3      	ldr	r3, [r2, #12]
 8004166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800416a:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 800416c:	f7fd ff5e 	bl	800202c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	2000      	movs	r0, #0
 8004172:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 8004174:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004178:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800417c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004182:	6360      	str	r0, [r4, #52]	; 0x34
}
 8004184:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004186:	2001      	movs	r0, #1
 8004188:	e7fc      	b.n	8004184 <HAL_UART_DeInit+0x2e>

0800418a <HAL_UART_Transmit>:
{
 800418a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800418e:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004190:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004194:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004196:	2b20      	cmp	r3, #32
{
 8004198:	460e      	mov	r6, r1
 800419a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800419c:	d13c      	bne.n	8004218 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 800419e:	2900      	cmp	r1, #0
 80041a0:	d03c      	beq.n	800421c <HAL_UART_Transmit+0x92>
 80041a2:	2a00      	cmp	r2, #0
 80041a4:	d03a      	beq.n	800421c <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a8:	2500      	movs	r5, #0
 80041aa:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80041b0:	f7fd ffca 	bl	8002148 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80041b6:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80041bc:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80041be:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	d103      	bne.n	80041ca <HAL_UART_Transmit+0x40>
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	b90b      	cbnz	r3, 80041ca <HAL_UART_Transmit+0x40>
 80041c6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80041c8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80041ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b953      	cbnz	r3, 80041e6 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d0:	464b      	mov	r3, r9
 80041d2:	4642      	mov	r2, r8
 80041d4:	2140      	movs	r1, #64	; 0x40
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7ff ff58 	bl	800408c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80041dc:	b950      	cbnz	r0, 80041f4 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80041de:	2320      	movs	r3, #32
 80041e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80041e4:	e007      	b.n	80041f6 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e6:	464b      	mov	r3, r9
 80041e8:	4642      	mov	r2, r8
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	4620      	mov	r0, r4
 80041ee:	f7ff ff4d 	bl	800408c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80041f2:	b110      	cbz	r0, 80041fa <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 80041f4:	2003      	movs	r0, #3
}
 80041f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041fa:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80041fc:	b94e      	cbnz	r6, 8004212 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041fe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004206:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004208:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800420a:	3901      	subs	r1, #1
 800420c:	b289      	uxth	r1, r1
 800420e:	84e1      	strh	r1, [r4, #38]	; 0x26
 8004210:	e7db      	b.n	80041ca <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004212:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004216:	e7f6      	b.n	8004206 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8004218:	2002      	movs	r0, #2
 800421a:	e7ec      	b.n	80041f6 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 800421c:	2001      	movs	r0, #1
 800421e:	e7ea      	b.n	80041f6 <HAL_UART_Transmit+0x6c>

08004220 <HAL_UART_TxCpltCallback>:
 8004220:	4770      	bx	lr

08004222 <HAL_UART_RxHalfCpltCallback>:
 8004222:	4770      	bx	lr

08004224 <UART_DMAError>:
{
 8004224:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004226:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004228:	6803      	ldr	r3, [r0, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800422c:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004230:	2921      	cmp	r1, #33	; 0x21
 8004232:	d112      	bne.n	800425a <UART_DMAError+0x36>
 8004234:	0612      	lsls	r2, r2, #24
 8004236:	d510      	bpl.n	800425a <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8004238:	2200      	movs	r2, #0
 800423a:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	f103 020c 	add.w	r2, r3, #12
 8004240:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004244:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	f103 0c0c 	add.w	ip, r3, #12
 800424c:	e84c 2100 	strex	r1, r2, [ip]
 8004250:	2900      	cmp	r1, #0
 8004252:	d1f3      	bne.n	800423c <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8004254:	2220      	movs	r2, #32
 8004256:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800425a:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800425c:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8004260:	2a22      	cmp	r2, #34	; 0x22
 8004262:	d105      	bne.n	8004270 <UART_DMAError+0x4c>
 8004264:	065b      	lsls	r3, r3, #25
 8004266:	d503      	bpl.n	8004270 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8004268:	2300      	movs	r3, #0
 800426a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800426c:	f7ff fea6 	bl	8003fbc <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004270:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004272:	f043 0310 	orr.w	r3, r3, #16
 8004276:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8004278:	f7fd fe79 	bl	8001f6e <HAL_UART_ErrorCallback>
}
 800427c:	bd08      	pop	{r3, pc}

0800427e <UART_DMAAbortOnError>:
{
 800427e:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004280:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004282:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004284:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004286:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004288:	f7fd fe71 	bl	8001f6e <HAL_UART_ErrorCallback>
}
 800428c:	bd08      	pop	{r3, pc}

0800428e <HAL_UARTEx_RxEventCallback>:
}
 800428e:	4770      	bx	lr

08004290 <UART_DMARxHalfCplt>:
{
 8004290:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004292:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004294:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004296:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004298:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800429a:	2b01      	cmp	r3, #1
 800429c:	d104      	bne.n	80042a8 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800429e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80042a0:	0849      	lsrs	r1, r1, #1
 80042a2:	f7ff fff4 	bl	800428e <HAL_UARTEx_RxEventCallback>
}
 80042a6:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80042a8:	f7ff ffbb 	bl	8004222 <HAL_UART_RxHalfCpltCallback>
}
 80042ac:	e7fb      	b.n	80042a6 <UART_DMARxHalfCplt+0x16>

080042ae <UART_DMAReceiveCplt>:
{
 80042ae:	b508      	push	{r3, lr}
 80042b0:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b2:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f013 0320 	ands.w	r3, r3, #32
 80042bc:	d137      	bne.n	800432e <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 80042be:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	f102 030c 	add.w	r3, r2, #12
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	320c      	adds	r2, #12
 80042d0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80042d4:	6803      	ldr	r3, [r0, #0]
 80042d6:	2900      	cmp	r1, #0
 80042d8:	d1f2      	bne.n	80042c0 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	f103 0214 	add.w	r2, r3, #20
 80042de:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	f103 0c14 	add.w	ip, r3, #20
 80042ea:	e84c 2100 	strex	r1, r2, [ip]
 80042ee:	2900      	cmp	r1, #0
 80042f0:	d1f3      	bne.n	80042da <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	f103 0214 	add.w	r2, r3, #20
 80042f6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	f103 0c14 	add.w	ip, r3, #20
 8004302:	e84c 2100 	strex	r1, r2, [ip]
 8004306:	2900      	cmp	r1, #0
 8004308:	d1f3      	bne.n	80042f2 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 800430a:	2220      	movs	r2, #32
 800430c:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004310:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004312:	2a01      	cmp	r2, #1
 8004314:	d10b      	bne.n	800432e <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	f103 020c 	add.w	r2, r3, #12
 800431a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	f103 0c0c 	add.w	ip, r3, #12
 8004326:	e84c 2100 	strex	r1, r2, [ip]
 800432a:	2900      	cmp	r1, #0
 800432c:	d1f3      	bne.n	8004316 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800432e:	2300      	movs	r3, #0
 8004330:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004332:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004334:	2b01      	cmp	r3, #1
 8004336:	d103      	bne.n	8004340 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004338:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800433a:	f7ff ffa8 	bl	800428e <HAL_UARTEx_RxEventCallback>
}
 800433e:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8004340:	f7fd fe16 	bl	8001f70 <HAL_UART_RxCpltCallback>
}
 8004344:	e7fb      	b.n	800433e <UART_DMAReceiveCplt+0x90>

08004346 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004346:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800434a:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800434c:	2b22      	cmp	r3, #34	; 0x22
 800434e:	d142      	bne.n	80043d6 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004352:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004354:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004358:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435a:	d13f      	bne.n	80043dc <UART_Receive_IT.isra.0+0x96>
 800435c:	6901      	ldr	r1, [r0, #16]
 800435e:	2900      	cmp	r1, #0
 8004360:	d13f      	bne.n	80043e2 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004362:	6852      	ldr	r2, [r2, #4]
 8004364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004368:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800436c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800436e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004370:	3b01      	subs	r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004376:	2b00      	cmp	r3, #0
 8004378:	d12d      	bne.n	80043d6 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800437a:	6802      	ldr	r2, [r0, #0]
 800437c:	68d1      	ldr	r1, [r2, #12]
 800437e:	f021 0120 	bic.w	r1, r1, #32
 8004382:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004384:	68d1      	ldr	r1, [r2, #12]
 8004386:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800438a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800438c:	6951      	ldr	r1, [r2, #20]
 800438e:	f021 0101 	bic.w	r1, r1, #1
 8004392:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004394:	2220      	movs	r2, #32
 8004396:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800439a:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800439e:	2a01      	cmp	r2, #1
 80043a0:	6802      	ldr	r2, [r0, #0]
 80043a2:	d128      	bne.n	80043f6 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a4:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	f102 030c 	add.w	r3, r2, #12
 80043aa:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	f102 0c0c 	add.w	ip, r2, #12
 80043b6:	e84c 3100 	strex	r1, r3, [ip]
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d1f3      	bne.n	80043a6 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	06db      	lsls	r3, r3, #27
 80043c2:	d505      	bpl.n	80043d0 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c4:	9101      	str	r1, [sp, #4]
 80043c6:	6813      	ldr	r3, [r2, #0]
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	6853      	ldr	r3, [r2, #4]
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80043d2:	f7ff ff5c 	bl	800428e <HAL_UARTEx_RxEventCallback>
}
 80043d6:	b003      	add	sp, #12
 80043d8:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043dc:	b939      	cbnz	r1, 80043ee <UART_Receive_IT.isra.0+0xa8>
 80043de:	6901      	ldr	r1, [r0, #16]
 80043e0:	b929      	cbnz	r1, 80043ee <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043e2:	6852      	ldr	r2, [r2, #4]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80043e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043ea:	3301      	adds	r3, #1
 80043ec:	e7be      	b.n	800436c <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ee:	6852      	ldr	r2, [r2, #4]
 80043f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043f4:	e7f7      	b.n	80043e6 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 80043f6:	f7fd fdbb 	bl	8001f70 <HAL_UART_RxCpltCallback>
 80043fa:	e7ec      	b.n	80043d6 <UART_Receive_IT.isra.0+0x90>

080043fc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043fc:	6803      	ldr	r3, [r0, #0]
{
 80043fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004400:	681a      	ldr	r2, [r3, #0]
{
 8004402:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004404:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004406:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004408:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800440a:	d108      	bne.n	800441e <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800440c:	0696      	lsls	r6, r2, #26
 800440e:	d568      	bpl.n	80044e2 <HAL_UART_IRQHandler+0xe6>
 8004410:	068d      	lsls	r5, r1, #26
 8004412:	d566      	bpl.n	80044e2 <HAL_UART_IRQHandler+0xe6>
}
 8004414:	b002      	add	sp, #8
 8004416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800441a:	f7ff bf94 	b.w	8004346 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800441e:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004422:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8004426:	4305      	orrs	r5, r0
 8004428:	d05b      	beq.n	80044e2 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800442a:	07d6      	lsls	r6, r2, #31
 800442c:	d505      	bpl.n	800443a <HAL_UART_IRQHandler+0x3e>
 800442e:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004430:	bf42      	ittt	mi
 8004432:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8004434:	f043 0301 	orrmi.w	r3, r3, #1
 8004438:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800443a:	0753      	lsls	r3, r2, #29
 800443c:	d504      	bpl.n	8004448 <HAL_UART_IRQHandler+0x4c>
 800443e:	b118      	cbz	r0, 8004448 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004440:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004442:	f043 0302 	orr.w	r3, r3, #2
 8004446:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004448:	0796      	lsls	r6, r2, #30
 800444a:	d504      	bpl.n	8004456 <HAL_UART_IRQHandler+0x5a>
 800444c:	b118      	cbz	r0, 8004456 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800444e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004456:	0715      	lsls	r5, r2, #28
 8004458:	d507      	bpl.n	800446a <HAL_UART_IRQHandler+0x6e>
 800445a:	f001 0320 	and.w	r3, r1, #32
 800445e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004460:	bf1e      	ittt	ne
 8004462:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8004464:	f043 0308 	orrne.w	r3, r3, #8
 8004468:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800446c:	2b00      	cmp	r3, #0
 800446e:	d032      	beq.n	80044d6 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004470:	0692      	lsls	r2, r2, #26
 8004472:	d504      	bpl.n	800447e <HAL_UART_IRQHandler+0x82>
 8004474:	068b      	lsls	r3, r1, #26
 8004476:	d502      	bpl.n	800447e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8004478:	4620      	mov	r0, r4
 800447a:	f7ff ff64 	bl	8004346 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8004480:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004482:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004484:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800448a:	f002 0208 	and.w	r2, r2, #8
 800448e:	ea53 0502 	orrs.w	r5, r3, r2
 8004492:	d022      	beq.n	80044da <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8004494:	f7ff fd92 	bl	8003fbc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	6973      	ldr	r3, [r6, #20]
 800449a:	065e      	lsls	r6, r3, #25
 800449c:	d518      	bpl.n	80044d0 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	f102 0314 	add.w	r3, r2, #20
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	3214      	adds	r2, #20
 80044ae:	e842 3100 	strex	r1, r3, [r2]
 80044b2:	2900      	cmp	r1, #0
 80044b4:	d1f3      	bne.n	800449e <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 80044b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044b8:	b150      	cbz	r0, 80044d0 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ba:	4b74      	ldr	r3, [pc, #464]	; (800468c <HAL_UART_IRQHandler+0x290>)
 80044bc:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044be:	f7fd ff8b 	bl	80023d8 <HAL_DMA_Abort_IT>
 80044c2:	b140      	cbz	r0, 80044d6 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80044c8:	b002      	add	sp, #8
 80044ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ce:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7fd fd4c 	bl	8001f6e <HAL_UART_ErrorCallback>
}
 80044d6:	b002      	add	sp, #8
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80044da:	f7fd fd48 	bl	8001f6e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044de:	6465      	str	r5, [r4, #68]	; 0x44
 80044e0:	e7f9      	b.n	80044d6 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80044e4:	2801      	cmp	r0, #1
 80044e6:	f040 8094 	bne.w	8004612 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044ea:	06d5      	lsls	r5, r2, #27
 80044ec:	f140 8091 	bpl.w	8004612 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044f0:	06c8      	lsls	r0, r1, #27
 80044f2:	f140 808e 	bpl.w	8004612 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f6:	2200      	movs	r2, #0
 80044f8:	9201      	str	r2, [sp, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	9201      	str	r2, [sp, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	9201      	str	r2, [sp, #4]
 8004502:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	0652      	lsls	r2, r2, #25
 8004508:	d54d      	bpl.n	80045a6 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800450a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800450c:	680a      	ldr	r2, [r1, #0]
 800450e:	6852      	ldr	r2, [r2, #4]
 8004510:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004512:	2a00      	cmp	r2, #0
 8004514:	d0df      	beq.n	80044d6 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004516:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004518:	4290      	cmp	r0, r2
 800451a:	d9dc      	bls.n	80044d6 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 800451c:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800451e:	698a      	ldr	r2, [r1, #24]
 8004520:	2a20      	cmp	r2, #32
 8004522:	d036      	beq.n	8004592 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	f103 020c 	add.w	r2, r3, #12
 8004528:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	f103 000c 	add.w	r0, r3, #12
 8004534:	e840 2100 	strex	r1, r2, [r0]
 8004538:	2900      	cmp	r1, #0
 800453a:	d1f3      	bne.n	8004524 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	f103 0214 	add.w	r2, r3, #20
 8004540:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004544:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	f103 0014 	add.w	r0, r3, #20
 800454c:	e840 2100 	strex	r1, r2, [r0]
 8004550:	2900      	cmp	r1, #0
 8004552:	d1f3      	bne.n	800453c <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	f103 0214 	add.w	r2, r3, #20
 8004558:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	f103 0014 	add.w	r0, r3, #20
 8004564:	e840 2100 	strex	r1, r2, [r0]
 8004568:	2900      	cmp	r1, #0
 800456a:	d1f3      	bne.n	8004554 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 800456c:	2220      	movs	r2, #32
 800456e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004572:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	f103 020c 	add.w	r2, r3, #12
 8004578:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	f103 000c 	add.w	r0, r3, #12
 8004584:	e840 2100 	strex	r1, r2, [r0]
 8004588:	2900      	cmp	r1, #0
 800458a:	d1f3      	bne.n	8004574 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800458c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800458e:	f7fd ff04 	bl	800239a <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004592:	2302      	movs	r3, #2
 8004594:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004596:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004598:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800459a:	1ac9      	subs	r1, r1, r3
 800459c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800459e:	4620      	mov	r0, r4
 80045a0:	f7ff fe75 	bl	800428e <HAL_UARTEx_RxEventCallback>
 80045a4:	e797      	b.n	80044d6 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 80045a8:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045aa:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 80045ac:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ae:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d090      	beq.n	80044d6 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045b4:	1a89      	subs	r1, r1, r2
 80045b6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80045b8:	2900      	cmp	r1, #0
 80045ba:	d08c      	beq.n	80044d6 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	f103 020c 	add.w	r2, r3, #12
 80045c0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	f103 050c 	add.w	r5, r3, #12
 80045cc:	e845 2000 	strex	r0, r2, [r5]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d1f3      	bne.n	80045bc <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	f103 0214 	add.w	r2, r3, #20
 80045d8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045dc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	f103 0514 	add.w	r5, r3, #20
 80045e4:	e845 2000 	strex	r0, r2, [r5]
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d1f3      	bne.n	80045d4 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 80045ec:	2220      	movs	r2, #32
 80045ee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	f103 020c 	add.w	r2, r3, #12
 80045f8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	f103 050c 	add.w	r5, r3, #12
 8004604:	e845 2000 	strex	r0, r2, [r5]
 8004608:	2800      	cmp	r0, #0
 800460a:	d1f3      	bne.n	80045f4 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800460c:	2302      	movs	r3, #2
 800460e:	6363      	str	r3, [r4, #52]	; 0x34
 8004610:	e7c5      	b.n	800459e <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004612:	0616      	lsls	r6, r2, #24
 8004614:	d528      	bpl.n	8004668 <HAL_UART_IRQHandler+0x26c>
 8004616:	060d      	lsls	r5, r1, #24
 8004618:	d526      	bpl.n	8004668 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800461a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800461e:	2a21      	cmp	r2, #33	; 0x21
 8004620:	f47f af59 	bne.w	80044d6 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004626:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800462c:	d117      	bne.n	800465e <HAL_UART_IRQHandler+0x262>
 800462e:	6921      	ldr	r1, [r4, #16]
 8004630:	b9a9      	cbnz	r1, 800465e <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004632:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004636:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800463a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800463c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800463e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004640:	3a01      	subs	r2, #1
 8004642:	b292      	uxth	r2, r2
 8004644:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004646:	2a00      	cmp	r2, #0
 8004648:	f47f af45 	bne.w	80044d6 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004652:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	e73b      	b.n	80044d6 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800465e:	1c51      	adds	r1, r2, #1
 8004660:	6221      	str	r1, [r4, #32]
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	e7ea      	b.n	800463e <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004668:	0650      	lsls	r0, r2, #25
 800466a:	f57f af34 	bpl.w	80044d6 <HAL_UART_IRQHandler+0xda>
 800466e:	064a      	lsls	r2, r1, #25
 8004670:	f57f af31 	bpl.w	80044d6 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004674:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004676:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800467e:	2320      	movs	r3, #32
 8004680:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8004684:	f7ff fdcc 	bl	8004220 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8004688:	e725      	b.n	80044d6 <HAL_UART_IRQHandler+0xda>
 800468a:	bf00      	nop
 800468c:	0800427f 	.word	0x0800427f

08004690 <UART_Start_Receive_DMA>:
{
 8004690:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004692:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8004694:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004696:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004698:	2222      	movs	r2, #34	; 0x22
{
 800469a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800469c:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469e:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046a0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046a4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046a8:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046aa:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046ac:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <UART_Start_Receive_DMA+0x90>)
 80046ae:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 80046b2:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046b6:	460a      	mov	r2, r1
 80046b8:	1d31      	adds	r1, r6, #4
 80046ba:	f7fd fe2f 	bl	800231c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	9501      	str	r5, [sp, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	9201      	str	r2, [sp, #4]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	9201      	str	r2, [sp, #4]
 80046ca:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046cc:	6922      	ldr	r2, [r4, #16]
 80046ce:	b15a      	cbz	r2, 80046e8 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	f103 020c 	add.w	r2, r3, #12
 80046d4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	f103 000c 	add.w	r0, r3, #12
 80046e0:	e840 2100 	strex	r1, r2, [r0]
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d1f3      	bne.n	80046d0 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	f103 0214 	add.w	r2, r3, #20
 80046ec:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f0:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	f103 0014 	add.w	r0, r3, #20
 80046f8:	e840 2100 	strex	r1, r2, [r0]
 80046fc:	2900      	cmp	r1, #0
 80046fe:	d1f3      	bne.n	80046e8 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	f103 0214 	add.w	r2, r3, #20
 8004704:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	f103 0114 	add.w	r1, r3, #20
 8004710:	e841 2000 	strex	r0, r2, [r1]
 8004714:	2800      	cmp	r0, #0
 8004716:	d1f3      	bne.n	8004700 <UART_Start_Receive_DMA+0x70>
}
 8004718:	b002      	add	sp, #8
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	080042af 	.word	0x080042af
 8004720:	08004291 	.word	0x08004291
 8004724:	08004225 	.word	0x08004225

08004728 <HAL_UART_Receive_DMA>:
{
 8004728:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800472a:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 800472e:	2e20      	cmp	r6, #32
 8004730:	d106      	bne.n	8004740 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8004732:	b141      	cbz	r1, 8004746 <HAL_UART_Receive_DMA+0x1e>
 8004734:	b13a      	cbz	r2, 8004746 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	2400      	movs	r4, #0
 8004738:	6304      	str	r4, [r0, #48]	; 0x30
}
 800473a:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800473c:	f7ff bfa8 	b.w	8004690 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8004740:	2002      	movs	r0, #2
}
 8004742:	bc70      	pop	{r4, r5, r6}
 8004744:	4770      	bx	lr
      return HAL_ERROR;
 8004746:	2001      	movs	r0, #1
 8004748:	e7fb      	b.n	8004742 <HAL_UART_Receive_DMA+0x1a>

0800474a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800474a:	b084      	sub	sp, #16
 800474c:	a801      	add	r0, sp, #4
 800474e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004752:	b004      	add	sp, #16
 8004754:	2000      	movs	r0, #0
 8004756:	4770      	bx	lr

08004758 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004758:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800475a:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800475e:	2000      	movs	r0, #0
 8004760:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004768:	4770      	bx	lr

0800476a <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800476a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800476e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004772:	045b      	lsls	r3, r3, #17
 8004774:	0c5b      	lsrs	r3, r3, #17
 8004776:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800477a:	2000      	movs	r0, #0
 800477c:	4770      	bx	lr

0800477e <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800477e:	2000      	movs	r0, #0
 8004780:	4770      	bx	lr

08004782 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004782:	b084      	sub	sp, #16
 8004784:	b510      	push	{r4, lr}
 8004786:	4604      	mov	r4, r0
 8004788:	a803      	add	r0, sp, #12
 800478a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800478e:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004790:	2301      	movs	r3, #1
 8004792:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8004796:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800479a:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800479e:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80047a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a6:	b004      	add	sp, #16
 80047a8:	4770      	bx	lr
	...

080047ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047ae:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80047b0:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047b2:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 80047b6:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047b8:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80047bc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80047c0:	0424      	lsls	r4, r4, #16
 80047c2:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 80047c4:	2d03      	cmp	r5, #3
 80047c6:	d84b      	bhi.n	8004860 <USB_ActivateEndpoint+0xb4>
 80047c8:	e8df f005 	tbb	[pc, r5]
 80047cc:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 80047d0:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047d2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047d6:	f248 0680 	movw	r6, #32896	; 0x8080
 80047da:	4334      	orrs	r4, r6
 80047dc:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047e0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80047e4:	4f9e      	ldr	r7, [pc, #632]	; (8004a60 <USB_ActivateEndpoint+0x2b4>)
 80047e6:	b2a4      	uxth	r4, r4
 80047e8:	403c      	ands	r4, r7
 80047ea:	4314      	orrs	r4, r2
 80047ec:	4334      	orrs	r4, r6
 80047ee:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80047f2:	7b0c      	ldrb	r4, [r1, #12]
 80047f4:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80047f8:	2c00      	cmp	r4, #0
 80047fa:	f040 808b 	bne.w	8004914 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047fe:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8004800:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004802:	0864      	lsrs	r4, r4, #1
 8004804:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8004806:	b36e      	cbz	r6, 8004864 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004808:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800480c:	b289      	uxth	r1, r1
 800480e:	4461      	add	r1, ip
 8004810:	f8a1 4400 	strh.w	r4, [r1, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004814:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004818:	0649      	lsls	r1, r1, #25
 800481a:	d509      	bpl.n	8004830 <USB_ActivateEndpoint+0x84>
 800481c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004820:	b289      	uxth	r1, r1
 8004822:	4039      	ands	r1, r7
 8004824:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004828:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800482c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004830:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004834:	4c8b      	ldr	r4, [pc, #556]	; (8004a64 <USB_ActivateEndpoint+0x2b8>)
 8004836:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8004838:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800483a:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 800483e:	d001      	beq.n	8004844 <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004840:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004844:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800484c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8004850:	e04a      	b.n	80048e8 <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004852:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004856:	2000      	movs	r0, #0
      break;
 8004858:	e7bd      	b.n	80047d6 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800485a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 800485e:	e7fa      	b.n	8004856 <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8004860:	2001      	movs	r0, #1
 8004862:	e7b8      	b.n	80047d6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004864:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004868:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800486a:	b2ad      	uxth	r5, r5
 800486c:	4465      	add	r5, ip
 800486e:	f8a5 4408 	strh.w	r4, [r5, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004872:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004876:	293e      	cmp	r1, #62	; 0x3e
 8004878:	b2a4      	uxth	r4, r4
 800487a:	4464      	add	r4, ip
 800487c:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 8004880:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004884:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 8004888:	d92f      	bls.n	80048ea <USB_ActivateEndpoint+0x13e>
 800488a:	094d      	lsrs	r5, r1, #5
 800488c:	06ce      	lsls	r6, r1, #27
 800488e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8004892:	bf08      	it	eq
 8004894:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8004898:	b289      	uxth	r1, r1
 800489a:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800489e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80048a2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80048a6:	b289      	uxth	r1, r1
 80048a8:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ac:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048b0:	044f      	lsls	r7, r1, #17
 80048b2:	d50d      	bpl.n	80048d0 <USB_ActivateEndpoint+0x124>
 80048b4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048b8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80048bc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80048c0:	0409      	lsls	r1, r1, #16
 80048c2:	0c09      	lsrs	r1, r1, #16
 80048c4:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80048c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80048cc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 80048d0:	4c65      	ldr	r4, [pc, #404]	; (8004a68 <USB_ActivateEndpoint+0x2bc>)
 80048d2:	b9c2      	cbnz	r2, 8004906 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	b292      	uxth	r2, r2
 80048d8:	4022      	ands	r2, r4
 80048da:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80048de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048e6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80048e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048ea:	b911      	cbnz	r1, 80048f2 <USB_ActivateEndpoint+0x146>
 80048ec:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80048f0:	e7d5      	b.n	800489e <USB_ActivateEndpoint+0xf2>
 80048f2:	084d      	lsrs	r5, r1, #1
 80048f4:	07c9      	lsls	r1, r1, #31
 80048f6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80048fa:	bf48      	it	mi
 80048fc:	3501      	addmi	r5, #1
 80048fe:	b289      	uxth	r1, r1
 8004900:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004904:	e7cf      	b.n	80048a6 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004906:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800490a:	b289      	uxth	r1, r1
 800490c:	4021      	ands	r1, r4
 800490e:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8004912:	e797      	b.n	8004844 <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 8004914:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004916:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 800491a:	d15b      	bne.n	80049d4 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800491c:	b2a4      	uxth	r4, r4
 800491e:	403c      	ands	r4, r7
 8004920:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8004924:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004928:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800492c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004930:	890e      	ldrh	r6, [r1, #8]
 8004932:	b2a4      	uxth	r4, r4
 8004934:	0876      	lsrs	r6, r6, #1
 8004936:	4464      	add	r4, ip
 8004938:	0076      	lsls	r6, r6, #1
 800493a:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 800493e:	894e      	ldrh	r6, [r1, #10]
 8004940:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004944:	0876      	lsrs	r6, r6, #1
 8004946:	b2a4      	uxth	r4, r4
 8004948:	4464      	add	r4, ip
 800494a:	0076      	lsls	r6, r6, #1
 800494c:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8004950:	7849      	ldrb	r1, [r1, #1]
 8004952:	2900      	cmp	r1, #0
 8004954:	d148      	bne.n	80049e8 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004956:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800495a:	044e      	lsls	r6, r1, #17
 800495c:	d50d      	bpl.n	800497a <USB_ActivateEndpoint+0x1ce>
 800495e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004962:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004966:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800496a:	0409      	lsls	r1, r1, #16
 800496c:	0c09      	lsrs	r1, r1, #16
 800496e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004972:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004976:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800497a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800497e:	064d      	lsls	r5, r1, #25
 8004980:	d50d      	bpl.n	800499e <USB_ActivateEndpoint+0x1f2>
 8004982:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004986:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800498a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800498e:	0409      	lsls	r1, r1, #16
 8004990:	0c09      	lsrs	r1, r1, #16
 8004992:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004996:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800499a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800499e:	f248 0480 	movw	r4, #32896	; 0x8080
 80049a2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049a6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80049aa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80049ae:	0409      	lsls	r1, r1, #16
 80049b0:	0c09      	lsrs	r1, r1, #16
 80049b2:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80049b6:	4321      	orrs	r1, r4
 80049b8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049bc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049c0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80049c4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80049c8:	0409      	lsls	r1, r1, #16
 80049ca:	0c09      	lsrs	r1, r1, #16
 80049cc:	430c      	orrs	r4, r1
 80049ce:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80049d2:	e789      	b.n	80048e8 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049d4:	f424 44e2 	bic.w	r4, r4, #28928	; 0x7100
 80049d8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80049dc:	0424      	lsls	r4, r4, #16
 80049de:	0c24      	lsrs	r4, r4, #16
 80049e0:	4326      	orrs	r6, r4
 80049e2:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 80049e6:	e7a1      	b.n	800492c <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049e8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049ec:	044c      	lsls	r4, r1, #17
 80049ee:	d50d      	bpl.n	8004a0c <USB_ActivateEndpoint+0x260>
 80049f0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049f4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80049f8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80049fc:	0409      	lsls	r1, r1, #16
 80049fe:	0c09      	lsrs	r1, r1, #16
 8004a00:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004a04:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004a08:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a0c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a10:	0649      	lsls	r1, r1, #25
 8004a12:	d50d      	bpl.n	8004a30 <USB_ActivateEndpoint+0x284>
 8004a14:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a18:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004a1c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004a20:	0409      	lsls	r1, r1, #16
 8004a22:	0c09      	lsrs	r1, r1, #16
 8004a24:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004a28:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004a2c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a30:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a34:	4c0b      	ldr	r4, [pc, #44]	; (8004a64 <USB_ActivateEndpoint+0x2b8>)
 8004a36:	b289      	uxth	r1, r1
 8004a38:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004a3a:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a3c:	bf18      	it	ne
 8004a3e:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a42:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004a46:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004a4a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a4e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a52:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004a56:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004a5a:	0409      	lsls	r1, r1, #16
 8004a5c:	0c09      	lsrs	r1, r1, #16
 8004a5e:	e6f1      	b.n	8004844 <USB_ActivateEndpoint+0x98>
 8004a60:	ffff8f8f 	.word	0xffff8f8f
 8004a64:	ffff8fbf 	.word	0xffff8fbf
 8004a68:	ffffbf8f 	.word	0xffffbf8f

08004a6c <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004a6c:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a6e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004a70:	7b09      	ldrb	r1, [r1, #12]
 8004a72:	bbd9      	cbnz	r1, 8004aec <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004a74:	b30a      	cbz	r2, 8004aba <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a76:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a7a:	0651      	lsls	r1, r2, #25
 8004a7c:	d50d      	bpl.n	8004a9a <USB_DeactivateEndpoint+0x2e>
 8004a7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a82:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004a86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a8a:	0412      	lsls	r2, r2, #16
 8004a8c:	0c12      	lsrs	r2, r2, #16
 8004a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a92:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004a96:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a9e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aa6:	0412      	lsls	r2, r2, #16
 8004aa8:	0c12      	lsrs	r2, r2, #16
 8004aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ab2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004abe:	0452      	lsls	r2, r2, #17
 8004ac0:	d50d      	bpl.n	8004ade <USB_DeactivateEndpoint+0x72>
 8004ac2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ac6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004aca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ace:	0412      	lsls	r2, r2, #16
 8004ad0:	0c12      	lsrs	r2, r2, #16
 8004ad2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ada:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ade:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ae2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ae6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004aea:	e7dc      	b.n	8004aa6 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8004aec:	2a00      	cmp	r2, #0
 8004aee:	d14a      	bne.n	8004b86 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004af4:	0451      	lsls	r1, r2, #17
 8004af6:	d50d      	bpl.n	8004b14 <USB_DeactivateEndpoint+0xa8>
 8004af8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004afc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b04:	0412      	lsls	r2, r2, #16
 8004b06:	0c12      	lsrs	r2, r2, #16
 8004b08:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b10:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b14:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b18:	0652      	lsls	r2, r2, #25
 8004b1a:	d50d      	bpl.n	8004b38 <USB_DeactivateEndpoint+0xcc>
 8004b1c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b20:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b28:	0412      	lsls	r2, r2, #16
 8004b2a:	0c12      	lsrs	r2, r2, #16
 8004b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b30:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004b34:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b38:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004b3c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b40:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b48:	0412      	lsls	r2, r2, #16
 8004b4a:	0c12      	lsrs	r2, r2, #16
 8004b4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b50:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004b54:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b64:	0412      	lsls	r2, r2, #16
 8004b66:	0c12      	lsrs	r2, r2, #16
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b6e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b7a:	0412      	lsls	r2, r2, #16
 8004b7c:	0c12      	lsrs	r2, r2, #16
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8004b84:	e797      	b.n	8004ab6 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b8a:	0451      	lsls	r1, r2, #17
 8004b8c:	d50d      	bpl.n	8004baa <USB_DeactivateEndpoint+0x13e>
 8004b8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b92:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004b96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b9a:	0412      	lsls	r2, r2, #16
 8004b9c:	0c12      	lsrs	r2, r2, #16
 8004b9e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ba6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004baa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bae:	0652      	lsls	r2, r2, #25
 8004bb0:	d50d      	bpl.n	8004bce <USB_DeactivateEndpoint+0x162>
 8004bb2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bb6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004bba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bbe:	0412      	lsls	r2, r2, #16
 8004bc0:	0c12      	lsrs	r2, r2, #16
 8004bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004bca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bce:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004bd2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bd6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004bda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bde:	0412      	lsls	r2, r2, #16
 8004be0:	0c12      	lsrs	r2, r2, #16
 8004be2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bf2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfa:	0412      	lsls	r2, r2, #16
 8004bfc:	0c12      	lsrs	r2, r2, #16
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c04:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c10:	e7b3      	b.n	8004b7a <USB_DeactivateEndpoint+0x10e>

08004c12 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004c12:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004c14:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8004c16:	b18b      	cbz	r3, 8004c3c <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004c18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004c38:	2000      	movs	r0, #0
 8004c3a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	0c1b      	lsrs	r3, r3, #16
 8004c4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c50:	e7ec      	b.n	8004c2c <USB_EPSetStall+0x1a>

08004c52 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004c52:	7b0b      	ldrb	r3, [r1, #12]
 8004c54:	bb3b      	cbnz	r3, 8004ca6 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8004c56:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c58:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8004c5a:	b333      	cbz	r3, 8004caa <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c60:	065b      	lsls	r3, r3, #25
 8004c62:	d50d      	bpl.n	8004c80 <USB_EPClearStall+0x2e>
 8004c64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	0c1b      	lsrs	r3, r3, #16
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004c80:	78cb      	ldrb	r3, [r1, #3]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d00f      	beq.n	8004ca6 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004caa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004cae:	045b      	lsls	r3, r3, #17
 8004cb0:	d50d      	bpl.n	8004cce <USB_EPClearStall+0x7c>
 8004cb2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004ce2:	e7da      	b.n	8004c9a <USB_EPClearStall+0x48>

08004ce4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004ce4:	b911      	cbnz	r1, 8004cec <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004cec:	2000      	movs	r0, #0
 8004cee:	4770      	bx	lr

08004cf0 <USB_DevConnect>:
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	4770      	bx	lr

08004cf4 <USB_DevDisconnect>:
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4770      	bx	lr

08004cf8 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004cf8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004cfc:	b280      	uxth	r0, r0
 8004cfe:	4770      	bx	lr

08004d00 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004d00:	2000      	movs	r0, #0
 8004d02:	4770      	bx	lr

08004d04 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d04:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d08:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d0a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8004d14:	4283      	cmp	r3, r0
 8004d16:	d100      	bne.n	8004d1a <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8004d18:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004d1a:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004d1e:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8004d22:	e7f7      	b.n	8004d14 <USB_WritePMA+0x10>

08004d24 <USB_EPStartXfer>:
{
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8004d2a:	7849      	ldrb	r1, [r1, #1]
{
 8004d2c:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8004d2e:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8004d30:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8004d32:	f040 8118 	bne.w	8004f66 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8004d36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004d3a:	69a7      	ldr	r7, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d3c:	6961      	ldr	r1, [r4, #20]
 8004d3e:	454f      	cmp	r7, r9
 8004d40:	bf28      	it	cs
 8004d42:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8004d44:	bb0a      	cbnz	r2, 8004d8a <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d46:	b2bf      	uxth	r7, r7
 8004d48:	88e2      	ldrh	r2, [r4, #6]
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	f7ff ffda 	bl	8004d04 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d50:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004d54:	7821      	ldrb	r1, [r4, #0]
 8004d56:	b280      	uxth	r0, r0
 8004d58:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8004d5c:	0109      	lsls	r1, r1, #4
 8004d5e:	4402      	add	r2, r0
 8004d60:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004d62:	7822      	ldrb	r2, [r4, #0]
 8004d64:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d70:	041b      	lsls	r3, r3, #16
 8004d72:	0c1b      	lsrs	r3, r3, #16
 8004d74:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8004d78:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8004d8a:	78e3      	ldrb	r3, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d8c:	f894 e000 	ldrb.w	lr, [r4]
      if (ep->type == EP_TYPE_BULK)
 8004d90:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8004d92:	6a26      	ldr	r6, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d94:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8004d98:	f040 80d0 	bne.w	8004f3c <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8004d9c:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d9e:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8004da2:	f080 80b4 	bcs.w	8004f0e <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004da6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004dae:	0412      	lsls	r2, r2, #16
 8004db0:	0c12      	lsrs	r2, r2, #16
 8004db2:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dba:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dbe:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dc2:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004dc6:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dc8:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8004dcc:	6226      	str	r6, [r4, #32]
            ep->xfer_buff += len;
 8004dce:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dd2:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dd4:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dd8:	d04e      	beq.n	8004e78 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dda:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8004dde:	4472      	add	r2, lr
 8004de0:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004de4:	8962      	ldrh	r2, [r4, #10]
 8004de6:	f7ff ff8d 	bl	8004d04 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004dea:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8004dec:	bf36      	itet	cc
 8004dee:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8004df0:	2300      	movcs	r3, #0
 8004df2:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004df4:	7862      	ldrb	r2, [r4, #1]
 8004df6:	6223      	str	r3, [r4, #32]
            ep->xfer_buff += len;
 8004df8:	f8c4 a014 	str.w	sl, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dfc:	b2b3      	uxth	r3, r6
 8004dfe:	bb7a      	cbnz	r2, 8004e60 <USB_EPStartXfer+0x13c>
 8004e00:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004e04:	7820      	ldrb	r0, [r4, #0]
 8004e06:	b292      	uxth	r2, r2
 8004e08:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8004e0c:	0100      	lsls	r0, r0, #4
 8004e0e:	4411      	add	r1, r2
 8004e10:	5a42      	ldrh	r2, [r0, r1]
 8004e12:	2e3e      	cmp	r6, #62	; 0x3e
 8004e14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e18:	5242      	strh	r2, [r0, r1]
 8004e1a:	d915      	bls.n	8004e48 <USB_EPStartXfer+0x124>
 8004e1c:	06f2      	lsls	r2, r6, #27
 8004e1e:	5a42      	ldrh	r2, [r0, r1]
 8004e20:	ea4f 1756 	mov.w	r7, r6, lsr #5
 8004e24:	bf08      	it	eq
 8004e26:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004e2a:	b292      	uxth	r2, r2
 8004e2c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004e30:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004e34:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004e38:	b292      	uxth	r2, r2
 8004e3a:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e3c:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e3e:	4651      	mov	r1, sl
 8004e40:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e42:	f7ff ff5f 	bl	8004d04 <USB_WritePMA>
 8004e46:	e78c      	b.n	8004d62 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e48:	b90e      	cbnz	r6, 8004e4e <USB_EPStartXfer+0x12a>
 8004e4a:	5a42      	ldrh	r2, [r0, r1]
 8004e4c:	e7f0      	b.n	8004e30 <USB_EPStartXfer+0x10c>
 8004e4e:	5a42      	ldrh	r2, [r0, r1]
 8004e50:	0877      	lsrs	r7, r6, #1
 8004e52:	07f6      	lsls	r6, r6, #31
 8004e54:	bf48      	it	mi
 8004e56:	3701      	addmi	r7, #1
 8004e58:	b292      	uxth	r2, r2
 8004e5a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004e5e:	e7eb      	b.n	8004e38 <USB_EPStartXfer+0x114>
 8004e60:	2a01      	cmp	r2, #1
 8004e62:	d1eb      	bne.n	8004e3c <USB_EPStartXfer+0x118>
 8004e64:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004e68:	7821      	ldrb	r1, [r4, #0]
 8004e6a:	b280      	uxth	r0, r0
 8004e6c:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8004e70:	0109      	lsls	r1, r1, #4
 8004e72:	4402      	add	r2, r0
 8004e74:	528b      	strh	r3, [r1, r2]
 8004e76:	e7e1      	b.n	8004e3c <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e78:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004e7c:	4472      	add	r2, lr
 8004e7e:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e82:	8922      	ldrh	r2, [r4, #8]
 8004e84:	f7ff ff3e 	bl	8004d04 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004e88:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8004e8a:	bf36      	itet	cc
 8004e8c:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8004e8e:	4643      	movcs	r3, r8
 8004e90:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e92:	7862      	ldrb	r2, [r4, #1]
 8004e94:	6223      	str	r3, [r4, #32]
            ep->xfer_buff += len;
 8004e96:	f8c4 a014 	str.w	sl, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e9a:	b2b3      	uxth	r3, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e9c:	bb5a      	cbnz	r2, 8004ef6 <USB_EPStartXfer+0x1d2>
 8004e9e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004ea2:	7820      	ldrb	r0, [r4, #0]
 8004ea4:	b292      	uxth	r2, r2
 8004ea6:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8004eaa:	0100      	lsls	r0, r0, #4
 8004eac:	4411      	add	r1, r2
 8004eae:	5a42      	ldrh	r2, [r0, r1]
 8004eb0:	2e3e      	cmp	r6, #62	; 0x3e
 8004eb2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004eb6:	5242      	strh	r2, [r0, r1]
 8004eb8:	d911      	bls.n	8004ede <USB_EPStartXfer+0x1ba>
 8004eba:	06f2      	lsls	r2, r6, #27
 8004ebc:	5a42      	ldrh	r2, [r0, r1]
 8004ebe:	ea4f 1756 	mov.w	r7, r6, lsr #5
 8004ec2:	bf08      	it	eq
 8004ec4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004ec8:	b292      	uxth	r2, r2
 8004eca:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004ece:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004ed2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eda:	8962      	ldrh	r2, [r4, #10]
 8004edc:	e7af      	b.n	8004e3e <USB_EPStartXfer+0x11a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ede:	b90e      	cbnz	r6, 8004ee4 <USB_EPStartXfer+0x1c0>
 8004ee0:	5a42      	ldrh	r2, [r0, r1]
 8004ee2:	e7f4      	b.n	8004ece <USB_EPStartXfer+0x1aa>
 8004ee4:	5a42      	ldrh	r2, [r0, r1]
 8004ee6:	0877      	lsrs	r7, r6, #1
 8004ee8:	07f6      	lsls	r6, r6, #31
 8004eea:	bf48      	it	mi
 8004eec:	3701      	addmi	r7, #1
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004ef4:	e7ef      	b.n	8004ed6 <USB_EPStartXfer+0x1b2>
 8004ef6:	2a01      	cmp	r2, #1
 8004ef8:	d1ef      	bne.n	8004eda <USB_EPStartXfer+0x1b6>
 8004efa:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004efe:	7821      	ldrb	r1, [r4, #0]
 8004f00:	b280      	uxth	r0, r0
 8004f02:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8004f06:	0109      	lsls	r1, r1, #4
 8004f08:	4402      	add	r2, r0
 8004f0a:	528b      	strh	r3, [r1, r2]
 8004f0c:	e7e5      	b.n	8004eda <USB_EPStartXfer+0x1b6>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004f0e:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8004f12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f16:	0412      	lsls	r2, r2, #16
 8004f18:	0c12      	lsrs	r2, r2, #16
 8004f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f22:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f26:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004f2a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	441a      	add	r2, r3
 8004f32:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f34:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f38:	8922      	ldrh	r2, [r4, #8]
 8004f3a:	e782      	b.n	8004e42 <USB_EPStartXfer+0x11e>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f3c:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 8004f40:	1bf6      	subs	r6, r6, r7
 8004f42:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f44:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f48:	0652      	lsls	r2, r2, #25
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f4a:	b2bb      	uxth	r3, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f4c:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f4e:	d506      	bpl.n	8004f5e <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f50:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8004f54:	4432      	add	r2, r6
 8004f56:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f5a:	8962      	ldrh	r2, [r4, #10]
 8004f5c:	e771      	b.n	8004e42 <USB_EPStartXfer+0x11e>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f5e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004f62:	4432      	add	r2, r6
 8004f64:	e7e6      	b.n	8004f34 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8004f66:	b9d2      	cbnz	r2, 8004f9e <USB_EPStartXfer+0x27a>
      if (ep->xfer_len > ep->maxpacket)
 8004f68:	69a3      	ldr	r3, [r4, #24]
 8004f6a:	6921      	ldr	r1, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f6c:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
      if (ep->xfer_len > ep->maxpacket)
 8004f70:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8004f72:	bf84      	itt	hi
 8004f74:	1a5a      	subhi	r2, r3, r1
 8004f76:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f78:	7821      	ldrb	r1, [r4, #0]
 8004f7a:	61a2      	str	r2, [r4, #24]
 8004f7c:	b280      	uxth	r0, r0
 8004f7e:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8004f82:	0109      	lsls	r1, r1, #4
 8004f84:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f86:	5a50      	ldrh	r0, [r2, r1]
 8004f88:	2b3e      	cmp	r3, #62	; 0x3e
 8004f8a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004f8e:	5250      	strh	r0, [r2, r1]
 8004f90:	f200 80c5 	bhi.w	800511e <USB_EPStartXfer+0x3fa>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 80d2 	bne.w	800513e <USB_EPStartXfer+0x41a>
 8004f9a:	5a53      	ldrh	r3, [r2, r1]
 8004f9c:	e0c8      	b.n	8005130 <USB_EPStartXfer+0x40c>
      if (ep->type == EP_TYPE_BULK)
 8004f9e:	78e3      	ldrb	r3, [r4, #3]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d17c      	bne.n	800509e <USB_EPStartXfer+0x37a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	d14b      	bne.n	8005040 <USB_EPStartXfer+0x31c>
 8004fa8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004fac:	7820      	ldrb	r0, [r4, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8004fb4:	0100      	lsls	r0, r0, #4
 8004fb6:	4419      	add	r1, r3
 8004fb8:	5a43      	ldrh	r3, [r0, r1]
 8004fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fbe:	5243      	strh	r3, [r0, r1]
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc4:	d920      	bls.n	8005008 <USB_EPStartXfer+0x2e4>
 8004fc6:	5a42      	ldrh	r2, [r0, r1]
 8004fc8:	095e      	lsrs	r6, r3, #5
 8004fca:	06df      	lsls	r7, r3, #27
 8004fcc:	bf08      	it	eq
 8004fce:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004fd2:	b292      	uxth	r2, r2
 8004fd4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8004fd8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004fdc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	5242      	strh	r2, [r0, r1]
 8004fe4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004fe8:	7822      	ldrb	r2, [r4, #0]
 8004fea:	b280      	uxth	r0, r0
 8004fec:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	4401      	add	r1, r0
 8004ff4:	5a50      	ldrh	r0, [r2, r1]
 8004ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004ffc:	5250      	strh	r0, [r2, r1]
 8004ffe:	d810      	bhi.n	8005022 <USB_EPStartXfer+0x2fe>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d143      	bne.n	800508c <USB_EPStartXfer+0x368>
 8005004:	5a53      	ldrh	r3, [r2, r1]
 8005006:	e015      	b.n	8005034 <USB_EPStartXfer+0x310>
 8005008:	b90b      	cbnz	r3, 800500e <USB_EPStartXfer+0x2ea>
 800500a:	5a42      	ldrh	r2, [r0, r1]
 800500c:	e7e4      	b.n	8004fd8 <USB_EPStartXfer+0x2b4>
 800500e:	07da      	lsls	r2, r3, #31
 8005010:	5a42      	ldrh	r2, [r0, r1]
 8005012:	ea4f 0653 	mov.w	r6, r3, lsr #1
 8005016:	bf48      	it	mi
 8005018:	3601      	addmi	r6, #1
 800501a:	b292      	uxth	r2, r2
 800501c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005020:	e7de      	b.n	8004fe0 <USB_EPStartXfer+0x2bc>
 8005022:	0958      	lsrs	r0, r3, #5
 8005024:	06df      	lsls	r7, r3, #27
 8005026:	5a53      	ldrh	r3, [r2, r1]
 8005028:	bf08      	it	eq
 800502a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800502e:	b29b      	uxth	r3, r3
 8005030:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503c:	b29b      	uxth	r3, r3
 800503e:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 8005040:	69e3      	ldr	r3, [r4, #28]
 8005042:	b1bb      	cbz	r3, 8005074 <USB_EPStartXfer+0x350>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005044:	f244 0340 	movw	r3, #16448	; 0x4040
 8005048:	7822      	ldrb	r2, [r4, #0]
 800504a:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800504e:	ea03 0001 	and.w	r0, r3, r1
 8005052:	438b      	bics	r3, r1
 8005054:	d000      	beq.n	8005058 <USB_EPStartXfer+0x334>
 8005056:	b968      	cbnz	r0, 8005074 <USB_EPStartXfer+0x350>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005058:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800505c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005070:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005074:	7822      	ldrb	r2, [r4, #0]
 8005076:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800507a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800508a:	e675      	b.n	8004d78 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800508c:	0858      	lsrs	r0, r3, #1
 800508e:	07de      	lsls	r6, r3, #31
 8005090:	5a53      	ldrh	r3, [r2, r1]
 8005092:	bf48      	it	mi
 8005094:	3001      	addmi	r0, #1
 8005096:	b29b      	uxth	r3, r3
 8005098:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800509c:	e7ce      	b.n	800503c <USB_EPStartXfer+0x318>
      else if (ep->type == EP_TYPE_ISOC)
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d156      	bne.n	8005150 <USB_EPStartXfer+0x42c>
        if (ep->xfer_len > ep->maxpacket)
 80050a2:	69a3      	ldr	r3, [r4, #24]
 80050a4:	6922      	ldr	r2, [r4, #16]
 80050a6:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 80050a8:	bf94      	ite	ls
 80050aa:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 80050ac:	1a98      	subhi	r0, r3, r2
 80050ae:	61a0      	str	r0, [r4, #24]
 80050b0:	bf88      	it	hi
 80050b2:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050b4:	2900      	cmp	r1, #0
 80050b6:	d1dd      	bne.n	8005074 <USB_EPStartXfer+0x350>
 80050b8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80050bc:	7820      	ldrb	r0, [r4, #0]
 80050be:	b292      	uxth	r2, r2
 80050c0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80050c4:	0100      	lsls	r0, r0, #4
 80050c6:	4411      	add	r1, r2
 80050c8:	5a42      	ldrh	r2, [r0, r1]
 80050ca:	2b3e      	cmp	r3, #62	; 0x3e
 80050cc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80050d0:	5242      	strh	r2, [r0, r1]
 80050d2:	d918      	bls.n	8005106 <USB_EPStartXfer+0x3e2>
 80050d4:	06da      	lsls	r2, r3, #27
 80050d6:	5a42      	ldrh	r2, [r0, r1]
 80050d8:	ea4f 1653 	mov.w	r6, r3, lsr #5
 80050dc:	bf08      	it	eq
 80050de:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80050e2:	b292      	uxth	r2, r2
 80050e4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80050e8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80050ec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80050f0:	b292      	uxth	r2, r2
 80050f2:	5242      	strh	r2, [r0, r1]
 80050f4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80050f8:	7822      	ldrb	r2, [r4, #0]
 80050fa:	b280      	uxth	r0, r0
 80050fc:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8005100:	0112      	lsls	r2, r2, #4
 8005102:	4401      	add	r1, r0
 8005104:	e73f      	b.n	8004f86 <USB_EPStartXfer+0x262>
 8005106:	b90b      	cbnz	r3, 800510c <USB_EPStartXfer+0x3e8>
 8005108:	5a42      	ldrh	r2, [r0, r1]
 800510a:	e7ed      	b.n	80050e8 <USB_EPStartXfer+0x3c4>
 800510c:	5a42      	ldrh	r2, [r0, r1]
 800510e:	085e      	lsrs	r6, r3, #1
 8005110:	07df      	lsls	r7, r3, #31
 8005112:	bf48      	it	mi
 8005114:	3601      	addmi	r6, #1
 8005116:	b292      	uxth	r2, r2
 8005118:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800511c:	e7e8      	b.n	80050f0 <USB_EPStartXfer+0x3cc>
 800511e:	0958      	lsrs	r0, r3, #5
 8005120:	06de      	lsls	r6, r3, #27
 8005122:	5a53      	ldrh	r3, [r2, r1]
 8005124:	bf08      	it	eq
 8005126:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800512a:	b29b      	uxth	r3, r3
 800512c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005138:	b29b      	uxth	r3, r3
 800513a:	5253      	strh	r3, [r2, r1]
 800513c:	e79a      	b.n	8005074 <USB_EPStartXfer+0x350>
 800513e:	0858      	lsrs	r0, r3, #1
 8005140:	07db      	lsls	r3, r3, #31
 8005142:	5a53      	ldrh	r3, [r2, r1]
 8005144:	bf48      	it	mi
 8005146:	3001      	addmi	r0, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800514e:	e7f3      	b.n	8005138 <USB_EPStartXfer+0x414>
        return HAL_ERROR;
 8005150:	2001      	movs	r0, #1
 8005152:	e618      	b.n	8004d86 <USB_EPStartXfer+0x62>

08005154 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005154:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8005158:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800515a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800515e:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8005160:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005162:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8005164:	462e      	mov	r6, r5
 8005166:	3402      	adds	r4, #2
 8005168:	b936      	cbnz	r6, 8005178 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800516a:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800516c:	bf44      	itt	mi
 800516e:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005172:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8005176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8005178:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 800517c:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800517e:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005180:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005184:	0a12      	lsrs	r2, r2, #8
 8005186:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 800518a:	e7ec      	b.n	8005166 <USB_ReadPMA+0x12>

0800518c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800518c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8005190:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005192:	b16b      	cbz	r3, 80051b0 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005194:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005198:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800519c:	28ff      	cmp	r0, #255	; 0xff
 800519e:	d007      	beq.n	80051b0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	4621      	mov	r1, r4
 80051a4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80051a8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80051aa:	23ff      	movs	r3, #255	; 0xff
 80051ac:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80051b0:	2000      	movs	r0, #0
 80051b2:	bd10      	pop	{r4, pc}

080051b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051b4:	2343      	movs	r3, #67	; 0x43
 80051b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80051b8:	4800      	ldr	r0, [pc, #0]	; (80051bc <USBD_CDC_GetFSCfgDesc+0x8>)
 80051ba:	4770      	bx	lr
 80051bc:	2000008c 	.word	0x2000008c

080051c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051c0:	2343      	movs	r3, #67	; 0x43
 80051c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80051c4:	4800      	ldr	r0, [pc, #0]	; (80051c8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80051c6:	4770      	bx	lr
 80051c8:	200000d0 	.word	0x200000d0

080051cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051cc:	2343      	movs	r3, #67	; 0x43
 80051ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80051d0:	4800      	ldr	r0, [pc, #0]	; (80051d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80051d2:	4770      	bx	lr
 80051d4:	20000120 	.word	0x20000120

080051d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051d8:	230a      	movs	r3, #10
 80051da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80051dc:	4800      	ldr	r0, [pc, #0]	; (80051e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80051de:	4770      	bx	lr
 80051e0:	20000114 	.word	0x20000114

080051e4 <USBD_CDC_DataOut>:
{
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051e8:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051ec:	f000 ff69 	bl	80060c2 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80051f0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051f4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80051f8:	b14b      	cbz	r3, 800520e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051fa:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80051fe:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005208:	4798      	blx	r3
    return USBD_OK;
 800520a:	2000      	movs	r0, #0
}
 800520c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800520e:	2002      	movs	r0, #2
 8005210:	e7fc      	b.n	800520c <USBD_CDC_DataOut+0x28>

08005212 <USBD_CDC_DataIn>:
{
 8005212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005214:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8005218:	b1d6      	cbz	r6, 8005250 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800521a:	2414      	movs	r4, #20
 800521c:	fb04 0301 	mla	r3, r4, r1, r0
 8005220:	69dc      	ldr	r4, [r3, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005222:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005226:	b17c      	cbz	r4, 8005248 <USBD_CDC_DataIn+0x36>
 8005228:	2728      	movs	r7, #40	; 0x28
 800522a:	fb07 5201 	mla	r2, r7, r1, r5
 800522e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005230:	fbb4 f5f2 	udiv	r5, r4, r2
 8005234:	fb02 4415 	mls	r4, r2, r5, r4
 8005238:	b934      	cbnz	r4, 8005248 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800523a:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800523c:	4622      	mov	r2, r4
 800523e:	4623      	mov	r3, r4
 8005240:	f000 ff2d 	bl	800609e <USBD_LL_Transmit>
    return USBD_OK;
 8005244:	4620      	mov	r0, r4
}
 8005246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8005248:	2000      	movs	r0, #0
 800524a:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800524e:	e7fa      	b.n	8005246 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8005250:	2002      	movs	r0, #2
 8005252:	e7f8      	b.n	8005246 <USBD_CDC_DataIn+0x34>

08005254 <USBD_CDC_Setup>:
{
 8005254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8005258:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800525c:	780a      	ldrb	r2, [r1, #0]
{
 800525e:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005260:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8005264:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005266:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800526a:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800526e:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005272:	d028      	beq.n	80052c6 <USBD_CDC_Setup+0x72>
 8005274:	2c20      	cmp	r4, #32
 8005276:	d142      	bne.n	80052fe <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8005278:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800527a:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800527c:	b1e4      	cbz	r4, 80052b8 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 800527e:	0612      	lsls	r2, r2, #24
 8005280:	d511      	bpl.n	80052a6 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005282:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8005286:	4639      	mov	r1, r7
 8005288:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800528c:	4618      	mov	r0, r3
 800528e:	4622      	mov	r2, r4
 8005290:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005292:	4639      	mov	r1, r7
 8005294:	4628      	mov	r0, r5
 8005296:	88f2      	ldrh	r2, [r6, #6]
 8005298:	f000 fc47 	bl	8005b2a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800529c:	4644      	mov	r4, r8
}
 800529e:	4620      	mov	r0, r4
 80052a0:	b003      	add	sp, #12
 80052a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052a6:	4622      	mov	r2, r4
 80052a8:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 80052aa:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80052ae:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052b2:	f000 fc4f 	bl	8005b54 <USBD_CtlPrepareRx>
 80052b6:	e7f1      	b.n	800529c <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052b8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80052bc:	4618      	mov	r0, r3
 80052be:	6895      	ldr	r5, [r2, #8]
 80052c0:	4622      	mov	r2, r4
 80052c2:	47a8      	blx	r5
 80052c4:	e7eb      	b.n	800529e <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80052c6:	784b      	ldrb	r3, [r1, #1]
 80052c8:	2b0a      	cmp	r3, #10
 80052ca:	d00c      	beq.n	80052e6 <USBD_CDC_Setup+0x92>
 80052cc:	2b0b      	cmp	r3, #11
 80052ce:	d012      	beq.n	80052f6 <USBD_CDC_Setup+0xa2>
 80052d0:	b9ab      	cbnz	r3, 80052fe <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d111      	bne.n	80052fe <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80052da:	2202      	movs	r2, #2
 80052dc:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80052e0:	f000 fc23 	bl	8005b2a <USBD_CtlSendData>
 80052e4:	e7db      	b.n	800529e <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d107      	bne.n	80052fe <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80052ee:	2201      	movs	r2, #1
 80052f0:	f10d 0105 	add.w	r1, sp, #5
 80052f4:	e7f4      	b.n	80052e0 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d0cf      	beq.n	800529e <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	f000 fbeb 	bl	8005adc <USBD_CtlError>
          ret = USBD_FAIL;
 8005306:	2402      	movs	r4, #2
          break;
 8005308:	e7c9      	b.n	800529e <USBD_CDC_Setup+0x4a>

0800530a <USBD_CDC_DeInit>:
{
 800530a:	b538      	push	{r3, r4, r5, lr}
 800530c:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800530e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005310:	2181      	movs	r1, #129	; 0x81
 8005312:	f000 fe8e 	bl	8006032 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005316:	2101      	movs	r1, #1
 8005318:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800531a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800531c:	f000 fe89 	bl	8006032 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005320:	2182      	movs	r1, #130	; 0x82
 8005322:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005324:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005328:	f000 fe83 	bl	8006032 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800532c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005330:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005332:	b14b      	cbz	r3, 8005348 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005334:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800533c:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005340:	f000 fec8 	bl	80060d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005344:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005348:	2000      	movs	r0, #0
 800534a:	bd38      	pop	{r3, r4, r5, pc}

0800534c <USBD_CDC_Init>:
{
 800534c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005350:	7c03      	ldrb	r3, [r0, #16]
{
 8005352:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005354:	bbb3      	cbnz	r3, 80053c4 <USBD_CDC_Init+0x78>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800535a:	2181      	movs	r1, #129	; 0x81
 800535c:	2202      	movs	r2, #2
 800535e:	f000 fe5c 	bl	800601a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005362:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005364:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005368:	62e1      	str	r1, [r4, #44]	; 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800536a:	2601      	movs	r6, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800536c:	2202      	movs	r2, #2
 800536e:	4620      	mov	r0, r4
 8005370:	f000 fe53 	bl	800601a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005374:	2308      	movs	r3, #8
 8005376:	2203      	movs	r2, #3
 8005378:	2182      	movs	r1, #130	; 0x82
 800537a:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800537c:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005380:	f000 fe4b 	bl	800601a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005384:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005388:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800538a:	f000 fe9f 	bl	80060cc <USBD_static_malloc>
 800538e:	4605      	mov	r5, r0
 8005390:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005394:	b340      	cbz	r0, 80053e8 <USBD_CDC_Init+0x9c>
    hcdc->TxState = 0U;
 8005396:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800539a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4798      	blx	r3
    hcdc->TxState = 0U;
 80053a2:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80053a6:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053aa:	7c27      	ldrb	r7, [r4, #16]
 80053ac:	b99f      	cbnz	r7, 80053d6 <USBD_CDC_Init+0x8a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053b2:	4631      	mov	r1, r6
 80053b4:	4620      	mov	r0, r4
 80053b6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80053ba:	f000 fe79 	bl	80060b0 <USBD_LL_PrepareReceive>
}
 80053be:	4638      	mov	r0, r7
 80053c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	2181      	movs	r1, #129	; 0x81
 80053c8:	2202      	movs	r2, #2
 80053ca:	f000 fe26 	bl	800601a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053ce:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053d0:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053d2:	62e1      	str	r1, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053d4:	e7c9      	b.n	800536a <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053d6:	2340      	movs	r3, #64	; 0x40
 80053d8:	4631      	mov	r1, r6
 80053da:	4620      	mov	r0, r4
 80053dc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80053e0:	f000 fe66 	bl	80060b0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80053e4:	4647      	mov	r7, r8
 80053e6:	e7ea      	b.n	80053be <USBD_CDC_Init+0x72>
    ret = 1U;
 80053e8:	4637      	mov	r7, r6
 80053ea:	e7e8      	b.n	80053be <USBD_CDC_Init+0x72>

080053ec <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80053ec:	b119      	cbz	r1, 80053f6 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80053ee:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80053f2:	2000      	movs	r0, #0
 80053f4:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80053f6:	2002      	movs	r0, #2
  }

  return ret;
}
 80053f8:	4770      	bx	lr

080053fa <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053fa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80053fe:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005400:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005404:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005408:	4770      	bx	lr

0800540a <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800540a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800540e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005410:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8005414:	4770      	bx	lr

08005416 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005416:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800541a:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800541c:	b182      	cbz	r2, 8005440 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800541e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8005422:	2301      	movs	r3, #1
 8005424:	b974      	cbnz	r4, 8005444 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005426:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800542a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800542e:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005430:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005432:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8005436:	b29b      	uxth	r3, r3
 8005438:	f000 fe31 	bl	800609e <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800543c:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800543e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005440:	2002      	movs	r0, #2
 8005442:	e7fc      	b.n	800543e <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8005444:	4618      	mov	r0, r3
 8005446:	e7fa      	b.n	800543e <USBD_CDC_TransmitPacket+0x28>

08005448 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005448:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800544c:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800544e:	b182      	cbz	r2, 8005472 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005450:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005452:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005456:	b934      	cbnz	r4, 8005466 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8005458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545c:	2101      	movs	r1, #1
 800545e:	f000 fe27 	bl	80060b0 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005462:	4620      	mov	r0, r4
 8005464:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005466:	2340      	movs	r3, #64	; 0x40
 8005468:	2101      	movs	r1, #1
 800546a:	f000 fe21 	bl	80060b0 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800546e:	2400      	movs	r4, #0
 8005470:	e7f7      	b.n	8005462 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8005472:	2402      	movs	r4, #2
 8005474:	e7f5      	b.n	8005462 <USBD_CDC_ReceivePacket+0x1a>

08005476 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005476:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005478:	b180      	cbz	r0, 800549c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800547a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800547e:	b113      	cbz	r3, 8005486 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005480:	2300      	movs	r3, #0
 8005482:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005486:	b109      	cbz	r1, 800548c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005488:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800548c:	2301      	movs	r3, #1
  pdev->id = id;
 800548e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005490:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005494:	f000 fd76 	bl	8005f84 <USBD_LL_Init>

  return USBD_OK;
 8005498:	2000      	movs	r0, #0
}
 800549a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800549c:	2002      	movs	r0, #2
 800549e:	e7fc      	b.n	800549a <USBD_Init+0x24>

080054a0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80054a0:	b119      	cbz	r1, 80054aa <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80054a2:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80054a6:	2000      	movs	r0, #0
 80054a8:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80054aa:	2002      	movs	r0, #2
  }

  return status;
}
 80054ac:	4770      	bx	lr

080054ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054ae:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80054b0:	f000 fdaa 	bl	8006008 <USBD_LL_Start>

  return USBD_OK;
}
 80054b4:	2000      	movs	r0, #0
 80054b6:	bd08      	pop	{r3, pc}

080054b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054b8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80054ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80054be:	b133      	cbz	r3, 80054ce <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4798      	blx	r3
 80054c4:	3800      	subs	r0, #0
 80054c6:	bf18      	it	ne
 80054c8:	2001      	movne	r0, #1
 80054ca:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 80054cc:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80054ce:	2002      	movs	r0, #2
 80054d0:	e7fc      	b.n	80054cc <USBD_SetClassConfig+0x14>

080054d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80054d2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80054d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4798      	blx	r3

  return USBD_OK;
}
 80054dc:	2000      	movs	r0, #0
 80054de:	bd08      	pop	{r3, pc}

080054e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054e0:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054e2:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80054e6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 fae3 	bl	8005ab4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054ee:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80054f0:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80054f4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80054f8:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80054fc:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005500:	f001 031f 	and.w	r3, r1, #31
 8005504:	2b01      	cmp	r3, #1
 8005506:	d008      	beq.n	800551a <USBD_LL_SetupStage+0x3a>
 8005508:	2b02      	cmp	r3, #2
 800550a:	d00b      	beq.n	8005524 <USBD_LL_SetupStage+0x44>
 800550c:	b97b      	cbnz	r3, 800552e <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800550e:	4629      	mov	r1, r5
 8005510:	4620      	mov	r0, r4
 8005512:	f000 f8fb 	bl	800570c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8005516:	2000      	movs	r0, #0
 8005518:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800551a:	4629      	mov	r1, r5
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fa1d 	bl	800595c <USBD_StdItfReq>
      break;
 8005522:	e7f8      	b.n	8005516 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8005524:	4629      	mov	r1, r5
 8005526:	4620      	mov	r0, r4
 8005528:	f000 fa3c 	bl	80059a4 <USBD_StdEPReq>
      break;
 800552c:	e7f3      	b.n	8005516 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800552e:	4620      	mov	r0, r4
 8005530:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005534:	f000 fd86 	bl	8006044 <USBD_LL_StallEP>
      break;
 8005538:	e7ed      	b.n	8005516 <USBD_LL_SetupStage+0x36>

0800553a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800553a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005540:	460d      	mov	r5, r1
 8005542:	bb39      	cbnz	r1, 8005594 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005544:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005548:	2b03      	cmp	r3, #3
 800554a:	d11c      	bne.n	8005586 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 800554c:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8005550:	4296      	cmp	r6, r2
 8005552:	d90b      	bls.n	800556c <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8005554:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8005556:	42b2      	cmp	r2, r6
 8005558:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 800555a:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800555e:	bf8c      	ite	hi
 8005560:	b2b2      	uxthhi	r2, r6
 8005562:	b292      	uxthls	r2, r2
 8005564:	f000 fb03 	bl	8005b6e <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005568:	4628      	mov	r0, r5
 800556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800556c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	b123      	cbz	r3, 800557e <USBD_LL_DataOutStage+0x44>
 8005574:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005578:	2a03      	cmp	r2, #3
 800557a:	d100      	bne.n	800557e <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800557c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800557e:	4620      	mov	r0, r4
 8005580:	f000 fafd 	bl	8005b7e <USBD_CtlSendStatus>
 8005584:	e7f0      	b.n	8005568 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005586:	2b05      	cmp	r3, #5
 8005588:	d1ee      	bne.n	8005568 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800558a:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800558e:	f000 fd59 	bl	8006044 <USBD_LL_StallEP>
 8005592:	e7e9      	b.n	8005568 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005594:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	b133      	cbz	r3, 80055aa <USBD_LL_DataOutStage+0x70>
 800559c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80055a0:	2a03      	cmp	r2, #3
 80055a2:	d102      	bne.n	80055aa <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80055a4:	4798      	blx	r3
  return USBD_OK;
 80055a6:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80055a8:	e7de      	b.n	8005568 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 80055aa:	2502      	movs	r5, #2
 80055ac:	e7dc      	b.n	8005568 <USBD_LL_DataOutStage+0x2e>

080055ae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b0:	4604      	mov	r4, r0
 80055b2:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055b4:	460d      	mov	r5, r1
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d147      	bne.n	800564a <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055ba:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d13c      	bne.n	800563c <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80055c2:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80055c6:	429e      	cmp	r6, r3
 80055c8:	d914      	bls.n	80055f4 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80055ca:	1af6      	subs	r6, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055cc:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80055ce:	6206      	str	r6, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055d0:	b2b2      	uxth	r2, r6
 80055d2:	f000 fab7 	bl	8005b44 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055d6:	462b      	mov	r3, r5
 80055d8:	462a      	mov	r2, r5
 80055da:	4629      	mov	r1, r5
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 fd67 	bl	80060b0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80055e2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d102      	bne.n	80055f0 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80055f0:	4628      	mov	r0, r5
 80055f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055f4:	69c2      	ldr	r2, [r0, #28]
 80055f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80055fa:	fb03 2616 	mls	r6, r3, r6, r2
 80055fe:	b95e      	cbnz	r6, 8005618 <USBD_LL_DataInStage+0x6a>
 8005600:	4293      	cmp	r3, r2
 8005602:	d809      	bhi.n	8005618 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8005604:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8005608:	429a      	cmp	r2, r3
 800560a:	d205      	bcs.n	8005618 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800560c:	460a      	mov	r2, r1
 800560e:	f000 fa99 	bl	8005b44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005612:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8005616:	e7de      	b.n	80055d6 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005618:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	b12b      	cbz	r3, 800562c <USBD_LL_DataInStage+0x7e>
 8005620:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005624:	2a03      	cmp	r2, #3
 8005626:	d101      	bne.n	800562c <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8005628:	4620      	mov	r0, r4
 800562a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	4620      	mov	r0, r4
 8005630:	f000 fd08 	bl	8006044 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005634:	4620      	mov	r0, r4
 8005636:	f000 faad 	bl	8005b94 <USBD_CtlReceiveStatus>
 800563a:	e7d2      	b.n	80055e2 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800563c:	f033 0304 	bics.w	r3, r3, #4
 8005640:	d1cf      	bne.n	80055e2 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005642:	2180      	movs	r1, #128	; 0x80
 8005644:	f000 fcfe 	bl	8006044 <USBD_LL_StallEP>
 8005648:	e7cb      	b.n	80055e2 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800564a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	b133      	cbz	r3, 8005660 <USBD_LL_DataInStage+0xb2>
 8005652:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005656:	2a03      	cmp	r2, #3
 8005658:	d102      	bne.n	8005660 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800565a:	4798      	blx	r3
  return USBD_OK;
 800565c:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 800565e:	e7c7      	b.n	80055f0 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8005660:	2502      	movs	r5, #2
 8005662:	e7c5      	b.n	80055f0 <USBD_LL_DataInStage+0x42>

08005664 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005664:	2200      	movs	r2, #0
{
 8005666:	b570      	push	{r4, r5, r6, lr}
 8005668:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800566a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800566c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800566e:	4611      	mov	r1, r2
 8005670:	2340      	movs	r3, #64	; 0x40
 8005672:	f000 fcd2 	bl	800601a <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005676:	4633      	mov	r3, r6
 8005678:	2180      	movs	r1, #128	; 0x80
 800567a:	2200      	movs	r2, #0
 800567c:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800567e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005682:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005686:	f000 fcc8 	bl	800601a <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800568a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800568c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005690:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005692:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005694:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005698:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800569c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800569e:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80056a2:	b123      	cbz	r3, 80056ae <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056a4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80056a8:	4620      	mov	r0, r4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4798      	blx	r3
  }

  return USBD_OK;
}
 80056ae:	2000      	movs	r0, #0
 80056b0:	bd70      	pop	{r4, r5, r6, pc}

080056b2 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80056b2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80056b4:	2000      	movs	r0, #0
 80056b6:	4770      	bx	lr

080056b8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80056b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80056bc:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80056c0:	2304      	movs	r3, #4
 80056c2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80056c6:	2000      	movs	r0, #0
 80056c8:	4770      	bx	lr

080056ca <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80056ce:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80056d0:	bf04      	itt	eq
 80056d2:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80056d6:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80056da:	2000      	movs	r0, #0
 80056dc:	4770      	bx	lr

080056de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056de:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056e0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80056e4:	2a03      	cmp	r2, #3
 80056e6:	d104      	bne.n	80056f2 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80056e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	b103      	cbz	r3, 80056f2 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80056f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80056f2:	2000      	movs	r0, #0
 80056f4:	bd08      	pop	{r3, pc}

080056f6 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80056f6:	b510      	push	{r4, lr}
 80056f8:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80056fa:	2180      	movs	r1, #128	; 0x80
 80056fc:	f000 fca2 	bl	8006044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005700:	4620      	mov	r0, r4
}
 8005702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005706:	2100      	movs	r1, #0
 8005708:	f000 bc9c 	b.w	8006044 <USBD_LL_StallEP>

0800570c <USBD_StdDevReq>:
{
 800570c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800570e:	780b      	ldrb	r3, [r1, #0]
 8005710:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005716:	2b20      	cmp	r3, #32
{
 8005718:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800571a:	d012      	beq.n	8005742 <USBD_StdDevReq+0x36>
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d010      	beq.n	8005742 <USBD_StdDevReq+0x36>
 8005720:	2b00      	cmp	r3, #0
 8005722:	d151      	bne.n	80057c8 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8005724:	784b      	ldrb	r3, [r1, #1]
 8005726:	2b09      	cmp	r3, #9
 8005728:	d84e      	bhi.n	80057c8 <USBD_StdDevReq+0xbc>
 800572a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800572e:	00ee      	.short	0x00ee
 8005730:	004d0109 	.word	0x004d0109
 8005734:	004d0102 	.word	0x004d0102
 8005738:	00130087 	.word	0x00130087
 800573c:	00d6004d 	.word	0x00d6004d
 8005740:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8005742:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005746:	4629      	mov	r1, r5
 8005748:	4620      	mov	r0, r4
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4798      	blx	r3
}
 800574e:	2000      	movs	r0, #0
 8005750:	b003      	add	sp, #12
 8005752:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800575a:	884b      	ldrh	r3, [r1, #2]
 800575c:	0a1a      	lsrs	r2, r3, #8
 800575e:	3a01      	subs	r2, #1
 8005760:	2a06      	cmp	r2, #6
 8005762:	d831      	bhi.n	80057c8 <USBD_StdDevReq+0xbc>
 8005764:	e8df f002 	tbb	[pc, r2]
 8005768:	30231604 	.word	0x30231604
 800576c:	4830      	.short	0x4830
 800576e:	52          	.byte	0x52
 800576f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005770:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005774:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005776:	7c20      	ldrb	r0, [r4, #16]
 8005778:	f10d 0106 	add.w	r1, sp, #6
 800577c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800577e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005782:	88eb      	ldrh	r3, [r5, #6]
 8005784:	2a00      	cmp	r2, #0
 8005786:	d055      	beq.n	8005834 <USBD_StdDevReq+0x128>
 8005788:	2b00      	cmp	r3, #0
 800578a:	d14a      	bne.n	8005822 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800578c:	4620      	mov	r0, r4
 800578e:	f000 f9f6 	bl	8005b7e <USBD_CtlSendStatus>
 8005792:	e7dc      	b.n	800574e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005794:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8005796:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800579a:	b932      	cbnz	r2, 80057aa <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800579e:	f10d 0006 	add.w	r0, sp, #6
 80057a2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057a4:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057a6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80057a8:	e7e9      	b.n	800577e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	e7f7      	b.n	800579e <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b05      	cmp	r3, #5
 80057b2:	d809      	bhi.n	80057c8 <USBD_StdDevReq+0xbc>
 80057b4:	e8df f003 	tbb	[pc, r3]
 80057b8:	14100c03 	.word	0x14100c03
 80057bc:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80057be:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057c2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1d6      	bne.n	8005776 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff ff94 	bl	80056f6 <USBD_CtlError.constprop.0>
        break;
 80057ce:	e7be      	b.n	800574e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057d0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	e7f5      	b.n	80057c4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	e7f1      	b.n	80057c4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	e7ed      	b.n	80057c4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	e7e9      	b.n	80057c4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	e7e5      	b.n	80057c4 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057f8:	7c03      	ldrb	r3, [r0, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e4      	bne.n	80057c8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80057fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005802:	f10d 0006 	add.w	r0, sp, #6
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	4798      	blx	r3
  if (err != 0U)
 800580a:	e7b8      	b.n	800577e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800580c:	7c03      	ldrb	r3, [r0, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1da      	bne.n	80057c8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005812:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005816:	f10d 0006 	add.w	r0, sp, #6
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800581e:	2307      	movs	r3, #7
 8005820:	e7c1      	b.n	80057a6 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8005822:	429a      	cmp	r2, r3
 8005824:	bf28      	it	cs
 8005826:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005828:	4601      	mov	r1, r0
 800582a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800582c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005830:	f000 f97b 	bl	8005b2a <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005834:	88eb      	ldrh	r3, [r5, #6]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d189      	bne.n	800574e <USBD_StdDevReq+0x42>
 800583a:	e7a7      	b.n	800578c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800583c:	888b      	ldrh	r3, [r1, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1c2      	bne.n	80057c8 <USBD_StdDevReq+0xbc>
 8005842:	88cb      	ldrh	r3, [r1, #6]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1bf      	bne.n	80057c8 <USBD_StdDevReq+0xbc>
 8005848:	884d      	ldrh	r5, [r1, #2]
 800584a:	2d7f      	cmp	r5, #127	; 0x7f
 800584c:	d8bc      	bhi.n	80057c8 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800584e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005852:	2b03      	cmp	r3, #3
 8005854:	d0b8      	beq.n	80057c8 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005856:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005858:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800585c:	f000 fc16 	bl	800608c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005860:	4620      	mov	r0, r4
 8005862:	f000 f98c 	bl	8005b7e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005866:	b11d      	cbz	r5, 8005870 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005868:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800586a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800586e:	e76e      	b.n	800574e <USBD_StdDevReq+0x42>
 8005870:	2301      	movs	r3, #1
 8005872:	e7fa      	b.n	800586a <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8005874:	7889      	ldrb	r1, [r1, #2]
 8005876:	4d38      	ldr	r5, [pc, #224]	; (8005958 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005878:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800587a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800587c:	d8a4      	bhi.n	80057c8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800587e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005882:	2b02      	cmp	r3, #2
 8005884:	d008      	beq.n	8005898 <USBD_StdDevReq+0x18c>
 8005886:	2b03      	cmp	r3, #3
 8005888:	d015      	beq.n	80058b6 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800588a:	f7ff ff34 	bl	80056f6 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800588e:	4620      	mov	r0, r4
 8005890:	7829      	ldrb	r1, [r5, #0]
 8005892:	f7ff fe1e 	bl	80054d2 <USBD_ClrClassConfig>
        break;
 8005896:	e75a      	b.n	800574e <USBD_StdDevReq+0x42>
        if (cfgidx)
 8005898:	2900      	cmp	r1, #0
 800589a:	f43f af77 	beq.w	800578c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800589e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80058a0:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80058a2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80058a4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff fe05 	bl	80054b8 <USBD_SetClassConfig>
 80058ae:	2802      	cmp	r0, #2
 80058b0:	f47f af6c 	bne.w	800578c <USBD_StdDevReq+0x80>
 80058b4:	e788      	b.n	80057c8 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80058b6:	b931      	cbnz	r1, 80058c6 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058b8:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80058ba:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058bc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80058c0:	f7ff fe07 	bl	80054d2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80058c4:	e762      	b.n	800578c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80058c6:	6841      	ldr	r1, [r0, #4]
 80058c8:	2901      	cmp	r1, #1
 80058ca:	f43f af5f 	beq.w	800578c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058ce:	b2c9      	uxtb	r1, r1
 80058d0:	f7ff fdff 	bl	80054d2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80058d4:	7829      	ldrb	r1, [r5, #0]
 80058d6:	6061      	str	r1, [r4, #4]
 80058d8:	e7e6      	b.n	80058a8 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80058da:	88ca      	ldrh	r2, [r1, #6]
 80058dc:	2a01      	cmp	r2, #1
 80058de:	f47f af73 	bne.w	80057c8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80058e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d80a      	bhi.n	8005900 <USBD_StdDevReq+0x1f4>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f43f af6c 	beq.w	80057c8 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80058f0:	4601      	mov	r1, r0
 80058f2:	2300      	movs	r3, #0
 80058f4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f916 	bl	8005b2a <USBD_CtlSendData>
      break;
 80058fe:	e726      	b.n	800574e <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8005900:	2b03      	cmp	r3, #3
 8005902:	f47f af61 	bne.w	80057c8 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005906:	1d01      	adds	r1, r0, #4
 8005908:	e7f6      	b.n	80058f8 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800590a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800590e:	3b01      	subs	r3, #1
 8005910:	2b02      	cmp	r3, #2
 8005912:	f63f af59 	bhi.w	80057c8 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8005916:	88ca      	ldrh	r2, [r1, #6]
 8005918:	2a02      	cmp	r2, #2
 800591a:	f47f af55 	bne.w	80057c8 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 800591e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005922:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2303      	movne	r3, #3
 800592a:	2301      	moveq	r3, #1
 800592c:	f841 3f0c 	str.w	r3, [r1, #12]!
 8005930:	e7e2      	b.n	80058f8 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005932:	884b      	ldrh	r3, [r1, #2]
 8005934:	2b01      	cmp	r3, #1
 8005936:	f47f af0a 	bne.w	800574e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800593a:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800593e:	e725      	b.n	800578c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8005940:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005944:	3b01      	subs	r3, #1
 8005946:	2b02      	cmp	r3, #2
 8005948:	f63f af3e 	bhi.w	80057c8 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800594c:	884b      	ldrh	r3, [r1, #2]
 800594e:	2b01      	cmp	r3, #1
 8005950:	f47f aefd 	bne.w	800574e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	e7f0      	b.n	800593a <USBD_StdDevReq+0x22e>
 8005958:	20000a58 	.word	0x20000a58

0800595c <USBD_StdItfReq>:
{
 800595c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800595e:	780b      	ldrb	r3, [r1, #0]
{
 8005960:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005962:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005966:	2a40      	cmp	r2, #64	; 0x40
{
 8005968:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800596a:	d001      	beq.n	8005970 <USBD_StdItfReq+0x14>
 800596c:	065b      	lsls	r3, r3, #25
 800596e:	d415      	bmi.n	800599c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8005970:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005974:	3b01      	subs	r3, #1
 8005976:	2b02      	cmp	r3, #2
 8005978:	d810      	bhi.n	800599c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800597a:	792b      	ldrb	r3, [r5, #4]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d80d      	bhi.n	800599c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005980:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005984:	4629      	mov	r1, r5
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4620      	mov	r0, r4
 800598a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800598c:	88eb      	ldrh	r3, [r5, #6]
 800598e:	b91b      	cbnz	r3, 8005998 <USBD_StdItfReq+0x3c>
 8005990:	b910      	cbnz	r0, 8005998 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8005992:	4620      	mov	r0, r4
 8005994:	f000 f8f3 	bl	8005b7e <USBD_CtlSendStatus>
}
 8005998:	2000      	movs	r0, #0
 800599a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff feaa 	bl	80056f6 <USBD_CtlError.constprop.0>
          break;
 80059a2:	e7f9      	b.n	8005998 <USBD_StdItfReq+0x3c>

080059a4 <USBD_StdEPReq>:
{
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	780a      	ldrb	r2, [r1, #0]
 80059a8:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 80059aa:	f002 0260 	and.w	r2, r2, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ae:	2a20      	cmp	r2, #32
{
 80059b0:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 80059b2:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059b4:	d02c      	beq.n	8005a10 <USBD_StdEPReq+0x6c>
 80059b6:	2a40      	cmp	r2, #64	; 0x40
 80059b8:	d02a      	beq.n	8005a10 <USBD_StdEPReq+0x6c>
 80059ba:	bbba      	cbnz	r2, 8005a2c <USBD_StdEPReq+0x88>
      switch (req->bRequest)
 80059bc:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80059be:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 80059c0:	2a01      	cmp	r2, #1
 80059c2:	d043      	beq.n	8005a4c <USBD_StdEPReq+0xa8>
 80059c4:	2a03      	cmp	r2, #3
 80059c6:	d02b      	beq.n	8005a20 <USBD_StdEPReq+0x7c>
 80059c8:	bb82      	cbnz	r2, 8005a2c <USBD_StdEPReq+0x88>
          switch (pdev->dev_state)
 80059ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d053      	beq.n	8005a7a <USBD_StdEPReq+0xd6>
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d12a      	bne.n	8005a2c <USBD_StdEPReq+0x88>
              if ((ep_addr & 0x80U) == 0x80U)
 80059d6:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059d8:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80059dc:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059e0:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80059e4:	d05a      	beq.n	8005a9c <USBD_StdEPReq+0xf8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	b303      	cbz	r3, 8005a2c <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ea:	2514      	movs	r5, #20
 80059ec:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80059f0:	fb03 5505 	mla	r5, r3, r5, r5
 80059f4:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059f6:	f011 007f 	ands.w	r0, r1, #127	; 0x7f
 80059fa:	d005      	beq.n	8005a08 <USBD_StdEPReq+0x64>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 fb33 	bl	8006068 <USBD_LL_IsStallEP>
 8005a02:	3800      	subs	r0, #0
 8005a04:	bf18      	it	ne
 8005a06:	2001      	movne	r0, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a08:	2202      	movs	r2, #2
 8005a0a:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 8005a0c:	6028      	str	r0, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a0e:	e041      	b.n	8005a94 <USBD_StdEPReq+0xf0>
      pdev->pClass->Setup(pdev, req);
 8005a10:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4620      	mov	r0, r4
 8005a18:	6892      	ldr	r2, [r2, #8]
 8005a1a:	4790      	blx	r2
}
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8005a20:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005a24:	2a02      	cmp	r2, #2
 8005a26:	d01f      	beq.n	8005a68 <USBD_StdEPReq+0xc4>
 8005a28:	2a03      	cmp	r2, #3
 8005a2a:	d003      	beq.n	8005a34 <USBD_StdEPReq+0x90>
              USBD_CtlError(pdev, req);
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f7ff fe62 	bl	80056f6 <USBD_CtlError.constprop.0>
              break;
 8005a32:	e7f3      	b.n	8005a1c <USBD_StdEPReq+0x78>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a34:	885a      	ldrh	r2, [r3, #2]
 8005a36:	b92a      	cbnz	r2, 8005a44 <USBD_StdEPReq+0xa0>
                if ((ep_addr != 0x00U) &&
 8005a38:	064a      	lsls	r2, r1, #25
 8005a3a:	d003      	beq.n	8005a44 <USBD_StdEPReq+0xa0>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a3c:	88db      	ldrh	r3, [r3, #6]
 8005a3e:	b90b      	cbnz	r3, 8005a44 <USBD_StdEPReq+0xa0>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a40:	f000 fb00 	bl	8006044 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005a44:	4620      	mov	r0, r4
 8005a46:	f000 f89a 	bl	8005b7e <USBD_CtlSendStatus>
              break;
 8005a4a:	e7e7      	b.n	8005a1c <USBD_StdEPReq+0x78>
          switch (pdev->dev_state)
 8005a4c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005a50:	2a02      	cmp	r2, #2
 8005a52:	d009      	beq.n	8005a68 <USBD_StdEPReq+0xc4>
 8005a54:	2a03      	cmp	r2, #3
 8005a56:	d1e9      	bne.n	8005a2c <USBD_StdEPReq+0x88>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a58:	885b      	ldrh	r3, [r3, #2]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1de      	bne.n	8005a1c <USBD_StdEPReq+0x78>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a5e:	064d      	lsls	r5, r1, #25
 8005a60:	d0f0      	beq.n	8005a44 <USBD_StdEPReq+0xa0>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a62:	f000 faf8 	bl	8006056 <USBD_LL_ClearStallEP>
 8005a66:	e7ed      	b.n	8005a44 <USBD_StdEPReq+0xa0>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a68:	064b      	lsls	r3, r1, #25
 8005a6a:	d0df      	beq.n	8005a2c <USBD_StdEPReq+0x88>
                USBD_LL_StallEP(pdev, ep_addr);
 8005a6c:	f000 faea 	bl	8006044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a70:	2180      	movs	r1, #128	; 0x80
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 fae6 	bl	8006044 <USBD_LL_StallEP>
 8005a78:	e7d0      	b.n	8005a1c <USBD_StdEPReq+0x78>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a7a:	064a      	lsls	r2, r1, #25
 8005a7c:	d1d6      	bne.n	8005a2c <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a7e:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8005a80:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a84:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a88:	bf4c      	ite	mi
 8005a8a:	f100 0114 	addmi.w	r1, r0, #20
 8005a8e:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8005a92:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 f848 	bl	8005b2a <USBD_CtlSendData>
              break;
 8005a9a:	e7bf      	b.n	8005a1c <USBD_StdEPReq+0x78>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a9c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0c3      	beq.n	8005a2c <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aa4:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005aa6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aaa:	fb03 0505 	mla	r5, r3, r5, r0
 8005aae:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005ab2:	e7a0      	b.n	80059f6 <USBD_StdEPReq+0x52>

08005ab4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005ab4:	780b      	ldrb	r3, [r1, #0]
 8005ab6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005ab8:	784b      	ldrb	r3, [r1, #1]
 8005aba:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005abc:	78ca      	ldrb	r2, [r1, #3]
 8005abe:	788b      	ldrb	r3, [r1, #2]
 8005ac0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ac4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005ac6:	794a      	ldrb	r2, [r1, #5]
 8005ac8:	790b      	ldrb	r3, [r1, #4]
 8005aca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ace:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005ad0:	79ca      	ldrb	r2, [r1, #7]
 8005ad2:	798b      	ldrb	r3, [r1, #6]
 8005ad4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ad8:	80c3      	strh	r3, [r0, #6]
}
 8005ada:	4770      	bx	lr

08005adc <USBD_CtlError>:
{
 8005adc:	b510      	push	{r4, lr}
 8005ade:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005ae0:	2180      	movs	r1, #128	; 0x80
 8005ae2:	f000 faaf 	bl	8006044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005ae6:	4620      	mov	r0, r4
}
 8005ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005aec:	2100      	movs	r1, #0
 8005aee:	f000 baa9 	b.w	8006044 <USBD_LL_StallEP>

08005af2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005af2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8005af4:	b188      	cbz	r0, 8005b1a <USBD_GetString+0x28>
 8005af6:	2400      	movs	r4, #0
 8005af8:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005afa:	4623      	mov	r3, r4
 8005afc:	3401      	adds	r4, #1
 8005afe:	5d05      	ldrb	r5, [r0, r4]
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	d1fa      	bne.n	8005afa <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	3301      	adds	r3, #1
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005b0c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	704b      	strb	r3, [r1, #1]
 8005b12:	2302      	movs	r3, #2
    while (*desc != '\0')
 8005b14:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005b18:	b904      	cbnz	r4, 8005b1c <USBD_GetString+0x2a>
}
 8005b1a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	54cc      	strb	r4, [r1, r3]
 8005b20:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005b22:	3302      	adds	r3, #2
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	548d      	strb	r5, [r1, r2]
 8005b28:	e7f4      	b.n	8005b14 <USBD_GetString+0x22>

08005b2a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005b2a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b2c:	2202      	movs	r2, #2
{
 8005b2e:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8005b30:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b34:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b38:	460a      	mov	r2, r1
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f000 faaf 	bl	800609e <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b40:	2000      	movs	r0, #0
 8005b42:	bd10      	pop	{r4, pc}

08005b44 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005b44:	b508      	push	{r3, lr}
 8005b46:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b48:	460a      	mov	r2, r1
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	f000 faa7 	bl	800609e <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b50:	2000      	movs	r0, #0
 8005b52:	bd08      	pop	{r3, pc}

08005b54 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005b54:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b56:	2203      	movs	r2, #3
{
 8005b58:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8005b5a:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b5e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b62:	460a      	mov	r2, r1
 8005b64:	2100      	movs	r1, #0
 8005b66:	f000 faa3 	bl	80060b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	bd10      	pop	{r4, pc}

08005b6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005b6e:	b508      	push	{r3, lr}
 8005b70:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b72:	460a      	mov	r2, r1
 8005b74:	2100      	movs	r1, #0
 8005b76:	f000 fa9b 	bl	80060b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	bd08      	pop	{r3, pc}

08005b7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b7e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b80:	2304      	movs	r3, #4
 8005b82:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b86:	2300      	movs	r3, #0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f000 fa87 	bl	800609e <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b90:	2000      	movs	r0, #0
 8005b92:	bd08      	pop	{r3, pc}

08005b94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b94:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b96:	2305      	movs	r3, #5
 8005b98:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f000 fa85 	bl	80060b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	bd08      	pop	{r3, pc}
	...

08005bac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	490e      	ldr	r1, [pc, #56]	; (8005bec <MX_USB_DEVICE_Init+0x40>)
 8005bb2:	480f      	ldr	r0, [pc, #60]	; (8005bf0 <MX_USB_DEVICE_Init+0x44>)
 8005bb4:	f7ff fc5f 	bl	8005476 <USBD_Init>
 8005bb8:	b108      	cbz	r0, 8005bbe <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8005bba:	f7fb f985 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005bbe:	490d      	ldr	r1, [pc, #52]	; (8005bf4 <MX_USB_DEVICE_Init+0x48>)
 8005bc0:	480b      	ldr	r0, [pc, #44]	; (8005bf0 <MX_USB_DEVICE_Init+0x44>)
 8005bc2:	f7ff fc6d 	bl	80054a0 <USBD_RegisterClass>
 8005bc6:	b108      	cbz	r0, 8005bcc <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8005bc8:	f7fb f97e 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005bcc:	490a      	ldr	r1, [pc, #40]	; (8005bf8 <MX_USB_DEVICE_Init+0x4c>)
 8005bce:	4808      	ldr	r0, [pc, #32]	; (8005bf0 <MX_USB_DEVICE_Init+0x44>)
 8005bd0:	f7ff fc0c 	bl	80053ec <USBD_CDC_RegisterInterface>
 8005bd4:	b108      	cbz	r0, 8005bda <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8005bd6:	f7fb f977 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005bda:	4805      	ldr	r0, [pc, #20]	; (8005bf0 <MX_USB_DEVICE_Init+0x44>)
 8005bdc:	f7ff fc67 	bl	80054ae <USBD_Start>
 8005be0:	b118      	cbz	r0, 8005bea <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005be2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005be6:	f7fb b96f 	b.w	8000ec8 <Error_Handler>
}
 8005bea:	bd08      	pop	{r3, pc}
 8005bec:	20000180 	.word	0x20000180
 8005bf0:	20000a5c 	.word	0x20000a5c
 8005bf4:	20000054 	.word	0x20000054
 8005bf8:	2000016c 	.word	0x2000016c

08005bfc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	4770      	bx	lr

08005c00 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005c00:	2820      	cmp	r0, #32
 8005c02:	d003      	beq.n	8005c0c <CDC_Control_FS+0xc>
 8005c04:	2821      	cmp	r0, #33	; 0x21
 8005c06:	d017      	beq.n	8005c38 <CDC_Control_FS+0x38>
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005c08:	2000      	movs	r0, #0
 8005c0a:	4770      	bx	lr
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 8005c0c:	780b      	ldrb	r3, [r1, #0]
 8005c0e:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <CDC_Control_FS+0x5c>)
 8005c10:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1]<<8);
 8005c12:	7848      	ldrb	r0, [r1, #1]
 8005c14:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005c18:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2]<<16);
 8005c1a:	7888      	ldrb	r0, [r1, #2]
 8005c1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c20:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3]<<24);
 8005c22:	78c8      	ldrb	r0, [r1, #3]
 8005c24:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005c28:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 8005c2a:	790b      	ldrb	r3, [r1, #4]
 8005c2c:	7113      	strb	r3, [r2, #4]
      LineCoding.paritytype = pbuf[5];
 8005c2e:	794b      	ldrb	r3, [r1, #5]
 8005c30:	7153      	strb	r3, [r2, #5]
      LineCoding.datatype   = pbuf[6];
 8005c32:	798b      	ldrb	r3, [r1, #6]
 8005c34:	7193      	strb	r3, [r2, #6]
    break;
 8005c36:	e7e7      	b.n	8005c08 <CDC_Control_FS+0x8>
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005c38:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <CDC_Control_FS+0x5c>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	700a      	strb	r2, [r1, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	0a12      	lsrs	r2, r2, #8
 8005c42:	704a      	strb	r2, [r1, #1]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8005c44:	885a      	ldrh	r2, [r3, #2]
 8005c46:	708a      	strb	r2, [r1, #2]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8005c48:	78da      	ldrb	r2, [r3, #3]
 8005c4a:	70ca      	strb	r2, [r1, #3]
      pbuf[4] = LineCoding.format;
 8005c4c:	791a      	ldrb	r2, [r3, #4]
 8005c4e:	710a      	strb	r2, [r1, #4]
      pbuf[5] = LineCoding.paritytype;
 8005c50:	795a      	ldrb	r2, [r3, #5]
 8005c52:	714a      	strb	r2, [r1, #5]
      pbuf[6] = LineCoding.datatype;
 8005c54:	799b      	ldrb	r3, [r3, #6]
 8005c56:	718b      	strb	r3, [r1, #6]
    break;
 8005c58:	e7d6      	b.n	8005c08 <CDC_Control_FS+0x8>
 8005c5a:	bf00      	nop
 8005c5c:	20000164 	.word	0x20000164

08005c60 <CDC_Init_FS>:
{
 8005c60:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005c62:	4c06      	ldr	r4, [pc, #24]	; (8005c7c <CDC_Init_FS+0x1c>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	4620      	mov	r0, r4
 8005c68:	4905      	ldr	r1, [pc, #20]	; (8005c80 <CDC_Init_FS+0x20>)
 8005c6a:	f7ff fbc6 	bl	80053fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4904      	ldr	r1, [pc, #16]	; (8005c84 <CDC_Init_FS+0x24>)
 8005c72:	f7ff fbca 	bl	800540a <USBD_CDC_SetRxBuffer>
}
 8005c76:	2000      	movs	r0, #0
 8005c78:	bd10      	pop	{r4, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000a5c 	.word	0x20000a5c
 8005c80:	20000f20 	.word	0x20000f20
 8005c84:	20000d20 	.word	0x20000d20

08005c88 <cdcAvailable>:
  ret = (rx_head - rx_tail) % rx_len;
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <cdcAvailable+0x18>)
 8005c8a:	4a06      	ldr	r2, [pc, #24]	; (8005ca4 <cdcAvailable+0x1c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <cdcAvailable+0x20>)
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8005c9a:	fb02 3010 	mls	r0, r2, r0, r3
 8005c9e:	4770      	bx	lr
 8005ca0:	20001324 	.word	0x20001324
 8005ca4:	20001328 	.word	0x20001328
 8005ca8:	2000017c 	.word	0x2000017c

08005cac <cdcDataIn>:
  rx_buf[rx_head]= rx_data;
 8005cac:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <cdcDataIn+0x24>)
 8005cae:	4909      	ldr	r1, [pc, #36]	; (8005cd4 <cdcDataIn+0x28>)
 8005cb0:	6813      	ldr	r3, [r2, #0]
 8005cb2:	54c8      	strb	r0, [r1, r3]
  next_rx_head =(rx_head +1)% rx_len;
 8005cb4:	4908      	ldr	r1, [pc, #32]	; (8005cd8 <cdcDataIn+0x2c>)
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	6809      	ldr	r1, [r1, #0]
 8005cba:	fbb3 f0f1 	udiv	r0, r3, r1
 8005cbe:	fb01 3310 	mls	r3, r1, r0, r3
  if (next_rx_head != rx_tail)
 8005cc2:	4906      	ldr	r1, [pc, #24]	; (8005cdc <cdcDataIn+0x30>)
}
 8005cc4:	2000      	movs	r0, #0
  if (next_rx_head != rx_tail)
 8005cc6:	6809      	ldr	r1, [r1, #0]
 8005cc8:	4299      	cmp	r1, r3
      rx_head = next_rx_head;
 8005cca:	bf18      	it	ne
 8005ccc:	6013      	strne	r3, [r2, #0]
}
 8005cce:	4770      	bx	lr
 8005cd0:	20001324 	.word	0x20001324
 8005cd4:	20001120 	.word	0x20001120
 8005cd8:	2000017c 	.word	0x2000017c
 8005cdc:	20001328 	.word	0x20001328

08005ce0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */


  for (int i=0; i<*Len ; i++)
 8005ce6:	2400      	movs	r4, #0
 8005ce8:	6833      	ldr	r3, [r6, #0]
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	d810      	bhi.n	8005d10 <CDC_Receive_FS+0x30>
      cdcDataIn(Buf[i]);
    }

  uint32_t buf_len;

  buf_len = ( rx_len - cdcAvailable() ) -1; //-1 : ?��?�� ?��?�� ?��칸을 비워?���???
 8005cee:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <CDC_Receive_FS+0x44>)
 8005cf0:	681c      	ldr	r4, [r3, #0]
 8005cf2:	f7ff ffc9 	bl	8005c88 <cdcAvailable>
 8005cf6:	3c01      	subs	r4, #1
 8005cf8:	1a24      	subs	r4, r4, r0
  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8005cfa:	2c3f      	cmp	r4, #63	; 0x3f
 8005cfc:	d90d      	bls.n	8005d1a <CDC_Receive_FS+0x3a>
    {
      //?��?��?��?��?��?�� 보내�???
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4809      	ldr	r0, [pc, #36]	; (8005d28 <CDC_Receive_FS+0x48>)
 8005d02:	f7ff fb82 	bl	800540a <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005d06:	4808      	ldr	r0, [pc, #32]	; (8005d28 <CDC_Receive_FS+0x48>)
 8005d08:	f7ff fb9e 	bl	8005448 <USBD_CDC_ReceivePacket>
      rx_full = true;
    }

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
      cdcDataIn(Buf[i]);
 8005d10:	5d28      	ldrb	r0, [r5, r4]
 8005d12:	f7ff ffcb 	bl	8005cac <cdcDataIn>
  for (int i=0; i<*Len ; i++)
 8005d16:	3401      	adds	r4, #1
 8005d18:	e7e6      	b.n	8005ce8 <CDC_Receive_FS+0x8>
      rx_full = true;
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <CDC_Receive_FS+0x4c>)
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e7f4      	b.n	8005d0c <CDC_Receive_FS+0x2c>
 8005d22:	bf00      	nop
 8005d24:	2000017c 	.word	0x2000017c
 8005d28:	20000a5c 	.word	0x20000a5c
 8005d2c:	20001320 	.word	0x20001320

08005d30 <cdcRead>:
{
 8005d30:	b510      	push	{r4, lr}
  ret = rx_buf[rx_tail];
 8005d32:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <cdcRead+0x24>)
 8005d34:	4908      	ldr	r1, [pc, #32]	; (8005d58 <cdcRead+0x28>)
 8005d36:	6813      	ldr	r3, [r2, #0]
 8005d38:	5cc8      	ldrb	r0, [r1, r3]
  if (rx_head != rx_tail)
 8005d3a:	4908      	ldr	r1, [pc, #32]	; (8005d5c <cdcRead+0x2c>)
 8005d3c:	6809      	ldr	r1, [r1, #0]
 8005d3e:	428b      	cmp	r3, r1
 8005d40:	d007      	beq.n	8005d52 <cdcRead+0x22>
      rx_tail = (rx_tail + 1) % rx_len;
 8005d42:	4907      	ldr	r1, [pc, #28]	; (8005d60 <cdcRead+0x30>)
 8005d44:	3301      	adds	r3, #1
 8005d46:	6809      	ldr	r1, [r1, #0]
 8005d48:	fbb3 f4f1 	udiv	r4, r3, r1
 8005d4c:	fb01 3314 	mls	r3, r1, r4, r3
 8005d50:	6013      	str	r3, [r2, #0]
}
 8005d52:	bd10      	pop	{r4, pc}
 8005d54:	20001328 	.word	0x20001328
 8005d58:	20001120 	.word	0x20001120
 8005d5c:	20001324 	.word	0x20001324
 8005d60:	2000017c 	.word	0x2000017c

08005d64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005d64:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d66:	4c09      	ldr	r4, [pc, #36]	; (8005d8c <CDC_Transmit_FS+0x28>)
{
 8005d68:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d6a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8005d6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d72:	b943      	cbnz	r3, 8005d86 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005d74:	4601      	mov	r1, r0
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7ff fb3f 	bl	80053fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d7c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8005d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d82:	f7ff bb48 	b.w	8005416 <USBD_CDC_TransmitPacket>
}
 8005d86:	2001      	movs	r0, #1
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000a5c 	.word	0x20000a5c

08005d90 <cdcWrite>:
{
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	460c      	mov	r4, r1
 8005d94:	4606      	mov	r6, r0
  pre_time = millis();
 8005d96:	f7fa ffc9 	bl	8000d2c <millis>
 8005d9a:	4605      	mov	r5, r0
      ret= CDC_Transmit_FS(p_data, length);
 8005d9c:	b2a7      	uxth	r7, r4
 8005d9e:	4639      	mov	r1, r7
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff ffdf 	bl	8005d64 <CDC_Transmit_FS>
      if (ret == USBD_OK)
 8005da6:	b908      	cbnz	r0, 8005dac <cdcWrite+0x1c>
          return length;
 8005da8:	b2e0      	uxtb	r0, r4
}
 8005daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (ret == USBD_FAIL)
 8005dac:	2802      	cmp	r0, #2
 8005dae:	d004      	beq.n	8005dba <cdcWrite+0x2a>
      if (millis()- pre_time  >=100)
 8005db0:	f7fa ffbc 	bl	8000d2c <millis>
 8005db4:	1b43      	subs	r3, r0, r5
 8005db6:	2b63      	cmp	r3, #99	; 0x63
 8005db8:	d9f1      	bls.n	8005d9e <cdcWrite+0xe>
          return 0;
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e7f5      	b.n	8005daa <cdcWrite+0x1a>
	...

08005dc0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005dc0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005dc2:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005dc4:	800b      	strh	r3, [r1, #0]
}
 8005dc6:	4770      	bx	lr
 8005dc8:	2000019c 	.word	0x2000019c

08005dcc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005dcc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005dce:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005dd0:	800b      	strh	r3, [r1, #0]
}
 8005dd2:	4770      	bx	lr
 8005dd4:	200001b0 	.word	0x200001b0

08005dd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005dd8:	2300      	movs	r3, #0
 8005dda:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005ddc:	461e      	mov	r6, r3
 8005dde:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8005de0:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8005de2:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8005de6:	bf34      	ite	cc
 8005de8:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005dea:	3437      	addcs	r4, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005dec:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005df0:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8005df4:	3301      	adds	r3, #1
 8005df6:	b2dc      	uxtb	r4, r3
 8005df8:	42a2      	cmp	r2, r4
    value = value << 4;
 8005dfa:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8005dfe:	d8ef      	bhi.n	8005de0 <IntToUnicode+0x8>
  }
}
 8005e00:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e04 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005e04:	231a      	movs	r3, #26
{
 8005e06:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005e08:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <USBD_FS_SerialStrDescriptor+0x30>)
 8005e0c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8005e10:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8005e14:	1880      	adds	r0, r0, r2
 8005e16:	d00a      	beq.n	8005e2e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005e18:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005e1c:	4906      	ldr	r1, [pc, #24]	; (8005e38 <USBD_FS_SerialStrDescriptor+0x34>)
 8005e1e:	2208      	movs	r2, #8
 8005e20:	f7ff ffda 	bl	8005dd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e24:	2204      	movs	r2, #4
 8005e26:	4620      	mov	r0, r4
 8005e28:	3110      	adds	r1, #16
 8005e2a:	f7ff ffd5 	bl	8005dd8 <IntToUnicode>
}
 8005e2e:	4803      	ldr	r0, [pc, #12]	; (8005e3c <USBD_FS_SerialStrDescriptor+0x38>)
 8005e30:	bd10      	pop	{r4, pc}
 8005e32:	bf00      	nop
 8005e34:	1ffff000 	.word	0x1ffff000
 8005e38:	200001b6 	.word	0x200001b6
 8005e3c:	200001b4 	.word	0x200001b4

08005e40 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005e40:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e42:	4c04      	ldr	r4, [pc, #16]	; (8005e54 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005e44:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e46:	4804      	ldr	r0, [pc, #16]	; (8005e58 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005e48:	4621      	mov	r1, r4
 8005e4a:	f7ff fe52 	bl	8005af2 <USBD_GetString>
}
 8005e4e:	4620      	mov	r0, r4
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	bf00      	nop
 8005e54:	2000132c 	.word	0x2000132c
 8005e58:	080094f1 	.word	0x080094f1

08005e5c <USBD_FS_ProductStrDescriptor>:
{
 8005e5c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e5e:	4c04      	ldr	r4, [pc, #16]	; (8005e70 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8005e60:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e62:	4804      	ldr	r0, [pc, #16]	; (8005e74 <USBD_FS_ProductStrDescriptor+0x18>)
 8005e64:	4621      	mov	r1, r4
 8005e66:	f7ff fe44 	bl	8005af2 <USBD_GetString>
}
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000132c 	.word	0x2000132c
 8005e74:	08009504 	.word	0x08009504

08005e78 <USBD_FS_ConfigStrDescriptor>:
{
 8005e78:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e7a:	4c04      	ldr	r4, [pc, #16]	; (8005e8c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8005e7c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e7e:	4804      	ldr	r0, [pc, #16]	; (8005e90 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005e80:	4621      	mov	r1, r4
 8005e82:	f7ff fe36 	bl	8005af2 <USBD_GetString>
}
 8005e86:	4620      	mov	r0, r4
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000132c 	.word	0x2000132c
 8005e90:	0800951a 	.word	0x0800951a

08005e94 <USBD_FS_InterfaceStrDescriptor>:
{
 8005e94:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e96:	4c04      	ldr	r4, [pc, #16]	; (8005ea8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8005e98:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e9a:	4804      	ldr	r0, [pc, #16]	; (8005eac <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f7ff fe28 	bl	8005af2 <USBD_GetString>
}
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	bf00      	nop
 8005ea8:	2000132c 	.word	0x2000132c
 8005eac:	08009525 	.word	0x08009525

08005eb0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005eb0:	2803      	cmp	r0, #3
 8005eb2:	bf9a      	itte	ls
 8005eb4:	4b01      	ldrls	r3, [pc, #4]	; (8005ebc <USBD_Get_USB_Status+0xc>)
 8005eb6:	5c18      	ldrbls	r0, [r3, r0]
{
 8005eb8:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005eba:	4770      	bx	lr
 8005ebc:	08009533 	.word	0x08009533

08005ec0 <HAL_PCD_MspInit>:
{
 8005ec0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <HAL_PCD_MspInit+0x3c>)
 8005ec4:	6802      	ldr	r2, [r0, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d115      	bne.n	8005ef6 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8005eca:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8005ece:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005ed0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8005ed2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005ed6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005ed8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005eda:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005edc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005ee6:	f7fc f959 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005eea:	2014      	movs	r0, #20
}
 8005eec:	b003      	add	sp, #12
 8005eee:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005ef2:	f7fc b983 	b.w	80021fc <HAL_NVIC_EnableIRQ>
}
 8005ef6:	b003      	add	sp, #12
 8005ef8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005efc:	40005c00 	.word	0x40005c00

08005f00 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f00:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8005f04:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f08:	f7ff baea 	b.w	80054e0 <USBD_LL_SetupStage>

08005f0c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f0c:	2328      	movs	r3, #40	; 0x28
 8005f0e:	fb03 0301 	mla	r3, r3, r1, r0
 8005f12:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f16:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005f1a:	f7ff bb0e 	b.w	800553a <USBD_LL_DataOutStage>

08005f1e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f1e:	2328      	movs	r3, #40	; 0x28
 8005f20:	fb03 0301 	mla	r3, r3, r1, r0
 8005f24:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f2a:	f7ff bb40 	b.w	80055ae <USBD_LL_DataInStage>

08005f2e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f2e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f32:	f7ff bbd4 	b.w	80056de <USBD_LL_SOF>

08005f36 <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f36:	6883      	ldr	r3, [r0, #8]
{
 8005f38:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f3a:	2b02      	cmp	r3, #2
{
 8005f3c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f3e:	d001      	beq.n	8005f44 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8005f40:	f7fa ffc2 	bl	8000ec8 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f44:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8005f48:	2101      	movs	r1, #1
 8005f4a:	f7ff fbb2 	bl	80056b2 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f4e:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 8005f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f56:	f7ff bb85 	b.w	8005664 <USBD_LL_Reset>
	...

08005f5c <HAL_PCD_SuspendCallback>:
{
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f60:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f64:	f7ff fba8 	bl	80056b8 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8005f68:	69a3      	ldr	r3, [r4, #24]
 8005f6a:	b123      	cbz	r3, 8005f76 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f6c:	4a02      	ldr	r2, [pc, #8]	; (8005f78 <HAL_PCD_SuspendCallback+0x1c>)
 8005f6e:	6913      	ldr	r3, [r2, #16]
 8005f70:	f043 0306 	orr.w	r3, r3, #6
 8005f74:	6113      	str	r3, [r2, #16]
}
 8005f76:	bd10      	pop	{r4, pc}
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f7c:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8005f80:	f7ff bba3 	b.w	80056ca <USBD_LL_Resume>

08005f84 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f84:	2308      	movs	r3, #8
{
 8005f86:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f88:	4a1d      	ldr	r2, [pc, #116]	; (8006000 <USBD_LL_Init+0x7c>)
{
 8005f8a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005f8c:	481d      	ldr	r0, [pc, #116]	; (8006004 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f8e:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005f92:	2302      	movs	r3, #2
 8005f94:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005f96:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8005f98:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8005f9c:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005fa0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005fa4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005fa6:	f7fc fc4f 	bl	8002848 <HAL_PCD_Init>
 8005faa:	b108      	cbz	r0, 8005fb0 <USBD_LL_Init+0x2c>
    Error_Handler( );
 8005fac:	f7fa ff8c 	bl	8000ec8 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2318      	movs	r3, #24
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005fba:	f7fd fabd 	bl	8003538 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005fbe:	2358      	movs	r3, #88	; 0x58
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2180      	movs	r1, #128	; 0x80
 8005fc4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005fc8:	f7fd fab6 	bl	8003538 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005fcc:	23c0      	movs	r3, #192	; 0xc0
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2181      	movs	r1, #129	; 0x81
 8005fd2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005fd6:	f7fd faaf 	bl	8003538 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005fda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005fe6:	f7fd faa7 	bl	8003538 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2182      	movs	r1, #130	; 0x82
 8005ff2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005ff6:	f7fd fa9f 	bl	8003538 <HAL_PCDEx_PMAConfig>
}
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	bf00      	nop
 8006000:	40005c00 	.word	0x40005c00
 8006004:	2000152c 	.word	0x2000152c

08006008 <USBD_LL_Start>:
{
 8006008:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800600a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800600e:	f7fc fc93 	bl	8002938 <HAL_PCD_Start>
}
 8006012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006016:	f7ff bf4b 	b.w	8005eb0 <USBD_Get_USB_Status>

0800601a <USBD_LL_OpenEP>:
{
 800601a:	b510      	push	{r4, lr}
 800601c:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800601e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8006022:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006024:	4623      	mov	r3, r4
 8006026:	f7fd f98f 	bl	8003348 <HAL_PCD_EP_Open>
}
 800602a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800602e:	f7ff bf3f 	b.w	8005eb0 <USBD_Get_USB_Status>

08006032 <USBD_LL_CloseEP>:
{
 8006032:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006034:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006038:	f7fd f9b6 	bl	80033a8 <HAL_PCD_EP_Close>
}
 800603c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006040:	f7ff bf36 	b.w	8005eb0 <USBD_Get_USB_Status>

08006044 <USBD_LL_StallEP>:
{
 8006044:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006046:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800604a:	f7fd fa0f 	bl	800346c <HAL_PCD_EP_SetStall>
}
 800604e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006052:	f7ff bf2d 	b.w	8005eb0 <USBD_Get_USB_Status>

08006056 <USBD_LL_ClearStallEP>:
{
 8006056:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006058:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800605c:	f7fd fa3a 	bl	80034d4 <HAL_PCD_EP_ClrStall>
}
 8006060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006064:	f7ff bf24 	b.w	8005eb0 <USBD_Get_USB_Status>

08006068 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006068:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 800606a:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800606e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006072:	bf1b      	ittet	ne
 8006074:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8006078:	fb01 2202 	mlane	r2, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800607c:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006080:	189b      	addne	r3, r3, r2
 8006082:	bf14      	ite	ne
 8006084:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006086:	f893 016a 	ldrbeq.w	r0, [r3, #362]	; 0x16a
}
 800608a:	4770      	bx	lr

0800608c <USBD_LL_SetUSBAddress>:
{
 800608c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800608e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006092:	f7fc fc6a 	bl	800296a <HAL_PCD_SetAddress>
}
 8006096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800609a:	f7ff bf09 	b.w	8005eb0 <USBD_Get_USB_Status>

0800609e <USBD_LL_Transmit>:
{
 800609e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060a0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060a4:	f7fd f9c8 	bl	8003438 <HAL_PCD_EP_Transmit>
}
 80060a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80060ac:	f7ff bf00 	b.w	8005eb0 <USBD_Get_USB_Status>

080060b0 <USBD_LL_PrepareReceive>:
{
 80060b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80060b2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060b6:	f7fd f9a0 	bl	80033fa <HAL_PCD_EP_Receive>
}
 80060ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80060be:	f7ff bef7 	b.w	8005eb0 <USBD_Get_USB_Status>

080060c2 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80060c2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060c6:	f7fd b9af 	b.w	8003428 <HAL_PCD_EP_GetRxCount>
	...

080060cc <USBD_static_malloc>:
}
 80060cc:	4800      	ldr	r0, [pc, #0]	; (80060d0 <USBD_static_malloc+0x4>)
 80060ce:	4770      	bx	lr
 80060d0:	2000181c 	.word	0x2000181c

080060d4 <USBD_static_free>:
}
 80060d4:	4770      	bx	lr

080060d6 <HAL_PCDEx_SetConnectionState>:
}
 80060d6:	4770      	bx	lr

080060d8 <main>:

#include "main.h"


int main(void)
{
 80060d8:	b508      	push	{r3, lr}
  hwInit();
 80060da:	f7fb ffdf 	bl	800209c <hwInit>
  apInit();
 80060de:	f7fa fde1 	bl	8000ca4 <apInit>
  apMain();
 80060e2:	f7fa fdf5 	bl	8000cd0 <apMain>
  return 0;
}
 80060e6:	2000      	movs	r0, #0
 80060e8:	bd08      	pop	{r3, pc}

080060ea <sulp>:
 80060ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ee:	460f      	mov	r7, r1
 80060f0:	4690      	mov	r8, r2
 80060f2:	f002 f8cf 	bl	8008294 <__ulp>
 80060f6:	4604      	mov	r4, r0
 80060f8:	460d      	mov	r5, r1
 80060fa:	f1b8 0f00 	cmp.w	r8, #0
 80060fe:	d011      	beq.n	8006124 <sulp+0x3a>
 8006100:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006104:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006108:	2b00      	cmp	r3, #0
 800610a:	dd0b      	ble.n	8006124 <sulp+0x3a>
 800610c:	2400      	movs	r4, #0
 800610e:	051b      	lsls	r3, r3, #20
 8006110:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006114:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006118:	4622      	mov	r2, r4
 800611a:	462b      	mov	r3, r5
 800611c:	f7fa f9de 	bl	80004dc <__aeabi_dmul>
 8006120:	4604      	mov	r4, r0
 8006122:	460d      	mov	r5, r1
 8006124:	4620      	mov	r0, r4
 8006126:	4629      	mov	r1, r5
 8006128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800612c:	0000      	movs	r0, r0
	...

08006130 <_strtod_l>:
 8006130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006134:	b09f      	sub	sp, #124	; 0x7c
 8006136:	9217      	str	r2, [sp, #92]	; 0x5c
 8006138:	2200      	movs	r2, #0
 800613a:	4604      	mov	r4, r0
 800613c:	921a      	str	r2, [sp, #104]	; 0x68
 800613e:	460d      	mov	r5, r1
 8006140:	f04f 0800 	mov.w	r8, #0
 8006144:	f04f 0900 	mov.w	r9, #0
 8006148:	460a      	mov	r2, r1
 800614a:	9219      	str	r2, [sp, #100]	; 0x64
 800614c:	7811      	ldrb	r1, [r2, #0]
 800614e:	292b      	cmp	r1, #43	; 0x2b
 8006150:	d04a      	beq.n	80061e8 <_strtod_l+0xb8>
 8006152:	d838      	bhi.n	80061c6 <_strtod_l+0x96>
 8006154:	290d      	cmp	r1, #13
 8006156:	d832      	bhi.n	80061be <_strtod_l+0x8e>
 8006158:	2908      	cmp	r1, #8
 800615a:	d832      	bhi.n	80061c2 <_strtod_l+0x92>
 800615c:	2900      	cmp	r1, #0
 800615e:	d03b      	beq.n	80061d8 <_strtod_l+0xa8>
 8006160:	2200      	movs	r2, #0
 8006162:	920e      	str	r2, [sp, #56]	; 0x38
 8006164:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006166:	7832      	ldrb	r2, [r6, #0]
 8006168:	2a30      	cmp	r2, #48	; 0x30
 800616a:	f040 80b2 	bne.w	80062d2 <_strtod_l+0x1a2>
 800616e:	7872      	ldrb	r2, [r6, #1]
 8006170:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006174:	2a58      	cmp	r2, #88	; 0x58
 8006176:	d16e      	bne.n	8006256 <_strtod_l+0x126>
 8006178:	9302      	str	r3, [sp, #8]
 800617a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800617c:	4620      	mov	r0, r4
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	ab1a      	add	r3, sp, #104	; 0x68
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4a8c      	ldr	r2, [pc, #560]	; (80063b8 <_strtod_l+0x288>)
 8006186:	ab1b      	add	r3, sp, #108	; 0x6c
 8006188:	a919      	add	r1, sp, #100	; 0x64
 800618a:	f001 f967 	bl	800745c <__gethex>
 800618e:	f010 070f 	ands.w	r7, r0, #15
 8006192:	4605      	mov	r5, r0
 8006194:	d005      	beq.n	80061a2 <_strtod_l+0x72>
 8006196:	2f06      	cmp	r7, #6
 8006198:	d128      	bne.n	80061ec <_strtod_l+0xbc>
 800619a:	2300      	movs	r3, #0
 800619c:	3601      	adds	r6, #1
 800619e:	9619      	str	r6, [sp, #100]	; 0x64
 80061a0:	930e      	str	r3, [sp, #56]	; 0x38
 80061a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f040 85a0 	bne.w	8006cea <_strtod_l+0xbba>
 80061aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ac:	b1cb      	cbz	r3, 80061e2 <_strtod_l+0xb2>
 80061ae:	4642      	mov	r2, r8
 80061b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80061b4:	4610      	mov	r0, r2
 80061b6:	4619      	mov	r1, r3
 80061b8:	b01f      	add	sp, #124	; 0x7c
 80061ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061be:	2920      	cmp	r1, #32
 80061c0:	d1ce      	bne.n	8006160 <_strtod_l+0x30>
 80061c2:	3201      	adds	r2, #1
 80061c4:	e7c1      	b.n	800614a <_strtod_l+0x1a>
 80061c6:	292d      	cmp	r1, #45	; 0x2d
 80061c8:	d1ca      	bne.n	8006160 <_strtod_l+0x30>
 80061ca:	2101      	movs	r1, #1
 80061cc:	910e      	str	r1, [sp, #56]	; 0x38
 80061ce:	1c51      	adds	r1, r2, #1
 80061d0:	9119      	str	r1, [sp, #100]	; 0x64
 80061d2:	7852      	ldrb	r2, [r2, #1]
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	d1c5      	bne.n	8006164 <_strtod_l+0x34>
 80061d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061da:	9519      	str	r5, [sp, #100]	; 0x64
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 8582 	bne.w	8006ce6 <_strtod_l+0xbb6>
 80061e2:	4642      	mov	r2, r8
 80061e4:	464b      	mov	r3, r9
 80061e6:	e7e5      	b.n	80061b4 <_strtod_l+0x84>
 80061e8:	2100      	movs	r1, #0
 80061ea:	e7ef      	b.n	80061cc <_strtod_l+0x9c>
 80061ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80061ee:	b13a      	cbz	r2, 8006200 <_strtod_l+0xd0>
 80061f0:	2135      	movs	r1, #53	; 0x35
 80061f2:	a81c      	add	r0, sp, #112	; 0x70
 80061f4:	f002 f93a 	bl	800846c <__copybits>
 80061f8:	4620      	mov	r0, r4
 80061fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061fc:	f001 fd1e 	bl	8007c3c <_Bfree>
 8006200:	3f01      	subs	r7, #1
 8006202:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006204:	2f04      	cmp	r7, #4
 8006206:	d806      	bhi.n	8006216 <_strtod_l+0xe6>
 8006208:	e8df f007 	tbb	[pc, r7]
 800620c:	201d0314 	.word	0x201d0314
 8006210:	14          	.byte	0x14
 8006211:	00          	.byte	0x00
 8006212:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006216:	05e9      	lsls	r1, r5, #23
 8006218:	bf48      	it	mi
 800621a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800621e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006222:	0d1b      	lsrs	r3, r3, #20
 8006224:	051b      	lsls	r3, r3, #20
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1bb      	bne.n	80061a2 <_strtod_l+0x72>
 800622a:	f001 f81b 	bl	8007264 <__errno>
 800622e:	2322      	movs	r3, #34	; 0x22
 8006230:	6003      	str	r3, [r0, #0]
 8006232:	e7b6      	b.n	80061a2 <_strtod_l+0x72>
 8006234:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006238:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800623c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006240:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006244:	e7e7      	b.n	8006216 <_strtod_l+0xe6>
 8006246:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80063bc <_strtod_l+0x28c>
 800624a:	e7e4      	b.n	8006216 <_strtod_l+0xe6>
 800624c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006250:	f04f 38ff 	mov.w	r8, #4294967295
 8006254:	e7df      	b.n	8006216 <_strtod_l+0xe6>
 8006256:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	9219      	str	r2, [sp, #100]	; 0x64
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b30      	cmp	r3, #48	; 0x30
 8006260:	d0f9      	beq.n	8006256 <_strtod_l+0x126>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d09d      	beq.n	80061a2 <_strtod_l+0x72>
 8006266:	2301      	movs	r3, #1
 8006268:	f04f 0a00 	mov.w	sl, #0
 800626c:	220a      	movs	r2, #10
 800626e:	46d3      	mov	fp, sl
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006274:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006278:	930b      	str	r3, [sp, #44]	; 0x2c
 800627a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800627c:	7806      	ldrb	r6, [r0, #0]
 800627e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006282:	b2d9      	uxtb	r1, r3
 8006284:	2909      	cmp	r1, #9
 8006286:	d926      	bls.n	80062d6 <_strtod_l+0x1a6>
 8006288:	2201      	movs	r2, #1
 800628a:	494d      	ldr	r1, [pc, #308]	; (80063c0 <_strtod_l+0x290>)
 800628c:	f000 ff66 	bl	800715c <strncmp>
 8006290:	2800      	cmp	r0, #0
 8006292:	d030      	beq.n	80062f6 <_strtod_l+0x1c6>
 8006294:	2000      	movs	r0, #0
 8006296:	4632      	mov	r2, r6
 8006298:	4603      	mov	r3, r0
 800629a:	465e      	mov	r6, fp
 800629c:	9008      	str	r0, [sp, #32]
 800629e:	2a65      	cmp	r2, #101	; 0x65
 80062a0:	d001      	beq.n	80062a6 <_strtod_l+0x176>
 80062a2:	2a45      	cmp	r2, #69	; 0x45
 80062a4:	d113      	bne.n	80062ce <_strtod_l+0x19e>
 80062a6:	b91e      	cbnz	r6, 80062b0 <_strtod_l+0x180>
 80062a8:	9a05      	ldr	r2, [sp, #20]
 80062aa:	4302      	orrs	r2, r0
 80062ac:	d094      	beq.n	80061d8 <_strtod_l+0xa8>
 80062ae:	2600      	movs	r6, #0
 80062b0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80062b2:	1c6a      	adds	r2, r5, #1
 80062b4:	9219      	str	r2, [sp, #100]	; 0x64
 80062b6:	786a      	ldrb	r2, [r5, #1]
 80062b8:	2a2b      	cmp	r2, #43	; 0x2b
 80062ba:	d074      	beq.n	80063a6 <_strtod_l+0x276>
 80062bc:	2a2d      	cmp	r2, #45	; 0x2d
 80062be:	d078      	beq.n	80063b2 <_strtod_l+0x282>
 80062c0:	f04f 0c00 	mov.w	ip, #0
 80062c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80062c8:	2909      	cmp	r1, #9
 80062ca:	d97f      	bls.n	80063cc <_strtod_l+0x29c>
 80062cc:	9519      	str	r5, [sp, #100]	; 0x64
 80062ce:	2700      	movs	r7, #0
 80062d0:	e09e      	b.n	8006410 <_strtod_l+0x2e0>
 80062d2:	2300      	movs	r3, #0
 80062d4:	e7c8      	b.n	8006268 <_strtod_l+0x138>
 80062d6:	f1bb 0f08 	cmp.w	fp, #8
 80062da:	bfd8      	it	le
 80062dc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80062de:	f100 0001 	add.w	r0, r0, #1
 80062e2:	bfd6      	itet	le
 80062e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80062e8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80062ec:	930a      	strle	r3, [sp, #40]	; 0x28
 80062ee:	f10b 0b01 	add.w	fp, fp, #1
 80062f2:	9019      	str	r0, [sp, #100]	; 0x64
 80062f4:	e7c1      	b.n	800627a <_strtod_l+0x14a>
 80062f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	9219      	str	r2, [sp, #100]	; 0x64
 80062fc:	785a      	ldrb	r2, [r3, #1]
 80062fe:	f1bb 0f00 	cmp.w	fp, #0
 8006302:	d037      	beq.n	8006374 <_strtod_l+0x244>
 8006304:	465e      	mov	r6, fp
 8006306:	9008      	str	r0, [sp, #32]
 8006308:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800630c:	2b09      	cmp	r3, #9
 800630e:	d912      	bls.n	8006336 <_strtod_l+0x206>
 8006310:	2301      	movs	r3, #1
 8006312:	e7c4      	b.n	800629e <_strtod_l+0x16e>
 8006314:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006316:	3001      	adds	r0, #1
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	9219      	str	r2, [sp, #100]	; 0x64
 800631c:	785a      	ldrb	r2, [r3, #1]
 800631e:	2a30      	cmp	r2, #48	; 0x30
 8006320:	d0f8      	beq.n	8006314 <_strtod_l+0x1e4>
 8006322:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006326:	2b08      	cmp	r3, #8
 8006328:	f200 84e4 	bhi.w	8006cf4 <_strtod_l+0xbc4>
 800632c:	9008      	str	r0, [sp, #32]
 800632e:	2000      	movs	r0, #0
 8006330:	4606      	mov	r6, r0
 8006332:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006334:	930b      	str	r3, [sp, #44]	; 0x2c
 8006336:	3a30      	subs	r2, #48	; 0x30
 8006338:	f100 0301 	add.w	r3, r0, #1
 800633c:	d014      	beq.n	8006368 <_strtod_l+0x238>
 800633e:	9908      	ldr	r1, [sp, #32]
 8006340:	eb00 0c06 	add.w	ip, r0, r6
 8006344:	4419      	add	r1, r3
 8006346:	9108      	str	r1, [sp, #32]
 8006348:	4633      	mov	r3, r6
 800634a:	210a      	movs	r1, #10
 800634c:	4563      	cmp	r3, ip
 800634e:	d113      	bne.n	8006378 <_strtod_l+0x248>
 8006350:	1833      	adds	r3, r6, r0
 8006352:	2b08      	cmp	r3, #8
 8006354:	f106 0601 	add.w	r6, r6, #1
 8006358:	4406      	add	r6, r0
 800635a:	dc1a      	bgt.n	8006392 <_strtod_l+0x262>
 800635c:	230a      	movs	r3, #10
 800635e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006360:	fb03 2301 	mla	r3, r3, r1, r2
 8006364:	930a      	str	r3, [sp, #40]	; 0x28
 8006366:	2300      	movs	r3, #0
 8006368:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800636a:	4618      	mov	r0, r3
 800636c:	1c51      	adds	r1, r2, #1
 800636e:	9119      	str	r1, [sp, #100]	; 0x64
 8006370:	7852      	ldrb	r2, [r2, #1]
 8006372:	e7c9      	b.n	8006308 <_strtod_l+0x1d8>
 8006374:	4658      	mov	r0, fp
 8006376:	e7d2      	b.n	800631e <_strtod_l+0x1ee>
 8006378:	2b08      	cmp	r3, #8
 800637a:	f103 0301 	add.w	r3, r3, #1
 800637e:	dc03      	bgt.n	8006388 <_strtod_l+0x258>
 8006380:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006382:	434f      	muls	r7, r1
 8006384:	970a      	str	r7, [sp, #40]	; 0x28
 8006386:	e7e1      	b.n	800634c <_strtod_l+0x21c>
 8006388:	2b10      	cmp	r3, #16
 800638a:	bfd8      	it	le
 800638c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006390:	e7dc      	b.n	800634c <_strtod_l+0x21c>
 8006392:	2e10      	cmp	r6, #16
 8006394:	bfdc      	itt	le
 8006396:	230a      	movle	r3, #10
 8006398:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800639c:	e7e3      	b.n	8006366 <_strtod_l+0x236>
 800639e:	2300      	movs	r3, #0
 80063a0:	9308      	str	r3, [sp, #32]
 80063a2:	2301      	movs	r3, #1
 80063a4:	e780      	b.n	80062a8 <_strtod_l+0x178>
 80063a6:	f04f 0c00 	mov.w	ip, #0
 80063aa:	1caa      	adds	r2, r5, #2
 80063ac:	9219      	str	r2, [sp, #100]	; 0x64
 80063ae:	78aa      	ldrb	r2, [r5, #2]
 80063b0:	e788      	b.n	80062c4 <_strtod_l+0x194>
 80063b2:	f04f 0c01 	mov.w	ip, #1
 80063b6:	e7f8      	b.n	80063aa <_strtod_l+0x27a>
 80063b8:	08009544 	.word	0x08009544
 80063bc:	7ff00000 	.word	0x7ff00000
 80063c0:	080093ea 	.word	0x080093ea
 80063c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063c6:	1c51      	adds	r1, r2, #1
 80063c8:	9119      	str	r1, [sp, #100]	; 0x64
 80063ca:	7852      	ldrb	r2, [r2, #1]
 80063cc:	2a30      	cmp	r2, #48	; 0x30
 80063ce:	d0f9      	beq.n	80063c4 <_strtod_l+0x294>
 80063d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80063d4:	2908      	cmp	r1, #8
 80063d6:	f63f af7a 	bhi.w	80062ce <_strtod_l+0x19e>
 80063da:	3a30      	subs	r2, #48	; 0x30
 80063dc:	9209      	str	r2, [sp, #36]	; 0x24
 80063de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063e0:	920c      	str	r2, [sp, #48]	; 0x30
 80063e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063e4:	1c57      	adds	r7, r2, #1
 80063e6:	9719      	str	r7, [sp, #100]	; 0x64
 80063e8:	7852      	ldrb	r2, [r2, #1]
 80063ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80063ee:	f1be 0f09 	cmp.w	lr, #9
 80063f2:	d938      	bls.n	8006466 <_strtod_l+0x336>
 80063f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063f6:	1a7f      	subs	r7, r7, r1
 80063f8:	2f08      	cmp	r7, #8
 80063fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80063fe:	dc03      	bgt.n	8006408 <_strtod_l+0x2d8>
 8006400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006402:	428f      	cmp	r7, r1
 8006404:	bfa8      	it	ge
 8006406:	460f      	movge	r7, r1
 8006408:	f1bc 0f00 	cmp.w	ip, #0
 800640c:	d000      	beq.n	8006410 <_strtod_l+0x2e0>
 800640e:	427f      	negs	r7, r7
 8006410:	2e00      	cmp	r6, #0
 8006412:	d14f      	bne.n	80064b4 <_strtod_l+0x384>
 8006414:	9905      	ldr	r1, [sp, #20]
 8006416:	4301      	orrs	r1, r0
 8006418:	f47f aec3 	bne.w	80061a2 <_strtod_l+0x72>
 800641c:	2b00      	cmp	r3, #0
 800641e:	f47f aedb 	bne.w	80061d8 <_strtod_l+0xa8>
 8006422:	2a69      	cmp	r2, #105	; 0x69
 8006424:	d029      	beq.n	800647a <_strtod_l+0x34a>
 8006426:	dc26      	bgt.n	8006476 <_strtod_l+0x346>
 8006428:	2a49      	cmp	r2, #73	; 0x49
 800642a:	d026      	beq.n	800647a <_strtod_l+0x34a>
 800642c:	2a4e      	cmp	r2, #78	; 0x4e
 800642e:	f47f aed3 	bne.w	80061d8 <_strtod_l+0xa8>
 8006432:	499a      	ldr	r1, [pc, #616]	; (800669c <_strtod_l+0x56c>)
 8006434:	a819      	add	r0, sp, #100	; 0x64
 8006436:	f001 fa53 	bl	80078e0 <__match>
 800643a:	2800      	cmp	r0, #0
 800643c:	f43f aecc 	beq.w	80061d8 <_strtod_l+0xa8>
 8006440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b28      	cmp	r3, #40	; 0x28
 8006446:	d12f      	bne.n	80064a8 <_strtod_l+0x378>
 8006448:	4995      	ldr	r1, [pc, #596]	; (80066a0 <_strtod_l+0x570>)
 800644a:	aa1c      	add	r2, sp, #112	; 0x70
 800644c:	a819      	add	r0, sp, #100	; 0x64
 800644e:	f001 fa5b 	bl	8007908 <__hexnan>
 8006452:	2805      	cmp	r0, #5
 8006454:	d128      	bne.n	80064a8 <_strtod_l+0x378>
 8006456:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006458:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800645c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006460:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006464:	e69d      	b.n	80061a2 <_strtod_l+0x72>
 8006466:	210a      	movs	r1, #10
 8006468:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800646a:	fb01 2107 	mla	r1, r1, r7, r2
 800646e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006472:	9209      	str	r2, [sp, #36]	; 0x24
 8006474:	e7b5      	b.n	80063e2 <_strtod_l+0x2b2>
 8006476:	2a6e      	cmp	r2, #110	; 0x6e
 8006478:	e7d9      	b.n	800642e <_strtod_l+0x2fe>
 800647a:	498a      	ldr	r1, [pc, #552]	; (80066a4 <_strtod_l+0x574>)
 800647c:	a819      	add	r0, sp, #100	; 0x64
 800647e:	f001 fa2f 	bl	80078e0 <__match>
 8006482:	2800      	cmp	r0, #0
 8006484:	f43f aea8 	beq.w	80061d8 <_strtod_l+0xa8>
 8006488:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800648a:	4987      	ldr	r1, [pc, #540]	; (80066a8 <_strtod_l+0x578>)
 800648c:	3b01      	subs	r3, #1
 800648e:	a819      	add	r0, sp, #100	; 0x64
 8006490:	9319      	str	r3, [sp, #100]	; 0x64
 8006492:	f001 fa25 	bl	80078e0 <__match>
 8006496:	b910      	cbnz	r0, 800649e <_strtod_l+0x36e>
 8006498:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800649a:	3301      	adds	r3, #1
 800649c:	9319      	str	r3, [sp, #100]	; 0x64
 800649e:	f04f 0800 	mov.w	r8, #0
 80064a2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80066ac <_strtod_l+0x57c>
 80064a6:	e67c      	b.n	80061a2 <_strtod_l+0x72>
 80064a8:	4881      	ldr	r0, [pc, #516]	; (80066b0 <_strtod_l+0x580>)
 80064aa:	f000 ff1d 	bl	80072e8 <nan>
 80064ae:	4680      	mov	r8, r0
 80064b0:	4689      	mov	r9, r1
 80064b2:	e676      	b.n	80061a2 <_strtod_l+0x72>
 80064b4:	9b08      	ldr	r3, [sp, #32]
 80064b6:	f1bb 0f00 	cmp.w	fp, #0
 80064ba:	bf08      	it	eq
 80064bc:	46b3      	moveq	fp, r6
 80064be:	1afb      	subs	r3, r7, r3
 80064c0:	2e10      	cmp	r6, #16
 80064c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80064c4:	4635      	mov	r5, r6
 80064c6:	9309      	str	r3, [sp, #36]	; 0x24
 80064c8:	bfa8      	it	ge
 80064ca:	2510      	movge	r5, #16
 80064cc:	f7f9 ff8c 	bl	80003e8 <__aeabi_ui2d>
 80064d0:	2e09      	cmp	r6, #9
 80064d2:	4680      	mov	r8, r0
 80064d4:	4689      	mov	r9, r1
 80064d6:	dd13      	ble.n	8006500 <_strtod_l+0x3d0>
 80064d8:	4b76      	ldr	r3, [pc, #472]	; (80066b4 <_strtod_l+0x584>)
 80064da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80064de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80064e2:	f7f9 fffb 	bl	80004dc <__aeabi_dmul>
 80064e6:	4680      	mov	r8, r0
 80064e8:	4650      	mov	r0, sl
 80064ea:	4689      	mov	r9, r1
 80064ec:	f7f9 ff7c 	bl	80003e8 <__aeabi_ui2d>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4640      	mov	r0, r8
 80064f6:	4649      	mov	r1, r9
 80064f8:	f7f9 fe3a 	bl	8000170 <__adddf3>
 80064fc:	4680      	mov	r8, r0
 80064fe:	4689      	mov	r9, r1
 8006500:	2e0f      	cmp	r6, #15
 8006502:	dc36      	bgt.n	8006572 <_strtod_l+0x442>
 8006504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	f43f ae4b 	beq.w	80061a2 <_strtod_l+0x72>
 800650c:	dd22      	ble.n	8006554 <_strtod_l+0x424>
 800650e:	2b16      	cmp	r3, #22
 8006510:	dc09      	bgt.n	8006526 <_strtod_l+0x3f6>
 8006512:	4968      	ldr	r1, [pc, #416]	; (80066b4 <_strtod_l+0x584>)
 8006514:	4642      	mov	r2, r8
 8006516:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800651a:	464b      	mov	r3, r9
 800651c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006520:	f7f9 ffdc 	bl	80004dc <__aeabi_dmul>
 8006524:	e7c3      	b.n	80064ae <_strtod_l+0x37e>
 8006526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006528:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800652c:	4293      	cmp	r3, r2
 800652e:	db20      	blt.n	8006572 <_strtod_l+0x442>
 8006530:	4c60      	ldr	r4, [pc, #384]	; (80066b4 <_strtod_l+0x584>)
 8006532:	f1c6 060f 	rsb	r6, r6, #15
 8006536:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800653a:	4642      	mov	r2, r8
 800653c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006540:	464b      	mov	r3, r9
 8006542:	f7f9 ffcb 	bl	80004dc <__aeabi_dmul>
 8006546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006548:	1b9e      	subs	r6, r3, r6
 800654a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800654e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006552:	e7e5      	b.n	8006520 <_strtod_l+0x3f0>
 8006554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006556:	3316      	adds	r3, #22
 8006558:	db0b      	blt.n	8006572 <_strtod_l+0x442>
 800655a:	9b08      	ldr	r3, [sp, #32]
 800655c:	4640      	mov	r0, r8
 800655e:	1bdf      	subs	r7, r3, r7
 8006560:	4b54      	ldr	r3, [pc, #336]	; (80066b4 <_strtod_l+0x584>)
 8006562:	4649      	mov	r1, r9
 8006564:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656c:	f7fa f8e0 	bl	8000730 <__aeabi_ddiv>
 8006570:	e79d      	b.n	80064ae <_strtod_l+0x37e>
 8006572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006574:	1b75      	subs	r5, r6, r5
 8006576:	441d      	add	r5, r3
 8006578:	2d00      	cmp	r5, #0
 800657a:	dd70      	ble.n	800665e <_strtod_l+0x52e>
 800657c:	f015 030f 	ands.w	r3, r5, #15
 8006580:	d00a      	beq.n	8006598 <_strtod_l+0x468>
 8006582:	494c      	ldr	r1, [pc, #304]	; (80066b4 <_strtod_l+0x584>)
 8006584:	4642      	mov	r2, r8
 8006586:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800658a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800658e:	464b      	mov	r3, r9
 8006590:	f7f9 ffa4 	bl	80004dc <__aeabi_dmul>
 8006594:	4680      	mov	r8, r0
 8006596:	4689      	mov	r9, r1
 8006598:	f035 050f 	bics.w	r5, r5, #15
 800659c:	d04d      	beq.n	800663a <_strtod_l+0x50a>
 800659e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80065a2:	dd22      	ble.n	80065ea <_strtod_l+0x4ba>
 80065a4:	2600      	movs	r6, #0
 80065a6:	46b3      	mov	fp, r6
 80065a8:	960b      	str	r6, [sp, #44]	; 0x2c
 80065aa:	9608      	str	r6, [sp, #32]
 80065ac:	2322      	movs	r3, #34	; 0x22
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80066ac <_strtod_l+0x57c>
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f43f adf1 	beq.w	80061a2 <_strtod_l+0x72>
 80065c0:	4620      	mov	r0, r4
 80065c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80065c4:	f001 fb3a 	bl	8007c3c <_Bfree>
 80065c8:	4620      	mov	r0, r4
 80065ca:	9908      	ldr	r1, [sp, #32]
 80065cc:	f001 fb36 	bl	8007c3c <_Bfree>
 80065d0:	4659      	mov	r1, fp
 80065d2:	4620      	mov	r0, r4
 80065d4:	f001 fb32 	bl	8007c3c <_Bfree>
 80065d8:	4620      	mov	r0, r4
 80065da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065dc:	f001 fb2e 	bl	8007c3c <_Bfree>
 80065e0:	4631      	mov	r1, r6
 80065e2:	4620      	mov	r0, r4
 80065e4:	f001 fb2a 	bl	8007c3c <_Bfree>
 80065e8:	e5db      	b.n	80061a2 <_strtod_l+0x72>
 80065ea:	4b33      	ldr	r3, [pc, #204]	; (80066b8 <_strtod_l+0x588>)
 80065ec:	4640      	mov	r0, r8
 80065ee:	9305      	str	r3, [sp, #20]
 80065f0:	2300      	movs	r3, #0
 80065f2:	4649      	mov	r1, r9
 80065f4:	469a      	mov	sl, r3
 80065f6:	112d      	asrs	r5, r5, #4
 80065f8:	2d01      	cmp	r5, #1
 80065fa:	dc21      	bgt.n	8006640 <_strtod_l+0x510>
 80065fc:	b10b      	cbz	r3, 8006602 <_strtod_l+0x4d2>
 80065fe:	4680      	mov	r8, r0
 8006600:	4689      	mov	r9, r1
 8006602:	492d      	ldr	r1, [pc, #180]	; (80066b8 <_strtod_l+0x588>)
 8006604:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006608:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800660c:	4642      	mov	r2, r8
 800660e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006612:	464b      	mov	r3, r9
 8006614:	f7f9 ff62 	bl	80004dc <__aeabi_dmul>
 8006618:	4b24      	ldr	r3, [pc, #144]	; (80066ac <_strtod_l+0x57c>)
 800661a:	460a      	mov	r2, r1
 800661c:	400b      	ands	r3, r1
 800661e:	4927      	ldr	r1, [pc, #156]	; (80066bc <_strtod_l+0x58c>)
 8006620:	4680      	mov	r8, r0
 8006622:	428b      	cmp	r3, r1
 8006624:	d8be      	bhi.n	80065a4 <_strtod_l+0x474>
 8006626:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800662a:	428b      	cmp	r3, r1
 800662c:	bf86      	itte	hi
 800662e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006632:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80066c0 <_strtod_l+0x590>
 8006636:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800663a:	2300      	movs	r3, #0
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	e07b      	b.n	8006738 <_strtod_l+0x608>
 8006640:	07ea      	lsls	r2, r5, #31
 8006642:	d505      	bpl.n	8006650 <_strtod_l+0x520>
 8006644:	9b05      	ldr	r3, [sp, #20]
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f7f9 ff47 	bl	80004dc <__aeabi_dmul>
 800664e:	2301      	movs	r3, #1
 8006650:	9a05      	ldr	r2, [sp, #20]
 8006652:	f10a 0a01 	add.w	sl, sl, #1
 8006656:	3208      	adds	r2, #8
 8006658:	106d      	asrs	r5, r5, #1
 800665a:	9205      	str	r2, [sp, #20]
 800665c:	e7cc      	b.n	80065f8 <_strtod_l+0x4c8>
 800665e:	d0ec      	beq.n	800663a <_strtod_l+0x50a>
 8006660:	426d      	negs	r5, r5
 8006662:	f015 020f 	ands.w	r2, r5, #15
 8006666:	d00a      	beq.n	800667e <_strtod_l+0x54e>
 8006668:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <_strtod_l+0x584>)
 800666a:	4640      	mov	r0, r8
 800666c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006670:	4649      	mov	r1, r9
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f7fa f85b 	bl	8000730 <__aeabi_ddiv>
 800667a:	4680      	mov	r8, r0
 800667c:	4689      	mov	r9, r1
 800667e:	112d      	asrs	r5, r5, #4
 8006680:	d0db      	beq.n	800663a <_strtod_l+0x50a>
 8006682:	2d1f      	cmp	r5, #31
 8006684:	dd1e      	ble.n	80066c4 <_strtod_l+0x594>
 8006686:	2600      	movs	r6, #0
 8006688:	46b3      	mov	fp, r6
 800668a:	960b      	str	r6, [sp, #44]	; 0x2c
 800668c:	9608      	str	r6, [sp, #32]
 800668e:	2322      	movs	r3, #34	; 0x22
 8006690:	f04f 0800 	mov.w	r8, #0
 8006694:	f04f 0900 	mov.w	r9, #0
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	e78d      	b.n	80065b8 <_strtod_l+0x488>
 800669c:	08009540 	.word	0x08009540
 80066a0:	08009558 	.word	0x08009558
 80066a4:	08009537 	.word	0x08009537
 80066a8:	0800953a 	.word	0x0800953a
 80066ac:	7ff00000 	.word	0x7ff00000
 80066b0:	0800939c 	.word	0x0800939c
 80066b4:	080097a8 	.word	0x080097a8
 80066b8:	08009780 	.word	0x08009780
 80066bc:	7ca00000 	.word	0x7ca00000
 80066c0:	7fefffff 	.word	0x7fefffff
 80066c4:	f015 0310 	ands.w	r3, r5, #16
 80066c8:	bf18      	it	ne
 80066ca:	236a      	movne	r3, #106	; 0x6a
 80066cc:	4640      	mov	r0, r8
 80066ce:	9305      	str	r3, [sp, #20]
 80066d0:	4649      	mov	r1, r9
 80066d2:	2300      	movs	r3, #0
 80066d4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80069a0 <_strtod_l+0x870>
 80066d8:	07ea      	lsls	r2, r5, #31
 80066da:	d504      	bpl.n	80066e6 <_strtod_l+0x5b6>
 80066dc:	e9da 2300 	ldrd	r2, r3, [sl]
 80066e0:	f7f9 fefc 	bl	80004dc <__aeabi_dmul>
 80066e4:	2301      	movs	r3, #1
 80066e6:	106d      	asrs	r5, r5, #1
 80066e8:	f10a 0a08 	add.w	sl, sl, #8
 80066ec:	d1f4      	bne.n	80066d8 <_strtod_l+0x5a8>
 80066ee:	b10b      	cbz	r3, 80066f4 <_strtod_l+0x5c4>
 80066f0:	4680      	mov	r8, r0
 80066f2:	4689      	mov	r9, r1
 80066f4:	9b05      	ldr	r3, [sp, #20]
 80066f6:	b1bb      	cbz	r3, 8006728 <_strtod_l+0x5f8>
 80066f8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80066fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006700:	2b00      	cmp	r3, #0
 8006702:	4649      	mov	r1, r9
 8006704:	dd10      	ble.n	8006728 <_strtod_l+0x5f8>
 8006706:	2b1f      	cmp	r3, #31
 8006708:	f340 8128 	ble.w	800695c <_strtod_l+0x82c>
 800670c:	2b34      	cmp	r3, #52	; 0x34
 800670e:	bfd8      	it	le
 8006710:	f04f 33ff 	movle.w	r3, #4294967295
 8006714:	f04f 0800 	mov.w	r8, #0
 8006718:	bfcf      	iteee	gt
 800671a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800671e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006722:	4093      	lslle	r3, r2
 8006724:	ea03 0901 	andle.w	r9, r3, r1
 8006728:	2200      	movs	r2, #0
 800672a:	2300      	movs	r3, #0
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7fa f93c 	bl	80009ac <__aeabi_dcmpeq>
 8006734:	2800      	cmp	r0, #0
 8006736:	d1a6      	bne.n	8006686 <_strtod_l+0x556>
 8006738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673a:	465a      	mov	r2, fp
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	4620      	mov	r0, r4
 8006740:	4633      	mov	r3, r6
 8006742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006744:	f001 fae2 	bl	8007d0c <__s2b>
 8006748:	900b      	str	r0, [sp, #44]	; 0x2c
 800674a:	2800      	cmp	r0, #0
 800674c:	f43f af2a 	beq.w	80065a4 <_strtod_l+0x474>
 8006750:	2600      	movs	r6, #0
 8006752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006754:	9b08      	ldr	r3, [sp, #32]
 8006756:	2a00      	cmp	r2, #0
 8006758:	eba3 0307 	sub.w	r3, r3, r7
 800675c:	bfa8      	it	ge
 800675e:	2300      	movge	r3, #0
 8006760:	46b3      	mov	fp, r6
 8006762:	9312      	str	r3, [sp, #72]	; 0x48
 8006764:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006768:	9316      	str	r3, [sp, #88]	; 0x58
 800676a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800676c:	4620      	mov	r0, r4
 800676e:	6859      	ldr	r1, [r3, #4]
 8006770:	f001 fa24 	bl	8007bbc <_Balloc>
 8006774:	9008      	str	r0, [sp, #32]
 8006776:	2800      	cmp	r0, #0
 8006778:	f43f af18 	beq.w	80065ac <_strtod_l+0x47c>
 800677c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800677e:	300c      	adds	r0, #12
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	f103 010c 	add.w	r1, r3, #12
 8006786:	3202      	adds	r2, #2
 8006788:	0092      	lsls	r2, r2, #2
 800678a:	f000 fd9f 	bl	80072cc <memcpy>
 800678e:	ab1c      	add	r3, sp, #112	; 0x70
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	ab1b      	add	r3, sp, #108	; 0x6c
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4642      	mov	r2, r8
 8006798:	464b      	mov	r3, r9
 800679a:	4620      	mov	r0, r4
 800679c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80067a0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80067a4:	f001 fdde 	bl	8008364 <__d2b>
 80067a8:	901a      	str	r0, [sp, #104]	; 0x68
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f43f aefe 	beq.w	80065ac <_strtod_l+0x47c>
 80067b0:	2101      	movs	r1, #1
 80067b2:	4620      	mov	r0, r4
 80067b4:	f001 fb42 	bl	8007e3c <__i2b>
 80067b8:	4683      	mov	fp, r0
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f43f aef6 	beq.w	80065ac <_strtod_l+0x47c>
 80067c0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80067c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80067c4:	2f00      	cmp	r7, #0
 80067c6:	bfab      	itete	ge
 80067c8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80067ca:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80067cc:	eb07 0a03 	addge.w	sl, r7, r3
 80067d0:	1bdd      	sublt	r5, r3, r7
 80067d2:	9b05      	ldr	r3, [sp, #20]
 80067d4:	bfa8      	it	ge
 80067d6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80067d8:	eba7 0703 	sub.w	r7, r7, r3
 80067dc:	4417      	add	r7, r2
 80067de:	4b71      	ldr	r3, [pc, #452]	; (80069a4 <_strtod_l+0x874>)
 80067e0:	f107 37ff 	add.w	r7, r7, #4294967295
 80067e4:	bfb8      	it	lt
 80067e6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80067ea:	429f      	cmp	r7, r3
 80067ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80067f0:	f280 80c7 	bge.w	8006982 <_strtod_l+0x852>
 80067f4:	1bdb      	subs	r3, r3, r7
 80067f6:	2b1f      	cmp	r3, #31
 80067f8:	f04f 0101 	mov.w	r1, #1
 80067fc:	eba2 0203 	sub.w	r2, r2, r3
 8006800:	f300 80b3 	bgt.w	800696a <_strtod_l+0x83a>
 8006804:	fa01 f303 	lsl.w	r3, r1, r3
 8006808:	9313      	str	r3, [sp, #76]	; 0x4c
 800680a:	2300      	movs	r3, #0
 800680c:	9310      	str	r3, [sp, #64]	; 0x40
 800680e:	eb0a 0702 	add.w	r7, sl, r2
 8006812:	9b05      	ldr	r3, [sp, #20]
 8006814:	45ba      	cmp	sl, r7
 8006816:	4415      	add	r5, r2
 8006818:	441d      	add	r5, r3
 800681a:	4653      	mov	r3, sl
 800681c:	bfa8      	it	ge
 800681e:	463b      	movge	r3, r7
 8006820:	42ab      	cmp	r3, r5
 8006822:	bfa8      	it	ge
 8006824:	462b      	movge	r3, r5
 8006826:	2b00      	cmp	r3, #0
 8006828:	bfc2      	ittt	gt
 800682a:	1aff      	subgt	r7, r7, r3
 800682c:	1aed      	subgt	r5, r5, r3
 800682e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006832:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006834:	2b00      	cmp	r3, #0
 8006836:	dd17      	ble.n	8006868 <_strtod_l+0x738>
 8006838:	4659      	mov	r1, fp
 800683a:	461a      	mov	r2, r3
 800683c:	4620      	mov	r0, r4
 800683e:	f001 fbbb 	bl	8007fb8 <__pow5mult>
 8006842:	4683      	mov	fp, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	f43f aeb1 	beq.w	80065ac <_strtod_l+0x47c>
 800684a:	4601      	mov	r1, r0
 800684c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800684e:	4620      	mov	r0, r4
 8006850:	f001 fb0a 	bl	8007e68 <__multiply>
 8006854:	900a      	str	r0, [sp, #40]	; 0x28
 8006856:	2800      	cmp	r0, #0
 8006858:	f43f aea8 	beq.w	80065ac <_strtod_l+0x47c>
 800685c:	4620      	mov	r0, r4
 800685e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006860:	f001 f9ec 	bl	8007c3c <_Bfree>
 8006864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006866:	931a      	str	r3, [sp, #104]	; 0x68
 8006868:	2f00      	cmp	r7, #0
 800686a:	f300 808f 	bgt.w	800698c <_strtod_l+0x85c>
 800686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	dd08      	ble.n	8006886 <_strtod_l+0x756>
 8006874:	4620      	mov	r0, r4
 8006876:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006878:	9908      	ldr	r1, [sp, #32]
 800687a:	f001 fb9d 	bl	8007fb8 <__pow5mult>
 800687e:	9008      	str	r0, [sp, #32]
 8006880:	2800      	cmp	r0, #0
 8006882:	f43f ae93 	beq.w	80065ac <_strtod_l+0x47c>
 8006886:	2d00      	cmp	r5, #0
 8006888:	dd08      	ble.n	800689c <_strtod_l+0x76c>
 800688a:	462a      	mov	r2, r5
 800688c:	4620      	mov	r0, r4
 800688e:	9908      	ldr	r1, [sp, #32]
 8006890:	f001 fbec 	bl	800806c <__lshift>
 8006894:	9008      	str	r0, [sp, #32]
 8006896:	2800      	cmp	r0, #0
 8006898:	f43f ae88 	beq.w	80065ac <_strtod_l+0x47c>
 800689c:	f1ba 0f00 	cmp.w	sl, #0
 80068a0:	dd08      	ble.n	80068b4 <_strtod_l+0x784>
 80068a2:	4659      	mov	r1, fp
 80068a4:	4652      	mov	r2, sl
 80068a6:	4620      	mov	r0, r4
 80068a8:	f001 fbe0 	bl	800806c <__lshift>
 80068ac:	4683      	mov	fp, r0
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f43f ae7c 	beq.w	80065ac <_strtod_l+0x47c>
 80068b4:	4620      	mov	r0, r4
 80068b6:	9a08      	ldr	r2, [sp, #32]
 80068b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80068ba:	f001 fc5f 	bl	800817c <__mdiff>
 80068be:	4606      	mov	r6, r0
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f43f ae73 	beq.w	80065ac <_strtod_l+0x47c>
 80068c6:	2500      	movs	r5, #0
 80068c8:	68c3      	ldr	r3, [r0, #12]
 80068ca:	4659      	mov	r1, fp
 80068cc:	60c5      	str	r5, [r0, #12]
 80068ce:	930a      	str	r3, [sp, #40]	; 0x28
 80068d0:	f001 fc38 	bl	8008144 <__mcmp>
 80068d4:	42a8      	cmp	r0, r5
 80068d6:	da6b      	bge.n	80069b0 <_strtod_l+0x880>
 80068d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068da:	ea53 0308 	orrs.w	r3, r3, r8
 80068de:	f040 808f 	bne.w	8006a00 <_strtod_l+0x8d0>
 80068e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 808a 	bne.w	8006a00 <_strtod_l+0x8d0>
 80068ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068f0:	0d1b      	lsrs	r3, r3, #20
 80068f2:	051b      	lsls	r3, r3, #20
 80068f4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80068f8:	f240 8082 	bls.w	8006a00 <_strtod_l+0x8d0>
 80068fc:	6973      	ldr	r3, [r6, #20]
 80068fe:	b913      	cbnz	r3, 8006906 <_strtod_l+0x7d6>
 8006900:	6933      	ldr	r3, [r6, #16]
 8006902:	2b01      	cmp	r3, #1
 8006904:	dd7c      	ble.n	8006a00 <_strtod_l+0x8d0>
 8006906:	4631      	mov	r1, r6
 8006908:	2201      	movs	r2, #1
 800690a:	4620      	mov	r0, r4
 800690c:	f001 fbae 	bl	800806c <__lshift>
 8006910:	4659      	mov	r1, fp
 8006912:	4606      	mov	r6, r0
 8006914:	f001 fc16 	bl	8008144 <__mcmp>
 8006918:	2800      	cmp	r0, #0
 800691a:	dd71      	ble.n	8006a00 <_strtod_l+0x8d0>
 800691c:	9905      	ldr	r1, [sp, #20]
 800691e:	464b      	mov	r3, r9
 8006920:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <_strtod_l+0x878>)
 8006922:	2900      	cmp	r1, #0
 8006924:	f000 808d 	beq.w	8006a42 <_strtod_l+0x912>
 8006928:	ea02 0109 	and.w	r1, r2, r9
 800692c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006930:	f300 8087 	bgt.w	8006a42 <_strtod_l+0x912>
 8006934:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006938:	f77f aea9 	ble.w	800668e <_strtod_l+0x55e>
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <_strtod_l+0x87c>)
 8006942:	2200      	movs	r2, #0
 8006944:	f7f9 fdca 	bl	80004dc <__aeabi_dmul>
 8006948:	4b17      	ldr	r3, [pc, #92]	; (80069a8 <_strtod_l+0x878>)
 800694a:	4680      	mov	r8, r0
 800694c:	400b      	ands	r3, r1
 800694e:	4689      	mov	r9, r1
 8006950:	2b00      	cmp	r3, #0
 8006952:	f47f ae35 	bne.w	80065c0 <_strtod_l+0x490>
 8006956:	2322      	movs	r3, #34	; 0x22
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	e631      	b.n	80065c0 <_strtod_l+0x490>
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	ea03 0808 	and.w	r8, r3, r8
 8006968:	e6de      	b.n	8006728 <_strtod_l+0x5f8>
 800696a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800696e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006972:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006976:	37e2      	adds	r7, #226	; 0xe2
 8006978:	fa01 f307 	lsl.w	r3, r1, r7
 800697c:	9310      	str	r3, [sp, #64]	; 0x40
 800697e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006980:	e745      	b.n	800680e <_strtod_l+0x6de>
 8006982:	2300      	movs	r3, #0
 8006984:	9310      	str	r3, [sp, #64]	; 0x40
 8006986:	2301      	movs	r3, #1
 8006988:	9313      	str	r3, [sp, #76]	; 0x4c
 800698a:	e740      	b.n	800680e <_strtod_l+0x6de>
 800698c:	463a      	mov	r2, r7
 800698e:	4620      	mov	r0, r4
 8006990:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006992:	f001 fb6b 	bl	800806c <__lshift>
 8006996:	901a      	str	r0, [sp, #104]	; 0x68
 8006998:	2800      	cmp	r0, #0
 800699a:	f47f af68 	bne.w	800686e <_strtod_l+0x73e>
 800699e:	e605      	b.n	80065ac <_strtod_l+0x47c>
 80069a0:	08009570 	.word	0x08009570
 80069a4:	fffffc02 	.word	0xfffffc02
 80069a8:	7ff00000 	.word	0x7ff00000
 80069ac:	39500000 	.word	0x39500000
 80069b0:	46ca      	mov	sl, r9
 80069b2:	d165      	bne.n	8006a80 <_strtod_l+0x950>
 80069b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069ba:	b352      	cbz	r2, 8006a12 <_strtod_l+0x8e2>
 80069bc:	4a9e      	ldr	r2, [pc, #632]	; (8006c38 <_strtod_l+0xb08>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d12a      	bne.n	8006a18 <_strtod_l+0x8e8>
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	4641      	mov	r1, r8
 80069c6:	b1fb      	cbz	r3, 8006a08 <_strtod_l+0x8d8>
 80069c8:	4b9c      	ldr	r3, [pc, #624]	; (8006c3c <_strtod_l+0xb0c>)
 80069ca:	f04f 32ff 	mov.w	r2, #4294967295
 80069ce:	ea09 0303 	and.w	r3, r9, r3
 80069d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80069d6:	d81a      	bhi.n	8006a0e <_strtod_l+0x8de>
 80069d8:	0d1b      	lsrs	r3, r3, #20
 80069da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	4299      	cmp	r1, r3
 80069e4:	d118      	bne.n	8006a18 <_strtod_l+0x8e8>
 80069e6:	4b96      	ldr	r3, [pc, #600]	; (8006c40 <_strtod_l+0xb10>)
 80069e8:	459a      	cmp	sl, r3
 80069ea:	d102      	bne.n	80069f2 <_strtod_l+0x8c2>
 80069ec:	3101      	adds	r1, #1
 80069ee:	f43f addd 	beq.w	80065ac <_strtod_l+0x47c>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	4b91      	ldr	r3, [pc, #580]	; (8006c3c <_strtod_l+0xb0c>)
 80069f8:	ea0a 0303 	and.w	r3, sl, r3
 80069fc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006a00:	9b05      	ldr	r3, [sp, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d19a      	bne.n	800693c <_strtod_l+0x80c>
 8006a06:	e5db      	b.n	80065c0 <_strtod_l+0x490>
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0c:	e7e9      	b.n	80069e2 <_strtod_l+0x8b2>
 8006a0e:	4613      	mov	r3, r2
 8006a10:	e7e7      	b.n	80069e2 <_strtod_l+0x8b2>
 8006a12:	ea53 0308 	orrs.w	r3, r3, r8
 8006a16:	d081      	beq.n	800691c <_strtod_l+0x7ec>
 8006a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a1a:	b1e3      	cbz	r3, 8006a56 <_strtod_l+0x926>
 8006a1c:	ea13 0f0a 	tst.w	r3, sl
 8006a20:	d0ee      	beq.n	8006a00 <_strtod_l+0x8d0>
 8006a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a24:	4640      	mov	r0, r8
 8006a26:	4649      	mov	r1, r9
 8006a28:	9a05      	ldr	r2, [sp, #20]
 8006a2a:	b1c3      	cbz	r3, 8006a5e <_strtod_l+0x92e>
 8006a2c:	f7ff fb5d 	bl	80060ea <sulp>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a38:	f7f9 fb9a 	bl	8000170 <__adddf3>
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4689      	mov	r9, r1
 8006a40:	e7de      	b.n	8006a00 <_strtod_l+0x8d0>
 8006a42:	4013      	ands	r3, r2
 8006a44:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a48:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006a4c:	f04f 38ff 	mov.w	r8, #4294967295
 8006a50:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006a54:	e7d4      	b.n	8006a00 <_strtod_l+0x8d0>
 8006a56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a58:	ea13 0f08 	tst.w	r3, r8
 8006a5c:	e7e0      	b.n	8006a20 <_strtod_l+0x8f0>
 8006a5e:	f7ff fb44 	bl	80060ea <sulp>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a6a:	f7f9 fb7f 	bl	800016c <__aeabi_dsub>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2300      	movs	r3, #0
 8006a72:	4680      	mov	r8, r0
 8006a74:	4689      	mov	r9, r1
 8006a76:	f7f9 ff99 	bl	80009ac <__aeabi_dcmpeq>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d0c0      	beq.n	8006a00 <_strtod_l+0x8d0>
 8006a7e:	e606      	b.n	800668e <_strtod_l+0x55e>
 8006a80:	4659      	mov	r1, fp
 8006a82:	4630      	mov	r0, r6
 8006a84:	f001 fcc4 	bl	8008410 <__ratio>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006a90:	2200      	movs	r2, #0
 8006a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a96:	f7f9 ff9d 	bl	80009d4 <__aeabi_dcmple>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d06f      	beq.n	8006b7e <_strtod_l+0xa4e>
 8006a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d17c      	bne.n	8006b9e <_strtod_l+0xa6e>
 8006aa4:	f1b8 0f00 	cmp.w	r8, #0
 8006aa8:	d159      	bne.n	8006b5e <_strtod_l+0xa2e>
 8006aaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d17b      	bne.n	8006baa <_strtod_l+0xa7a>
 8006ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4b62      	ldr	r3, [pc, #392]	; (8006c44 <_strtod_l+0xb14>)
 8006aba:	f7f9 ff81 	bl	80009c0 <__aeabi_dcmplt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d15a      	bne.n	8006b78 <_strtod_l+0xa48>
 8006ac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4b5f      	ldr	r3, [pc, #380]	; (8006c48 <_strtod_l+0xb18>)
 8006aca:	f7f9 fd07 	bl	80004dc <__aeabi_dmul>
 8006ace:	4605      	mov	r5, r0
 8006ad0:	460f      	mov	r7, r1
 8006ad2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006ad6:	9506      	str	r5, [sp, #24]
 8006ad8:	9307      	str	r3, [sp, #28]
 8006ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ade:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006ae2:	4b56      	ldr	r3, [pc, #344]	; (8006c3c <_strtod_l+0xb0c>)
 8006ae4:	4a55      	ldr	r2, [pc, #340]	; (8006c3c <_strtod_l+0xb0c>)
 8006ae6:	ea0a 0303 	and.w	r3, sl, r3
 8006aea:	9313      	str	r3, [sp, #76]	; 0x4c
 8006aec:	4b57      	ldr	r3, [pc, #348]	; (8006c4c <_strtod_l+0xb1c>)
 8006aee:	ea0a 0202 	and.w	r2, sl, r2
 8006af2:	429a      	cmp	r2, r3
 8006af4:	f040 80b0 	bne.w	8006c58 <_strtod_l+0xb28>
 8006af8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006afc:	4640      	mov	r0, r8
 8006afe:	4649      	mov	r1, r9
 8006b00:	f001 fbc8 	bl	8008294 <__ulp>
 8006b04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b08:	f7f9 fce8 	bl	80004dc <__aeabi_dmul>
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	f7f9 fb2e 	bl	8000170 <__adddf3>
 8006b14:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006c3c <_strtod_l+0xb0c>
 8006b18:	4a4d      	ldr	r2, [pc, #308]	; (8006c50 <_strtod_l+0xb20>)
 8006b1a:	ea01 0a0a 	and.w	sl, r1, sl
 8006b1e:	4592      	cmp	sl, r2
 8006b20:	4680      	mov	r8, r0
 8006b22:	d948      	bls.n	8006bb6 <_strtod_l+0xa86>
 8006b24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b26:	4b46      	ldr	r3, [pc, #280]	; (8006c40 <_strtod_l+0xb10>)
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d103      	bne.n	8006b34 <_strtod_l+0xa04>
 8006b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b2e:	3301      	adds	r3, #1
 8006b30:	f43f ad3c 	beq.w	80065ac <_strtod_l+0x47c>
 8006b34:	f04f 38ff 	mov.w	r8, #4294967295
 8006b38:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006c40 <_strtod_l+0xb10>
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b40:	f001 f87c 	bl	8007c3c <_Bfree>
 8006b44:	4620      	mov	r0, r4
 8006b46:	9908      	ldr	r1, [sp, #32]
 8006b48:	f001 f878 	bl	8007c3c <_Bfree>
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f001 f874 	bl	8007c3c <_Bfree>
 8006b54:	4631      	mov	r1, r6
 8006b56:	4620      	mov	r0, r4
 8006b58:	f001 f870 	bl	8007c3c <_Bfree>
 8006b5c:	e605      	b.n	800676a <_strtod_l+0x63a>
 8006b5e:	f1b8 0f01 	cmp.w	r8, #1
 8006b62:	d103      	bne.n	8006b6c <_strtod_l+0xa3c>
 8006b64:	f1b9 0f00 	cmp.w	r9, #0
 8006b68:	f43f ad91 	beq.w	800668e <_strtod_l+0x55e>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	4b39      	ldr	r3, [pc, #228]	; (8006c54 <_strtod_l+0xb24>)
 8006b70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006b72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b76:	e016      	b.n	8006ba6 <_strtod_l+0xa76>
 8006b78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006b7a:	4f33      	ldr	r7, [pc, #204]	; (8006c48 <_strtod_l+0xb18>)
 8006b7c:	e7a9      	b.n	8006ad2 <_strtod_l+0x9a2>
 8006b7e:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <_strtod_l+0xb18>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b86:	f7f9 fca9 	bl	80004dc <__aeabi_dmul>
 8006b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	460f      	mov	r7, r1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d09e      	beq.n	8006ad2 <_strtod_l+0x9a2>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b9c:	e79d      	b.n	8006ada <_strtod_l+0x9aa>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <_strtod_l+0xb14>)
 8006ba2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ba6:	4f27      	ldr	r7, [pc, #156]	; (8006c44 <_strtod_l+0xb14>)
 8006ba8:	e797      	b.n	8006ada <_strtod_l+0x9aa>
 8006baa:	2200      	movs	r2, #0
 8006bac:	4b29      	ldr	r3, [pc, #164]	; (8006c54 <_strtod_l+0xb24>)
 8006bae:	4645      	mov	r5, r8
 8006bb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006bb4:	e7f7      	b.n	8006ba6 <_strtod_l+0xa76>
 8006bb6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	46ca      	mov	sl, r9
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1bc      	bne.n	8006b3c <_strtod_l+0xa0c>
 8006bc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bc8:	0d1b      	lsrs	r3, r3, #20
 8006bca:	051b      	lsls	r3, r3, #20
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d1b5      	bne.n	8006b3c <_strtod_l+0xa0c>
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	f7fa f82e 	bl	8000c34 <__aeabi_d2lz>
 8006bd8:	f7f9 fc52 	bl	8000480 <__aeabi_l2d>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4628      	mov	r0, r5
 8006be2:	4639      	mov	r1, r7
 8006be4:	f7f9 fac2 	bl	800016c <__aeabi_dsub>
 8006be8:	460b      	mov	r3, r1
 8006bea:	4602      	mov	r2, r0
 8006bec:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006bf0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf6:	ea4a 0a08 	orr.w	sl, sl, r8
 8006bfa:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006bfe:	d06c      	beq.n	8006cda <_strtod_l+0xbaa>
 8006c00:	a309      	add	r3, pc, #36	; (adr r3, 8006c28 <_strtod_l+0xaf8>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f7f9 fedb 	bl	80009c0 <__aeabi_dcmplt>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	f47f acd8 	bne.w	80065c0 <_strtod_l+0x490>
 8006c10:	a307      	add	r3, pc, #28	; (adr r3, 8006c30 <_strtod_l+0xb00>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c1a:	f7f9 feef 	bl	80009fc <__aeabi_dcmpgt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d08c      	beq.n	8006b3c <_strtod_l+0xa0c>
 8006c22:	e4cd      	b.n	80065c0 <_strtod_l+0x490>
 8006c24:	f3af 8000 	nop.w
 8006c28:	94a03595 	.word	0x94a03595
 8006c2c:	3fdfffff 	.word	0x3fdfffff
 8006c30:	35afe535 	.word	0x35afe535
 8006c34:	3fe00000 	.word	0x3fe00000
 8006c38:	000fffff 	.word	0x000fffff
 8006c3c:	7ff00000 	.word	0x7ff00000
 8006c40:	7fefffff 	.word	0x7fefffff
 8006c44:	3ff00000 	.word	0x3ff00000
 8006c48:	3fe00000 	.word	0x3fe00000
 8006c4c:	7fe00000 	.word	0x7fe00000
 8006c50:	7c9fffff 	.word	0x7c9fffff
 8006c54:	bff00000 	.word	0xbff00000
 8006c58:	9b05      	ldr	r3, [sp, #20]
 8006c5a:	b333      	cbz	r3, 8006caa <_strtod_l+0xb7a>
 8006c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c62:	d822      	bhi.n	8006caa <_strtod_l+0xb7a>
 8006c64:	a328      	add	r3, pc, #160	; (adr r3, 8006d08 <_strtod_l+0xbd8>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 feb1 	bl	80009d4 <__aeabi_dcmple>
 8006c72:	b1a0      	cbz	r0, 8006c9e <_strtod_l+0xb6e>
 8006c74:	4639      	mov	r1, r7
 8006c76:	4628      	mov	r0, r5
 8006c78:	f7f9 fee0 	bl	8000a3c <__aeabi_d2uiz>
 8006c7c:	2801      	cmp	r0, #1
 8006c7e:	bf38      	it	cc
 8006c80:	2001      	movcc	r0, #1
 8006c82:	f7f9 fbb1 	bl	80003e8 <__aeabi_ui2d>
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	4605      	mov	r5, r0
 8006c8a:	460f      	mov	r7, r1
 8006c8c:	bb03      	cbnz	r3, 8006cd0 <_strtod_l+0xba0>
 8006c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c92:	9014      	str	r0, [sp, #80]	; 0x50
 8006c94:	9315      	str	r3, [sp, #84]	; 0x54
 8006c96:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006c9a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006c9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ca0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ca2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	9311      	str	r3, [sp, #68]	; 0x44
 8006caa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006cac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006cae:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006cb2:	f001 faef 	bl	8008294 <__ulp>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4640      	mov	r0, r8
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	f7f9 fc0d 	bl	80004dc <__aeabi_dmul>
 8006cc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cc6:	f7f9 fa53 	bl	8000170 <__adddf3>
 8006cca:	4680      	mov	r8, r0
 8006ccc:	4689      	mov	r9, r1
 8006cce:	e774      	b.n	8006bba <_strtod_l+0xa8a>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006cd8:	e7dd      	b.n	8006c96 <_strtod_l+0xb66>
 8006cda:	a30d      	add	r3, pc, #52	; (adr r3, 8006d10 <_strtod_l+0xbe0>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f7f9 fe6e 	bl	80009c0 <__aeabi_dcmplt>
 8006ce4:	e79b      	b.n	8006c1e <_strtod_l+0xaee>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8006cea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	f7ff ba5b 	b.w	80061aa <_strtod_l+0x7a>
 8006cf4:	2a65      	cmp	r2, #101	; 0x65
 8006cf6:	f43f ab52 	beq.w	800639e <_strtod_l+0x26e>
 8006cfa:	2a45      	cmp	r2, #69	; 0x45
 8006cfc:	f43f ab4f 	beq.w	800639e <_strtod_l+0x26e>
 8006d00:	2301      	movs	r3, #1
 8006d02:	f7ff bb87 	b.w	8006414 <_strtod_l+0x2e4>
 8006d06:	bf00      	nop
 8006d08:	ffc00000 	.word	0xffc00000
 8006d0c:	41dfffff 	.word	0x41dfffff
 8006d10:	94a03595 	.word	0x94a03595
 8006d14:	3fcfffff 	.word	0x3fcfffff

08006d18 <strtof>:
 8006d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1c:	4f24      	ldr	r7, [pc, #144]	; (8006db0 <strtof+0x98>)
 8006d1e:	460a      	mov	r2, r1
 8006d20:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <strtof+0x9c>)
 8006d22:	4601      	mov	r1, r0
 8006d24:	6838      	ldr	r0, [r7, #0]
 8006d26:	f7ff fa03 	bl	8006130 <_strtod_l>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	f7f9 fe6d 	bl	8000a10 <__aeabi_dcmpun>
 8006d36:	b168      	cbz	r0, 8006d54 <strtof+0x3c>
 8006d38:	2c00      	cmp	r4, #0
 8006d3a:	481f      	ldr	r0, [pc, #124]	; (8006db8 <strtof+0xa0>)
 8006d3c:	da06      	bge.n	8006d4c <strtof+0x34>
 8006d3e:	f000 fad9 	bl	80072f4 <nanf>
 8006d42:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8006d46:	4628      	mov	r0, r5
 8006d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d50:	f000 bad0 	b.w	80072f4 <nanf>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4630      	mov	r0, r6
 8006d58:	f7f9 fe90 	bl	8000a7c <__aeabi_d2f>
 8006d5c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8006d60:	4605      	mov	r5, r0
 8006d62:	4916      	ldr	r1, [pc, #88]	; (8006dbc <strtof+0xa4>)
 8006d64:	4640      	mov	r0, r8
 8006d66:	f7f9 ff4f 	bl	8000c08 <__aeabi_fcmpun>
 8006d6a:	b9b0      	cbnz	r0, 8006d9a <strtof+0x82>
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	4913      	ldr	r1, [pc, #76]	; (8006dbc <strtof+0xa4>)
 8006d70:	f7f9 ff2c 	bl	8000bcc <__aeabi_fcmple>
 8006d74:	b988      	cbnz	r0, 8006d9a <strtof+0x82>
 8006d76:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	4630      	mov	r0, r6
 8006d80:	4641      	mov	r1, r8
 8006d82:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <strtof+0xa8>)
 8006d84:	f7f9 fe44 	bl	8000a10 <__aeabi_dcmpun>
 8006d88:	b970      	cbnz	r0, 8006da8 <strtof+0x90>
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	4630      	mov	r0, r6
 8006d90:	4641      	mov	r1, r8
 8006d92:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <strtof+0xa8>)
 8006d94:	f7f9 fe1e 	bl	80009d4 <__aeabi_dcmple>
 8006d98:	b930      	cbnz	r0, 8006da8 <strtof+0x90>
 8006d9a:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8006d9e:	d1d2      	bne.n	8006d46 <strtof+0x2e>
 8006da0:	4b08      	ldr	r3, [pc, #32]	; (8006dc4 <strtof+0xac>)
 8006da2:	4023      	ands	r3, r4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0ce      	beq.n	8006d46 <strtof+0x2e>
 8006da8:	2222      	movs	r2, #34	; 0x22
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	e7ca      	b.n	8006d46 <strtof+0x2e>
 8006db0:	20000394 	.word	0x20000394
 8006db4:	200001dc 	.word	0x200001dc
 8006db8:	0800939c 	.word	0x0800939c
 8006dbc:	7f7fffff 	.word	0x7f7fffff
 8006dc0:	7fefffff 	.word	0x7fefffff
 8006dc4:	7ff00000 	.word	0x7ff00000

08006dc8 <_strtoul_l.constprop.0>:
 8006dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dcc:	4686      	mov	lr, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	4f35      	ldr	r7, [pc, #212]	; (8006ea8 <_strtoul_l.constprop.0+0xe0>)
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dd8:	5d3e      	ldrb	r6, [r7, r4]
 8006dda:	f016 0608 	ands.w	r6, r6, #8
 8006dde:	d1f8      	bne.n	8006dd2 <_strtoul_l.constprop.0+0xa>
 8006de0:	2c2d      	cmp	r4, #45	; 0x2d
 8006de2:	d130      	bne.n	8006e46 <_strtoul_l.constprop.0+0x7e>
 8006de4:	2601      	movs	r6, #1
 8006de6:	782c      	ldrb	r4, [r5, #0]
 8006de8:	1c85      	adds	r5, r0, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d057      	beq.n	8006e9e <_strtoul_l.constprop.0+0xd6>
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d109      	bne.n	8006e06 <_strtoul_l.constprop.0+0x3e>
 8006df2:	2c30      	cmp	r4, #48	; 0x30
 8006df4:	d107      	bne.n	8006e06 <_strtoul_l.constprop.0+0x3e>
 8006df6:	7828      	ldrb	r0, [r5, #0]
 8006df8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006dfc:	2858      	cmp	r0, #88	; 0x58
 8006dfe:	d149      	bne.n	8006e94 <_strtoul_l.constprop.0+0xcc>
 8006e00:	2310      	movs	r3, #16
 8006e02:	786c      	ldrb	r4, [r5, #1]
 8006e04:	3502      	adds	r5, #2
 8006e06:	f04f 38ff 	mov.w	r8, #4294967295
 8006e0a:	fbb8 f8f3 	udiv	r8, r8, r3
 8006e0e:	2700      	movs	r7, #0
 8006e10:	fb03 f908 	mul.w	r9, r3, r8
 8006e14:	4638      	mov	r0, r7
 8006e16:	ea6f 0909 	mvn.w	r9, r9
 8006e1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006e1e:	f1bc 0f09 	cmp.w	ip, #9
 8006e22:	d815      	bhi.n	8006e50 <_strtoul_l.constprop.0+0x88>
 8006e24:	4664      	mov	r4, ip
 8006e26:	42a3      	cmp	r3, r4
 8006e28:	dd23      	ble.n	8006e72 <_strtoul_l.constprop.0+0xaa>
 8006e2a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006e2e:	d007      	beq.n	8006e40 <_strtoul_l.constprop.0+0x78>
 8006e30:	4580      	cmp	r8, r0
 8006e32:	d31b      	bcc.n	8006e6c <_strtoul_l.constprop.0+0xa4>
 8006e34:	d101      	bne.n	8006e3a <_strtoul_l.constprop.0+0x72>
 8006e36:	45a1      	cmp	r9, r4
 8006e38:	db18      	blt.n	8006e6c <_strtoul_l.constprop.0+0xa4>
 8006e3a:	2701      	movs	r7, #1
 8006e3c:	fb00 4003 	mla	r0, r0, r3, r4
 8006e40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e44:	e7e9      	b.n	8006e1a <_strtoul_l.constprop.0+0x52>
 8006e46:	2c2b      	cmp	r4, #43	; 0x2b
 8006e48:	bf04      	itt	eq
 8006e4a:	782c      	ldrbeq	r4, [r5, #0]
 8006e4c:	1c85      	addeq	r5, r0, #2
 8006e4e:	e7cc      	b.n	8006dea <_strtoul_l.constprop.0+0x22>
 8006e50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e54:	f1bc 0f19 	cmp.w	ip, #25
 8006e58:	d801      	bhi.n	8006e5e <_strtoul_l.constprop.0+0x96>
 8006e5a:	3c37      	subs	r4, #55	; 0x37
 8006e5c:	e7e3      	b.n	8006e26 <_strtoul_l.constprop.0+0x5e>
 8006e5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e62:	f1bc 0f19 	cmp.w	ip, #25
 8006e66:	d804      	bhi.n	8006e72 <_strtoul_l.constprop.0+0xaa>
 8006e68:	3c57      	subs	r4, #87	; 0x57
 8006e6a:	e7dc      	b.n	8006e26 <_strtoul_l.constprop.0+0x5e>
 8006e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e70:	e7e6      	b.n	8006e40 <_strtoul_l.constprop.0+0x78>
 8006e72:	1c7b      	adds	r3, r7, #1
 8006e74:	d106      	bne.n	8006e84 <_strtoul_l.constprop.0+0xbc>
 8006e76:	2322      	movs	r3, #34	; 0x22
 8006e78:	4638      	mov	r0, r7
 8006e7a:	f8ce 3000 	str.w	r3, [lr]
 8006e7e:	b932      	cbnz	r2, 8006e8e <_strtoul_l.constprop.0+0xc6>
 8006e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e84:	b106      	cbz	r6, 8006e88 <_strtoul_l.constprop.0+0xc0>
 8006e86:	4240      	negs	r0, r0
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d0f9      	beq.n	8006e80 <_strtoul_l.constprop.0+0xb8>
 8006e8c:	b107      	cbz	r7, 8006e90 <_strtoul_l.constprop.0+0xc8>
 8006e8e:	1e69      	subs	r1, r5, #1
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	e7f5      	b.n	8006e80 <_strtoul_l.constprop.0+0xb8>
 8006e94:	2430      	movs	r4, #48	; 0x30
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1b5      	bne.n	8006e06 <_strtoul_l.constprop.0+0x3e>
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	e7b3      	b.n	8006e06 <_strtoul_l.constprop.0+0x3e>
 8006e9e:	2c30      	cmp	r4, #48	; 0x30
 8006ea0:	d0a9      	beq.n	8006df6 <_strtoul_l.constprop.0+0x2e>
 8006ea2:	230a      	movs	r3, #10
 8006ea4:	e7af      	b.n	8006e06 <_strtoul_l.constprop.0+0x3e>
 8006ea6:	bf00      	nop
 8006ea8:	08009599 	.word	0x08009599

08006eac <strtoul>:
 8006eac:	4613      	mov	r3, r2
 8006eae:	460a      	mov	r2, r1
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4802      	ldr	r0, [pc, #8]	; (8006ebc <strtoul+0x10>)
 8006eb4:	6800      	ldr	r0, [r0, #0]
 8006eb6:	f7ff bf87 	b.w	8006dc8 <_strtoul_l.constprop.0>
 8006eba:	bf00      	nop
 8006ebc:	20000394 	.word	0x20000394

08006ec0 <std>:
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	b510      	push	{r4, lr}
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8006eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ece:	6083      	str	r3, [r0, #8]
 8006ed0:	8181      	strh	r1, [r0, #12]
 8006ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ed4:	81c2      	strh	r2, [r0, #14]
 8006ed6:	6183      	str	r3, [r0, #24]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	2208      	movs	r2, #8
 8006edc:	305c      	adds	r0, #92	; 0x5c
 8006ede:	f000 f935 	bl	800714c <memset>
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <std+0x38>)
 8006ee4:	6224      	str	r4, [r4, #32]
 8006ee6:	6263      	str	r3, [r4, #36]	; 0x24
 8006ee8:	4b04      	ldr	r3, [pc, #16]	; (8006efc <std+0x3c>)
 8006eea:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eec:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <std+0x40>)
 8006eee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ef0:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <std+0x44>)
 8006ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ef4:	bd10      	pop	{r4, pc}
 8006ef6:	bf00      	nop
 8006ef8:	08007021 	.word	0x08007021
 8006efc:	08007043 	.word	0x08007043
 8006f00:	0800707b 	.word	0x0800707b
 8006f04:	0800709f 	.word	0x0800709f

08006f08 <stdio_exit_handler>:
 8006f08:	4a02      	ldr	r2, [pc, #8]	; (8006f14 <stdio_exit_handler+0xc>)
 8006f0a:	4903      	ldr	r1, [pc, #12]	; (8006f18 <stdio_exit_handler+0x10>)
 8006f0c:	4803      	ldr	r0, [pc, #12]	; (8006f1c <stdio_exit_handler+0x14>)
 8006f0e:	f000 b869 	b.w	8006fe4 <_fwalk_sglue>
 8006f12:	bf00      	nop
 8006f14:	200001d0 	.word	0x200001d0
 8006f18:	08008bed 	.word	0x08008bed
 8006f1c:	20000348 	.word	0x20000348

08006f20 <cleanup_stdio>:
 8006f20:	6841      	ldr	r1, [r0, #4]
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <cleanup_stdio+0x34>)
 8006f24:	b510      	push	{r4, lr}
 8006f26:	4299      	cmp	r1, r3
 8006f28:	4604      	mov	r4, r0
 8006f2a:	d001      	beq.n	8006f30 <cleanup_stdio+0x10>
 8006f2c:	f001 fe5e 	bl	8008bec <_fflush_r>
 8006f30:	68a1      	ldr	r1, [r4, #8]
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <cleanup_stdio+0x38>)
 8006f34:	4299      	cmp	r1, r3
 8006f36:	d002      	beq.n	8006f3e <cleanup_stdio+0x1e>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 fe57 	bl	8008bec <_fflush_r>
 8006f3e:	68e1      	ldr	r1, [r4, #12]
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <cleanup_stdio+0x3c>)
 8006f42:	4299      	cmp	r1, r3
 8006f44:	d004      	beq.n	8006f50 <cleanup_stdio+0x30>
 8006f46:	4620      	mov	r0, r4
 8006f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4c:	f001 be4e 	b.w	8008bec <_fflush_r>
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop
 8006f54:	20001a3c 	.word	0x20001a3c
 8006f58:	20001aa4 	.word	0x20001aa4
 8006f5c:	20001b0c 	.word	0x20001b0c

08006f60 <global_stdio_init.part.0>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <global_stdio_init.part.0+0x30>)
 8006f64:	4c0b      	ldr	r4, [pc, #44]	; (8006f94 <global_stdio_init.part.0+0x34>)
 8006f66:	4a0c      	ldr	r2, [pc, #48]	; (8006f98 <global_stdio_init.part.0+0x38>)
 8006f68:	4620      	mov	r0, r4
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	2104      	movs	r1, #4
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f7ff ffa6 	bl	8006ec0 <std>
 8006f74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f78:	2201      	movs	r2, #1
 8006f7a:	2109      	movs	r1, #9
 8006f7c:	f7ff ffa0 	bl	8006ec0 <std>
 8006f80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f84:	2202      	movs	r2, #2
 8006f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f8a:	2112      	movs	r1, #18
 8006f8c:	f7ff bf98 	b.w	8006ec0 <std>
 8006f90:	20001b74 	.word	0x20001b74
 8006f94:	20001a3c 	.word	0x20001a3c
 8006f98:	08006f09 	.word	0x08006f09

08006f9c <__sfp_lock_acquire>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__sfp_lock_acquire+0x8>)
 8006f9e:	f000 b98b 	b.w	80072b8 <__retarget_lock_acquire_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	20001b7d 	.word	0x20001b7d

08006fa8 <__sfp_lock_release>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__sfp_lock_release+0x8>)
 8006faa:	f000 b986 	b.w	80072ba <__retarget_lock_release_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20001b7d 	.word	0x20001b7d

08006fb4 <__sinit>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	f7ff fff0 	bl	8006f9c <__sfp_lock_acquire>
 8006fbc:	6a23      	ldr	r3, [r4, #32]
 8006fbe:	b11b      	cbz	r3, 8006fc8 <__sinit+0x14>
 8006fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc4:	f7ff bff0 	b.w	8006fa8 <__sfp_lock_release>
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <__sinit+0x28>)
 8006fca:	6223      	str	r3, [r4, #32]
 8006fcc:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <__sinit+0x2c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f5      	bne.n	8006fc0 <__sinit+0xc>
 8006fd4:	f7ff ffc4 	bl	8006f60 <global_stdio_init.part.0>
 8006fd8:	e7f2      	b.n	8006fc0 <__sinit+0xc>
 8006fda:	bf00      	nop
 8006fdc:	08006f21 	.word	0x08006f21
 8006fe0:	20001b74 	.word	0x20001b74

08006fe4 <_fwalk_sglue>:
 8006fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	4607      	mov	r7, r0
 8006fea:	4688      	mov	r8, r1
 8006fec:	4614      	mov	r4, r2
 8006fee:	2600      	movs	r6, #0
 8006ff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ff8:	d505      	bpl.n	8007006 <_fwalk_sglue+0x22>
 8006ffa:	6824      	ldr	r4, [r4, #0]
 8006ffc:	2c00      	cmp	r4, #0
 8006ffe:	d1f7      	bne.n	8006ff0 <_fwalk_sglue+0xc>
 8007000:	4630      	mov	r0, r6
 8007002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d907      	bls.n	800701c <_fwalk_sglue+0x38>
 800700c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007010:	3301      	adds	r3, #1
 8007012:	d003      	beq.n	800701c <_fwalk_sglue+0x38>
 8007014:	4629      	mov	r1, r5
 8007016:	4638      	mov	r0, r7
 8007018:	47c0      	blx	r8
 800701a:	4306      	orrs	r6, r0
 800701c:	3568      	adds	r5, #104	; 0x68
 800701e:	e7e9      	b.n	8006ff4 <_fwalk_sglue+0x10>

08007020 <__sread>:
 8007020:	b510      	push	{r4, lr}
 8007022:	460c      	mov	r4, r1
 8007024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007028:	f000 f8f8 	bl	800721c <_read_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	bfab      	itete	ge
 8007030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007032:	89a3      	ldrhlt	r3, [r4, #12]
 8007034:	181b      	addge	r3, r3, r0
 8007036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800703a:	bfac      	ite	ge
 800703c:	6563      	strge	r3, [r4, #84]	; 0x54
 800703e:	81a3      	strhlt	r3, [r4, #12]
 8007040:	bd10      	pop	{r4, pc}

08007042 <__swrite>:
 8007042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	461f      	mov	r7, r3
 8007048:	898b      	ldrh	r3, [r1, #12]
 800704a:	4605      	mov	r5, r0
 800704c:	05db      	lsls	r3, r3, #23
 800704e:	460c      	mov	r4, r1
 8007050:	4616      	mov	r6, r2
 8007052:	d505      	bpl.n	8007060 <__swrite+0x1e>
 8007054:	2302      	movs	r3, #2
 8007056:	2200      	movs	r2, #0
 8007058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705c:	f000 f8cc 	bl	80071f8 <_lseek_r>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	4632      	mov	r2, r6
 8007064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	4628      	mov	r0, r5
 800706c:	463b      	mov	r3, r7
 800706e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	f000 b8e3 	b.w	8007240 <_write_r>

0800707a <__sseek>:
 800707a:	b510      	push	{r4, lr}
 800707c:	460c      	mov	r4, r1
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 f8b9 	bl	80071f8 <_lseek_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	bf15      	itete	ne
 800708c:	6560      	strne	r0, [r4, #84]	; 0x54
 800708e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007096:	81a3      	strheq	r3, [r4, #12]
 8007098:	bf18      	it	ne
 800709a:	81a3      	strhne	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__sclose>:
 800709e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a2:	f000 b899 	b.w	80071d8 <_close_r>

080070a6 <_vsniprintf_r>:
 80070a6:	b530      	push	{r4, r5, lr}
 80070a8:	4614      	mov	r4, r2
 80070aa:	2c00      	cmp	r4, #0
 80070ac:	4605      	mov	r5, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	b09b      	sub	sp, #108	; 0x6c
 80070b2:	da05      	bge.n	80070c0 <_vsniprintf_r+0x1a>
 80070b4:	238b      	movs	r3, #139	; 0x8b
 80070b6:	6003      	str	r3, [r0, #0]
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	b01b      	add	sp, #108	; 0x6c
 80070be:	bd30      	pop	{r4, r5, pc}
 80070c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80070c8:	bf0c      	ite	eq
 80070ca:	4623      	moveq	r3, r4
 80070cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070d0:	9302      	str	r3, [sp, #8]
 80070d2:	9305      	str	r3, [sp, #20]
 80070d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070d8:	9100      	str	r1, [sp, #0]
 80070da:	9104      	str	r1, [sp, #16]
 80070dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80070e0:	4669      	mov	r1, sp
 80070e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070e4:	f001 fa6e 	bl	80085c4 <_svfiprintf_r>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	bfbc      	itt	lt
 80070ec:	238b      	movlt	r3, #139	; 0x8b
 80070ee:	602b      	strlt	r3, [r5, #0]
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	d0e3      	beq.n	80070bc <_vsniprintf_r+0x16>
 80070f4:	2200      	movs	r2, #0
 80070f6:	9b00      	ldr	r3, [sp, #0]
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e7df      	b.n	80070bc <_vsniprintf_r+0x16>

080070fc <vsniprintf>:
 80070fc:	b507      	push	{r0, r1, r2, lr}
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	460a      	mov	r2, r1
 8007104:	4601      	mov	r1, r0
 8007106:	4803      	ldr	r0, [pc, #12]	; (8007114 <vsniprintf+0x18>)
 8007108:	6800      	ldr	r0, [r0, #0]
 800710a:	f7ff ffcc 	bl	80070a6 <_vsniprintf_r>
 800710e:	b003      	add	sp, #12
 8007110:	f85d fb04 	ldr.w	pc, [sp], #4
 8007114:	20000394 	.word	0x20000394

08007118 <memmove>:
 8007118:	4288      	cmp	r0, r1
 800711a:	b510      	push	{r4, lr}
 800711c:	eb01 0402 	add.w	r4, r1, r2
 8007120:	d902      	bls.n	8007128 <memmove+0x10>
 8007122:	4284      	cmp	r4, r0
 8007124:	4623      	mov	r3, r4
 8007126:	d807      	bhi.n	8007138 <memmove+0x20>
 8007128:	1e43      	subs	r3, r0, #1
 800712a:	42a1      	cmp	r1, r4
 800712c:	d008      	beq.n	8007140 <memmove+0x28>
 800712e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007136:	e7f8      	b.n	800712a <memmove+0x12>
 8007138:	4601      	mov	r1, r0
 800713a:	4402      	add	r2, r0
 800713c:	428a      	cmp	r2, r1
 800713e:	d100      	bne.n	8007142 <memmove+0x2a>
 8007140:	bd10      	pop	{r4, pc}
 8007142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800714a:	e7f7      	b.n	800713c <memmove+0x24>

0800714c <memset>:
 800714c:	4603      	mov	r3, r0
 800714e:	4402      	add	r2, r0
 8007150:	4293      	cmp	r3, r2
 8007152:	d100      	bne.n	8007156 <memset+0xa>
 8007154:	4770      	bx	lr
 8007156:	f803 1b01 	strb.w	r1, [r3], #1
 800715a:	e7f9      	b.n	8007150 <memset+0x4>

0800715c <strncmp>:
 800715c:	b510      	push	{r4, lr}
 800715e:	b16a      	cbz	r2, 800717c <strncmp+0x20>
 8007160:	3901      	subs	r1, #1
 8007162:	1884      	adds	r4, r0, r2
 8007164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007168:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800716c:	429a      	cmp	r2, r3
 800716e:	d103      	bne.n	8007178 <strncmp+0x1c>
 8007170:	42a0      	cmp	r0, r4
 8007172:	d001      	beq.n	8007178 <strncmp+0x1c>
 8007174:	2a00      	cmp	r2, #0
 8007176:	d1f5      	bne.n	8007164 <strncmp+0x8>
 8007178:	1ad0      	subs	r0, r2, r3
 800717a:	bd10      	pop	{r4, pc}
 800717c:	4610      	mov	r0, r2
 800717e:	e7fc      	b.n	800717a <strncmp+0x1e>

08007180 <__strtok_r>:
 8007180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007182:	b908      	cbnz	r0, 8007188 <__strtok_r+0x8>
 8007184:	6810      	ldr	r0, [r2, #0]
 8007186:	b188      	cbz	r0, 80071ac <__strtok_r+0x2c>
 8007188:	4604      	mov	r4, r0
 800718a:	460f      	mov	r7, r1
 800718c:	4620      	mov	r0, r4
 800718e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007192:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007196:	b91e      	cbnz	r6, 80071a0 <__strtok_r+0x20>
 8007198:	b965      	cbnz	r5, 80071b4 <__strtok_r+0x34>
 800719a:	4628      	mov	r0, r5
 800719c:	6015      	str	r5, [r2, #0]
 800719e:	e005      	b.n	80071ac <__strtok_r+0x2c>
 80071a0:	42b5      	cmp	r5, r6
 80071a2:	d1f6      	bne.n	8007192 <__strtok_r+0x12>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f0      	bne.n	800718a <__strtok_r+0xa>
 80071a8:	6014      	str	r4, [r2, #0]
 80071aa:	7003      	strb	r3, [r0, #0]
 80071ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ae:	461c      	mov	r4, r3
 80071b0:	e00c      	b.n	80071cc <__strtok_r+0x4c>
 80071b2:	b915      	cbnz	r5, 80071ba <__strtok_r+0x3a>
 80071b4:	460e      	mov	r6, r1
 80071b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80071be:	42ab      	cmp	r3, r5
 80071c0:	d1f7      	bne.n	80071b2 <__strtok_r+0x32>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f3      	beq.n	80071ae <__strtok_r+0x2e>
 80071c6:	2300      	movs	r3, #0
 80071c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80071cc:	6014      	str	r4, [r2, #0]
 80071ce:	e7ed      	b.n	80071ac <__strtok_r+0x2c>

080071d0 <strtok_r>:
 80071d0:	2301      	movs	r3, #1
 80071d2:	f7ff bfd5 	b.w	8007180 <__strtok_r>
	...

080071d8 <_close_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	2300      	movs	r3, #0
 80071dc:	4d05      	ldr	r5, [pc, #20]	; (80071f4 <_close_r+0x1c>)
 80071de:	4604      	mov	r4, r0
 80071e0:	4608      	mov	r0, r1
 80071e2:	602b      	str	r3, [r5, #0]
 80071e4:	f7f9 feee 	bl	8000fc4 <_close>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_close_r+0x1a>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_close_r+0x1a>
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	20001b78 	.word	0x20001b78

080071f8 <_lseek_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	2200      	movs	r2, #0
 8007202:	4d05      	ldr	r5, [pc, #20]	; (8007218 <_lseek_r+0x20>)
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7f9 fee6 	bl	8000fd8 <_lseek>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_lseek_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_lseek_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	20001b78 	.word	0x20001b78

0800721c <_read_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	4611      	mov	r1, r2
 8007224:	2200      	movs	r2, #0
 8007226:	4d05      	ldr	r5, [pc, #20]	; (800723c <_read_r+0x20>)
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f7f9 feae 	bl	8000f8c <_read>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_read_r+0x1e>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_read_r+0x1e>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	20001b78 	.word	0x20001b78

08007240 <_write_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	2200      	movs	r2, #0
 800724a:	4d05      	ldr	r5, [pc, #20]	; (8007260 <_write_r+0x20>)
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f7f9 feaa 	bl	8000fa8 <_write>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_write_r+0x1e>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_write_r+0x1e>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20001b78 	.word	0x20001b78

08007264 <__errno>:
 8007264:	4b01      	ldr	r3, [pc, #4]	; (800726c <__errno+0x8>)
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000394 	.word	0x20000394

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	2600      	movs	r6, #0
 8007274:	4d0c      	ldr	r5, [pc, #48]	; (80072a8 <__libc_init_array+0x38>)
 8007276:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007278:	1b64      	subs	r4, r4, r5
 800727a:	10a4      	asrs	r4, r4, #2
 800727c:	42a6      	cmp	r6, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	f002 f824 	bl	80092cc <_init>
 8007284:	2600      	movs	r6, #0
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <__libc_init_array+0x40>)
 8007288:	4c0a      	ldr	r4, [pc, #40]	; (80072b4 <__libc_init_array+0x44>)
 800728a:	1b64      	subs	r4, r4, r5
 800728c:	10a4      	asrs	r4, r4, #2
 800728e:	42a6      	cmp	r6, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	f855 3b04 	ldr.w	r3, [r5], #4
 8007298:	4798      	blx	r3
 800729a:	3601      	adds	r6, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a2:	4798      	blx	r3
 80072a4:	3601      	adds	r6, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	080098ec 	.word	0x080098ec
 80072ac:	080098ec 	.word	0x080098ec
 80072b0:	080098ec 	.word	0x080098ec
 80072b4:	080098f0 	.word	0x080098f0

080072b8 <__retarget_lock_acquire_recursive>:
 80072b8:	4770      	bx	lr

080072ba <__retarget_lock_release_recursive>:
 80072ba:	4770      	bx	lr

080072bc <strcpy>:
 80072bc:	4603      	mov	r3, r0
 80072be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072c2:	f803 2b01 	strb.w	r2, [r3], #1
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	d1f9      	bne.n	80072be <strcpy+0x2>
 80072ca:	4770      	bx	lr

080072cc <memcpy>:
 80072cc:	440a      	add	r2, r1
 80072ce:	4291      	cmp	r1, r2
 80072d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072d4:	d100      	bne.n	80072d8 <memcpy+0xc>
 80072d6:	4770      	bx	lr
 80072d8:	b510      	push	{r4, lr}
 80072da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072de:	4291      	cmp	r1, r2
 80072e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e4:	d1f9      	bne.n	80072da <memcpy+0xe>
 80072e6:	bd10      	pop	{r4, pc}

080072e8 <nan>:
 80072e8:	2000      	movs	r0, #0
 80072ea:	4901      	ldr	r1, [pc, #4]	; (80072f0 <nan+0x8>)
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	7ff80000 	.word	0x7ff80000

080072f4 <nanf>:
 80072f4:	4800      	ldr	r0, [pc, #0]	; (80072f8 <nanf+0x4>)
 80072f6:	4770      	bx	lr
 80072f8:	7fc00000 	.word	0x7fc00000

080072fc <_free_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4605      	mov	r5, r0
 8007300:	2900      	cmp	r1, #0
 8007302:	d040      	beq.n	8007386 <_free_r+0x8a>
 8007304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007308:	1f0c      	subs	r4, r1, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfb8      	it	lt
 800730e:	18e4      	addlt	r4, r4, r3
 8007310:	f000 fc48 	bl	8007ba4 <__malloc_lock>
 8007314:	4a1c      	ldr	r2, [pc, #112]	; (8007388 <_free_r+0x8c>)
 8007316:	6813      	ldr	r3, [r2, #0]
 8007318:	b933      	cbnz	r3, 8007328 <_free_r+0x2c>
 800731a:	6063      	str	r3, [r4, #4]
 800731c:	6014      	str	r4, [r2, #0]
 800731e:	4628      	mov	r0, r5
 8007320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007324:	f000 bc44 	b.w	8007bb0 <__malloc_unlock>
 8007328:	42a3      	cmp	r3, r4
 800732a:	d908      	bls.n	800733e <_free_r+0x42>
 800732c:	6820      	ldr	r0, [r4, #0]
 800732e:	1821      	adds	r1, r4, r0
 8007330:	428b      	cmp	r3, r1
 8007332:	bf01      	itttt	eq
 8007334:	6819      	ldreq	r1, [r3, #0]
 8007336:	685b      	ldreq	r3, [r3, #4]
 8007338:	1809      	addeq	r1, r1, r0
 800733a:	6021      	streq	r1, [r4, #0]
 800733c:	e7ed      	b.n	800731a <_free_r+0x1e>
 800733e:	461a      	mov	r2, r3
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	b10b      	cbz	r3, 8007348 <_free_r+0x4c>
 8007344:	42a3      	cmp	r3, r4
 8007346:	d9fa      	bls.n	800733e <_free_r+0x42>
 8007348:	6811      	ldr	r1, [r2, #0]
 800734a:	1850      	adds	r0, r2, r1
 800734c:	42a0      	cmp	r0, r4
 800734e:	d10b      	bne.n	8007368 <_free_r+0x6c>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	4401      	add	r1, r0
 8007354:	1850      	adds	r0, r2, r1
 8007356:	4283      	cmp	r3, r0
 8007358:	6011      	str	r1, [r2, #0]
 800735a:	d1e0      	bne.n	800731e <_free_r+0x22>
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4408      	add	r0, r1
 8007362:	6010      	str	r0, [r2, #0]
 8007364:	6053      	str	r3, [r2, #4]
 8007366:	e7da      	b.n	800731e <_free_r+0x22>
 8007368:	d902      	bls.n	8007370 <_free_r+0x74>
 800736a:	230c      	movs	r3, #12
 800736c:	602b      	str	r3, [r5, #0]
 800736e:	e7d6      	b.n	800731e <_free_r+0x22>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	1821      	adds	r1, r4, r0
 8007374:	428b      	cmp	r3, r1
 8007376:	bf01      	itttt	eq
 8007378:	6819      	ldreq	r1, [r3, #0]
 800737a:	685b      	ldreq	r3, [r3, #4]
 800737c:	1809      	addeq	r1, r1, r0
 800737e:	6021      	streq	r1, [r4, #0]
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	6054      	str	r4, [r2, #4]
 8007384:	e7cb      	b.n	800731e <_free_r+0x22>
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20001b80 	.word	0x20001b80

0800738c <rshift>:
 800738c:	6903      	ldr	r3, [r0, #16]
 800738e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007392:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007396:	f100 0414 	add.w	r4, r0, #20
 800739a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800739e:	dd46      	ble.n	800742e <rshift+0xa2>
 80073a0:	f011 011f 	ands.w	r1, r1, #31
 80073a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80073a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80073ac:	d10c      	bne.n	80073c8 <rshift+0x3c>
 80073ae:	4629      	mov	r1, r5
 80073b0:	f100 0710 	add.w	r7, r0, #16
 80073b4:	42b1      	cmp	r1, r6
 80073b6:	d335      	bcc.n	8007424 <rshift+0x98>
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	1eea      	subs	r2, r5, #3
 80073be:	4296      	cmp	r6, r2
 80073c0:	bf38      	it	cc
 80073c2:	2300      	movcc	r3, #0
 80073c4:	4423      	add	r3, r4
 80073c6:	e015      	b.n	80073f4 <rshift+0x68>
 80073c8:	46a1      	mov	r9, r4
 80073ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80073ce:	f1c1 0820 	rsb	r8, r1, #32
 80073d2:	40cf      	lsrs	r7, r1
 80073d4:	f105 0e04 	add.w	lr, r5, #4
 80073d8:	4576      	cmp	r6, lr
 80073da:	46f4      	mov	ip, lr
 80073dc:	d816      	bhi.n	800740c <rshift+0x80>
 80073de:	1a9a      	subs	r2, r3, r2
 80073e0:	0092      	lsls	r2, r2, #2
 80073e2:	3a04      	subs	r2, #4
 80073e4:	3501      	adds	r5, #1
 80073e6:	42ae      	cmp	r6, r5
 80073e8:	bf38      	it	cc
 80073ea:	2200      	movcc	r2, #0
 80073ec:	18a3      	adds	r3, r4, r2
 80073ee:	50a7      	str	r7, [r4, r2]
 80073f0:	b107      	cbz	r7, 80073f4 <rshift+0x68>
 80073f2:	3304      	adds	r3, #4
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	eba3 0204 	sub.w	r2, r3, r4
 80073fa:	bf08      	it	eq
 80073fc:	2300      	moveq	r3, #0
 80073fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007402:	6102      	str	r2, [r0, #16]
 8007404:	bf08      	it	eq
 8007406:	6143      	streq	r3, [r0, #20]
 8007408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800740c:	f8dc c000 	ldr.w	ip, [ip]
 8007410:	fa0c fc08 	lsl.w	ip, ip, r8
 8007414:	ea4c 0707 	orr.w	r7, ip, r7
 8007418:	f849 7b04 	str.w	r7, [r9], #4
 800741c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007420:	40cf      	lsrs	r7, r1
 8007422:	e7d9      	b.n	80073d8 <rshift+0x4c>
 8007424:	f851 cb04 	ldr.w	ip, [r1], #4
 8007428:	f847 cf04 	str.w	ip, [r7, #4]!
 800742c:	e7c2      	b.n	80073b4 <rshift+0x28>
 800742e:	4623      	mov	r3, r4
 8007430:	e7e0      	b.n	80073f4 <rshift+0x68>

08007432 <__hexdig_fun>:
 8007432:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007436:	2b09      	cmp	r3, #9
 8007438:	d802      	bhi.n	8007440 <__hexdig_fun+0xe>
 800743a:	3820      	subs	r0, #32
 800743c:	b2c0      	uxtb	r0, r0
 800743e:	4770      	bx	lr
 8007440:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007444:	2b05      	cmp	r3, #5
 8007446:	d801      	bhi.n	800744c <__hexdig_fun+0x1a>
 8007448:	3847      	subs	r0, #71	; 0x47
 800744a:	e7f7      	b.n	800743c <__hexdig_fun+0xa>
 800744c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007450:	2b05      	cmp	r3, #5
 8007452:	d801      	bhi.n	8007458 <__hexdig_fun+0x26>
 8007454:	3827      	subs	r0, #39	; 0x27
 8007456:	e7f1      	b.n	800743c <__hexdig_fun+0xa>
 8007458:	2000      	movs	r0, #0
 800745a:	4770      	bx	lr

0800745c <__gethex>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	4681      	mov	r9, r0
 8007462:	468a      	mov	sl, r1
 8007464:	4617      	mov	r7, r2
 8007466:	680a      	ldr	r2, [r1, #0]
 8007468:	b085      	sub	sp, #20
 800746a:	f102 0b02 	add.w	fp, r2, #2
 800746e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007472:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	32fe      	adds	r2, #254	; 0xfe
 800747a:	eb02 030b 	add.w	r3, r2, fp
 800747e:	46d8      	mov	r8, fp
 8007480:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	2830      	cmp	r0, #48	; 0x30
 8007488:	d0f7      	beq.n	800747a <__gethex+0x1e>
 800748a:	f7ff ffd2 	bl	8007432 <__hexdig_fun>
 800748e:	4604      	mov	r4, r0
 8007490:	2800      	cmp	r0, #0
 8007492:	d138      	bne.n	8007506 <__gethex+0xaa>
 8007494:	2201      	movs	r2, #1
 8007496:	4640      	mov	r0, r8
 8007498:	49a7      	ldr	r1, [pc, #668]	; (8007738 <__gethex+0x2dc>)
 800749a:	f7ff fe5f 	bl	800715c <strncmp>
 800749e:	4606      	mov	r6, r0
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d169      	bne.n	8007578 <__gethex+0x11c>
 80074a4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80074a8:	465d      	mov	r5, fp
 80074aa:	f7ff ffc2 	bl	8007432 <__hexdig_fun>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d064      	beq.n	800757c <__gethex+0x120>
 80074b2:	465a      	mov	r2, fp
 80074b4:	7810      	ldrb	r0, [r2, #0]
 80074b6:	4690      	mov	r8, r2
 80074b8:	2830      	cmp	r0, #48	; 0x30
 80074ba:	f102 0201 	add.w	r2, r2, #1
 80074be:	d0f9      	beq.n	80074b4 <__gethex+0x58>
 80074c0:	f7ff ffb7 	bl	8007432 <__hexdig_fun>
 80074c4:	2301      	movs	r3, #1
 80074c6:	fab0 f480 	clz	r4, r0
 80074ca:	465e      	mov	r6, fp
 80074cc:	0964      	lsrs	r4, r4, #5
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	4642      	mov	r2, r8
 80074d2:	4615      	mov	r5, r2
 80074d4:	7828      	ldrb	r0, [r5, #0]
 80074d6:	3201      	adds	r2, #1
 80074d8:	f7ff ffab 	bl	8007432 <__hexdig_fun>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d1f8      	bne.n	80074d2 <__gethex+0x76>
 80074e0:	2201      	movs	r2, #1
 80074e2:	4628      	mov	r0, r5
 80074e4:	4994      	ldr	r1, [pc, #592]	; (8007738 <__gethex+0x2dc>)
 80074e6:	f7ff fe39 	bl	800715c <strncmp>
 80074ea:	b978      	cbnz	r0, 800750c <__gethex+0xb0>
 80074ec:	b946      	cbnz	r6, 8007500 <__gethex+0xa4>
 80074ee:	1c6e      	adds	r6, r5, #1
 80074f0:	4632      	mov	r2, r6
 80074f2:	4615      	mov	r5, r2
 80074f4:	7828      	ldrb	r0, [r5, #0]
 80074f6:	3201      	adds	r2, #1
 80074f8:	f7ff ff9b 	bl	8007432 <__hexdig_fun>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d1f8      	bne.n	80074f2 <__gethex+0x96>
 8007500:	1b73      	subs	r3, r6, r5
 8007502:	009e      	lsls	r6, r3, #2
 8007504:	e004      	b.n	8007510 <__gethex+0xb4>
 8007506:	2400      	movs	r4, #0
 8007508:	4626      	mov	r6, r4
 800750a:	e7e1      	b.n	80074d0 <__gethex+0x74>
 800750c:	2e00      	cmp	r6, #0
 800750e:	d1f7      	bne.n	8007500 <__gethex+0xa4>
 8007510:	782b      	ldrb	r3, [r5, #0]
 8007512:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007516:	2b50      	cmp	r3, #80	; 0x50
 8007518:	d13d      	bne.n	8007596 <__gethex+0x13a>
 800751a:	786b      	ldrb	r3, [r5, #1]
 800751c:	2b2b      	cmp	r3, #43	; 0x2b
 800751e:	d02f      	beq.n	8007580 <__gethex+0x124>
 8007520:	2b2d      	cmp	r3, #45	; 0x2d
 8007522:	d031      	beq.n	8007588 <__gethex+0x12c>
 8007524:	f04f 0b00 	mov.w	fp, #0
 8007528:	1c69      	adds	r1, r5, #1
 800752a:	7808      	ldrb	r0, [r1, #0]
 800752c:	f7ff ff81 	bl	8007432 <__hexdig_fun>
 8007530:	1e42      	subs	r2, r0, #1
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	2a18      	cmp	r2, #24
 8007536:	d82e      	bhi.n	8007596 <__gethex+0x13a>
 8007538:	f1a0 0210 	sub.w	r2, r0, #16
 800753c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007540:	f7ff ff77 	bl	8007432 <__hexdig_fun>
 8007544:	f100 3cff 	add.w	ip, r0, #4294967295
 8007548:	fa5f fc8c 	uxtb.w	ip, ip
 800754c:	f1bc 0f18 	cmp.w	ip, #24
 8007550:	d91d      	bls.n	800758e <__gethex+0x132>
 8007552:	f1bb 0f00 	cmp.w	fp, #0
 8007556:	d000      	beq.n	800755a <__gethex+0xfe>
 8007558:	4252      	negs	r2, r2
 800755a:	4416      	add	r6, r2
 800755c:	f8ca 1000 	str.w	r1, [sl]
 8007560:	b1dc      	cbz	r4, 800759a <__gethex+0x13e>
 8007562:	9b01      	ldr	r3, [sp, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf14      	ite	ne
 8007568:	f04f 0800 	movne.w	r8, #0
 800756c:	f04f 0806 	moveq.w	r8, #6
 8007570:	4640      	mov	r0, r8
 8007572:	b005      	add	sp, #20
 8007574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007578:	4645      	mov	r5, r8
 800757a:	4626      	mov	r6, r4
 800757c:	2401      	movs	r4, #1
 800757e:	e7c7      	b.n	8007510 <__gethex+0xb4>
 8007580:	f04f 0b00 	mov.w	fp, #0
 8007584:	1ca9      	adds	r1, r5, #2
 8007586:	e7d0      	b.n	800752a <__gethex+0xce>
 8007588:	f04f 0b01 	mov.w	fp, #1
 800758c:	e7fa      	b.n	8007584 <__gethex+0x128>
 800758e:	230a      	movs	r3, #10
 8007590:	fb03 0002 	mla	r0, r3, r2, r0
 8007594:	e7d0      	b.n	8007538 <__gethex+0xdc>
 8007596:	4629      	mov	r1, r5
 8007598:	e7e0      	b.n	800755c <__gethex+0x100>
 800759a:	4621      	mov	r1, r4
 800759c:	eba5 0308 	sub.w	r3, r5, r8
 80075a0:	3b01      	subs	r3, #1
 80075a2:	2b07      	cmp	r3, #7
 80075a4:	dc0a      	bgt.n	80075bc <__gethex+0x160>
 80075a6:	4648      	mov	r0, r9
 80075a8:	f000 fb08 	bl	8007bbc <_Balloc>
 80075ac:	4604      	mov	r4, r0
 80075ae:	b940      	cbnz	r0, 80075c2 <__gethex+0x166>
 80075b0:	4602      	mov	r2, r0
 80075b2:	21e4      	movs	r1, #228	; 0xe4
 80075b4:	4b61      	ldr	r3, [pc, #388]	; (800773c <__gethex+0x2e0>)
 80075b6:	4862      	ldr	r0, [pc, #392]	; (8007740 <__gethex+0x2e4>)
 80075b8:	f001 fb5e 	bl	8008c78 <__assert_func>
 80075bc:	3101      	adds	r1, #1
 80075be:	105b      	asrs	r3, r3, #1
 80075c0:	e7ef      	b.n	80075a2 <__gethex+0x146>
 80075c2:	2300      	movs	r3, #0
 80075c4:	469b      	mov	fp, r3
 80075c6:	f100 0a14 	add.w	sl, r0, #20
 80075ca:	f8cd a004 	str.w	sl, [sp, #4]
 80075ce:	45a8      	cmp	r8, r5
 80075d0:	d344      	bcc.n	800765c <__gethex+0x200>
 80075d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80075d6:	4658      	mov	r0, fp
 80075d8:	f848 bb04 	str.w	fp, [r8], #4
 80075dc:	eba8 080a 	sub.w	r8, r8, sl
 80075e0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80075e4:	6122      	str	r2, [r4, #16]
 80075e6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80075ea:	f000 fbd9 	bl	8007da0 <__hi0bits>
 80075ee:	683d      	ldr	r5, [r7, #0]
 80075f0:	eba8 0800 	sub.w	r8, r8, r0
 80075f4:	45a8      	cmp	r8, r5
 80075f6:	dd59      	ble.n	80076ac <__gethex+0x250>
 80075f8:	eba8 0805 	sub.w	r8, r8, r5
 80075fc:	4641      	mov	r1, r8
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 ff57 	bl	80084b2 <__any_on>
 8007604:	4683      	mov	fp, r0
 8007606:	b1b8      	cbz	r0, 8007638 <__gethex+0x1dc>
 8007608:	f04f 0b01 	mov.w	fp, #1
 800760c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007610:	1159      	asrs	r1, r3, #5
 8007612:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007616:	f003 021f 	and.w	r2, r3, #31
 800761a:	fa0b f202 	lsl.w	r2, fp, r2
 800761e:	420a      	tst	r2, r1
 8007620:	d00a      	beq.n	8007638 <__gethex+0x1dc>
 8007622:	455b      	cmp	r3, fp
 8007624:	dd06      	ble.n	8007634 <__gethex+0x1d8>
 8007626:	4620      	mov	r0, r4
 8007628:	f1a8 0102 	sub.w	r1, r8, #2
 800762c:	f000 ff41 	bl	80084b2 <__any_on>
 8007630:	2800      	cmp	r0, #0
 8007632:	d138      	bne.n	80076a6 <__gethex+0x24a>
 8007634:	f04f 0b02 	mov.w	fp, #2
 8007638:	4641      	mov	r1, r8
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff fea6 	bl	800738c <rshift>
 8007640:	4446      	add	r6, r8
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	42b3      	cmp	r3, r6
 8007646:	da41      	bge.n	80076cc <__gethex+0x270>
 8007648:	4621      	mov	r1, r4
 800764a:	4648      	mov	r0, r9
 800764c:	f000 faf6 	bl	8007c3c <_Bfree>
 8007650:	2300      	movs	r3, #0
 8007652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007654:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e789      	b.n	8007570 <__gethex+0x114>
 800765c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007660:	2a2e      	cmp	r2, #46	; 0x2e
 8007662:	d014      	beq.n	800768e <__gethex+0x232>
 8007664:	2b20      	cmp	r3, #32
 8007666:	d106      	bne.n	8007676 <__gethex+0x21a>
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	f843 bb04 	str.w	fp, [r3], #4
 800766e:	f04f 0b00 	mov.w	fp, #0
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	465b      	mov	r3, fp
 8007676:	7828      	ldrb	r0, [r5, #0]
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	f7ff feda 	bl	8007432 <__hexdig_fun>
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	f000 000f 	and.w	r0, r0, #15
 8007684:	4098      	lsls	r0, r3
 8007686:	ea4b 0b00 	orr.w	fp, fp, r0
 800768a:	3304      	adds	r3, #4
 800768c:	e79f      	b.n	80075ce <__gethex+0x172>
 800768e:	45a8      	cmp	r8, r5
 8007690:	d8e8      	bhi.n	8007664 <__gethex+0x208>
 8007692:	2201      	movs	r2, #1
 8007694:	4628      	mov	r0, r5
 8007696:	4928      	ldr	r1, [pc, #160]	; (8007738 <__gethex+0x2dc>)
 8007698:	9303      	str	r3, [sp, #12]
 800769a:	f7ff fd5f 	bl	800715c <strncmp>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d1df      	bne.n	8007664 <__gethex+0x208>
 80076a4:	e793      	b.n	80075ce <__gethex+0x172>
 80076a6:	f04f 0b03 	mov.w	fp, #3
 80076aa:	e7c5      	b.n	8007638 <__gethex+0x1dc>
 80076ac:	da0b      	bge.n	80076c6 <__gethex+0x26a>
 80076ae:	eba5 0808 	sub.w	r8, r5, r8
 80076b2:	4621      	mov	r1, r4
 80076b4:	4642      	mov	r2, r8
 80076b6:	4648      	mov	r0, r9
 80076b8:	f000 fcd8 	bl	800806c <__lshift>
 80076bc:	4604      	mov	r4, r0
 80076be:	eba6 0608 	sub.w	r6, r6, r8
 80076c2:	f100 0a14 	add.w	sl, r0, #20
 80076c6:	f04f 0b00 	mov.w	fp, #0
 80076ca:	e7ba      	b.n	8007642 <__gethex+0x1e6>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	42b3      	cmp	r3, r6
 80076d0:	dd74      	ble.n	80077bc <__gethex+0x360>
 80076d2:	1b9e      	subs	r6, r3, r6
 80076d4:	42b5      	cmp	r5, r6
 80076d6:	dc35      	bgt.n	8007744 <__gethex+0x2e8>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d023      	beq.n	8007726 <__gethex+0x2ca>
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d025      	beq.n	800772e <__gethex+0x2d2>
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d115      	bne.n	8007712 <__gethex+0x2b6>
 80076e6:	42b5      	cmp	r5, r6
 80076e8:	d113      	bne.n	8007712 <__gethex+0x2b6>
 80076ea:	2d01      	cmp	r5, #1
 80076ec:	d10b      	bne.n	8007706 <__gethex+0x2aa>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	9a02      	ldr	r2, [sp, #8]
 80076f2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	2301      	movs	r3, #1
 80076fa:	6123      	str	r3, [r4, #16]
 80076fc:	f8ca 3000 	str.w	r3, [sl]
 8007700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007702:	601c      	str	r4, [r3, #0]
 8007704:	e734      	b.n	8007570 <__gethex+0x114>
 8007706:	4620      	mov	r0, r4
 8007708:	1e69      	subs	r1, r5, #1
 800770a:	f000 fed2 	bl	80084b2 <__any_on>
 800770e:	2800      	cmp	r0, #0
 8007710:	d1ed      	bne.n	80076ee <__gethex+0x292>
 8007712:	4621      	mov	r1, r4
 8007714:	4648      	mov	r0, r9
 8007716:	f000 fa91 	bl	8007c3c <_Bfree>
 800771a:	2300      	movs	r3, #0
 800771c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800771e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	e724      	b.n	8007570 <__gethex+0x114>
 8007726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f2      	bne.n	8007712 <__gethex+0x2b6>
 800772c:	e7df      	b.n	80076ee <__gethex+0x292>
 800772e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1dc      	bne.n	80076ee <__gethex+0x292>
 8007734:	e7ed      	b.n	8007712 <__gethex+0x2b6>
 8007736:	bf00      	nop
 8007738:	080093ea 	.word	0x080093ea
 800773c:	0800969f 	.word	0x0800969f
 8007740:	080096b0 	.word	0x080096b0
 8007744:	f106 38ff 	add.w	r8, r6, #4294967295
 8007748:	f1bb 0f00 	cmp.w	fp, #0
 800774c:	d133      	bne.n	80077b6 <__gethex+0x35a>
 800774e:	f1b8 0f00 	cmp.w	r8, #0
 8007752:	d004      	beq.n	800775e <__gethex+0x302>
 8007754:	4641      	mov	r1, r8
 8007756:	4620      	mov	r0, r4
 8007758:	f000 feab 	bl	80084b2 <__any_on>
 800775c:	4683      	mov	fp, r0
 800775e:	2301      	movs	r3, #1
 8007760:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007764:	f008 081f 	and.w	r8, r8, #31
 8007768:	fa03 f308 	lsl.w	r3, r3, r8
 800776c:	f04f 0802 	mov.w	r8, #2
 8007770:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007774:	4631      	mov	r1, r6
 8007776:	4213      	tst	r3, r2
 8007778:	4620      	mov	r0, r4
 800777a:	bf18      	it	ne
 800777c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007780:	1bad      	subs	r5, r5, r6
 8007782:	f7ff fe03 	bl	800738c <rshift>
 8007786:	687e      	ldr	r6, [r7, #4]
 8007788:	f1bb 0f00 	cmp.w	fp, #0
 800778c:	d04a      	beq.n	8007824 <__gethex+0x3c8>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d016      	beq.n	80077c2 <__gethex+0x366>
 8007794:	2b03      	cmp	r3, #3
 8007796:	d018      	beq.n	80077ca <__gethex+0x36e>
 8007798:	2b01      	cmp	r3, #1
 800779a:	d109      	bne.n	80077b0 <__gethex+0x354>
 800779c:	f01b 0f02 	tst.w	fp, #2
 80077a0:	d006      	beq.n	80077b0 <__gethex+0x354>
 80077a2:	f8da 3000 	ldr.w	r3, [sl]
 80077a6:	ea4b 0b03 	orr.w	fp, fp, r3
 80077aa:	f01b 0f01 	tst.w	fp, #1
 80077ae:	d10f      	bne.n	80077d0 <__gethex+0x374>
 80077b0:	f048 0810 	orr.w	r8, r8, #16
 80077b4:	e036      	b.n	8007824 <__gethex+0x3c8>
 80077b6:	f04f 0b01 	mov.w	fp, #1
 80077ba:	e7d0      	b.n	800775e <__gethex+0x302>
 80077bc:	f04f 0801 	mov.w	r8, #1
 80077c0:	e7e2      	b.n	8007788 <__gethex+0x32c>
 80077c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077c4:	f1c3 0301 	rsb	r3, r3, #1
 80077c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0ef      	beq.n	80077b0 <__gethex+0x354>
 80077d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077d4:	f104 0214 	add.w	r2, r4, #20
 80077d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	2300      	movs	r3, #0
 80077e0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80077e4:	4694      	mov	ip, r2
 80077e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80077ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 80077ee:	d01e      	beq.n	800782e <__gethex+0x3d2>
 80077f0:	3101      	adds	r1, #1
 80077f2:	f8cc 1000 	str.w	r1, [ip]
 80077f6:	f1b8 0f02 	cmp.w	r8, #2
 80077fa:	f104 0214 	add.w	r2, r4, #20
 80077fe:	d13d      	bne.n	800787c <__gethex+0x420>
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	3b01      	subs	r3, #1
 8007804:	42ab      	cmp	r3, r5
 8007806:	d10b      	bne.n	8007820 <__gethex+0x3c4>
 8007808:	2301      	movs	r3, #1
 800780a:	1169      	asrs	r1, r5, #5
 800780c:	f005 051f 	and.w	r5, r5, #31
 8007810:	fa03 f505 	lsl.w	r5, r3, r5
 8007814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007818:	421d      	tst	r5, r3
 800781a:	bf18      	it	ne
 800781c:	f04f 0801 	movne.w	r8, #1
 8007820:	f048 0820 	orr.w	r8, r8, #32
 8007824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007826:	601c      	str	r4, [r3, #0]
 8007828:	9b02      	ldr	r3, [sp, #8]
 800782a:	601e      	str	r6, [r3, #0]
 800782c:	e6a0      	b.n	8007570 <__gethex+0x114>
 800782e:	4290      	cmp	r0, r2
 8007830:	f842 3c04 	str.w	r3, [r2, #-4]
 8007834:	d8d6      	bhi.n	80077e4 <__gethex+0x388>
 8007836:	68a2      	ldr	r2, [r4, #8]
 8007838:	4593      	cmp	fp, r2
 800783a:	db17      	blt.n	800786c <__gethex+0x410>
 800783c:	6861      	ldr	r1, [r4, #4]
 800783e:	4648      	mov	r0, r9
 8007840:	3101      	adds	r1, #1
 8007842:	f000 f9bb 	bl	8007bbc <_Balloc>
 8007846:	4682      	mov	sl, r0
 8007848:	b918      	cbnz	r0, 8007852 <__gethex+0x3f6>
 800784a:	4602      	mov	r2, r0
 800784c:	2184      	movs	r1, #132	; 0x84
 800784e:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <__gethex+0x45c>)
 8007850:	e6b1      	b.n	80075b6 <__gethex+0x15a>
 8007852:	6922      	ldr	r2, [r4, #16]
 8007854:	f104 010c 	add.w	r1, r4, #12
 8007858:	3202      	adds	r2, #2
 800785a:	0092      	lsls	r2, r2, #2
 800785c:	300c      	adds	r0, #12
 800785e:	f7ff fd35 	bl	80072cc <memcpy>
 8007862:	4621      	mov	r1, r4
 8007864:	4648      	mov	r0, r9
 8007866:	f000 f9e9 	bl	8007c3c <_Bfree>
 800786a:	4654      	mov	r4, sl
 800786c:	6922      	ldr	r2, [r4, #16]
 800786e:	1c51      	adds	r1, r2, #1
 8007870:	6121      	str	r1, [r4, #16]
 8007872:	2101      	movs	r1, #1
 8007874:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007878:	6151      	str	r1, [r2, #20]
 800787a:	e7bc      	b.n	80077f6 <__gethex+0x39a>
 800787c:	6921      	ldr	r1, [r4, #16]
 800787e:	4559      	cmp	r1, fp
 8007880:	dd0b      	ble.n	800789a <__gethex+0x43e>
 8007882:	2101      	movs	r1, #1
 8007884:	4620      	mov	r0, r4
 8007886:	f7ff fd81 	bl	800738c <rshift>
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	3601      	adds	r6, #1
 800788e:	42b3      	cmp	r3, r6
 8007890:	f6ff aeda 	blt.w	8007648 <__gethex+0x1ec>
 8007894:	f04f 0801 	mov.w	r8, #1
 8007898:	e7c2      	b.n	8007820 <__gethex+0x3c4>
 800789a:	f015 051f 	ands.w	r5, r5, #31
 800789e:	d0f9      	beq.n	8007894 <__gethex+0x438>
 80078a0:	9b01      	ldr	r3, [sp, #4]
 80078a2:	f1c5 0520 	rsb	r5, r5, #32
 80078a6:	441a      	add	r2, r3
 80078a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80078ac:	f000 fa78 	bl	8007da0 <__hi0bits>
 80078b0:	42a8      	cmp	r0, r5
 80078b2:	dbe6      	blt.n	8007882 <__gethex+0x426>
 80078b4:	e7ee      	b.n	8007894 <__gethex+0x438>
 80078b6:	bf00      	nop
 80078b8:	0800969f 	.word	0x0800969f

080078bc <L_shift>:
 80078bc:	f1c2 0208 	rsb	r2, r2, #8
 80078c0:	0092      	lsls	r2, r2, #2
 80078c2:	b570      	push	{r4, r5, r6, lr}
 80078c4:	f1c2 0620 	rsb	r6, r2, #32
 80078c8:	6843      	ldr	r3, [r0, #4]
 80078ca:	6804      	ldr	r4, [r0, #0]
 80078cc:	fa03 f506 	lsl.w	r5, r3, r6
 80078d0:	432c      	orrs	r4, r5
 80078d2:	40d3      	lsrs	r3, r2
 80078d4:	6004      	str	r4, [r0, #0]
 80078d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80078da:	4288      	cmp	r0, r1
 80078dc:	d3f4      	bcc.n	80078c8 <L_shift+0xc>
 80078de:	bd70      	pop	{r4, r5, r6, pc}

080078e0 <__match>:
 80078e0:	b530      	push	{r4, r5, lr}
 80078e2:	6803      	ldr	r3, [r0, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ea:	b914      	cbnz	r4, 80078f2 <__match+0x12>
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	2001      	movs	r0, #1
 80078f0:	bd30      	pop	{r4, r5, pc}
 80078f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80078fa:	2d19      	cmp	r5, #25
 80078fc:	bf98      	it	ls
 80078fe:	3220      	addls	r2, #32
 8007900:	42a2      	cmp	r2, r4
 8007902:	d0f0      	beq.n	80078e6 <__match+0x6>
 8007904:	2000      	movs	r0, #0
 8007906:	e7f3      	b.n	80078f0 <__match+0x10>

08007908 <__hexnan>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	2500      	movs	r5, #0
 800790e:	680b      	ldr	r3, [r1, #0]
 8007910:	4682      	mov	sl, r0
 8007912:	115e      	asrs	r6, r3, #5
 8007914:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007918:	f013 031f 	ands.w	r3, r3, #31
 800791c:	bf18      	it	ne
 800791e:	3604      	addne	r6, #4
 8007920:	1f37      	subs	r7, r6, #4
 8007922:	4690      	mov	r8, r2
 8007924:	46b9      	mov	r9, r7
 8007926:	463c      	mov	r4, r7
 8007928:	46ab      	mov	fp, r5
 800792a:	b087      	sub	sp, #28
 800792c:	6801      	ldr	r1, [r0, #0]
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	f846 5c04 	str.w	r5, [r6, #-4]
 8007934:	9502      	str	r5, [sp, #8]
 8007936:	784a      	ldrb	r2, [r1, #1]
 8007938:	1c4b      	adds	r3, r1, #1
 800793a:	9303      	str	r3, [sp, #12]
 800793c:	b342      	cbz	r2, 8007990 <__hexnan+0x88>
 800793e:	4610      	mov	r0, r2
 8007940:	9105      	str	r1, [sp, #20]
 8007942:	9204      	str	r2, [sp, #16]
 8007944:	f7ff fd75 	bl	8007432 <__hexdig_fun>
 8007948:	2800      	cmp	r0, #0
 800794a:	d14f      	bne.n	80079ec <__hexnan+0xe4>
 800794c:	9a04      	ldr	r2, [sp, #16]
 800794e:	9905      	ldr	r1, [sp, #20]
 8007950:	2a20      	cmp	r2, #32
 8007952:	d818      	bhi.n	8007986 <__hexnan+0x7e>
 8007954:	9b02      	ldr	r3, [sp, #8]
 8007956:	459b      	cmp	fp, r3
 8007958:	dd13      	ble.n	8007982 <__hexnan+0x7a>
 800795a:	454c      	cmp	r4, r9
 800795c:	d206      	bcs.n	800796c <__hexnan+0x64>
 800795e:	2d07      	cmp	r5, #7
 8007960:	dc04      	bgt.n	800796c <__hexnan+0x64>
 8007962:	462a      	mov	r2, r5
 8007964:	4649      	mov	r1, r9
 8007966:	4620      	mov	r0, r4
 8007968:	f7ff ffa8 	bl	80078bc <L_shift>
 800796c:	4544      	cmp	r4, r8
 800796e:	d950      	bls.n	8007a12 <__hexnan+0x10a>
 8007970:	2300      	movs	r3, #0
 8007972:	f1a4 0904 	sub.w	r9, r4, #4
 8007976:	f844 3c04 	str.w	r3, [r4, #-4]
 800797a:	461d      	mov	r5, r3
 800797c:	464c      	mov	r4, r9
 800797e:	f8cd b008 	str.w	fp, [sp, #8]
 8007982:	9903      	ldr	r1, [sp, #12]
 8007984:	e7d7      	b.n	8007936 <__hexnan+0x2e>
 8007986:	2a29      	cmp	r2, #41	; 0x29
 8007988:	d155      	bne.n	8007a36 <__hexnan+0x12e>
 800798a:	3102      	adds	r1, #2
 800798c:	f8ca 1000 	str.w	r1, [sl]
 8007990:	f1bb 0f00 	cmp.w	fp, #0
 8007994:	d04f      	beq.n	8007a36 <__hexnan+0x12e>
 8007996:	454c      	cmp	r4, r9
 8007998:	d206      	bcs.n	80079a8 <__hexnan+0xa0>
 800799a:	2d07      	cmp	r5, #7
 800799c:	dc04      	bgt.n	80079a8 <__hexnan+0xa0>
 800799e:	462a      	mov	r2, r5
 80079a0:	4649      	mov	r1, r9
 80079a2:	4620      	mov	r0, r4
 80079a4:	f7ff ff8a 	bl	80078bc <L_shift>
 80079a8:	4544      	cmp	r4, r8
 80079aa:	d934      	bls.n	8007a16 <__hexnan+0x10e>
 80079ac:	4623      	mov	r3, r4
 80079ae:	f1a8 0204 	sub.w	r2, r8, #4
 80079b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80079b6:	429f      	cmp	r7, r3
 80079b8:	f842 1f04 	str.w	r1, [r2, #4]!
 80079bc:	d2f9      	bcs.n	80079b2 <__hexnan+0xaa>
 80079be:	1b3b      	subs	r3, r7, r4
 80079c0:	f023 0303 	bic.w	r3, r3, #3
 80079c4:	3304      	adds	r3, #4
 80079c6:	3e03      	subs	r6, #3
 80079c8:	3401      	adds	r4, #1
 80079ca:	42a6      	cmp	r6, r4
 80079cc:	bf38      	it	cc
 80079ce:	2304      	movcc	r3, #4
 80079d0:	2200      	movs	r2, #0
 80079d2:	4443      	add	r3, r8
 80079d4:	f843 2b04 	str.w	r2, [r3], #4
 80079d8:	429f      	cmp	r7, r3
 80079da:	d2fb      	bcs.n	80079d4 <__hexnan+0xcc>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	b91b      	cbnz	r3, 80079e8 <__hexnan+0xe0>
 80079e0:	4547      	cmp	r7, r8
 80079e2:	d126      	bne.n	8007a32 <__hexnan+0x12a>
 80079e4:	2301      	movs	r3, #1
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	2005      	movs	r0, #5
 80079ea:	e025      	b.n	8007a38 <__hexnan+0x130>
 80079ec:	3501      	adds	r5, #1
 80079ee:	2d08      	cmp	r5, #8
 80079f0:	f10b 0b01 	add.w	fp, fp, #1
 80079f4:	dd06      	ble.n	8007a04 <__hexnan+0xfc>
 80079f6:	4544      	cmp	r4, r8
 80079f8:	d9c3      	bls.n	8007982 <__hexnan+0x7a>
 80079fa:	2300      	movs	r3, #0
 80079fc:	2501      	movs	r5, #1
 80079fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a02:	3c04      	subs	r4, #4
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	f000 000f 	and.w	r0, r0, #15
 8007a0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a0e:	6020      	str	r0, [r4, #0]
 8007a10:	e7b7      	b.n	8007982 <__hexnan+0x7a>
 8007a12:	2508      	movs	r5, #8
 8007a14:	e7b5      	b.n	8007982 <__hexnan+0x7a>
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0df      	beq.n	80079dc <__hexnan+0xd4>
 8007a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a20:	f1c3 0320 	rsb	r3, r3, #32
 8007a24:	40da      	lsrs	r2, r3
 8007a26:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007a30:	e7d4      	b.n	80079dc <__hexnan+0xd4>
 8007a32:	3f04      	subs	r7, #4
 8007a34:	e7d2      	b.n	80079dc <__hexnan+0xd4>
 8007a36:	2004      	movs	r0, #4
 8007a38:	b007      	add	sp, #28
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007a40 <sbrk_aligned>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4e0e      	ldr	r6, [pc, #56]	; (8007a7c <sbrk_aligned+0x3c>)
 8007a44:	460c      	mov	r4, r1
 8007a46:	6831      	ldr	r1, [r6, #0]
 8007a48:	4605      	mov	r5, r0
 8007a4a:	b911      	cbnz	r1, 8007a52 <sbrk_aligned+0x12>
 8007a4c:	f001 f8f6 	bl	8008c3c <_sbrk_r>
 8007a50:	6030      	str	r0, [r6, #0]
 8007a52:	4621      	mov	r1, r4
 8007a54:	4628      	mov	r0, r5
 8007a56:	f001 f8f1 	bl	8008c3c <_sbrk_r>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	d00a      	beq.n	8007a74 <sbrk_aligned+0x34>
 8007a5e:	1cc4      	adds	r4, r0, #3
 8007a60:	f024 0403 	bic.w	r4, r4, #3
 8007a64:	42a0      	cmp	r0, r4
 8007a66:	d007      	beq.n	8007a78 <sbrk_aligned+0x38>
 8007a68:	1a21      	subs	r1, r4, r0
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f001 f8e6 	bl	8008c3c <_sbrk_r>
 8007a70:	3001      	adds	r0, #1
 8007a72:	d101      	bne.n	8007a78 <sbrk_aligned+0x38>
 8007a74:	f04f 34ff 	mov.w	r4, #4294967295
 8007a78:	4620      	mov	r0, r4
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	20001b84 	.word	0x20001b84

08007a80 <_malloc_r>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	1ccd      	adds	r5, r1, #3
 8007a86:	f025 0503 	bic.w	r5, r5, #3
 8007a8a:	3508      	adds	r5, #8
 8007a8c:	2d0c      	cmp	r5, #12
 8007a8e:	bf38      	it	cc
 8007a90:	250c      	movcc	r5, #12
 8007a92:	2d00      	cmp	r5, #0
 8007a94:	4607      	mov	r7, r0
 8007a96:	db01      	blt.n	8007a9c <_malloc_r+0x1c>
 8007a98:	42a9      	cmp	r1, r5
 8007a9a:	d905      	bls.n	8007aa8 <_malloc_r+0x28>
 8007a9c:	230c      	movs	r3, #12
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	603b      	str	r3, [r7, #0]
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b7c <_malloc_r+0xfc>
 8007aac:	f000 f87a 	bl	8007ba4 <__malloc_lock>
 8007ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab4:	461c      	mov	r4, r3
 8007ab6:	bb5c      	cbnz	r4, 8007b10 <_malloc_r+0x90>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4638      	mov	r0, r7
 8007abc:	f7ff ffc0 	bl	8007a40 <sbrk_aligned>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	d155      	bne.n	8007b72 <_malloc_r+0xf2>
 8007ac6:	f8d8 4000 	ldr.w	r4, [r8]
 8007aca:	4626      	mov	r6, r4
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	d145      	bne.n	8007b5c <_malloc_r+0xdc>
 8007ad0:	2c00      	cmp	r4, #0
 8007ad2:	d048      	beq.n	8007b66 <_malloc_r+0xe6>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4638      	mov	r0, r7
 8007ada:	eb04 0903 	add.w	r9, r4, r3
 8007ade:	f001 f8ad 	bl	8008c3c <_sbrk_r>
 8007ae2:	4581      	cmp	r9, r0
 8007ae4:	d13f      	bne.n	8007b66 <_malloc_r+0xe6>
 8007ae6:	6821      	ldr	r1, [r4, #0]
 8007ae8:	4638      	mov	r0, r7
 8007aea:	1a6d      	subs	r5, r5, r1
 8007aec:	4629      	mov	r1, r5
 8007aee:	f7ff ffa7 	bl	8007a40 <sbrk_aligned>
 8007af2:	3001      	adds	r0, #1
 8007af4:	d037      	beq.n	8007b66 <_malloc_r+0xe6>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	442b      	add	r3, r5
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	f8d8 3000 	ldr.w	r3, [r8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d038      	beq.n	8007b76 <_malloc_r+0xf6>
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	42a2      	cmp	r2, r4
 8007b08:	d12b      	bne.n	8007b62 <_malloc_r+0xe2>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	605a      	str	r2, [r3, #4]
 8007b0e:	e00f      	b.n	8007b30 <_malloc_r+0xb0>
 8007b10:	6822      	ldr	r2, [r4, #0]
 8007b12:	1b52      	subs	r2, r2, r5
 8007b14:	d41f      	bmi.n	8007b56 <_malloc_r+0xd6>
 8007b16:	2a0b      	cmp	r2, #11
 8007b18:	d917      	bls.n	8007b4a <_malloc_r+0xca>
 8007b1a:	1961      	adds	r1, r4, r5
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	6025      	str	r5, [r4, #0]
 8007b20:	bf18      	it	ne
 8007b22:	6059      	strne	r1, [r3, #4]
 8007b24:	6863      	ldr	r3, [r4, #4]
 8007b26:	bf08      	it	eq
 8007b28:	f8c8 1000 	streq.w	r1, [r8]
 8007b2c:	5162      	str	r2, [r4, r5]
 8007b2e:	604b      	str	r3, [r1, #4]
 8007b30:	4638      	mov	r0, r7
 8007b32:	f104 060b 	add.w	r6, r4, #11
 8007b36:	f000 f83b 	bl	8007bb0 <__malloc_unlock>
 8007b3a:	f026 0607 	bic.w	r6, r6, #7
 8007b3e:	1d23      	adds	r3, r4, #4
 8007b40:	1af2      	subs	r2, r6, r3
 8007b42:	d0ae      	beq.n	8007aa2 <_malloc_r+0x22>
 8007b44:	1b9b      	subs	r3, r3, r6
 8007b46:	50a3      	str	r3, [r4, r2]
 8007b48:	e7ab      	b.n	8007aa2 <_malloc_r+0x22>
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	6862      	ldr	r2, [r4, #4]
 8007b4e:	d1dd      	bne.n	8007b0c <_malloc_r+0x8c>
 8007b50:	f8c8 2000 	str.w	r2, [r8]
 8007b54:	e7ec      	b.n	8007b30 <_malloc_r+0xb0>
 8007b56:	4623      	mov	r3, r4
 8007b58:	6864      	ldr	r4, [r4, #4]
 8007b5a:	e7ac      	b.n	8007ab6 <_malloc_r+0x36>
 8007b5c:	4634      	mov	r4, r6
 8007b5e:	6876      	ldr	r6, [r6, #4]
 8007b60:	e7b4      	b.n	8007acc <_malloc_r+0x4c>
 8007b62:	4613      	mov	r3, r2
 8007b64:	e7cc      	b.n	8007b00 <_malloc_r+0x80>
 8007b66:	230c      	movs	r3, #12
 8007b68:	4638      	mov	r0, r7
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	f000 f820 	bl	8007bb0 <__malloc_unlock>
 8007b70:	e797      	b.n	8007aa2 <_malloc_r+0x22>
 8007b72:	6025      	str	r5, [r4, #0]
 8007b74:	e7dc      	b.n	8007b30 <_malloc_r+0xb0>
 8007b76:	605b      	str	r3, [r3, #4]
 8007b78:	deff      	udf	#255	; 0xff
 8007b7a:	bf00      	nop
 8007b7c:	20001b80 	.word	0x20001b80

08007b80 <__ascii_mbtowc>:
 8007b80:	b082      	sub	sp, #8
 8007b82:	b901      	cbnz	r1, 8007b86 <__ascii_mbtowc+0x6>
 8007b84:	a901      	add	r1, sp, #4
 8007b86:	b142      	cbz	r2, 8007b9a <__ascii_mbtowc+0x1a>
 8007b88:	b14b      	cbz	r3, 8007b9e <__ascii_mbtowc+0x1e>
 8007b8a:	7813      	ldrb	r3, [r2, #0]
 8007b8c:	600b      	str	r3, [r1, #0]
 8007b8e:	7812      	ldrb	r2, [r2, #0]
 8007b90:	1e10      	subs	r0, r2, #0
 8007b92:	bf18      	it	ne
 8007b94:	2001      	movne	r0, #1
 8007b96:	b002      	add	sp, #8
 8007b98:	4770      	bx	lr
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	e7fb      	b.n	8007b96 <__ascii_mbtowc+0x16>
 8007b9e:	f06f 0001 	mvn.w	r0, #1
 8007ba2:	e7f8      	b.n	8007b96 <__ascii_mbtowc+0x16>

08007ba4 <__malloc_lock>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__malloc_lock+0x8>)
 8007ba6:	f7ff bb87 	b.w	80072b8 <__retarget_lock_acquire_recursive>
 8007baa:	bf00      	nop
 8007bac:	20001b7c 	.word	0x20001b7c

08007bb0 <__malloc_unlock>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	; (8007bb8 <__malloc_unlock+0x8>)
 8007bb2:	f7ff bb82 	b.w	80072ba <__retarget_lock_release_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	20001b7c 	.word	0x20001b7c

08007bbc <_Balloc>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	69c6      	ldr	r6, [r0, #28]
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	b976      	cbnz	r6, 8007be4 <_Balloc+0x28>
 8007bc6:	2010      	movs	r0, #16
 8007bc8:	f001 f888 	bl	8008cdc <malloc>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	61e0      	str	r0, [r4, #28]
 8007bd0:	b920      	cbnz	r0, 8007bdc <_Balloc+0x20>
 8007bd2:	216b      	movs	r1, #107	; 0x6b
 8007bd4:	4b17      	ldr	r3, [pc, #92]	; (8007c34 <_Balloc+0x78>)
 8007bd6:	4818      	ldr	r0, [pc, #96]	; (8007c38 <_Balloc+0x7c>)
 8007bd8:	f001 f84e 	bl	8008c78 <__assert_func>
 8007bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007be0:	6006      	str	r6, [r0, #0]
 8007be2:	60c6      	str	r6, [r0, #12]
 8007be4:	69e6      	ldr	r6, [r4, #28]
 8007be6:	68f3      	ldr	r3, [r6, #12]
 8007be8:	b183      	cbz	r3, 8007c0c <_Balloc+0x50>
 8007bea:	69e3      	ldr	r3, [r4, #28]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bf2:	b9b8      	cbnz	r0, 8007c24 <_Balloc+0x68>
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8007bfa:	1d72      	adds	r2, r6, #5
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	0092      	lsls	r2, r2, #2
 8007c00:	f001 f858 	bl	8008cb4 <_calloc_r>
 8007c04:	b160      	cbz	r0, 8007c20 <_Balloc+0x64>
 8007c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c0a:	e00e      	b.n	8007c2a <_Balloc+0x6e>
 8007c0c:	2221      	movs	r2, #33	; 0x21
 8007c0e:	2104      	movs	r1, #4
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 f84f 	bl	8008cb4 <_calloc_r>
 8007c16:	69e3      	ldr	r3, [r4, #28]
 8007c18:	60f0      	str	r0, [r6, #12]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e4      	bne.n	8007bea <_Balloc+0x2e>
 8007c20:	2000      	movs	r0, #0
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	6802      	ldr	r2, [r0, #0]
 8007c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c30:	e7f7      	b.n	8007c22 <_Balloc+0x66>
 8007c32:	bf00      	nop
 8007c34:	08009710 	.word	0x08009710
 8007c38:	08009727 	.word	0x08009727

08007c3c <_Bfree>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	69c6      	ldr	r6, [r0, #28]
 8007c40:	4605      	mov	r5, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	b976      	cbnz	r6, 8007c64 <_Bfree+0x28>
 8007c46:	2010      	movs	r0, #16
 8007c48:	f001 f848 	bl	8008cdc <malloc>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	61e8      	str	r0, [r5, #28]
 8007c50:	b920      	cbnz	r0, 8007c5c <_Bfree+0x20>
 8007c52:	218f      	movs	r1, #143	; 0x8f
 8007c54:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <_Bfree+0x3c>)
 8007c56:	4809      	ldr	r0, [pc, #36]	; (8007c7c <_Bfree+0x40>)
 8007c58:	f001 f80e 	bl	8008c78 <__assert_func>
 8007c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c60:	6006      	str	r6, [r0, #0]
 8007c62:	60c6      	str	r6, [r0, #12]
 8007c64:	b13c      	cbz	r4, 8007c76 <_Bfree+0x3a>
 8007c66:	69eb      	ldr	r3, [r5, #28]
 8007c68:	6862      	ldr	r2, [r4, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c70:	6021      	str	r1, [r4, #0]
 8007c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	08009710 	.word	0x08009710
 8007c7c:	08009727 	.word	0x08009727

08007c80 <__multadd>:
 8007c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c84:	4607      	mov	r7, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	461e      	mov	r6, r3
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	690d      	ldr	r5, [r1, #16]
 8007c8e:	f101 0c14 	add.w	ip, r1, #20
 8007c92:	f8dc 3000 	ldr.w	r3, [ip]
 8007c96:	3001      	adds	r0, #1
 8007c98:	b299      	uxth	r1, r3
 8007c9a:	fb02 6101 	mla	r1, r2, r1, r6
 8007c9e:	0c1e      	lsrs	r6, r3, #16
 8007ca0:	0c0b      	lsrs	r3, r1, #16
 8007ca2:	fb02 3306 	mla	r3, r2, r6, r3
 8007ca6:	b289      	uxth	r1, r1
 8007ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cac:	4285      	cmp	r5, r0
 8007cae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cb2:	f84c 1b04 	str.w	r1, [ip], #4
 8007cb6:	dcec      	bgt.n	8007c92 <__multadd+0x12>
 8007cb8:	b30e      	cbz	r6, 8007cfe <__multadd+0x7e>
 8007cba:	68a3      	ldr	r3, [r4, #8]
 8007cbc:	42ab      	cmp	r3, r5
 8007cbe:	dc19      	bgt.n	8007cf4 <__multadd+0x74>
 8007cc0:	6861      	ldr	r1, [r4, #4]
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	3101      	adds	r1, #1
 8007cc6:	f7ff ff79 	bl	8007bbc <_Balloc>
 8007cca:	4680      	mov	r8, r0
 8007ccc:	b928      	cbnz	r0, 8007cda <__multadd+0x5a>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	21ba      	movs	r1, #186	; 0xba
 8007cd2:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <__multadd+0x84>)
 8007cd4:	480c      	ldr	r0, [pc, #48]	; (8007d08 <__multadd+0x88>)
 8007cd6:	f000 ffcf 	bl	8008c78 <__assert_func>
 8007cda:	6922      	ldr	r2, [r4, #16]
 8007cdc:	f104 010c 	add.w	r1, r4, #12
 8007ce0:	3202      	adds	r2, #2
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	300c      	adds	r0, #12
 8007ce6:	f7ff faf1 	bl	80072cc <memcpy>
 8007cea:	4621      	mov	r1, r4
 8007cec:	4638      	mov	r0, r7
 8007cee:	f7ff ffa5 	bl	8007c3c <_Bfree>
 8007cf2:	4644      	mov	r4, r8
 8007cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	615e      	str	r6, [r3, #20]
 8007cfc:	6125      	str	r5, [r4, #16]
 8007cfe:	4620      	mov	r0, r4
 8007d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d04:	0800969f 	.word	0x0800969f
 8007d08:	08009727 	.word	0x08009727

08007d0c <__s2b>:
 8007d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d10:	4615      	mov	r5, r2
 8007d12:	2209      	movs	r2, #9
 8007d14:	461f      	mov	r7, r3
 8007d16:	3308      	adds	r3, #8
 8007d18:	460c      	mov	r4, r1
 8007d1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d1e:	4606      	mov	r6, r0
 8007d20:	2201      	movs	r2, #1
 8007d22:	2100      	movs	r1, #0
 8007d24:	429a      	cmp	r2, r3
 8007d26:	db09      	blt.n	8007d3c <__s2b+0x30>
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7ff ff47 	bl	8007bbc <_Balloc>
 8007d2e:	b940      	cbnz	r0, 8007d42 <__s2b+0x36>
 8007d30:	4602      	mov	r2, r0
 8007d32:	21d3      	movs	r1, #211	; 0xd3
 8007d34:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <__s2b+0x8c>)
 8007d36:	4819      	ldr	r0, [pc, #100]	; (8007d9c <__s2b+0x90>)
 8007d38:	f000 ff9e 	bl	8008c78 <__assert_func>
 8007d3c:	0052      	lsls	r2, r2, #1
 8007d3e:	3101      	adds	r1, #1
 8007d40:	e7f0      	b.n	8007d24 <__s2b+0x18>
 8007d42:	9b08      	ldr	r3, [sp, #32]
 8007d44:	2d09      	cmp	r5, #9
 8007d46:	6143      	str	r3, [r0, #20]
 8007d48:	f04f 0301 	mov.w	r3, #1
 8007d4c:	6103      	str	r3, [r0, #16]
 8007d4e:	dd16      	ble.n	8007d7e <__s2b+0x72>
 8007d50:	f104 0909 	add.w	r9, r4, #9
 8007d54:	46c8      	mov	r8, r9
 8007d56:	442c      	add	r4, r5
 8007d58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	220a      	movs	r2, #10
 8007d60:	4630      	mov	r0, r6
 8007d62:	3b30      	subs	r3, #48	; 0x30
 8007d64:	f7ff ff8c 	bl	8007c80 <__multadd>
 8007d68:	45a0      	cmp	r8, r4
 8007d6a:	d1f5      	bne.n	8007d58 <__s2b+0x4c>
 8007d6c:	f1a5 0408 	sub.w	r4, r5, #8
 8007d70:	444c      	add	r4, r9
 8007d72:	1b2d      	subs	r5, r5, r4
 8007d74:	1963      	adds	r3, r4, r5
 8007d76:	42bb      	cmp	r3, r7
 8007d78:	db04      	blt.n	8007d84 <__s2b+0x78>
 8007d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7e:	2509      	movs	r5, #9
 8007d80:	340a      	adds	r4, #10
 8007d82:	e7f6      	b.n	8007d72 <__s2b+0x66>
 8007d84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d88:	4601      	mov	r1, r0
 8007d8a:	220a      	movs	r2, #10
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	3b30      	subs	r3, #48	; 0x30
 8007d90:	f7ff ff76 	bl	8007c80 <__multadd>
 8007d94:	e7ee      	b.n	8007d74 <__s2b+0x68>
 8007d96:	bf00      	nop
 8007d98:	0800969f 	.word	0x0800969f
 8007d9c:	08009727 	.word	0x08009727

08007da0 <__hi0bits>:
 8007da0:	0c02      	lsrs	r2, r0, #16
 8007da2:	0412      	lsls	r2, r2, #16
 8007da4:	4603      	mov	r3, r0
 8007da6:	b9ca      	cbnz	r2, 8007ddc <__hi0bits+0x3c>
 8007da8:	0403      	lsls	r3, r0, #16
 8007daa:	2010      	movs	r0, #16
 8007dac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007db0:	bf04      	itt	eq
 8007db2:	021b      	lsleq	r3, r3, #8
 8007db4:	3008      	addeq	r0, #8
 8007db6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007dba:	bf04      	itt	eq
 8007dbc:	011b      	lsleq	r3, r3, #4
 8007dbe:	3004      	addeq	r0, #4
 8007dc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007dc4:	bf04      	itt	eq
 8007dc6:	009b      	lsleq	r3, r3, #2
 8007dc8:	3002      	addeq	r0, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db05      	blt.n	8007dda <__hi0bits+0x3a>
 8007dce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007dd2:	f100 0001 	add.w	r0, r0, #1
 8007dd6:	bf08      	it	eq
 8007dd8:	2020      	moveq	r0, #32
 8007dda:	4770      	bx	lr
 8007ddc:	2000      	movs	r0, #0
 8007dde:	e7e5      	b.n	8007dac <__hi0bits+0xc>

08007de0 <__lo0bits>:
 8007de0:	6803      	ldr	r3, [r0, #0]
 8007de2:	4602      	mov	r2, r0
 8007de4:	f013 0007 	ands.w	r0, r3, #7
 8007de8:	d00b      	beq.n	8007e02 <__lo0bits+0x22>
 8007dea:	07d9      	lsls	r1, r3, #31
 8007dec:	d421      	bmi.n	8007e32 <__lo0bits+0x52>
 8007dee:	0798      	lsls	r0, r3, #30
 8007df0:	bf49      	itett	mi
 8007df2:	085b      	lsrmi	r3, r3, #1
 8007df4:	089b      	lsrpl	r3, r3, #2
 8007df6:	2001      	movmi	r0, #1
 8007df8:	6013      	strmi	r3, [r2, #0]
 8007dfa:	bf5c      	itt	pl
 8007dfc:	2002      	movpl	r0, #2
 8007dfe:	6013      	strpl	r3, [r2, #0]
 8007e00:	4770      	bx	lr
 8007e02:	b299      	uxth	r1, r3
 8007e04:	b909      	cbnz	r1, 8007e0a <__lo0bits+0x2a>
 8007e06:	2010      	movs	r0, #16
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	b2d9      	uxtb	r1, r3
 8007e0c:	b909      	cbnz	r1, 8007e12 <__lo0bits+0x32>
 8007e0e:	3008      	adds	r0, #8
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	0719      	lsls	r1, r3, #28
 8007e14:	bf04      	itt	eq
 8007e16:	091b      	lsreq	r3, r3, #4
 8007e18:	3004      	addeq	r0, #4
 8007e1a:	0799      	lsls	r1, r3, #30
 8007e1c:	bf04      	itt	eq
 8007e1e:	089b      	lsreq	r3, r3, #2
 8007e20:	3002      	addeq	r0, #2
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d403      	bmi.n	8007e2e <__lo0bits+0x4e>
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	f100 0001 	add.w	r0, r0, #1
 8007e2c:	d003      	beq.n	8007e36 <__lo0bits+0x56>
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	4770      	bx	lr
 8007e32:	2000      	movs	r0, #0
 8007e34:	4770      	bx	lr
 8007e36:	2020      	movs	r0, #32
 8007e38:	4770      	bx	lr
	...

08007e3c <__i2b>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	2101      	movs	r1, #1
 8007e42:	f7ff febb 	bl	8007bbc <_Balloc>
 8007e46:	4602      	mov	r2, r0
 8007e48:	b928      	cbnz	r0, 8007e56 <__i2b+0x1a>
 8007e4a:	f240 1145 	movw	r1, #325	; 0x145
 8007e4e:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <__i2b+0x24>)
 8007e50:	4804      	ldr	r0, [pc, #16]	; (8007e64 <__i2b+0x28>)
 8007e52:	f000 ff11 	bl	8008c78 <__assert_func>
 8007e56:	2301      	movs	r3, #1
 8007e58:	6144      	str	r4, [r0, #20]
 8007e5a:	6103      	str	r3, [r0, #16]
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	bf00      	nop
 8007e60:	0800969f 	.word	0x0800969f
 8007e64:	08009727 	.word	0x08009727

08007e68 <__multiply>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	4691      	mov	r9, r2
 8007e6e:	690a      	ldr	r2, [r1, #16]
 8007e70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e74:	460c      	mov	r4, r1
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bfbe      	ittt	lt
 8007e7a:	460b      	movlt	r3, r1
 8007e7c:	464c      	movlt	r4, r9
 8007e7e:	4699      	movlt	r9, r3
 8007e80:	6927      	ldr	r7, [r4, #16]
 8007e82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	eb07 060a 	add.w	r6, r7, sl
 8007e8e:	42b3      	cmp	r3, r6
 8007e90:	b085      	sub	sp, #20
 8007e92:	bfb8      	it	lt
 8007e94:	3101      	addlt	r1, #1
 8007e96:	f7ff fe91 	bl	8007bbc <_Balloc>
 8007e9a:	b930      	cbnz	r0, 8007eaa <__multiply+0x42>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ea2:	4b43      	ldr	r3, [pc, #268]	; (8007fb0 <__multiply+0x148>)
 8007ea4:	4843      	ldr	r0, [pc, #268]	; (8007fb4 <__multiply+0x14c>)
 8007ea6:	f000 fee7 	bl	8008c78 <__assert_func>
 8007eaa:	f100 0514 	add.w	r5, r0, #20
 8007eae:	462b      	mov	r3, r5
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007eb6:	4543      	cmp	r3, r8
 8007eb8:	d321      	bcc.n	8007efe <__multiply+0x96>
 8007eba:	f104 0314 	add.w	r3, r4, #20
 8007ebe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ec2:	f109 0314 	add.w	r3, r9, #20
 8007ec6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007eca:	9202      	str	r2, [sp, #8]
 8007ecc:	1b3a      	subs	r2, r7, r4
 8007ece:	3a15      	subs	r2, #21
 8007ed0:	f022 0203 	bic.w	r2, r2, #3
 8007ed4:	3204      	adds	r2, #4
 8007ed6:	f104 0115 	add.w	r1, r4, #21
 8007eda:	428f      	cmp	r7, r1
 8007edc:	bf38      	it	cc
 8007ede:	2204      	movcc	r2, #4
 8007ee0:	9201      	str	r2, [sp, #4]
 8007ee2:	9a02      	ldr	r2, [sp, #8]
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d80c      	bhi.n	8007f04 <__multiply+0x9c>
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	dd03      	ble.n	8007ef6 <__multiply+0x8e>
 8007eee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d05a      	beq.n	8007fac <__multiply+0x144>
 8007ef6:	6106      	str	r6, [r0, #16]
 8007ef8:	b005      	add	sp, #20
 8007efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efe:	f843 2b04 	str.w	r2, [r3], #4
 8007f02:	e7d8      	b.n	8007eb6 <__multiply+0x4e>
 8007f04:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f08:	f1ba 0f00 	cmp.w	sl, #0
 8007f0c:	d023      	beq.n	8007f56 <__multiply+0xee>
 8007f0e:	46a9      	mov	r9, r5
 8007f10:	f04f 0c00 	mov.w	ip, #0
 8007f14:	f104 0e14 	add.w	lr, r4, #20
 8007f18:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f1c:	f8d9 1000 	ldr.w	r1, [r9]
 8007f20:	fa1f fb82 	uxth.w	fp, r2
 8007f24:	b289      	uxth	r1, r1
 8007f26:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f2a:	4461      	add	r1, ip
 8007f2c:	f8d9 c000 	ldr.w	ip, [r9]
 8007f30:	0c12      	lsrs	r2, r2, #16
 8007f32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f36:	fb0a c202 	mla	r2, sl, r2, ip
 8007f3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f3e:	b289      	uxth	r1, r1
 8007f40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f44:	4577      	cmp	r7, lr
 8007f46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f4a:	f849 1b04 	str.w	r1, [r9], #4
 8007f4e:	d8e3      	bhi.n	8007f18 <__multiply+0xb0>
 8007f50:	9a01      	ldr	r2, [sp, #4]
 8007f52:	f845 c002 	str.w	ip, [r5, r2]
 8007f56:	9a03      	ldr	r2, [sp, #12]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f5e:	f1b9 0f00 	cmp.w	r9, #0
 8007f62:	d021      	beq.n	8007fa8 <__multiply+0x140>
 8007f64:	46ae      	mov	lr, r5
 8007f66:	f04f 0a00 	mov.w	sl, #0
 8007f6a:	6829      	ldr	r1, [r5, #0]
 8007f6c:	f104 0c14 	add.w	ip, r4, #20
 8007f70:	f8bc b000 	ldrh.w	fp, [ip]
 8007f74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f78:	b289      	uxth	r1, r1
 8007f7a:	fb09 220b 	mla	r2, r9, fp, r2
 8007f7e:	4452      	add	r2, sl
 8007f80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f84:	f84e 1b04 	str.w	r1, [lr], #4
 8007f88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007f8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f90:	f8be 1000 	ldrh.w	r1, [lr]
 8007f94:	4567      	cmp	r7, ip
 8007f96:	fb09 110a 	mla	r1, r9, sl, r1
 8007f9a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007f9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fa2:	d8e5      	bhi.n	8007f70 <__multiply+0x108>
 8007fa4:	9a01      	ldr	r2, [sp, #4]
 8007fa6:	50a9      	str	r1, [r5, r2]
 8007fa8:	3504      	adds	r5, #4
 8007faa:	e79a      	b.n	8007ee2 <__multiply+0x7a>
 8007fac:	3e01      	subs	r6, #1
 8007fae:	e79c      	b.n	8007eea <__multiply+0x82>
 8007fb0:	0800969f 	.word	0x0800969f
 8007fb4:	08009727 	.word	0x08009727

08007fb8 <__pow5mult>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	4615      	mov	r5, r2
 8007fbe:	f012 0203 	ands.w	r2, r2, #3
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	d007      	beq.n	8007fd8 <__pow5mult+0x20>
 8007fc8:	4c25      	ldr	r4, [pc, #148]	; (8008060 <__pow5mult+0xa8>)
 8007fca:	3a01      	subs	r2, #1
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fd2:	f7ff fe55 	bl	8007c80 <__multadd>
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	10ad      	asrs	r5, r5, #2
 8007fda:	d03d      	beq.n	8008058 <__pow5mult+0xa0>
 8007fdc:	69f4      	ldr	r4, [r6, #28]
 8007fde:	b97c      	cbnz	r4, 8008000 <__pow5mult+0x48>
 8007fe0:	2010      	movs	r0, #16
 8007fe2:	f000 fe7b 	bl	8008cdc <malloc>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	61f0      	str	r0, [r6, #28]
 8007fea:	b928      	cbnz	r0, 8007ff8 <__pow5mult+0x40>
 8007fec:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007ff0:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <__pow5mult+0xac>)
 8007ff2:	481d      	ldr	r0, [pc, #116]	; (8008068 <__pow5mult+0xb0>)
 8007ff4:	f000 fe40 	bl	8008c78 <__assert_func>
 8007ff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ffc:	6004      	str	r4, [r0, #0]
 8007ffe:	60c4      	str	r4, [r0, #12]
 8008000:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008008:	b94c      	cbnz	r4, 800801e <__pow5mult+0x66>
 800800a:	f240 2171 	movw	r1, #625	; 0x271
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff ff14 	bl	8007e3c <__i2b>
 8008014:	2300      	movs	r3, #0
 8008016:	4604      	mov	r4, r0
 8008018:	f8c8 0008 	str.w	r0, [r8, #8]
 800801c:	6003      	str	r3, [r0, #0]
 800801e:	f04f 0900 	mov.w	r9, #0
 8008022:	07eb      	lsls	r3, r5, #31
 8008024:	d50a      	bpl.n	800803c <__pow5mult+0x84>
 8008026:	4639      	mov	r1, r7
 8008028:	4622      	mov	r2, r4
 800802a:	4630      	mov	r0, r6
 800802c:	f7ff ff1c 	bl	8007e68 <__multiply>
 8008030:	4680      	mov	r8, r0
 8008032:	4639      	mov	r1, r7
 8008034:	4630      	mov	r0, r6
 8008036:	f7ff fe01 	bl	8007c3c <_Bfree>
 800803a:	4647      	mov	r7, r8
 800803c:	106d      	asrs	r5, r5, #1
 800803e:	d00b      	beq.n	8008058 <__pow5mult+0xa0>
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	b938      	cbnz	r0, 8008054 <__pow5mult+0x9c>
 8008044:	4622      	mov	r2, r4
 8008046:	4621      	mov	r1, r4
 8008048:	4630      	mov	r0, r6
 800804a:	f7ff ff0d 	bl	8007e68 <__multiply>
 800804e:	6020      	str	r0, [r4, #0]
 8008050:	f8c0 9000 	str.w	r9, [r0]
 8008054:	4604      	mov	r4, r0
 8008056:	e7e4      	b.n	8008022 <__pow5mult+0x6a>
 8008058:	4638      	mov	r0, r7
 800805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805e:	bf00      	nop
 8008060:	08009870 	.word	0x08009870
 8008064:	08009710 	.word	0x08009710
 8008068:	08009727 	.word	0x08009727

0800806c <__lshift>:
 800806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	460c      	mov	r4, r1
 8008072:	4607      	mov	r7, r0
 8008074:	4691      	mov	r9, r2
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	6849      	ldr	r1, [r1, #4]
 800807a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008084:	f108 0601 	add.w	r6, r8, #1
 8008088:	42b3      	cmp	r3, r6
 800808a:	db0b      	blt.n	80080a4 <__lshift+0x38>
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff fd95 	bl	8007bbc <_Balloc>
 8008092:	4605      	mov	r5, r0
 8008094:	b948      	cbnz	r0, 80080aa <__lshift+0x3e>
 8008096:	4602      	mov	r2, r0
 8008098:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800809c:	4b27      	ldr	r3, [pc, #156]	; (800813c <__lshift+0xd0>)
 800809e:	4828      	ldr	r0, [pc, #160]	; (8008140 <__lshift+0xd4>)
 80080a0:	f000 fdea 	bl	8008c78 <__assert_func>
 80080a4:	3101      	adds	r1, #1
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	e7ee      	b.n	8008088 <__lshift+0x1c>
 80080aa:	2300      	movs	r3, #0
 80080ac:	f100 0114 	add.w	r1, r0, #20
 80080b0:	f100 0210 	add.w	r2, r0, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	4553      	cmp	r3, sl
 80080b8:	db33      	blt.n	8008122 <__lshift+0xb6>
 80080ba:	6920      	ldr	r0, [r4, #16]
 80080bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080c0:	f104 0314 	add.w	r3, r4, #20
 80080c4:	f019 091f 	ands.w	r9, r9, #31
 80080c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080d0:	d02b      	beq.n	800812a <__lshift+0xbe>
 80080d2:	468a      	mov	sl, r1
 80080d4:	2200      	movs	r2, #0
 80080d6:	f1c9 0e20 	rsb	lr, r9, #32
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	fa00 f009 	lsl.w	r0, r0, r9
 80080e0:	4310      	orrs	r0, r2
 80080e2:	f84a 0b04 	str.w	r0, [sl], #4
 80080e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ea:	459c      	cmp	ip, r3
 80080ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80080f0:	d8f3      	bhi.n	80080da <__lshift+0x6e>
 80080f2:	ebac 0304 	sub.w	r3, ip, r4
 80080f6:	3b15      	subs	r3, #21
 80080f8:	f023 0303 	bic.w	r3, r3, #3
 80080fc:	3304      	adds	r3, #4
 80080fe:	f104 0015 	add.w	r0, r4, #21
 8008102:	4584      	cmp	ip, r0
 8008104:	bf38      	it	cc
 8008106:	2304      	movcc	r3, #4
 8008108:	50ca      	str	r2, [r1, r3]
 800810a:	b10a      	cbz	r2, 8008110 <__lshift+0xa4>
 800810c:	f108 0602 	add.w	r6, r8, #2
 8008110:	3e01      	subs	r6, #1
 8008112:	4638      	mov	r0, r7
 8008114:	4621      	mov	r1, r4
 8008116:	612e      	str	r6, [r5, #16]
 8008118:	f7ff fd90 	bl	8007c3c <_Bfree>
 800811c:	4628      	mov	r0, r5
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	f842 0f04 	str.w	r0, [r2, #4]!
 8008126:	3301      	adds	r3, #1
 8008128:	e7c5      	b.n	80080b6 <__lshift+0x4a>
 800812a:	3904      	subs	r1, #4
 800812c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008130:	459c      	cmp	ip, r3
 8008132:	f841 2f04 	str.w	r2, [r1, #4]!
 8008136:	d8f9      	bhi.n	800812c <__lshift+0xc0>
 8008138:	e7ea      	b.n	8008110 <__lshift+0xa4>
 800813a:	bf00      	nop
 800813c:	0800969f 	.word	0x0800969f
 8008140:	08009727 	.word	0x08009727

08008144 <__mcmp>:
 8008144:	4603      	mov	r3, r0
 8008146:	690a      	ldr	r2, [r1, #16]
 8008148:	6900      	ldr	r0, [r0, #16]
 800814a:	b530      	push	{r4, r5, lr}
 800814c:	1a80      	subs	r0, r0, r2
 800814e:	d10d      	bne.n	800816c <__mcmp+0x28>
 8008150:	3314      	adds	r3, #20
 8008152:	3114      	adds	r1, #20
 8008154:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008158:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800815c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008160:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008164:	4295      	cmp	r5, r2
 8008166:	d002      	beq.n	800816e <__mcmp+0x2a>
 8008168:	d304      	bcc.n	8008174 <__mcmp+0x30>
 800816a:	2001      	movs	r0, #1
 800816c:	bd30      	pop	{r4, r5, pc}
 800816e:	42a3      	cmp	r3, r4
 8008170:	d3f4      	bcc.n	800815c <__mcmp+0x18>
 8008172:	e7fb      	b.n	800816c <__mcmp+0x28>
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	e7f8      	b.n	800816c <__mcmp+0x28>
	...

0800817c <__mdiff>:
 800817c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	460d      	mov	r5, r1
 8008182:	4607      	mov	r7, r0
 8008184:	4611      	mov	r1, r2
 8008186:	4628      	mov	r0, r5
 8008188:	4614      	mov	r4, r2
 800818a:	f7ff ffdb 	bl	8008144 <__mcmp>
 800818e:	1e06      	subs	r6, r0, #0
 8008190:	d111      	bne.n	80081b6 <__mdiff+0x3a>
 8008192:	4631      	mov	r1, r6
 8008194:	4638      	mov	r0, r7
 8008196:	f7ff fd11 	bl	8007bbc <_Balloc>
 800819a:	4602      	mov	r2, r0
 800819c:	b928      	cbnz	r0, 80081aa <__mdiff+0x2e>
 800819e:	f240 2137 	movw	r1, #567	; 0x237
 80081a2:	4b3a      	ldr	r3, [pc, #232]	; (800828c <__mdiff+0x110>)
 80081a4:	483a      	ldr	r0, [pc, #232]	; (8008290 <__mdiff+0x114>)
 80081a6:	f000 fd67 	bl	8008c78 <__assert_func>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80081b0:	4610      	mov	r0, r2
 80081b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	bfa4      	itt	ge
 80081b8:	4623      	movge	r3, r4
 80081ba:	462c      	movge	r4, r5
 80081bc:	4638      	mov	r0, r7
 80081be:	6861      	ldr	r1, [r4, #4]
 80081c0:	bfa6      	itte	ge
 80081c2:	461d      	movge	r5, r3
 80081c4:	2600      	movge	r6, #0
 80081c6:	2601      	movlt	r6, #1
 80081c8:	f7ff fcf8 	bl	8007bbc <_Balloc>
 80081cc:	4602      	mov	r2, r0
 80081ce:	b918      	cbnz	r0, 80081d8 <__mdiff+0x5c>
 80081d0:	f240 2145 	movw	r1, #581	; 0x245
 80081d4:	4b2d      	ldr	r3, [pc, #180]	; (800828c <__mdiff+0x110>)
 80081d6:	e7e5      	b.n	80081a4 <__mdiff+0x28>
 80081d8:	f102 0814 	add.w	r8, r2, #20
 80081dc:	46c2      	mov	sl, r8
 80081de:	f04f 0c00 	mov.w	ip, #0
 80081e2:	6927      	ldr	r7, [r4, #16]
 80081e4:	60c6      	str	r6, [r0, #12]
 80081e6:	692e      	ldr	r6, [r5, #16]
 80081e8:	f104 0014 	add.w	r0, r4, #20
 80081ec:	f105 0914 	add.w	r9, r5, #20
 80081f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80081f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081f8:	3410      	adds	r4, #16
 80081fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80081fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8008202:	fa1f f18b 	uxth.w	r1, fp
 8008206:	4461      	add	r1, ip
 8008208:	fa1f fc83 	uxth.w	ip, r3
 800820c:	0c1b      	lsrs	r3, r3, #16
 800820e:	eba1 010c 	sub.w	r1, r1, ip
 8008212:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008216:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800821a:	b289      	uxth	r1, r1
 800821c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008220:	454e      	cmp	r6, r9
 8008222:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008226:	f84a 1b04 	str.w	r1, [sl], #4
 800822a:	d8e6      	bhi.n	80081fa <__mdiff+0x7e>
 800822c:	1b73      	subs	r3, r6, r5
 800822e:	3b15      	subs	r3, #21
 8008230:	f023 0303 	bic.w	r3, r3, #3
 8008234:	3515      	adds	r5, #21
 8008236:	3304      	adds	r3, #4
 8008238:	42ae      	cmp	r6, r5
 800823a:	bf38      	it	cc
 800823c:	2304      	movcc	r3, #4
 800823e:	4418      	add	r0, r3
 8008240:	4443      	add	r3, r8
 8008242:	461e      	mov	r6, r3
 8008244:	4605      	mov	r5, r0
 8008246:	4575      	cmp	r5, lr
 8008248:	d30e      	bcc.n	8008268 <__mdiff+0xec>
 800824a:	f10e 0103 	add.w	r1, lr, #3
 800824e:	1a09      	subs	r1, r1, r0
 8008250:	f021 0103 	bic.w	r1, r1, #3
 8008254:	3803      	subs	r0, #3
 8008256:	4586      	cmp	lr, r0
 8008258:	bf38      	it	cc
 800825a:	2100      	movcc	r1, #0
 800825c:	440b      	add	r3, r1
 800825e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008262:	b189      	cbz	r1, 8008288 <__mdiff+0x10c>
 8008264:	6117      	str	r7, [r2, #16]
 8008266:	e7a3      	b.n	80081b0 <__mdiff+0x34>
 8008268:	f855 8b04 	ldr.w	r8, [r5], #4
 800826c:	fa1f f188 	uxth.w	r1, r8
 8008270:	4461      	add	r1, ip
 8008272:	140c      	asrs	r4, r1, #16
 8008274:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008278:	b289      	uxth	r1, r1
 800827a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800827e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008282:	f846 1b04 	str.w	r1, [r6], #4
 8008286:	e7de      	b.n	8008246 <__mdiff+0xca>
 8008288:	3f01      	subs	r7, #1
 800828a:	e7e8      	b.n	800825e <__mdiff+0xe2>
 800828c:	0800969f 	.word	0x0800969f
 8008290:	08009727 	.word	0x08009727

08008294 <__ulp>:
 8008294:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <__ulp+0x3c>)
 8008296:	400b      	ands	r3, r1
 8008298:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc08      	bgt.n	80082b2 <__ulp+0x1e>
 80082a0:	425b      	negs	r3, r3
 80082a2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80082a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082aa:	da04      	bge.n	80082b6 <__ulp+0x22>
 80082ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80082b0:	4113      	asrs	r3, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	e008      	b.n	80082c8 <__ulp+0x34>
 80082b6:	f1a2 0314 	sub.w	r3, r2, #20
 80082ba:	2b1e      	cmp	r3, #30
 80082bc:	bfd6      	itet	le
 80082be:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80082c2:	2201      	movgt	r2, #1
 80082c4:	40da      	lsrle	r2, r3
 80082c6:	2300      	movs	r3, #0
 80082c8:	4619      	mov	r1, r3
 80082ca:	4610      	mov	r0, r2
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	7ff00000 	.word	0x7ff00000

080082d4 <__b2d>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	6905      	ldr	r5, [r0, #16]
 80082d8:	f100 0714 	add.w	r7, r0, #20
 80082dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80082e0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80082e4:	1f2e      	subs	r6, r5, #4
 80082e6:	4620      	mov	r0, r4
 80082e8:	f7ff fd5a 	bl	8007da0 <__hi0bits>
 80082ec:	f1c0 0220 	rsb	r2, r0, #32
 80082f0:	280a      	cmp	r0, #10
 80082f2:	4603      	mov	r3, r0
 80082f4:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008360 <__b2d+0x8c>
 80082f8:	600a      	str	r2, [r1, #0]
 80082fa:	dc12      	bgt.n	8008322 <__b2d+0x4e>
 80082fc:	f1c0 0e0b 	rsb	lr, r0, #11
 8008300:	fa24 f20e 	lsr.w	r2, r4, lr
 8008304:	42b7      	cmp	r7, r6
 8008306:	ea42 010c 	orr.w	r1, r2, ip
 800830a:	bf2c      	ite	cs
 800830c:	2200      	movcs	r2, #0
 800830e:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008312:	3315      	adds	r3, #21
 8008314:	fa04 f303 	lsl.w	r3, r4, r3
 8008318:	fa22 f20e 	lsr.w	r2, r2, lr
 800831c:	431a      	orrs	r2, r3
 800831e:	4610      	mov	r0, r2
 8008320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008322:	42b7      	cmp	r7, r6
 8008324:	bf2e      	itee	cs
 8008326:	2200      	movcs	r2, #0
 8008328:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800832c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008330:	3b0b      	subs	r3, #11
 8008332:	d012      	beq.n	800835a <__b2d+0x86>
 8008334:	f1c3 0520 	rsb	r5, r3, #32
 8008338:	fa22 f105 	lsr.w	r1, r2, r5
 800833c:	409c      	lsls	r4, r3
 800833e:	430c      	orrs	r4, r1
 8008340:	42be      	cmp	r6, r7
 8008342:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8008346:	bf94      	ite	ls
 8008348:	2400      	movls	r4, #0
 800834a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800834e:	409a      	lsls	r2, r3
 8008350:	40ec      	lsrs	r4, r5
 8008352:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008356:	4322      	orrs	r2, r4
 8008358:	e7e1      	b.n	800831e <__b2d+0x4a>
 800835a:	ea44 010c 	orr.w	r1, r4, ip
 800835e:	e7de      	b.n	800831e <__b2d+0x4a>
 8008360:	3ff00000 	.word	0x3ff00000

08008364 <__d2b>:
 8008364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008366:	2101      	movs	r1, #1
 8008368:	4617      	mov	r7, r2
 800836a:	461c      	mov	r4, r3
 800836c:	9e08      	ldr	r6, [sp, #32]
 800836e:	f7ff fc25 	bl	8007bbc <_Balloc>
 8008372:	4605      	mov	r5, r0
 8008374:	b930      	cbnz	r0, 8008384 <__d2b+0x20>
 8008376:	4602      	mov	r2, r0
 8008378:	f240 310f 	movw	r1, #783	; 0x30f
 800837c:	4b22      	ldr	r3, [pc, #136]	; (8008408 <__d2b+0xa4>)
 800837e:	4823      	ldr	r0, [pc, #140]	; (800840c <__d2b+0xa8>)
 8008380:	f000 fc7a 	bl	8008c78 <__assert_func>
 8008384:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008388:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800838c:	bb24      	cbnz	r4, 80083d8 <__d2b+0x74>
 800838e:	2f00      	cmp	r7, #0
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	d026      	beq.n	80083e2 <__d2b+0x7e>
 8008394:	4668      	mov	r0, sp
 8008396:	9700      	str	r7, [sp, #0]
 8008398:	f7ff fd22 	bl	8007de0 <__lo0bits>
 800839c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083a0:	b1e8      	cbz	r0, 80083de <__d2b+0x7a>
 80083a2:	f1c0 0320 	rsb	r3, r0, #32
 80083a6:	fa02 f303 	lsl.w	r3, r2, r3
 80083aa:	430b      	orrs	r3, r1
 80083ac:	40c2      	lsrs	r2, r0
 80083ae:	616b      	str	r3, [r5, #20]
 80083b0:	9201      	str	r2, [sp, #4]
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	bf14      	ite	ne
 80083b8:	2102      	movne	r1, #2
 80083ba:	2101      	moveq	r1, #1
 80083bc:	61ab      	str	r3, [r5, #24]
 80083be:	6129      	str	r1, [r5, #16]
 80083c0:	b1bc      	cbz	r4, 80083f2 <__d2b+0x8e>
 80083c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80083c6:	4404      	add	r4, r0
 80083c8:	6034      	str	r4, [r6, #0]
 80083ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d0:	6018      	str	r0, [r3, #0]
 80083d2:	4628      	mov	r0, r5
 80083d4:	b003      	add	sp, #12
 80083d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083dc:	e7d7      	b.n	800838e <__d2b+0x2a>
 80083de:	6169      	str	r1, [r5, #20]
 80083e0:	e7e7      	b.n	80083b2 <__d2b+0x4e>
 80083e2:	a801      	add	r0, sp, #4
 80083e4:	f7ff fcfc 	bl	8007de0 <__lo0bits>
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	2101      	movs	r1, #1
 80083ec:	616b      	str	r3, [r5, #20]
 80083ee:	3020      	adds	r0, #32
 80083f0:	e7e5      	b.n	80083be <__d2b+0x5a>
 80083f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083f6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80083fa:	6030      	str	r0, [r6, #0]
 80083fc:	6918      	ldr	r0, [r3, #16]
 80083fe:	f7ff fccf 	bl	8007da0 <__hi0bits>
 8008402:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008406:	e7e2      	b.n	80083ce <__d2b+0x6a>
 8008408:	0800969f 	.word	0x0800969f
 800840c:	08009727 	.word	0x08009727

08008410 <__ratio>:
 8008410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	4688      	mov	r8, r1
 8008416:	4669      	mov	r1, sp
 8008418:	4681      	mov	r9, r0
 800841a:	f7ff ff5b 	bl	80082d4 <__b2d>
 800841e:	460f      	mov	r7, r1
 8008420:	4604      	mov	r4, r0
 8008422:	460d      	mov	r5, r1
 8008424:	4640      	mov	r0, r8
 8008426:	a901      	add	r1, sp, #4
 8008428:	f7ff ff54 	bl	80082d4 <__b2d>
 800842c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008430:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008434:	468b      	mov	fp, r1
 8008436:	eba3 0c02 	sub.w	ip, r3, r2
 800843a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800843e:	1a9b      	subs	r3, r3, r2
 8008440:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008444:	2b00      	cmp	r3, #0
 8008446:	bfd5      	itete	le
 8008448:	460a      	movle	r2, r1
 800844a:	462a      	movgt	r2, r5
 800844c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008450:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008454:	bfd8      	it	le
 8008456:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800845a:	465b      	mov	r3, fp
 800845c:	4602      	mov	r2, r0
 800845e:	4639      	mov	r1, r7
 8008460:	4620      	mov	r0, r4
 8008462:	f7f8 f965 	bl	8000730 <__aeabi_ddiv>
 8008466:	b003      	add	sp, #12
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800846c <__copybits>:
 800846c:	3901      	subs	r1, #1
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	1149      	asrs	r1, r1, #5
 8008472:	6914      	ldr	r4, [r2, #16]
 8008474:	3101      	adds	r1, #1
 8008476:	f102 0314 	add.w	r3, r2, #20
 800847a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800847e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008482:	1f05      	subs	r5, r0, #4
 8008484:	42a3      	cmp	r3, r4
 8008486:	d30c      	bcc.n	80084a2 <__copybits+0x36>
 8008488:	1aa3      	subs	r3, r4, r2
 800848a:	3b11      	subs	r3, #17
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	3211      	adds	r2, #17
 8008492:	42a2      	cmp	r2, r4
 8008494:	bf88      	it	hi
 8008496:	2300      	movhi	r3, #0
 8008498:	4418      	add	r0, r3
 800849a:	2300      	movs	r3, #0
 800849c:	4288      	cmp	r0, r1
 800849e:	d305      	bcc.n	80084ac <__copybits+0x40>
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80084a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80084aa:	e7eb      	b.n	8008484 <__copybits+0x18>
 80084ac:	f840 3b04 	str.w	r3, [r0], #4
 80084b0:	e7f4      	b.n	800849c <__copybits+0x30>

080084b2 <__any_on>:
 80084b2:	f100 0214 	add.w	r2, r0, #20
 80084b6:	6900      	ldr	r0, [r0, #16]
 80084b8:	114b      	asrs	r3, r1, #5
 80084ba:	4298      	cmp	r0, r3
 80084bc:	b510      	push	{r4, lr}
 80084be:	db11      	blt.n	80084e4 <__any_on+0x32>
 80084c0:	dd0a      	ble.n	80084d8 <__any_on+0x26>
 80084c2:	f011 011f 	ands.w	r1, r1, #31
 80084c6:	d007      	beq.n	80084d8 <__any_on+0x26>
 80084c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084cc:	fa24 f001 	lsr.w	r0, r4, r1
 80084d0:	fa00 f101 	lsl.w	r1, r0, r1
 80084d4:	428c      	cmp	r4, r1
 80084d6:	d10b      	bne.n	80084f0 <__any_on+0x3e>
 80084d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084dc:	4293      	cmp	r3, r2
 80084de:	d803      	bhi.n	80084e8 <__any_on+0x36>
 80084e0:	2000      	movs	r0, #0
 80084e2:	bd10      	pop	{r4, pc}
 80084e4:	4603      	mov	r3, r0
 80084e6:	e7f7      	b.n	80084d8 <__any_on+0x26>
 80084e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d0f5      	beq.n	80084dc <__any_on+0x2a>
 80084f0:	2001      	movs	r0, #1
 80084f2:	e7f6      	b.n	80084e2 <__any_on+0x30>

080084f4 <__ascii_wctomb>:
 80084f4:	4603      	mov	r3, r0
 80084f6:	4608      	mov	r0, r1
 80084f8:	b141      	cbz	r1, 800850c <__ascii_wctomb+0x18>
 80084fa:	2aff      	cmp	r2, #255	; 0xff
 80084fc:	d904      	bls.n	8008508 <__ascii_wctomb+0x14>
 80084fe:	228a      	movs	r2, #138	; 0x8a
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	4770      	bx	lr
 8008508:	2001      	movs	r0, #1
 800850a:	700a      	strb	r2, [r1, #0]
 800850c:	4770      	bx	lr

0800850e <__ssputs_r>:
 800850e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008512:	461f      	mov	r7, r3
 8008514:	688e      	ldr	r6, [r1, #8]
 8008516:	4682      	mov	sl, r0
 8008518:	42be      	cmp	r6, r7
 800851a:	460c      	mov	r4, r1
 800851c:	4690      	mov	r8, r2
 800851e:	680b      	ldr	r3, [r1, #0]
 8008520:	d82c      	bhi.n	800857c <__ssputs_r+0x6e>
 8008522:	898a      	ldrh	r2, [r1, #12]
 8008524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008528:	d026      	beq.n	8008578 <__ssputs_r+0x6a>
 800852a:	6965      	ldr	r5, [r4, #20]
 800852c:	6909      	ldr	r1, [r1, #16]
 800852e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008532:	eba3 0901 	sub.w	r9, r3, r1
 8008536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800853a:	1c7b      	adds	r3, r7, #1
 800853c:	444b      	add	r3, r9
 800853e:	106d      	asrs	r5, r5, #1
 8008540:	429d      	cmp	r5, r3
 8008542:	bf38      	it	cc
 8008544:	461d      	movcc	r5, r3
 8008546:	0553      	lsls	r3, r2, #21
 8008548:	d527      	bpl.n	800859a <__ssputs_r+0x8c>
 800854a:	4629      	mov	r1, r5
 800854c:	f7ff fa98 	bl	8007a80 <_malloc_r>
 8008550:	4606      	mov	r6, r0
 8008552:	b360      	cbz	r0, 80085ae <__ssputs_r+0xa0>
 8008554:	464a      	mov	r2, r9
 8008556:	6921      	ldr	r1, [r4, #16]
 8008558:	f7fe feb8 	bl	80072cc <memcpy>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	6126      	str	r6, [r4, #16]
 800856a:	444e      	add	r6, r9
 800856c:	6026      	str	r6, [r4, #0]
 800856e:	463e      	mov	r6, r7
 8008570:	6165      	str	r5, [r4, #20]
 8008572:	eba5 0509 	sub.w	r5, r5, r9
 8008576:	60a5      	str	r5, [r4, #8]
 8008578:	42be      	cmp	r6, r7
 800857a:	d900      	bls.n	800857e <__ssputs_r+0x70>
 800857c:	463e      	mov	r6, r7
 800857e:	4632      	mov	r2, r6
 8008580:	4641      	mov	r1, r8
 8008582:	6820      	ldr	r0, [r4, #0]
 8008584:	f7fe fdc8 	bl	8007118 <memmove>
 8008588:	2000      	movs	r0, #0
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	1b9b      	subs	r3, r3, r6
 800858e:	60a3      	str	r3, [r4, #8]
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	4433      	add	r3, r6
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859a:	462a      	mov	r2, r5
 800859c:	f000 fba6 	bl	8008cec <_realloc_r>
 80085a0:	4606      	mov	r6, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1e0      	bne.n	8008568 <__ssputs_r+0x5a>
 80085a6:	4650      	mov	r0, sl
 80085a8:	6921      	ldr	r1, [r4, #16]
 80085aa:	f7fe fea7 	bl	80072fc <_free_r>
 80085ae:	230c      	movs	r3, #12
 80085b0:	f8ca 3000 	str.w	r3, [sl]
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	e7e9      	b.n	8008596 <__ssputs_r+0x88>
	...

080085c4 <_svfiprintf_r>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	4698      	mov	r8, r3
 80085ca:	898b      	ldrh	r3, [r1, #12]
 80085cc:	4607      	mov	r7, r0
 80085ce:	061b      	lsls	r3, r3, #24
 80085d0:	460d      	mov	r5, r1
 80085d2:	4614      	mov	r4, r2
 80085d4:	b09d      	sub	sp, #116	; 0x74
 80085d6:	d50e      	bpl.n	80085f6 <_svfiprintf_r+0x32>
 80085d8:	690b      	ldr	r3, [r1, #16]
 80085da:	b963      	cbnz	r3, 80085f6 <_svfiprintf_r+0x32>
 80085dc:	2140      	movs	r1, #64	; 0x40
 80085de:	f7ff fa4f 	bl	8007a80 <_malloc_r>
 80085e2:	6028      	str	r0, [r5, #0]
 80085e4:	6128      	str	r0, [r5, #16]
 80085e6:	b920      	cbnz	r0, 80085f2 <_svfiprintf_r+0x2e>
 80085e8:	230c      	movs	r3, #12
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	e0d0      	b.n	8008794 <_svfiprintf_r+0x1d0>
 80085f2:	2340      	movs	r3, #64	; 0x40
 80085f4:	616b      	str	r3, [r5, #20]
 80085f6:	2300      	movs	r3, #0
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	2320      	movs	r3, #32
 80085fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008600:	2330      	movs	r3, #48	; 0x30
 8008602:	f04f 0901 	mov.w	r9, #1
 8008606:	f8cd 800c 	str.w	r8, [sp, #12]
 800860a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80087ac <_svfiprintf_r+0x1e8>
 800860e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008612:	4623      	mov	r3, r4
 8008614:	469a      	mov	sl, r3
 8008616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800861a:	b10a      	cbz	r2, 8008620 <_svfiprintf_r+0x5c>
 800861c:	2a25      	cmp	r2, #37	; 0x25
 800861e:	d1f9      	bne.n	8008614 <_svfiprintf_r+0x50>
 8008620:	ebba 0b04 	subs.w	fp, sl, r4
 8008624:	d00b      	beq.n	800863e <_svfiprintf_r+0x7a>
 8008626:	465b      	mov	r3, fp
 8008628:	4622      	mov	r2, r4
 800862a:	4629      	mov	r1, r5
 800862c:	4638      	mov	r0, r7
 800862e:	f7ff ff6e 	bl	800850e <__ssputs_r>
 8008632:	3001      	adds	r0, #1
 8008634:	f000 80a9 	beq.w	800878a <_svfiprintf_r+0x1c6>
 8008638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800863a:	445a      	add	r2, fp
 800863c:	9209      	str	r2, [sp, #36]	; 0x24
 800863e:	f89a 3000 	ldrb.w	r3, [sl]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80a1 	beq.w	800878a <_svfiprintf_r+0x1c6>
 8008648:	2300      	movs	r3, #0
 800864a:	f04f 32ff 	mov.w	r2, #4294967295
 800864e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008652:	f10a 0a01 	add.w	sl, sl, #1
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	9307      	str	r3, [sp, #28]
 800865a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800865e:	931a      	str	r3, [sp, #104]	; 0x68
 8008660:	4654      	mov	r4, sl
 8008662:	2205      	movs	r2, #5
 8008664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008668:	4850      	ldr	r0, [pc, #320]	; (80087ac <_svfiprintf_r+0x1e8>)
 800866a:	f000 faf7 	bl	8008c5c <memchr>
 800866e:	9a04      	ldr	r2, [sp, #16]
 8008670:	b9d8      	cbnz	r0, 80086aa <_svfiprintf_r+0xe6>
 8008672:	06d0      	lsls	r0, r2, #27
 8008674:	bf44      	itt	mi
 8008676:	2320      	movmi	r3, #32
 8008678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800867c:	0711      	lsls	r1, r2, #28
 800867e:	bf44      	itt	mi
 8008680:	232b      	movmi	r3, #43	; 0x2b
 8008682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008686:	f89a 3000 	ldrb.w	r3, [sl]
 800868a:	2b2a      	cmp	r3, #42	; 0x2a
 800868c:	d015      	beq.n	80086ba <_svfiprintf_r+0xf6>
 800868e:	4654      	mov	r4, sl
 8008690:	2000      	movs	r0, #0
 8008692:	f04f 0c0a 	mov.w	ip, #10
 8008696:	9a07      	ldr	r2, [sp, #28]
 8008698:	4621      	mov	r1, r4
 800869a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800869e:	3b30      	subs	r3, #48	; 0x30
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	d94d      	bls.n	8008740 <_svfiprintf_r+0x17c>
 80086a4:	b1b0      	cbz	r0, 80086d4 <_svfiprintf_r+0x110>
 80086a6:	9207      	str	r2, [sp, #28]
 80086a8:	e014      	b.n	80086d4 <_svfiprintf_r+0x110>
 80086aa:	eba0 0308 	sub.w	r3, r0, r8
 80086ae:	fa09 f303 	lsl.w	r3, r9, r3
 80086b2:	4313      	orrs	r3, r2
 80086b4:	46a2      	mov	sl, r4
 80086b6:	9304      	str	r3, [sp, #16]
 80086b8:	e7d2      	b.n	8008660 <_svfiprintf_r+0x9c>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	1d19      	adds	r1, r3, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	9103      	str	r1, [sp, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bfbb      	ittet	lt
 80086c6:	425b      	neglt	r3, r3
 80086c8:	f042 0202 	orrlt.w	r2, r2, #2
 80086cc:	9307      	strge	r3, [sp, #28]
 80086ce:	9307      	strlt	r3, [sp, #28]
 80086d0:	bfb8      	it	lt
 80086d2:	9204      	strlt	r2, [sp, #16]
 80086d4:	7823      	ldrb	r3, [r4, #0]
 80086d6:	2b2e      	cmp	r3, #46	; 0x2e
 80086d8:	d10c      	bne.n	80086f4 <_svfiprintf_r+0x130>
 80086da:	7863      	ldrb	r3, [r4, #1]
 80086dc:	2b2a      	cmp	r3, #42	; 0x2a
 80086de:	d134      	bne.n	800874a <_svfiprintf_r+0x186>
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	3402      	adds	r4, #2
 80086e4:	1d1a      	adds	r2, r3, #4
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	9203      	str	r2, [sp, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	bfb8      	it	lt
 80086ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80087b0 <_svfiprintf_r+0x1ec>
 80086f8:	2203      	movs	r2, #3
 80086fa:	4650      	mov	r0, sl
 80086fc:	7821      	ldrb	r1, [r4, #0]
 80086fe:	f000 faad 	bl	8008c5c <memchr>
 8008702:	b138      	cbz	r0, 8008714 <_svfiprintf_r+0x150>
 8008704:	2240      	movs	r2, #64	; 0x40
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	eba0 000a 	sub.w	r0, r0, sl
 800870c:	4082      	lsls	r2, r0
 800870e:	4313      	orrs	r3, r2
 8008710:	3401      	adds	r4, #1
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	2206      	movs	r2, #6
 800871a:	4826      	ldr	r0, [pc, #152]	; (80087b4 <_svfiprintf_r+0x1f0>)
 800871c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008720:	f000 fa9c 	bl	8008c5c <memchr>
 8008724:	2800      	cmp	r0, #0
 8008726:	d038      	beq.n	800879a <_svfiprintf_r+0x1d6>
 8008728:	4b23      	ldr	r3, [pc, #140]	; (80087b8 <_svfiprintf_r+0x1f4>)
 800872a:	bb1b      	cbnz	r3, 8008774 <_svfiprintf_r+0x1b0>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	3307      	adds	r3, #7
 8008730:	f023 0307 	bic.w	r3, r3, #7
 8008734:	3308      	adds	r3, #8
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873a:	4433      	add	r3, r6
 800873c:	9309      	str	r3, [sp, #36]	; 0x24
 800873e:	e768      	b.n	8008612 <_svfiprintf_r+0x4e>
 8008740:	460c      	mov	r4, r1
 8008742:	2001      	movs	r0, #1
 8008744:	fb0c 3202 	mla	r2, ip, r2, r3
 8008748:	e7a6      	b.n	8008698 <_svfiprintf_r+0xd4>
 800874a:	2300      	movs	r3, #0
 800874c:	f04f 0c0a 	mov.w	ip, #10
 8008750:	4619      	mov	r1, r3
 8008752:	3401      	adds	r4, #1
 8008754:	9305      	str	r3, [sp, #20]
 8008756:	4620      	mov	r0, r4
 8008758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875c:	3a30      	subs	r2, #48	; 0x30
 800875e:	2a09      	cmp	r2, #9
 8008760:	d903      	bls.n	800876a <_svfiprintf_r+0x1a6>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0c6      	beq.n	80086f4 <_svfiprintf_r+0x130>
 8008766:	9105      	str	r1, [sp, #20]
 8008768:	e7c4      	b.n	80086f4 <_svfiprintf_r+0x130>
 800876a:	4604      	mov	r4, r0
 800876c:	2301      	movs	r3, #1
 800876e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008772:	e7f0      	b.n	8008756 <_svfiprintf_r+0x192>
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	462a      	mov	r2, r5
 800877a:	4638      	mov	r0, r7
 800877c:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <_svfiprintf_r+0x1f8>)
 800877e:	a904      	add	r1, sp, #16
 8008780:	f3af 8000 	nop.w
 8008784:	1c42      	adds	r2, r0, #1
 8008786:	4606      	mov	r6, r0
 8008788:	d1d6      	bne.n	8008738 <_svfiprintf_r+0x174>
 800878a:	89ab      	ldrh	r3, [r5, #12]
 800878c:	065b      	lsls	r3, r3, #25
 800878e:	f53f af2d 	bmi.w	80085ec <_svfiprintf_r+0x28>
 8008792:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008794:	b01d      	add	sp, #116	; 0x74
 8008796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879a:	ab03      	add	r3, sp, #12
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	462a      	mov	r2, r5
 80087a0:	4638      	mov	r0, r7
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <_svfiprintf_r+0x1f8>)
 80087a4:	a904      	add	r1, sp, #16
 80087a6:	f000 f87d 	bl	80088a4 <_printf_i>
 80087aa:	e7eb      	b.n	8008784 <_svfiprintf_r+0x1c0>
 80087ac:	0800987c 	.word	0x0800987c
 80087b0:	08009882 	.word	0x08009882
 80087b4:	08009886 	.word	0x08009886
 80087b8:	00000000 	.word	0x00000000
 80087bc:	0800850f 	.word	0x0800850f

080087c0 <_printf_common>:
 80087c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c4:	4616      	mov	r6, r2
 80087c6:	4699      	mov	r9, r3
 80087c8:	688a      	ldr	r2, [r1, #8]
 80087ca:	690b      	ldr	r3, [r1, #16]
 80087cc:	4607      	mov	r7, r0
 80087ce:	4293      	cmp	r3, r2
 80087d0:	bfb8      	it	lt
 80087d2:	4613      	movlt	r3, r2
 80087d4:	6033      	str	r3, [r6, #0]
 80087d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087da:	460c      	mov	r4, r1
 80087dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087e0:	b10a      	cbz	r2, 80087e6 <_printf_common+0x26>
 80087e2:	3301      	adds	r3, #1
 80087e4:	6033      	str	r3, [r6, #0]
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	0699      	lsls	r1, r3, #26
 80087ea:	bf42      	ittt	mi
 80087ec:	6833      	ldrmi	r3, [r6, #0]
 80087ee:	3302      	addmi	r3, #2
 80087f0:	6033      	strmi	r3, [r6, #0]
 80087f2:	6825      	ldr	r5, [r4, #0]
 80087f4:	f015 0506 	ands.w	r5, r5, #6
 80087f8:	d106      	bne.n	8008808 <_printf_common+0x48>
 80087fa:	f104 0a19 	add.w	sl, r4, #25
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	6832      	ldr	r2, [r6, #0]
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	42ab      	cmp	r3, r5
 8008806:	dc2b      	bgt.n	8008860 <_printf_common+0xa0>
 8008808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800880c:	1e13      	subs	r3, r2, #0
 800880e:	6822      	ldr	r2, [r4, #0]
 8008810:	bf18      	it	ne
 8008812:	2301      	movne	r3, #1
 8008814:	0692      	lsls	r2, r2, #26
 8008816:	d430      	bmi.n	800887a <_printf_common+0xba>
 8008818:	4649      	mov	r1, r9
 800881a:	4638      	mov	r0, r7
 800881c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008820:	47c0      	blx	r8
 8008822:	3001      	adds	r0, #1
 8008824:	d023      	beq.n	800886e <_printf_common+0xae>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	6922      	ldr	r2, [r4, #16]
 800882a:	f003 0306 	and.w	r3, r3, #6
 800882e:	2b04      	cmp	r3, #4
 8008830:	bf14      	ite	ne
 8008832:	2500      	movne	r5, #0
 8008834:	6833      	ldreq	r3, [r6, #0]
 8008836:	f04f 0600 	mov.w	r6, #0
 800883a:	bf08      	it	eq
 800883c:	68e5      	ldreq	r5, [r4, #12]
 800883e:	f104 041a 	add.w	r4, r4, #26
 8008842:	bf08      	it	eq
 8008844:	1aed      	subeq	r5, r5, r3
 8008846:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800884a:	bf08      	it	eq
 800884c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008850:	4293      	cmp	r3, r2
 8008852:	bfc4      	itt	gt
 8008854:	1a9b      	subgt	r3, r3, r2
 8008856:	18ed      	addgt	r5, r5, r3
 8008858:	42b5      	cmp	r5, r6
 800885a:	d11a      	bne.n	8008892 <_printf_common+0xd2>
 800885c:	2000      	movs	r0, #0
 800885e:	e008      	b.n	8008872 <_printf_common+0xb2>
 8008860:	2301      	movs	r3, #1
 8008862:	4652      	mov	r2, sl
 8008864:	4649      	mov	r1, r9
 8008866:	4638      	mov	r0, r7
 8008868:	47c0      	blx	r8
 800886a:	3001      	adds	r0, #1
 800886c:	d103      	bne.n	8008876 <_printf_common+0xb6>
 800886e:	f04f 30ff 	mov.w	r0, #4294967295
 8008872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008876:	3501      	adds	r5, #1
 8008878:	e7c1      	b.n	80087fe <_printf_common+0x3e>
 800887a:	2030      	movs	r0, #48	; 0x30
 800887c:	18e1      	adds	r1, r4, r3
 800887e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008888:	4422      	add	r2, r4
 800888a:	3302      	adds	r3, #2
 800888c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008890:	e7c2      	b.n	8008818 <_printf_common+0x58>
 8008892:	2301      	movs	r3, #1
 8008894:	4622      	mov	r2, r4
 8008896:	4649      	mov	r1, r9
 8008898:	4638      	mov	r0, r7
 800889a:	47c0      	blx	r8
 800889c:	3001      	adds	r0, #1
 800889e:	d0e6      	beq.n	800886e <_printf_common+0xae>
 80088a0:	3601      	adds	r6, #1
 80088a2:	e7d9      	b.n	8008858 <_printf_common+0x98>

080088a4 <_printf_i>:
 80088a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	7e0f      	ldrb	r7, [r1, #24]
 80088aa:	4691      	mov	r9, r2
 80088ac:	2f78      	cmp	r7, #120	; 0x78
 80088ae:	4680      	mov	r8, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	469a      	mov	sl, r3
 80088b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088ba:	d807      	bhi.n	80088cc <_printf_i+0x28>
 80088bc:	2f62      	cmp	r7, #98	; 0x62
 80088be:	d80a      	bhi.n	80088d6 <_printf_i+0x32>
 80088c0:	2f00      	cmp	r7, #0
 80088c2:	f000 80d5 	beq.w	8008a70 <_printf_i+0x1cc>
 80088c6:	2f58      	cmp	r7, #88	; 0x58
 80088c8:	f000 80c1 	beq.w	8008a4e <_printf_i+0x1aa>
 80088cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088d4:	e03a      	b.n	800894c <_printf_i+0xa8>
 80088d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088da:	2b15      	cmp	r3, #21
 80088dc:	d8f6      	bhi.n	80088cc <_printf_i+0x28>
 80088de:	a101      	add	r1, pc, #4	; (adr r1, 80088e4 <_printf_i+0x40>)
 80088e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088e4:	0800893d 	.word	0x0800893d
 80088e8:	08008951 	.word	0x08008951
 80088ec:	080088cd 	.word	0x080088cd
 80088f0:	080088cd 	.word	0x080088cd
 80088f4:	080088cd 	.word	0x080088cd
 80088f8:	080088cd 	.word	0x080088cd
 80088fc:	08008951 	.word	0x08008951
 8008900:	080088cd 	.word	0x080088cd
 8008904:	080088cd 	.word	0x080088cd
 8008908:	080088cd 	.word	0x080088cd
 800890c:	080088cd 	.word	0x080088cd
 8008910:	08008a57 	.word	0x08008a57
 8008914:	0800897d 	.word	0x0800897d
 8008918:	08008a11 	.word	0x08008a11
 800891c:	080088cd 	.word	0x080088cd
 8008920:	080088cd 	.word	0x080088cd
 8008924:	08008a79 	.word	0x08008a79
 8008928:	080088cd 	.word	0x080088cd
 800892c:	0800897d 	.word	0x0800897d
 8008930:	080088cd 	.word	0x080088cd
 8008934:	080088cd 	.word	0x080088cd
 8008938:	08008a19 	.word	0x08008a19
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	1d1a      	adds	r2, r3, #4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	602a      	str	r2, [r5, #0]
 8008944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800894c:	2301      	movs	r3, #1
 800894e:	e0a0      	b.n	8008a92 <_printf_i+0x1ee>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	682b      	ldr	r3, [r5, #0]
 8008954:	0607      	lsls	r7, r0, #24
 8008956:	f103 0104 	add.w	r1, r3, #4
 800895a:	6029      	str	r1, [r5, #0]
 800895c:	d501      	bpl.n	8008962 <_printf_i+0xbe>
 800895e:	681e      	ldr	r6, [r3, #0]
 8008960:	e003      	b.n	800896a <_printf_i+0xc6>
 8008962:	0646      	lsls	r6, r0, #25
 8008964:	d5fb      	bpl.n	800895e <_printf_i+0xba>
 8008966:	f9b3 6000 	ldrsh.w	r6, [r3]
 800896a:	2e00      	cmp	r6, #0
 800896c:	da03      	bge.n	8008976 <_printf_i+0xd2>
 800896e:	232d      	movs	r3, #45	; 0x2d
 8008970:	4276      	negs	r6, r6
 8008972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008976:	230a      	movs	r3, #10
 8008978:	4859      	ldr	r0, [pc, #356]	; (8008ae0 <_printf_i+0x23c>)
 800897a:	e012      	b.n	80089a2 <_printf_i+0xfe>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	6820      	ldr	r0, [r4, #0]
 8008980:	1d19      	adds	r1, r3, #4
 8008982:	6029      	str	r1, [r5, #0]
 8008984:	0605      	lsls	r5, r0, #24
 8008986:	d501      	bpl.n	800898c <_printf_i+0xe8>
 8008988:	681e      	ldr	r6, [r3, #0]
 800898a:	e002      	b.n	8008992 <_printf_i+0xee>
 800898c:	0641      	lsls	r1, r0, #25
 800898e:	d5fb      	bpl.n	8008988 <_printf_i+0xe4>
 8008990:	881e      	ldrh	r6, [r3, #0]
 8008992:	2f6f      	cmp	r7, #111	; 0x6f
 8008994:	bf0c      	ite	eq
 8008996:	2308      	moveq	r3, #8
 8008998:	230a      	movne	r3, #10
 800899a:	4851      	ldr	r0, [pc, #324]	; (8008ae0 <_printf_i+0x23c>)
 800899c:	2100      	movs	r1, #0
 800899e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089a2:	6865      	ldr	r5, [r4, #4]
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	bfa8      	it	ge
 80089a8:	6821      	ldrge	r1, [r4, #0]
 80089aa:	60a5      	str	r5, [r4, #8]
 80089ac:	bfa4      	itt	ge
 80089ae:	f021 0104 	bicge.w	r1, r1, #4
 80089b2:	6021      	strge	r1, [r4, #0]
 80089b4:	b90e      	cbnz	r6, 80089ba <_printf_i+0x116>
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	d04b      	beq.n	8008a52 <_printf_i+0x1ae>
 80089ba:	4615      	mov	r5, r2
 80089bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80089c0:	fb03 6711 	mls	r7, r3, r1, r6
 80089c4:	5dc7      	ldrb	r7, [r0, r7]
 80089c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089ca:	4637      	mov	r7, r6
 80089cc:	42bb      	cmp	r3, r7
 80089ce:	460e      	mov	r6, r1
 80089d0:	d9f4      	bls.n	80089bc <_printf_i+0x118>
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d10b      	bne.n	80089ee <_printf_i+0x14a>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	07de      	lsls	r6, r3, #31
 80089da:	d508      	bpl.n	80089ee <_printf_i+0x14a>
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	6861      	ldr	r1, [r4, #4]
 80089e0:	4299      	cmp	r1, r3
 80089e2:	bfde      	ittt	le
 80089e4:	2330      	movle	r3, #48	; 0x30
 80089e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089ee:	1b52      	subs	r2, r2, r5
 80089f0:	6122      	str	r2, [r4, #16]
 80089f2:	464b      	mov	r3, r9
 80089f4:	4621      	mov	r1, r4
 80089f6:	4640      	mov	r0, r8
 80089f8:	f8cd a000 	str.w	sl, [sp]
 80089fc:	aa03      	add	r2, sp, #12
 80089fe:	f7ff fedf 	bl	80087c0 <_printf_common>
 8008a02:	3001      	adds	r0, #1
 8008a04:	d14a      	bne.n	8008a9c <_printf_i+0x1f8>
 8008a06:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0a:	b004      	add	sp, #16
 8008a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	f043 0320 	orr.w	r3, r3, #32
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	2778      	movs	r7, #120	; 0x78
 8008a1a:	4832      	ldr	r0, [pc, #200]	; (8008ae4 <_printf_i+0x240>)
 8008a1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	6829      	ldr	r1, [r5, #0]
 8008a24:	061f      	lsls	r7, r3, #24
 8008a26:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a2a:	d402      	bmi.n	8008a32 <_printf_i+0x18e>
 8008a2c:	065f      	lsls	r7, r3, #25
 8008a2e:	bf48      	it	mi
 8008a30:	b2b6      	uxthmi	r6, r6
 8008a32:	07df      	lsls	r7, r3, #31
 8008a34:	bf48      	it	mi
 8008a36:	f043 0320 	orrmi.w	r3, r3, #32
 8008a3a:	6029      	str	r1, [r5, #0]
 8008a3c:	bf48      	it	mi
 8008a3e:	6023      	strmi	r3, [r4, #0]
 8008a40:	b91e      	cbnz	r6, 8008a4a <_printf_i+0x1a6>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	f023 0320 	bic.w	r3, r3, #32
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	e7a6      	b.n	800899c <_printf_i+0xf8>
 8008a4e:	4824      	ldr	r0, [pc, #144]	; (8008ae0 <_printf_i+0x23c>)
 8008a50:	e7e4      	b.n	8008a1c <_printf_i+0x178>
 8008a52:	4615      	mov	r5, r2
 8008a54:	e7bd      	b.n	80089d2 <_printf_i+0x12e>
 8008a56:	682b      	ldr	r3, [r5, #0]
 8008a58:	6826      	ldr	r6, [r4, #0]
 8008a5a:	1d18      	adds	r0, r3, #4
 8008a5c:	6961      	ldr	r1, [r4, #20]
 8008a5e:	6028      	str	r0, [r5, #0]
 8008a60:	0635      	lsls	r5, r6, #24
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	d501      	bpl.n	8008a6a <_printf_i+0x1c6>
 8008a66:	6019      	str	r1, [r3, #0]
 8008a68:	e002      	b.n	8008a70 <_printf_i+0x1cc>
 8008a6a:	0670      	lsls	r0, r6, #25
 8008a6c:	d5fb      	bpl.n	8008a66 <_printf_i+0x1c2>
 8008a6e:	8019      	strh	r1, [r3, #0]
 8008a70:	2300      	movs	r3, #0
 8008a72:	4615      	mov	r5, r2
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	e7bc      	b.n	80089f2 <_printf_i+0x14e>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	1d1a      	adds	r2, r3, #4
 8008a7e:	602a      	str	r2, [r5, #0]
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	6862      	ldr	r2, [r4, #4]
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 f8e9 	bl	8008c5c <memchr>
 8008a8a:	b108      	cbz	r0, 8008a90 <_printf_i+0x1ec>
 8008a8c:	1b40      	subs	r0, r0, r5
 8008a8e:	6060      	str	r0, [r4, #4]
 8008a90:	6863      	ldr	r3, [r4, #4]
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	2300      	movs	r3, #0
 8008a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9a:	e7aa      	b.n	80089f2 <_printf_i+0x14e>
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	6923      	ldr	r3, [r4, #16]
 8008aa4:	47d0      	blx	sl
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d0ad      	beq.n	8008a06 <_printf_i+0x162>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	079b      	lsls	r3, r3, #30
 8008aae:	d413      	bmi.n	8008ad8 <_printf_i+0x234>
 8008ab0:	68e0      	ldr	r0, [r4, #12]
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	4298      	cmp	r0, r3
 8008ab6:	bfb8      	it	lt
 8008ab8:	4618      	movlt	r0, r3
 8008aba:	e7a6      	b.n	8008a0a <_printf_i+0x166>
 8008abc:	2301      	movs	r3, #1
 8008abe:	4632      	mov	r2, r6
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	47d0      	blx	sl
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d09d      	beq.n	8008a06 <_printf_i+0x162>
 8008aca:	3501      	adds	r5, #1
 8008acc:	68e3      	ldr	r3, [r4, #12]
 8008ace:	9903      	ldr	r1, [sp, #12]
 8008ad0:	1a5b      	subs	r3, r3, r1
 8008ad2:	42ab      	cmp	r3, r5
 8008ad4:	dcf2      	bgt.n	8008abc <_printf_i+0x218>
 8008ad6:	e7eb      	b.n	8008ab0 <_printf_i+0x20c>
 8008ad8:	2500      	movs	r5, #0
 8008ada:	f104 0619 	add.w	r6, r4, #25
 8008ade:	e7f5      	b.n	8008acc <_printf_i+0x228>
 8008ae0:	0800988d 	.word	0x0800988d
 8008ae4:	0800989e 	.word	0x0800989e

08008ae8 <__sflush_r>:
 8008ae8:	898a      	ldrh	r2, [r1, #12]
 8008aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aec:	4605      	mov	r5, r0
 8008aee:	0710      	lsls	r0, r2, #28
 8008af0:	460c      	mov	r4, r1
 8008af2:	d457      	bmi.n	8008ba4 <__sflush_r+0xbc>
 8008af4:	684b      	ldr	r3, [r1, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	dc04      	bgt.n	8008b04 <__sflush_r+0x1c>
 8008afa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dc01      	bgt.n	8008b04 <__sflush_r+0x1c>
 8008b00:	2000      	movs	r0, #0
 8008b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	d0fa      	beq.n	8008b00 <__sflush_r+0x18>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b10:	682f      	ldr	r7, [r5, #0]
 8008b12:	6a21      	ldr	r1, [r4, #32]
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	d032      	beq.n	8008b7e <__sflush_r+0x96>
 8008b18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	075a      	lsls	r2, r3, #29
 8008b1e:	d505      	bpl.n	8008b2c <__sflush_r+0x44>
 8008b20:	6863      	ldr	r3, [r4, #4]
 8008b22:	1ac0      	subs	r0, r0, r3
 8008b24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b26:	b10b      	cbz	r3, 8008b2c <__sflush_r+0x44>
 8008b28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b2a:	1ac0      	subs	r0, r0, r3
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4602      	mov	r2, r0
 8008b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b32:	4628      	mov	r0, r5
 8008b34:	6a21      	ldr	r1, [r4, #32]
 8008b36:	47b0      	blx	r6
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	d106      	bne.n	8008b4c <__sflush_r+0x64>
 8008b3e:	6829      	ldr	r1, [r5, #0]
 8008b40:	291d      	cmp	r1, #29
 8008b42:	d82b      	bhi.n	8008b9c <__sflush_r+0xb4>
 8008b44:	4a28      	ldr	r2, [pc, #160]	; (8008be8 <__sflush_r+0x100>)
 8008b46:	410a      	asrs	r2, r1
 8008b48:	07d6      	lsls	r6, r2, #31
 8008b4a:	d427      	bmi.n	8008b9c <__sflush_r+0xb4>
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	6062      	str	r2, [r4, #4]
 8008b50:	6922      	ldr	r2, [r4, #16]
 8008b52:	04d9      	lsls	r1, r3, #19
 8008b54:	6022      	str	r2, [r4, #0]
 8008b56:	d504      	bpl.n	8008b62 <__sflush_r+0x7a>
 8008b58:	1c42      	adds	r2, r0, #1
 8008b5a:	d101      	bne.n	8008b60 <__sflush_r+0x78>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b903      	cbnz	r3, 8008b62 <__sflush_r+0x7a>
 8008b60:	6560      	str	r0, [r4, #84]	; 0x54
 8008b62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b64:	602f      	str	r7, [r5, #0]
 8008b66:	2900      	cmp	r1, #0
 8008b68:	d0ca      	beq.n	8008b00 <__sflush_r+0x18>
 8008b6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	d002      	beq.n	8008b78 <__sflush_r+0x90>
 8008b72:	4628      	mov	r0, r5
 8008b74:	f7fe fbc2 	bl	80072fc <_free_r>
 8008b78:	2000      	movs	r0, #0
 8008b7a:	6360      	str	r0, [r4, #52]	; 0x34
 8008b7c:	e7c1      	b.n	8008b02 <__sflush_r+0x1a>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b0      	blx	r6
 8008b84:	1c41      	adds	r1, r0, #1
 8008b86:	d1c8      	bne.n	8008b1a <__sflush_r+0x32>
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0c5      	beq.n	8008b1a <__sflush_r+0x32>
 8008b8e:	2b1d      	cmp	r3, #29
 8008b90:	d001      	beq.n	8008b96 <__sflush_r+0xae>
 8008b92:	2b16      	cmp	r3, #22
 8008b94:	d101      	bne.n	8008b9a <__sflush_r+0xb2>
 8008b96:	602f      	str	r7, [r5, #0]
 8008b98:	e7b2      	b.n	8008b00 <__sflush_r+0x18>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba0:	81a3      	strh	r3, [r4, #12]
 8008ba2:	e7ae      	b.n	8008b02 <__sflush_r+0x1a>
 8008ba4:	690f      	ldr	r7, [r1, #16]
 8008ba6:	2f00      	cmp	r7, #0
 8008ba8:	d0aa      	beq.n	8008b00 <__sflush_r+0x18>
 8008baa:	0793      	lsls	r3, r2, #30
 8008bac:	bf18      	it	ne
 8008bae:	2300      	movne	r3, #0
 8008bb0:	680e      	ldr	r6, [r1, #0]
 8008bb2:	bf08      	it	eq
 8008bb4:	694b      	ldreq	r3, [r1, #20]
 8008bb6:	1bf6      	subs	r6, r6, r7
 8008bb8:	600f      	str	r7, [r1, #0]
 8008bba:	608b      	str	r3, [r1, #8]
 8008bbc:	2e00      	cmp	r6, #0
 8008bbe:	dd9f      	ble.n	8008b00 <__sflush_r+0x18>
 8008bc0:	4633      	mov	r3, r6
 8008bc2:	463a      	mov	r2, r7
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	6a21      	ldr	r1, [r4, #32]
 8008bc8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008bcc:	47e0      	blx	ip
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	dc06      	bgt.n	8008be0 <__sflush_r+0xf8>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	e790      	b.n	8008b02 <__sflush_r+0x1a>
 8008be0:	4407      	add	r7, r0
 8008be2:	1a36      	subs	r6, r6, r0
 8008be4:	e7ea      	b.n	8008bbc <__sflush_r+0xd4>
 8008be6:	bf00      	nop
 8008be8:	dfbffffe 	.word	0xdfbffffe

08008bec <_fflush_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	690b      	ldr	r3, [r1, #16]
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	b913      	cbnz	r3, 8008bfc <_fflush_r+0x10>
 8008bf6:	2500      	movs	r5, #0
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	b118      	cbz	r0, 8008c06 <_fflush_r+0x1a>
 8008bfe:	6a03      	ldr	r3, [r0, #32]
 8008c00:	b90b      	cbnz	r3, 8008c06 <_fflush_r+0x1a>
 8008c02:	f7fe f9d7 	bl	8006fb4 <__sinit>
 8008c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f3      	beq.n	8008bf6 <_fflush_r+0xa>
 8008c0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c10:	07d0      	lsls	r0, r2, #31
 8008c12:	d404      	bmi.n	8008c1e <_fflush_r+0x32>
 8008c14:	0599      	lsls	r1, r3, #22
 8008c16:	d402      	bmi.n	8008c1e <_fflush_r+0x32>
 8008c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c1a:	f7fe fb4d 	bl	80072b8 <__retarget_lock_acquire_recursive>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	4621      	mov	r1, r4
 8008c22:	f7ff ff61 	bl	8008ae8 <__sflush_r>
 8008c26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c28:	4605      	mov	r5, r0
 8008c2a:	07da      	lsls	r2, r3, #31
 8008c2c:	d4e4      	bmi.n	8008bf8 <_fflush_r+0xc>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	059b      	lsls	r3, r3, #22
 8008c32:	d4e1      	bmi.n	8008bf8 <_fflush_r+0xc>
 8008c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c36:	f7fe fb40 	bl	80072ba <__retarget_lock_release_recursive>
 8008c3a:	e7dd      	b.n	8008bf8 <_fflush_r+0xc>

08008c3c <_sbrk_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4d05      	ldr	r5, [pc, #20]	; (8008c58 <_sbrk_r+0x1c>)
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	602b      	str	r3, [r5, #0]
 8008c48:	f7f8 f9c8 	bl	8000fdc <_sbrk>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	d102      	bne.n	8008c56 <_sbrk_r+0x1a>
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	b103      	cbz	r3, 8008c56 <_sbrk_r+0x1a>
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	20001b78 	.word	0x20001b78

08008c5c <memchr>:
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	b2c9      	uxtb	r1, r1
 8008c62:	4402      	add	r2, r0
 8008c64:	4293      	cmp	r3, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	d101      	bne.n	8008c6e <memchr+0x12>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e003      	b.n	8008c76 <memchr+0x1a>
 8008c6e:	7804      	ldrb	r4, [r0, #0]
 8008c70:	3301      	adds	r3, #1
 8008c72:	428c      	cmp	r4, r1
 8008c74:	d1f6      	bne.n	8008c64 <memchr+0x8>
 8008c76:	bd10      	pop	{r4, pc}

08008c78 <__assert_func>:
 8008c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c7a:	4614      	mov	r4, r2
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <__assert_func+0x2c>)
 8008c80:	4605      	mov	r5, r0
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68d8      	ldr	r0, [r3, #12]
 8008c86:	b14c      	cbz	r4, 8008c9c <__assert_func+0x24>
 8008c88:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <__assert_func+0x30>)
 8008c8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c8e:	9100      	str	r1, [sp, #0]
 8008c90:	462b      	mov	r3, r5
 8008c92:	4906      	ldr	r1, [pc, #24]	; (8008cac <__assert_func+0x34>)
 8008c94:	f000 f85a 	bl	8008d4c <fiprintf>
 8008c98:	f000 f86a 	bl	8008d70 <abort>
 8008c9c:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <__assert_func+0x38>)
 8008c9e:	461c      	mov	r4, r3
 8008ca0:	e7f3      	b.n	8008c8a <__assert_func+0x12>
 8008ca2:	bf00      	nop
 8008ca4:	20000394 	.word	0x20000394
 8008ca8:	080098af 	.word	0x080098af
 8008cac:	080098bc 	.word	0x080098bc
 8008cb0:	0800939c 	.word	0x0800939c

08008cb4 <_calloc_r>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	fba1 5402 	umull	r5, r4, r1, r2
 8008cba:	b934      	cbnz	r4, 8008cca <_calloc_r+0x16>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f7fe fedf 	bl	8007a80 <_malloc_r>
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	b928      	cbnz	r0, 8008cd2 <_calloc_r+0x1e>
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
 8008cca:	220c      	movs	r2, #12
 8008ccc:	2600      	movs	r6, #0
 8008cce:	6002      	str	r2, [r0, #0]
 8008cd0:	e7f9      	b.n	8008cc6 <_calloc_r+0x12>
 8008cd2:	462a      	mov	r2, r5
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f7fe fa39 	bl	800714c <memset>
 8008cda:	e7f4      	b.n	8008cc6 <_calloc_r+0x12>

08008cdc <malloc>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <malloc+0xc>)
 8008cde:	4601      	mov	r1, r0
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	f7fe becd 	b.w	8007a80 <_malloc_r>
 8008ce6:	bf00      	nop
 8008ce8:	20000394 	.word	0x20000394

08008cec <_realloc_r>:
 8008cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	4614      	mov	r4, r2
 8008cf4:	460e      	mov	r6, r1
 8008cf6:	b921      	cbnz	r1, 8008d02 <_realloc_r+0x16>
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfe:	f7fe bebf 	b.w	8007a80 <_malloc_r>
 8008d02:	b92a      	cbnz	r2, 8008d10 <_realloc_r+0x24>
 8008d04:	f7fe fafa 	bl	80072fc <_free_r>
 8008d08:	4625      	mov	r5, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d10:	f000 f835 	bl	8008d7e <_malloc_usable_size_r>
 8008d14:	4284      	cmp	r4, r0
 8008d16:	4607      	mov	r7, r0
 8008d18:	d802      	bhi.n	8008d20 <_realloc_r+0x34>
 8008d1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d1e:	d812      	bhi.n	8008d46 <_realloc_r+0x5a>
 8008d20:	4621      	mov	r1, r4
 8008d22:	4640      	mov	r0, r8
 8008d24:	f7fe feac 	bl	8007a80 <_malloc_r>
 8008d28:	4605      	mov	r5, r0
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d0ed      	beq.n	8008d0a <_realloc_r+0x1e>
 8008d2e:	42bc      	cmp	r4, r7
 8008d30:	4622      	mov	r2, r4
 8008d32:	4631      	mov	r1, r6
 8008d34:	bf28      	it	cs
 8008d36:	463a      	movcs	r2, r7
 8008d38:	f7fe fac8 	bl	80072cc <memcpy>
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4640      	mov	r0, r8
 8008d40:	f7fe fadc 	bl	80072fc <_free_r>
 8008d44:	e7e1      	b.n	8008d0a <_realloc_r+0x1e>
 8008d46:	4635      	mov	r5, r6
 8008d48:	e7df      	b.n	8008d0a <_realloc_r+0x1e>
	...

08008d4c <fiprintf>:
 8008d4c:	b40e      	push	{r1, r2, r3}
 8008d4e:	b503      	push	{r0, r1, lr}
 8008d50:	4601      	mov	r1, r0
 8008d52:	ab03      	add	r3, sp, #12
 8008d54:	4805      	ldr	r0, [pc, #20]	; (8008d6c <fiprintf+0x20>)
 8008d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5a:	6800      	ldr	r0, [r0, #0]
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	f000 f83d 	bl	8008ddc <_vfiprintf_r>
 8008d62:	b002      	add	sp, #8
 8008d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d68:	b003      	add	sp, #12
 8008d6a:	4770      	bx	lr
 8008d6c:	20000394 	.word	0x20000394

08008d70 <abort>:
 8008d70:	2006      	movs	r0, #6
 8008d72:	b508      	push	{r3, lr}
 8008d74:	f000 fa0a 	bl	800918c <raise>
 8008d78:	2001      	movs	r0, #1
 8008d7a:	f7f8 f901 	bl	8000f80 <_exit>

08008d7e <_malloc_usable_size_r>:
 8008d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d82:	1f18      	subs	r0, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfbc      	itt	lt
 8008d88:	580b      	ldrlt	r3, [r1, r0]
 8008d8a:	18c0      	addlt	r0, r0, r3
 8008d8c:	4770      	bx	lr

08008d8e <__sfputc_r>:
 8008d8e:	6893      	ldr	r3, [r2, #8]
 8008d90:	b410      	push	{r4}
 8008d92:	3b01      	subs	r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	6093      	str	r3, [r2, #8]
 8008d98:	da07      	bge.n	8008daa <__sfputc_r+0x1c>
 8008d9a:	6994      	ldr	r4, [r2, #24]
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	db01      	blt.n	8008da4 <__sfputc_r+0x16>
 8008da0:	290a      	cmp	r1, #10
 8008da2:	d102      	bne.n	8008daa <__sfputc_r+0x1c>
 8008da4:	bc10      	pop	{r4}
 8008da6:	f000 b933 	b.w	8009010 <__swbuf_r>
 8008daa:	6813      	ldr	r3, [r2, #0]
 8008dac:	1c58      	adds	r0, r3, #1
 8008dae:	6010      	str	r0, [r2, #0]
 8008db0:	7019      	strb	r1, [r3, #0]
 8008db2:	4608      	mov	r0, r1
 8008db4:	bc10      	pop	{r4}
 8008db6:	4770      	bx	lr

08008db8 <__sfputs_r>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	4606      	mov	r6, r0
 8008dbc:	460f      	mov	r7, r1
 8008dbe:	4614      	mov	r4, r2
 8008dc0:	18d5      	adds	r5, r2, r3
 8008dc2:	42ac      	cmp	r4, r5
 8008dc4:	d101      	bne.n	8008dca <__sfputs_r+0x12>
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e007      	b.n	8008dda <__sfputs_r+0x22>
 8008dca:	463a      	mov	r2, r7
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd2:	f7ff ffdc 	bl	8008d8e <__sfputc_r>
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	d1f3      	bne.n	8008dc2 <__sfputs_r+0xa>
 8008dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ddc <_vfiprintf_r>:
 8008ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	460d      	mov	r5, r1
 8008de2:	4614      	mov	r4, r2
 8008de4:	4698      	mov	r8, r3
 8008de6:	4606      	mov	r6, r0
 8008de8:	b09d      	sub	sp, #116	; 0x74
 8008dea:	b118      	cbz	r0, 8008df4 <_vfiprintf_r+0x18>
 8008dec:	6a03      	ldr	r3, [r0, #32]
 8008dee:	b90b      	cbnz	r3, 8008df4 <_vfiprintf_r+0x18>
 8008df0:	f7fe f8e0 	bl	8006fb4 <__sinit>
 8008df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008df6:	07d9      	lsls	r1, r3, #31
 8008df8:	d405      	bmi.n	8008e06 <_vfiprintf_r+0x2a>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	059a      	lsls	r2, r3, #22
 8008dfe:	d402      	bmi.n	8008e06 <_vfiprintf_r+0x2a>
 8008e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e02:	f7fe fa59 	bl	80072b8 <__retarget_lock_acquire_recursive>
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	071b      	lsls	r3, r3, #28
 8008e0a:	d501      	bpl.n	8008e10 <_vfiprintf_r+0x34>
 8008e0c:	692b      	ldr	r3, [r5, #16]
 8008e0e:	b99b      	cbnz	r3, 8008e38 <_vfiprintf_r+0x5c>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 f93a 	bl	800908c <__swsetup_r>
 8008e18:	b170      	cbz	r0, 8008e38 <_vfiprintf_r+0x5c>
 8008e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e1c:	07dc      	lsls	r4, r3, #31
 8008e1e:	d504      	bpl.n	8008e2a <_vfiprintf_r+0x4e>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	b01d      	add	sp, #116	; 0x74
 8008e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	0598      	lsls	r0, r3, #22
 8008e2e:	d4f7      	bmi.n	8008e20 <_vfiprintf_r+0x44>
 8008e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e32:	f7fe fa42 	bl	80072ba <__retarget_lock_release_recursive>
 8008e36:	e7f3      	b.n	8008e20 <_vfiprintf_r+0x44>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e42:	2330      	movs	r3, #48	; 0x30
 8008e44:	f04f 0901 	mov.w	r9, #1
 8008e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008ffc <_vfiprintf_r+0x220>
 8008e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e54:	4623      	mov	r3, r4
 8008e56:	469a      	mov	sl, r3
 8008e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e5c:	b10a      	cbz	r2, 8008e62 <_vfiprintf_r+0x86>
 8008e5e:	2a25      	cmp	r2, #37	; 0x25
 8008e60:	d1f9      	bne.n	8008e56 <_vfiprintf_r+0x7a>
 8008e62:	ebba 0b04 	subs.w	fp, sl, r4
 8008e66:	d00b      	beq.n	8008e80 <_vfiprintf_r+0xa4>
 8008e68:	465b      	mov	r3, fp
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f7ff ffa2 	bl	8008db8 <__sfputs_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	f000 80a9 	beq.w	8008fcc <_vfiprintf_r+0x1f0>
 8008e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e7c:	445a      	add	r2, fp
 8008e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8008e80:	f89a 3000 	ldrb.w	r3, [sl]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 80a1 	beq.w	8008fcc <_vfiprintf_r+0x1f0>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e94:	f10a 0a01 	add.w	sl, sl, #1
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	9307      	str	r3, [sp, #28]
 8008e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ea2:	4654      	mov	r4, sl
 8008ea4:	2205      	movs	r2, #5
 8008ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eaa:	4854      	ldr	r0, [pc, #336]	; (8008ffc <_vfiprintf_r+0x220>)
 8008eac:	f7ff fed6 	bl	8008c5c <memchr>
 8008eb0:	9a04      	ldr	r2, [sp, #16]
 8008eb2:	b9d8      	cbnz	r0, 8008eec <_vfiprintf_r+0x110>
 8008eb4:	06d1      	lsls	r1, r2, #27
 8008eb6:	bf44      	itt	mi
 8008eb8:	2320      	movmi	r3, #32
 8008eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ebe:	0713      	lsls	r3, r2, #28
 8008ec0:	bf44      	itt	mi
 8008ec2:	232b      	movmi	r3, #43	; 0x2b
 8008ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ece:	d015      	beq.n	8008efc <_vfiprintf_r+0x120>
 8008ed0:	4654      	mov	r4, sl
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	f04f 0c0a 	mov.w	ip, #10
 8008ed8:	9a07      	ldr	r2, [sp, #28]
 8008eda:	4621      	mov	r1, r4
 8008edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee0:	3b30      	subs	r3, #48	; 0x30
 8008ee2:	2b09      	cmp	r3, #9
 8008ee4:	d94d      	bls.n	8008f82 <_vfiprintf_r+0x1a6>
 8008ee6:	b1b0      	cbz	r0, 8008f16 <_vfiprintf_r+0x13a>
 8008ee8:	9207      	str	r2, [sp, #28]
 8008eea:	e014      	b.n	8008f16 <_vfiprintf_r+0x13a>
 8008eec:	eba0 0308 	sub.w	r3, r0, r8
 8008ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	46a2      	mov	sl, r4
 8008ef8:	9304      	str	r3, [sp, #16]
 8008efa:	e7d2      	b.n	8008ea2 <_vfiprintf_r+0xc6>
 8008efc:	9b03      	ldr	r3, [sp, #12]
 8008efe:	1d19      	adds	r1, r3, #4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	9103      	str	r1, [sp, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bfbb      	ittet	lt
 8008f08:	425b      	neglt	r3, r3
 8008f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f0e:	9307      	strge	r3, [sp, #28]
 8008f10:	9307      	strlt	r3, [sp, #28]
 8008f12:	bfb8      	it	lt
 8008f14:	9204      	strlt	r2, [sp, #16]
 8008f16:	7823      	ldrb	r3, [r4, #0]
 8008f18:	2b2e      	cmp	r3, #46	; 0x2e
 8008f1a:	d10c      	bne.n	8008f36 <_vfiprintf_r+0x15a>
 8008f1c:	7863      	ldrb	r3, [r4, #1]
 8008f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f20:	d134      	bne.n	8008f8c <_vfiprintf_r+0x1b0>
 8008f22:	9b03      	ldr	r3, [sp, #12]
 8008f24:	3402      	adds	r4, #2
 8008f26:	1d1a      	adds	r2, r3, #4
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	9203      	str	r2, [sp, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfb8      	it	lt
 8008f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f34:	9305      	str	r3, [sp, #20]
 8008f36:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009000 <_vfiprintf_r+0x224>
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	7821      	ldrb	r1, [r4, #0]
 8008f40:	f7ff fe8c 	bl	8008c5c <memchr>
 8008f44:	b138      	cbz	r0, 8008f56 <_vfiprintf_r+0x17a>
 8008f46:	2240      	movs	r2, #64	; 0x40
 8008f48:	9b04      	ldr	r3, [sp, #16]
 8008f4a:	eba0 000a 	sub.w	r0, r0, sl
 8008f4e:	4082      	lsls	r2, r0
 8008f50:	4313      	orrs	r3, r2
 8008f52:	3401      	adds	r4, #1
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5a:	2206      	movs	r2, #6
 8008f5c:	4829      	ldr	r0, [pc, #164]	; (8009004 <_vfiprintf_r+0x228>)
 8008f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f62:	f7ff fe7b 	bl	8008c5c <memchr>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d03f      	beq.n	8008fea <_vfiprintf_r+0x20e>
 8008f6a:	4b27      	ldr	r3, [pc, #156]	; (8009008 <_vfiprintf_r+0x22c>)
 8008f6c:	bb1b      	cbnz	r3, 8008fb6 <_vfiprintf_r+0x1da>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	3307      	adds	r3, #7
 8008f72:	f023 0307 	bic.w	r3, r3, #7
 8008f76:	3308      	adds	r3, #8
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7c:	443b      	add	r3, r7
 8008f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f80:	e768      	b.n	8008e54 <_vfiprintf_r+0x78>
 8008f82:	460c      	mov	r4, r1
 8008f84:	2001      	movs	r0, #1
 8008f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f8a:	e7a6      	b.n	8008eda <_vfiprintf_r+0xfe>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f04f 0c0a 	mov.w	ip, #10
 8008f92:	4619      	mov	r1, r3
 8008f94:	3401      	adds	r4, #1
 8008f96:	9305      	str	r3, [sp, #20]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f9e:	3a30      	subs	r2, #48	; 0x30
 8008fa0:	2a09      	cmp	r2, #9
 8008fa2:	d903      	bls.n	8008fac <_vfiprintf_r+0x1d0>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0c6      	beq.n	8008f36 <_vfiprintf_r+0x15a>
 8008fa8:	9105      	str	r1, [sp, #20]
 8008faa:	e7c4      	b.n	8008f36 <_vfiprintf_r+0x15a>
 8008fac:	4604      	mov	r4, r0
 8008fae:	2301      	movs	r3, #1
 8008fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fb4:	e7f0      	b.n	8008f98 <_vfiprintf_r+0x1bc>
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <_vfiprintf_r+0x230>)
 8008fc0:	a904      	add	r1, sp, #16
 8008fc2:	f3af 8000 	nop.w
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	1c78      	adds	r0, r7, #1
 8008fca:	d1d6      	bne.n	8008f7a <_vfiprintf_r+0x19e>
 8008fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d405      	bmi.n	8008fde <_vfiprintf_r+0x202>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	059a      	lsls	r2, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_vfiprintf_r+0x202>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fda:	f7fe f96e 	bl	80072ba <__retarget_lock_release_recursive>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	065b      	lsls	r3, r3, #25
 8008fe2:	f53f af1d 	bmi.w	8008e20 <_vfiprintf_r+0x44>
 8008fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe8:	e71c      	b.n	8008e24 <_vfiprintf_r+0x48>
 8008fea:	ab03      	add	r3, sp, #12
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	4b06      	ldr	r3, [pc, #24]	; (800900c <_vfiprintf_r+0x230>)
 8008ff4:	a904      	add	r1, sp, #16
 8008ff6:	f7ff fc55 	bl	80088a4 <_printf_i>
 8008ffa:	e7e4      	b.n	8008fc6 <_vfiprintf_r+0x1ea>
 8008ffc:	0800987c 	.word	0x0800987c
 8009000:	08009882 	.word	0x08009882
 8009004:	08009886 	.word	0x08009886
 8009008:	00000000 	.word	0x00000000
 800900c:	08008db9 	.word	0x08008db9

08009010 <__swbuf_r>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	460e      	mov	r6, r1
 8009014:	4614      	mov	r4, r2
 8009016:	4605      	mov	r5, r0
 8009018:	b118      	cbz	r0, 8009022 <__swbuf_r+0x12>
 800901a:	6a03      	ldr	r3, [r0, #32]
 800901c:	b90b      	cbnz	r3, 8009022 <__swbuf_r+0x12>
 800901e:	f7fd ffc9 	bl	8006fb4 <__sinit>
 8009022:	69a3      	ldr	r3, [r4, #24]
 8009024:	60a3      	str	r3, [r4, #8]
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	071a      	lsls	r2, r3, #28
 800902a:	d525      	bpl.n	8009078 <__swbuf_r+0x68>
 800902c:	6923      	ldr	r3, [r4, #16]
 800902e:	b31b      	cbz	r3, 8009078 <__swbuf_r+0x68>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	6922      	ldr	r2, [r4, #16]
 8009034:	b2f6      	uxtb	r6, r6
 8009036:	1a98      	subs	r0, r3, r2
 8009038:	6963      	ldr	r3, [r4, #20]
 800903a:	4637      	mov	r7, r6
 800903c:	4283      	cmp	r3, r0
 800903e:	dc04      	bgt.n	800904a <__swbuf_r+0x3a>
 8009040:	4621      	mov	r1, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f7ff fdd2 	bl	8008bec <_fflush_r>
 8009048:	b9e0      	cbnz	r0, 8009084 <__swbuf_r+0x74>
 800904a:	68a3      	ldr	r3, [r4, #8]
 800904c:	3b01      	subs	r3, #1
 800904e:	60a3      	str	r3, [r4, #8]
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	6022      	str	r2, [r4, #0]
 8009056:	701e      	strb	r6, [r3, #0]
 8009058:	6962      	ldr	r2, [r4, #20]
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	429a      	cmp	r2, r3
 800905e:	d004      	beq.n	800906a <__swbuf_r+0x5a>
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	07db      	lsls	r3, r3, #31
 8009064:	d506      	bpl.n	8009074 <__swbuf_r+0x64>
 8009066:	2e0a      	cmp	r6, #10
 8009068:	d104      	bne.n	8009074 <__swbuf_r+0x64>
 800906a:	4621      	mov	r1, r4
 800906c:	4628      	mov	r0, r5
 800906e:	f7ff fdbd 	bl	8008bec <_fflush_r>
 8009072:	b938      	cbnz	r0, 8009084 <__swbuf_r+0x74>
 8009074:	4638      	mov	r0, r7
 8009076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009078:	4621      	mov	r1, r4
 800907a:	4628      	mov	r0, r5
 800907c:	f000 f806 	bl	800908c <__swsetup_r>
 8009080:	2800      	cmp	r0, #0
 8009082:	d0d5      	beq.n	8009030 <__swbuf_r+0x20>
 8009084:	f04f 37ff 	mov.w	r7, #4294967295
 8009088:	e7f4      	b.n	8009074 <__swbuf_r+0x64>
	...

0800908c <__swsetup_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4b2a      	ldr	r3, [pc, #168]	; (8009138 <__swsetup_r+0xac>)
 8009090:	4605      	mov	r5, r0
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	460c      	mov	r4, r1
 8009096:	b118      	cbz	r0, 80090a0 <__swsetup_r+0x14>
 8009098:	6a03      	ldr	r3, [r0, #32]
 800909a:	b90b      	cbnz	r3, 80090a0 <__swsetup_r+0x14>
 800909c:	f7fd ff8a 	bl	8006fb4 <__sinit>
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090a6:	0718      	lsls	r0, r3, #28
 80090a8:	d422      	bmi.n	80090f0 <__swsetup_r+0x64>
 80090aa:	06d9      	lsls	r1, r3, #27
 80090ac:	d407      	bmi.n	80090be <__swsetup_r+0x32>
 80090ae:	2309      	movs	r3, #9
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	e034      	b.n	8009128 <__swsetup_r+0x9c>
 80090be:	0758      	lsls	r0, r3, #29
 80090c0:	d512      	bpl.n	80090e8 <__swsetup_r+0x5c>
 80090c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090c4:	b141      	cbz	r1, 80090d8 <__swsetup_r+0x4c>
 80090c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090ca:	4299      	cmp	r1, r3
 80090cc:	d002      	beq.n	80090d4 <__swsetup_r+0x48>
 80090ce:	4628      	mov	r0, r5
 80090d0:	f7fe f914 	bl	80072fc <_free_r>
 80090d4:	2300      	movs	r3, #0
 80090d6:	6363      	str	r3, [r4, #52]	; 0x34
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090de:	81a3      	strh	r3, [r4, #12]
 80090e0:	2300      	movs	r3, #0
 80090e2:	6063      	str	r3, [r4, #4]
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f043 0308 	orr.w	r3, r3, #8
 80090ee:	81a3      	strh	r3, [r4, #12]
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	b94b      	cbnz	r3, 8009108 <__swsetup_r+0x7c>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090fe:	d003      	beq.n	8009108 <__swsetup_r+0x7c>
 8009100:	4621      	mov	r1, r4
 8009102:	4628      	mov	r0, r5
 8009104:	f000 f883 	bl	800920e <__smakebuf_r>
 8009108:	89a0      	ldrh	r0, [r4, #12]
 800910a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800910e:	f010 0301 	ands.w	r3, r0, #1
 8009112:	d00a      	beq.n	800912a <__swsetup_r+0x9e>
 8009114:	2300      	movs	r3, #0
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	6963      	ldr	r3, [r4, #20]
 800911a:	425b      	negs	r3, r3
 800911c:	61a3      	str	r3, [r4, #24]
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	b943      	cbnz	r3, 8009134 <__swsetup_r+0xa8>
 8009122:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009126:	d1c4      	bne.n	80090b2 <__swsetup_r+0x26>
 8009128:	bd38      	pop	{r3, r4, r5, pc}
 800912a:	0781      	lsls	r1, r0, #30
 800912c:	bf58      	it	pl
 800912e:	6963      	ldrpl	r3, [r4, #20]
 8009130:	60a3      	str	r3, [r4, #8]
 8009132:	e7f4      	b.n	800911e <__swsetup_r+0x92>
 8009134:	2000      	movs	r0, #0
 8009136:	e7f7      	b.n	8009128 <__swsetup_r+0x9c>
 8009138:	20000394 	.word	0x20000394

0800913c <_raise_r>:
 800913c:	291f      	cmp	r1, #31
 800913e:	b538      	push	{r3, r4, r5, lr}
 8009140:	4604      	mov	r4, r0
 8009142:	460d      	mov	r5, r1
 8009144:	d904      	bls.n	8009150 <_raise_r+0x14>
 8009146:	2316      	movs	r3, #22
 8009148:	6003      	str	r3, [r0, #0]
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009152:	b112      	cbz	r2, 800915a <_raise_r+0x1e>
 8009154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009158:	b94b      	cbnz	r3, 800916e <_raise_r+0x32>
 800915a:	4620      	mov	r0, r4
 800915c:	f000 f830 	bl	80091c0 <_getpid_r>
 8009160:	462a      	mov	r2, r5
 8009162:	4601      	mov	r1, r0
 8009164:	4620      	mov	r0, r4
 8009166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800916a:	f000 b817 	b.w	800919c <_kill_r>
 800916e:	2b01      	cmp	r3, #1
 8009170:	d00a      	beq.n	8009188 <_raise_r+0x4c>
 8009172:	1c59      	adds	r1, r3, #1
 8009174:	d103      	bne.n	800917e <_raise_r+0x42>
 8009176:	2316      	movs	r3, #22
 8009178:	6003      	str	r3, [r0, #0]
 800917a:	2001      	movs	r0, #1
 800917c:	e7e7      	b.n	800914e <_raise_r+0x12>
 800917e:	2400      	movs	r4, #0
 8009180:	4628      	mov	r0, r5
 8009182:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009186:	4798      	blx	r3
 8009188:	2000      	movs	r0, #0
 800918a:	e7e0      	b.n	800914e <_raise_r+0x12>

0800918c <raise>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <raise+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f7ff bfd3 	b.w	800913c <_raise_r>
 8009196:	bf00      	nop
 8009198:	20000394 	.word	0x20000394

0800919c <_kill_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	2300      	movs	r3, #0
 80091a0:	4d06      	ldr	r5, [pc, #24]	; (80091bc <_kill_r+0x20>)
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	4611      	mov	r1, r2
 80091a8:	602b      	str	r3, [r5, #0]
 80091aa:	f7f7 fee1 	bl	8000f70 <_kill>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d102      	bne.n	80091b8 <_kill_r+0x1c>
 80091b2:	682b      	ldr	r3, [r5, #0]
 80091b4:	b103      	cbz	r3, 80091b8 <_kill_r+0x1c>
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	bd38      	pop	{r3, r4, r5, pc}
 80091ba:	bf00      	nop
 80091bc:	20001b78 	.word	0x20001b78

080091c0 <_getpid_r>:
 80091c0:	f7f7 bed4 	b.w	8000f6c <_getpid>

080091c4 <__swhatbuf_r>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	460c      	mov	r4, r1
 80091c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091cc:	4615      	mov	r5, r2
 80091ce:	2900      	cmp	r1, #0
 80091d0:	461e      	mov	r6, r3
 80091d2:	b096      	sub	sp, #88	; 0x58
 80091d4:	da0c      	bge.n	80091f0 <__swhatbuf_r+0x2c>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	2100      	movs	r1, #0
 80091da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091de:	bf0c      	ite	eq
 80091e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091e4:	2340      	movne	r3, #64	; 0x40
 80091e6:	2000      	movs	r0, #0
 80091e8:	6031      	str	r1, [r6, #0]
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	b016      	add	sp, #88	; 0x58
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	466a      	mov	r2, sp
 80091f2:	f000 f849 	bl	8009288 <_fstat_r>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	dbed      	blt.n	80091d6 <__swhatbuf_r+0x12>
 80091fa:	9901      	ldr	r1, [sp, #4]
 80091fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009200:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009204:	4259      	negs	r1, r3
 8009206:	4159      	adcs	r1, r3
 8009208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800920c:	e7eb      	b.n	80091e6 <__swhatbuf_r+0x22>

0800920e <__smakebuf_r>:
 800920e:	898b      	ldrh	r3, [r1, #12]
 8009210:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009212:	079d      	lsls	r5, r3, #30
 8009214:	4606      	mov	r6, r0
 8009216:	460c      	mov	r4, r1
 8009218:	d507      	bpl.n	800922a <__smakebuf_r+0x1c>
 800921a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	2301      	movs	r3, #1
 8009224:	6163      	str	r3, [r4, #20]
 8009226:	b002      	add	sp, #8
 8009228:	bd70      	pop	{r4, r5, r6, pc}
 800922a:	466a      	mov	r2, sp
 800922c:	ab01      	add	r3, sp, #4
 800922e:	f7ff ffc9 	bl	80091c4 <__swhatbuf_r>
 8009232:	9900      	ldr	r1, [sp, #0]
 8009234:	4605      	mov	r5, r0
 8009236:	4630      	mov	r0, r6
 8009238:	f7fe fc22 	bl	8007a80 <_malloc_r>
 800923c:	b948      	cbnz	r0, 8009252 <__smakebuf_r+0x44>
 800923e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009242:	059a      	lsls	r2, r3, #22
 8009244:	d4ef      	bmi.n	8009226 <__smakebuf_r+0x18>
 8009246:	f023 0303 	bic.w	r3, r3, #3
 800924a:	f043 0302 	orr.w	r3, r3, #2
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	e7e3      	b.n	800921a <__smakebuf_r+0xc>
 8009252:	89a3      	ldrh	r3, [r4, #12]
 8009254:	6020      	str	r0, [r4, #0]
 8009256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925a:	81a3      	strh	r3, [r4, #12]
 800925c:	9b00      	ldr	r3, [sp, #0]
 800925e:	6120      	str	r0, [r4, #16]
 8009260:	6163      	str	r3, [r4, #20]
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	b15b      	cbz	r3, 800927e <__smakebuf_r+0x70>
 8009266:	4630      	mov	r0, r6
 8009268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800926c:	f000 f81e 	bl	80092ac <_isatty_r>
 8009270:	b128      	cbz	r0, 800927e <__smakebuf_r+0x70>
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	f023 0303 	bic.w	r3, r3, #3
 8009278:	f043 0301 	orr.w	r3, r3, #1
 800927c:	81a3      	strh	r3, [r4, #12]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	431d      	orrs	r5, r3
 8009282:	81a5      	strh	r5, [r4, #12]
 8009284:	e7cf      	b.n	8009226 <__smakebuf_r+0x18>
	...

08009288 <_fstat_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	2300      	movs	r3, #0
 800928c:	4d06      	ldr	r5, [pc, #24]	; (80092a8 <_fstat_r+0x20>)
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	4611      	mov	r1, r2
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	f7f7 fe98 	bl	8000fca <_fstat>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	d102      	bne.n	80092a4 <_fstat_r+0x1c>
 800929e:	682b      	ldr	r3, [r5, #0]
 80092a0:	b103      	cbz	r3, 80092a4 <_fstat_r+0x1c>
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	bd38      	pop	{r3, r4, r5, pc}
 80092a6:	bf00      	nop
 80092a8:	20001b78 	.word	0x20001b78

080092ac <_isatty_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	2300      	movs	r3, #0
 80092b0:	4d05      	ldr	r5, [pc, #20]	; (80092c8 <_isatty_r+0x1c>)
 80092b2:	4604      	mov	r4, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	602b      	str	r3, [r5, #0]
 80092b8:	f7f7 fe8c 	bl	8000fd4 <_isatty>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d102      	bne.n	80092c6 <_isatty_r+0x1a>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b103      	cbz	r3, 80092c6 <_isatty_r+0x1a>
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	20001b78 	.word	0x20001b78

080092cc <_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr

080092d8 <_fini>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr
